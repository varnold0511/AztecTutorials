/* eslint-disable jsdoc/require-jsdoc */
import { createConsoleLogger } from '@aztec/foundation/log';
import * as fs from 'fs';
import snakeCase from 'lodash.snakecase';
import * as path from 'path';
import { format } from 'util';
// heavily copying yarn-project/noir-contracts/src/scripts/copy_output.ts
const log = createConsoleLogger('aztec:noir-contracts:source_copy');
const NOIR_SOURCE_COPIES = [
    { name: 'PrivateToken', target: '../boxes/private-token/src/artifacts', exclude: [] },
];
/**
 * Sometimes we want to duplicate the noir source code elsewhere,
 * for example in the boxes we provide as Aztec Quickstarts.
 * @param contractName - UpperCamelCase contract name that we check need copying
 */
function copyNrFilesExceptInterface(contractName) {
    // stored in `noir-contracts` under snake case naming
    const snakeCaseContractName = `${snakeCase(contractName)}_contract`;
    const projectDirPath = `src/contracts/${snakeCaseContractName}`;
    for (const noirCopy of NOIR_SOURCE_COPIES) {
        if (noirCopy.name === contractName) {
            const target = noirCopy.target;
            try {
                // Ensure target directory exists
                if (!fs.existsSync(target)) {
                    throw Error(`target copy path ${target} doesnt exist`);
                }
                // Read the project directory
                const files = fs.readdirSync(projectDirPath);
                // Filter and copy *.nr files except interface.nr
                files
                    .filter(file => file.endsWith('.nr') &&
                    file !== 'interface.nr' &&
                    (!noirCopy.exclude || !noirCopy.exclude.includes(file)))
                    .forEach(file => {
                    const sourcePath = path.join(projectDirPath, file);
                    const targetPath = path.join(target, file);
                    log(`copying ${sourcePath} to ${targetPath}`);
                    fs.copyFileSync(sourcePath, targetPath);
                });
                log(`Copied .nr files from ${contractName} to ${target} successfully!`);
            }
            catch (err) {
                log(format(`Error copying files from ${contractName} to ${target}:`, err));
            }
        }
    }
}
const main = () => {
    const contractName = process.argv[2];
    if (!contractName) {
        throw new Error(`Missing argument contract name`);
    }
    copyNrFilesExceptInterface(contractName);
};
try {
    main();
}
catch (err) {
    log(format(`Error copying build output`, err));
    process.exit(1);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29weV9zb3VyY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9jb3B5X3NvdXJjZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSx3Q0FBd0M7QUFDeEMsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFFNUQsT0FBTyxLQUFLLEVBQUUsTUFBTSxJQUFJLENBQUM7QUFDekIsT0FBTyxTQUFTLE1BQU0sa0JBQWtCLENBQUM7QUFDekMsT0FBTyxLQUFLLElBQUksTUFBTSxNQUFNLENBQUM7QUFDN0IsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUU5Qix5RUFBeUU7QUFDekUsTUFBTSxHQUFHLEdBQUcsbUJBQW1CLENBQUMsa0NBQWtDLENBQUMsQ0FBQztBQVdwRSxNQUFNLGtCQUFrQixHQUFxQjtJQUMzQyxFQUFFLElBQUksRUFBRSxjQUFjLEVBQUUsTUFBTSxFQUFFLHNDQUFzQyxFQUFFLE9BQU8sRUFBRSxFQUFFLEVBQUU7Q0FDdEYsQ0FBQztBQUVGOzs7O0dBSUc7QUFDSCxTQUFTLDBCQUEwQixDQUFDLFlBQW9CO0lBQ3RELHFEQUFxRDtJQUNyRCxNQUFNLHFCQUFxQixHQUFHLEdBQUcsU0FBUyxDQUFDLFlBQVksQ0FBQyxXQUFXLENBQUM7SUFDcEUsTUFBTSxjQUFjLEdBQUcsaUJBQWlCLHFCQUFxQixFQUFFLENBQUM7SUFFaEUsS0FBSyxNQUFNLFFBQVEsSUFBSSxrQkFBa0IsRUFBRTtRQUN6QyxJQUFJLFFBQVEsQ0FBQyxJQUFJLEtBQUssWUFBWSxFQUFFO1lBQ2xDLE1BQU0sTUFBTSxHQUFHLFFBQVEsQ0FBQyxNQUFNLENBQUM7WUFFL0IsSUFBSTtnQkFDRixpQ0FBaUM7Z0JBQ2pDLElBQUksQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxFQUFFO29CQUMxQixNQUFNLEtBQUssQ0FBQyxvQkFBb0IsTUFBTSxlQUFlLENBQUMsQ0FBQztpQkFDeEQ7Z0JBQ0QsNkJBQTZCO2dCQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsV0FBVyxDQUFDLGNBQWMsQ0FBQyxDQUFDO2dCQUU3QyxpREFBaUQ7Z0JBQ2pELEtBQUs7cUJBQ0YsTUFBTSxDQUNMLElBQUksQ0FBQyxFQUFFLENBQ0wsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUM7b0JBQ3BCLElBQUksS0FBSyxjQUFjO29CQUN2QixDQUFDLENBQUMsUUFBUSxDQUFDLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQzFEO3FCQUNBLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRTtvQkFDZCxNQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLGNBQWMsRUFBRSxJQUFJLENBQUMsQ0FBQztvQkFDbkQsTUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUM7b0JBQzNDLEdBQUcsQ0FBQyxXQUFXLFVBQVUsT0FBTyxVQUFVLEVBQUUsQ0FBQyxDQUFDO29CQUM5QyxFQUFFLENBQUMsWUFBWSxDQUFDLFVBQVUsRUFBRSxVQUFVLENBQUMsQ0FBQztnQkFDMUMsQ0FBQyxDQUFDLENBQUM7Z0JBRUwsR0FBRyxDQUFDLHlCQUF5QixZQUFZLE9BQU8sTUFBTSxnQkFBZ0IsQ0FBQyxDQUFDO2FBQ3pFO1lBQUMsT0FBTyxHQUFHLEVBQUU7Z0JBQ1osR0FBRyxDQUFDLE1BQU0sQ0FBQyw0QkFBNEIsWUFBWSxPQUFPLE1BQU0sR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUM7YUFDNUU7U0FDRjtLQUNGO0FBQ0gsQ0FBQztBQUVELE1BQU0sSUFBSSxHQUFHLEdBQUcsRUFBRTtJQUNoQixNQUFNLFlBQVksR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3JDLElBQUksQ0FBQyxZQUFZLEVBQUU7UUFDakIsTUFBTSxJQUFJLEtBQUssQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDO0tBQ25EO0lBRUQsMEJBQTBCLENBQUMsWUFBWSxDQUFDLENBQUM7QUFDM0MsQ0FBQyxDQUFDO0FBRUYsSUFBSTtJQUNGLElBQUksRUFBRSxDQUFDO0NBQ1I7QUFBQyxPQUFPLEdBQVksRUFBRTtJQUNyQixHQUFHLENBQUMsTUFBTSxDQUFDLDRCQUE0QixFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDL0MsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztDQUNqQiJ9