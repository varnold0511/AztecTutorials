import { createConsoleLogger } from '@aztec/foundation/log';
import { generateNoirContractInterface, generateTypescriptContractInterface } from '@aztec/noir-compiler';
import { readFileSync, writeFileSync } from 'fs';
import camelCase from 'lodash.camelcase';
import omit from 'lodash.omit';
import snakeCase from 'lodash.snakecase';
import upperFirst from 'lodash.upperfirst';
import { join as pathJoin } from 'path';
import { format } from 'util';
// const STATEMENT_TYPES = ['type', 'params', 'return'] as const;
const log = createConsoleLogger('aztec:noir-contracts');
const PROJECT_CONTRACTS = [
    { name: 'SchnorrSingleKeyAccount', target: '../aztec.js/src/artifacts/', exclude: [] },
    { name: 'SchnorrAccount', target: '../aztec.js/src/artifacts/', exclude: [] },
    { name: 'EcdsaAccount', target: '../aztec.js/src/artifacts/', exclude: [] },
];
const INTERFACE_CONTRACTS = ['private_token', 'private_token_airdrop', 'test'];
/**
 * Writes the contract to a specific project folder, if needed.
 * @param artifact - The artifact to write.
 */
function writeToProject(artifact) {
    for (const projectContract of PROJECT_CONTRACTS) {
        if (artifact.name === projectContract.name) {
            const toWrite = {
                ...artifact,
                functions: artifact.functions.map((f) => omit(f, projectContract.exclude)),
                // If we maintain debug symbols they will get committed to git.
                debug: undefined,
            };
            const targetFilename = pathJoin(projectContract.target, `${snakeCase(artifact.name)}_contract.json`);
            writeFileSync(targetFilename, JSON.stringify(toWrite, null, 2) + '\n');
            log(`Written ${targetFilename}`);
        }
    }
}
/**
 * Processes an artifact generated by noir-compiler.
 * Currently unused. This should be used once contracts are compiled with `noir-compiler` instead of Nargo.
 *
 * @param projectName - The name of the project
 * @param contractName - The name of the contract
 */
function processNoirCompilerArtifact(projectName, contractName) {
    const artifactJsonFilePath = `src/contracts/${projectName}/target/${contractName}.json`;
    const artifactJson = JSON.parse(readFileSync(artifactJsonFilePath).toString());
    return artifactJson;
}
const main = () => {
    const name = process.argv[2];
    if (!name) {
        throw new Error(`Missing argument contract name`);
    }
    const projectName = `${snakeCase(name)}_contract`;
    const contractName = upperFirst(camelCase(name));
    const artifactJson = processNoirCompilerArtifact(projectName, contractName);
    // Write the artifact:
    const artifactsDir = 'src/artifacts';
    const artifactFileName = `${snakeCase(name)}_contract.json`;
    writeFileSync(pathJoin(artifactsDir, artifactFileName), JSON.stringify(artifactJson, null, 2) + '\n');
    log(`Written ${pathJoin(artifactsDir, artifactFileName)}`);
    // Write some artifacts to other packages in the monorepo:
    writeToProject(artifactJson);
    // Write a .ts contract interface, for consumption by the typescript code
    const tsInterfaceDestFilePath = `src/types/${name}.ts`;
    const tsAbiImportPath = `../artifacts/${artifactFileName}`;
    writeFileSync(tsInterfaceDestFilePath, generateTypescriptContractInterface(artifactJson, tsAbiImportPath));
    log(`Written ${tsInterfaceDestFilePath}`);
    // Write a .nr contract interface, for consumption by other Aztec.nr contracts
    if (INTERFACE_CONTRACTS.includes(name)) {
        const projectDirPath = `src/contracts/${projectName}`;
        const noirInterfaceDestFilePath = `${projectDirPath}/src/interface.nr`;
        try {
            writeFileSync(noirInterfaceDestFilePath, generateNoirContractInterface(artifactJson));
            log(`Written ${noirInterfaceDestFilePath}`);
        }
        catch (err) {
            log(`Error generating Aztec.nr interface for ${name}: ${err}`);
        }
    }
};
try {
    main();
}
catch (err) {
    log(format(`Error copying build output`, err));
    process.exit(1);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29weV9vdXRwdXQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9jb3B5X291dHB1dC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUM1RCxPQUFPLEVBQUUsNkJBQTZCLEVBQUUsbUNBQW1DLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUUxRyxPQUFPLEVBQUUsWUFBWSxFQUFFLGFBQWEsRUFBRSxNQUFNLElBQUksQ0FBQztBQUNqRCxPQUFPLFNBQVMsTUFBTSxrQkFBa0IsQ0FBQztBQUN6QyxPQUFPLElBQUksTUFBTSxhQUFhLENBQUM7QUFDL0IsT0FBTyxTQUFTLE1BQU0sa0JBQWtCLENBQUM7QUFDekMsT0FBTyxVQUFVLE1BQU0sbUJBQW1CLENBQUM7QUFDM0MsT0FBTyxFQUFFLElBQUksSUFBSSxRQUFRLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDeEMsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUU5QixpRUFBaUU7QUFDakUsTUFBTSxHQUFHLEdBQUcsbUJBQW1CLENBQUMsc0JBQXNCLENBQUMsQ0FBQztBQUV4RCxNQUFNLGlCQUFpQixHQUFHO0lBQ3hCLEVBQUUsSUFBSSxFQUFFLHlCQUF5QixFQUFFLE1BQU0sRUFBRSw0QkFBNEIsRUFBRSxPQUFPLEVBQUUsRUFBRSxFQUFFO0lBQ3RGLEVBQUUsSUFBSSxFQUFFLGdCQUFnQixFQUFFLE1BQU0sRUFBRSw0QkFBNEIsRUFBRSxPQUFPLEVBQUUsRUFBRSxFQUFFO0lBQzdFLEVBQUUsSUFBSSxFQUFFLGNBQWMsRUFBRSxNQUFNLEVBQUUsNEJBQTRCLEVBQUUsT0FBTyxFQUFFLEVBQUUsRUFBRTtDQUM1RSxDQUFDO0FBRUYsTUFBTSxtQkFBbUIsR0FBRyxDQUFDLGVBQWUsRUFBRSx1QkFBdUIsRUFBRSxNQUFNLENBQUMsQ0FBQztBQUUvRTs7O0dBR0c7QUFDSCxTQUFTLGNBQWMsQ0FBQyxRQUFhO0lBQ25DLEtBQUssTUFBTSxlQUFlLElBQUksaUJBQWlCLEVBQUU7UUFDL0MsSUFBSSxRQUFRLENBQUMsSUFBSSxLQUFLLGVBQWUsQ0FBQyxJQUFJLEVBQUU7WUFDMUMsTUFBTSxPQUFPLEdBQUc7Z0JBQ2QsR0FBRyxRQUFRO2dCQUNYLFNBQVMsRUFBRSxRQUFRLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQU0sRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxlQUFlLENBQUMsT0FBTyxDQUFDLENBQUM7Z0JBQy9FLCtEQUErRDtnQkFDL0QsS0FBSyxFQUFFLFNBQVM7YUFDakIsQ0FBQztZQUNGLE1BQU0sY0FBYyxHQUFHLFFBQVEsQ0FBQyxlQUFlLENBQUMsTUFBTSxFQUFFLEdBQUcsU0FBUyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztZQUNyRyxhQUFhLENBQUMsY0FBYyxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQztZQUN2RSxHQUFHLENBQUMsV0FBVyxjQUFjLEVBQUUsQ0FBQyxDQUFDO1NBQ2xDO0tBQ0Y7QUFDSCxDQUFDO0FBRUQ7Ozs7OztHQU1HO0FBQ0gsU0FBUywyQkFBMkIsQ0FBQyxXQUFtQixFQUFFLFlBQW9CO0lBQzVFLE1BQU0sb0JBQW9CLEdBQUcsaUJBQWlCLFdBQVcsV0FBVyxZQUFZLE9BQU8sQ0FBQztJQUN4RixNQUFNLFlBQVksR0FBcUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsb0JBQW9CLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO0lBQ2pHLE9BQU8sWUFBWSxDQUFDO0FBQ3RCLENBQUM7QUFFRCxNQUFNLElBQUksR0FBRyxHQUFHLEVBQUU7SUFDaEIsTUFBTSxJQUFJLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUM3QixJQUFJLENBQUMsSUFBSSxFQUFFO1FBQ1QsTUFBTSxJQUFJLEtBQUssQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDO0tBQ25EO0lBRUQsTUFBTSxXQUFXLEdBQUcsR0FBRyxTQUFTLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQztJQUNsRCxNQUFNLFlBQVksR0FBRyxVQUFVLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7SUFDakQsTUFBTSxZQUFZLEdBQUcsMkJBQTJCLENBQUMsV0FBVyxFQUFFLFlBQVksQ0FBQyxDQUFDO0lBRTVFLHNCQUFzQjtJQUN0QixNQUFNLFlBQVksR0FBRyxlQUFlLENBQUM7SUFDckMsTUFBTSxnQkFBZ0IsR0FBRyxHQUFHLFNBQVMsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUM7SUFDNUQsYUFBYSxDQUFDLFFBQVEsQ0FBQyxZQUFZLEVBQUUsZ0JBQWdCLENBQUMsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLFlBQVksRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUM7SUFDdEcsR0FBRyxDQUFDLFdBQVcsUUFBUSxDQUFDLFlBQVksRUFBRSxnQkFBZ0IsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUUzRCwwREFBMEQ7SUFDMUQsY0FBYyxDQUFDLFlBQVksQ0FBQyxDQUFDO0lBRTdCLHlFQUF5RTtJQUN6RSxNQUFNLHVCQUF1QixHQUFHLGFBQWEsSUFBSSxLQUFLLENBQUM7SUFDdkQsTUFBTSxlQUFlLEdBQUcsZ0JBQWdCLGdCQUFnQixFQUFFLENBQUM7SUFDM0QsYUFBYSxDQUFDLHVCQUF1QixFQUFFLG1DQUFtQyxDQUFDLFlBQVksRUFBRSxlQUFlLENBQUMsQ0FBQyxDQUFDO0lBQzNHLEdBQUcsQ0FBQyxXQUFXLHVCQUF1QixFQUFFLENBQUMsQ0FBQztJQUUxQyw4RUFBOEU7SUFDOUUsSUFBSSxtQkFBbUIsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEVBQUU7UUFDdEMsTUFBTSxjQUFjLEdBQUcsaUJBQWlCLFdBQVcsRUFBRSxDQUFDO1FBQ3RELE1BQU0seUJBQXlCLEdBQUcsR0FBRyxjQUFjLG1CQUFtQixDQUFDO1FBQ3ZFLElBQUk7WUFDRixhQUFhLENBQUMseUJBQXlCLEVBQUUsNkJBQTZCLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQztZQUN0RixHQUFHLENBQUMsV0FBVyx5QkFBeUIsRUFBRSxDQUFDLENBQUM7U0FDN0M7UUFBQyxPQUFPLEdBQUcsRUFBRTtZQUNaLEdBQUcsQ0FBQywyQ0FBMkMsSUFBSSxLQUFLLEdBQUcsRUFBRSxDQUFDLENBQUM7U0FDaEU7S0FDRjtBQUNILENBQUMsQ0FBQztBQUVGLElBQUk7SUFDRixJQUFJLEVBQUUsQ0FBQztDQUNSO0FBQUMsT0FBTyxHQUFZLEVBQUU7SUFDckIsR0FBRyxDQUFDLE1BQU0sQ0FBQyw0QkFBNEIsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQy9DLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7Q0FDakIifQ==