/* Autogenerated file, do not edit! */
/* eslint-disable */
import { Contract, ContractBase, DeployMethod, EthAddress, Point, } from '@aztec/aztec.js';
import PendingCommitmentsContractArtifactJson from '../artifacts/pending_commitments_contract.json' assert { type: 'json' };
export const PendingCommitmentsContractArtifact = PendingCommitmentsContractArtifactJson;
/**
 * Type-safe interface for contract PendingCommitments;
 */
export class PendingCommitmentsContract extends ContractBase {
    constructor(completeAddress, wallet, portalContract = EthAddress.ZERO) {
        super(completeAddress, PendingCommitmentsContractArtifact, wallet, portalContract);
    }
    /**
     * Creates a contract instance.
     * @param address - The deployed contract's address.
     * @param wallet - The wallet to use when interacting with the contract.
     * @returns A promise that resolves to a new Contract instance.
     */
    static async at(address, wallet) {
        return Contract.at(address, PendingCommitmentsContract.artifact, wallet);
    }
    /**
     * Creates a tx to deploy a new instance of this contract.
     */
    static deploy(wallet) {
        return new DeployMethod(Point.ZERO, wallet, PendingCommitmentsContractArtifact, Array.from(arguments).slice(1));
    }
    /**
     * Creates a tx to deploy a new instance of this contract using the specified public key to derive the address.
     */
    static deployWithPublicKey(publicKey, wallet) {
        return new DeployMethod(publicKey, wallet, PendingCommitmentsContractArtifact, Array.from(arguments).slice(2));
    }
    /**
     * Returns this contract's artifact.
     */
    static get artifact() {
        return PendingCommitmentsContractArtifact;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGVuZGluZ19jb21taXRtZW50cy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90eXBlcy9wZW5kaW5nX2NvbW1pdG1lbnRzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHNDQUFzQztBQUV0QyxvQkFBb0I7QUFDcEIsT0FBTyxFQUlMLFFBQVEsRUFFUixZQUFZLEVBR1osWUFBWSxFQUNaLFVBQVUsRUFJVixLQUFLLEdBR04sTUFBTSxpQkFBaUIsQ0FBQztBQUV6QixPQUFPLHNDQUFzQyxNQUFNLGdEQUFnRCxDQUFDLFNBQVMsSUFBSSxFQUFFLE1BQU0sRUFBRSxDQUFDO0FBRTVILE1BQU0sQ0FBQyxNQUFNLGtDQUFrQyxHQUFHLHNDQUEwRCxDQUFDO0FBRTdHOztHQUVHO0FBQ0gsTUFBTSxPQUFPLDBCQUEyQixTQUFRLFlBQVk7SUFDMUQsWUFBb0IsZUFBZ0MsRUFBRSxNQUFjLEVBQUUsY0FBYyxHQUFHLFVBQVUsQ0FBQyxJQUFJO1FBQ3BHLEtBQUssQ0FBQyxlQUFlLEVBQUUsa0NBQWtDLEVBQUUsTUFBTSxFQUFFLGNBQWMsQ0FBQyxDQUFDO0lBQ3JGLENBQUM7SUFFRDs7Ozs7T0FLRztJQUNJLE1BQU0sQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLE9BQXFCLEVBQUUsTUFBYztRQUMxRCxPQUFPLFFBQVEsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLDBCQUEwQixDQUFDLFFBQVEsRUFBRSxNQUFNLENBQXdDLENBQUM7SUFDbEgsQ0FBQztJQUVEOztPQUVHO0lBQ0ksTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFjO1FBQ2pDLE9BQU8sSUFBSSxZQUFZLENBQ3JCLEtBQUssQ0FBQyxJQUFJLEVBQ1YsTUFBTSxFQUNOLGtDQUFrQyxFQUNsQyxLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FDL0IsQ0FBQztJQUNKLENBQUM7SUFFRDs7T0FFRztJQUNJLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxTQUFvQixFQUFFLE1BQWM7UUFDcEUsT0FBTyxJQUFJLFlBQVksQ0FDckIsU0FBUyxFQUNULE1BQU0sRUFDTixrQ0FBa0MsRUFDbEMsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQy9CLENBQUM7SUFDSixDQUFDO0lBRUQ7O09BRUc7SUFDSSxNQUFNLEtBQUssUUFBUTtRQUN4QixPQUFPLGtDQUFrQyxDQUFDO0lBQzVDLENBQUM7Q0F5RUYifQ==