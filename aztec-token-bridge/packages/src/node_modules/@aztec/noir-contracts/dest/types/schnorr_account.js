/* Autogenerated file, do not edit! */
/* eslint-disable */
import { Contract, ContractBase, DeployMethod, EthAddress, Point, } from '@aztec/aztec.js';
import SchnorrAccountContractArtifactJson from '../artifacts/schnorr_account_contract.json' assert { type: 'json' };
export const SchnorrAccountContractArtifact = SchnorrAccountContractArtifactJson;
/**
 * Type-safe interface for contract SchnorrAccount;
 */
export class SchnorrAccountContract extends ContractBase {
    constructor(completeAddress, wallet, portalContract = EthAddress.ZERO) {
        super(completeAddress, SchnorrAccountContractArtifact, wallet, portalContract);
    }
    /**
     * Creates a contract instance.
     * @param address - The deployed contract's address.
     * @param wallet - The wallet to use when interacting with the contract.
     * @returns A promise that resolves to a new Contract instance.
     */
    static async at(address, wallet) {
        return Contract.at(address, SchnorrAccountContract.artifact, wallet);
    }
    /**
     * Creates a tx to deploy a new instance of this contract.
     */
    static deploy(wallet, signing_pub_key_x, signing_pub_key_y) {
        return new DeployMethod(Point.ZERO, wallet, SchnorrAccountContractArtifact, Array.from(arguments).slice(1));
    }
    /**
     * Creates a tx to deploy a new instance of this contract using the specified public key to derive the address.
     */
    static deployWithPublicKey(publicKey, wallet, signing_pub_key_x, signing_pub_key_y) {
        return new DeployMethod(publicKey, wallet, SchnorrAccountContractArtifact, Array.from(arguments).slice(2));
    }
    /**
     * Returns this contract's artifact.
     */
    static get artifact() {
        return SchnorrAccountContractArtifact;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2Nobm9ycl9hY2NvdW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3R5cGVzL3NjaG5vcnJfYWNjb3VudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxzQ0FBc0M7QUFFdEMsb0JBQW9CO0FBQ3BCLE9BQU8sRUFJTCxRQUFRLEVBRVIsWUFBWSxFQUdaLFlBQVksRUFDWixVQUFVLEVBSVYsS0FBSyxHQUdOLE1BQU0saUJBQWlCLENBQUM7QUFFekIsT0FBTyxrQ0FBa0MsTUFBTSw0Q0FBNEMsQ0FBQyxTQUFTLElBQUksRUFBRSxNQUFNLEVBQUUsQ0FBQztBQUVwSCxNQUFNLENBQUMsTUFBTSw4QkFBOEIsR0FBRyxrQ0FBc0QsQ0FBQztBQUVyRzs7R0FFRztBQUNILE1BQU0sT0FBTyxzQkFBdUIsU0FBUSxZQUFZO0lBQ3RELFlBQW9CLGVBQWdDLEVBQUUsTUFBYyxFQUFFLGNBQWMsR0FBRyxVQUFVLENBQUMsSUFBSTtRQUNwRyxLQUFLLENBQUMsZUFBZSxFQUFFLDhCQUE4QixFQUFFLE1BQU0sRUFBRSxjQUFjLENBQUMsQ0FBQztJQUNqRixDQUFDO0lBRUQ7Ozs7O09BS0c7SUFDSSxNQUFNLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxPQUFxQixFQUFFLE1BQWM7UUFDMUQsT0FBTyxRQUFRLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxzQkFBc0IsQ0FBQyxRQUFRLEVBQUUsTUFBTSxDQUFvQyxDQUFDO0lBQzFHLENBQUM7SUFFRDs7T0FFRztJQUNJLE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBYyxFQUFFLGlCQUE0QixFQUFFLGlCQUE0QjtRQUM3RixPQUFPLElBQUksWUFBWSxDQUNyQixLQUFLLENBQUMsSUFBSSxFQUNWLE1BQU0sRUFDTiw4QkFBOEIsRUFDOUIsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQy9CLENBQUM7SUFDSixDQUFDO0lBRUQ7O09BRUc7SUFDSSxNQUFNLENBQUMsbUJBQW1CLENBQy9CLFNBQW9CLEVBQ3BCLE1BQWMsRUFDZCxpQkFBNEIsRUFDNUIsaUJBQTRCO1FBRTVCLE9BQU8sSUFBSSxZQUFZLENBQ3JCLFNBQVMsRUFDVCxNQUFNLEVBQ04sOEJBQThCLEVBQzlCLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUMvQixDQUFDO0lBQ0osQ0FBQztJQUVEOztPQUVHO0lBQ0ksTUFBTSxLQUFLLFFBQVE7UUFDeEIsT0FBTyw4QkFBOEIsQ0FBQztJQUN4QyxDQUFDO0NBbUNGIn0=