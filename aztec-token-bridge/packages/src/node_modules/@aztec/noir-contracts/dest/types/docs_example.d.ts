import { AztecAddress, ContractArtifact, ContractBase, ContractFunctionInteraction, ContractMethod, DeployMethod, FieldLike, PublicKey, Wallet } from '@aztec/aztec.js';
export declare const DocsExampleContractArtifact: ContractArtifact;
/**
 * Type-safe interface for contract DocsExample;
 */
export declare class DocsExampleContract extends ContractBase {
    private constructor();
    /**
     * Creates a contract instance.
     * @param address - The deployed contract's address.
     * @param wallet - The wallet to use when interacting with the contract.
     * @returns A promise that resolves to a new Contract instance.
     */
    static at(address: AztecAddress, wallet: Wallet): Promise<DocsExampleContract>;
    /**
     * Creates a tx to deploy a new instance of this contract.
     */
    static deploy(wallet: Wallet, min_points: bigint | number, max_points: bigint | number, legendary_card_secret: FieldLike): DeployMethod<DocsExampleContract>;
    /**
     * Creates a tx to deploy a new instance of this contract using the specified public key to derive the address.
     */
    static deployWithPublicKey(publicKey: PublicKey, wallet: Wallet, min_points: bigint | number, max_points: bigint | number, legendary_card_secret: FieldLike): DeployMethod<DocsExampleContract>;
    /**
     * Returns this contract's artifact.
     */
    static get artifact(): ContractArtifact;
    /** Type-safe wrappers for the public methods exposed by the contract. */
    methods: {
        /** add_common_cards(secrets: array) */
        add_common_cards: ((secrets: FieldLike[]) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;
        /** become_queen() */
        become_queen: (() => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;
        /** compute_note_hash_and_nullifier(contract_address: field, nonce: field, storage_slot: field, serialized_note: array) */
        compute_note_hash_and_nullifier: ((contract_address: FieldLike, nonce: FieldLike, storage_slot: FieldLike, serialized_note: FieldLike[]) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;
        /** get_points_of_common_cards(account: field, offset: integer) */
        get_points_of_common_cards: ((account: FieldLike, offset: bigint | number) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;
        /** get_total_points(account: field) */
        get_total_points: ((account: FieldLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;
        /** lock() */
        lock: (() => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;
        /** replace_queen(account: field, points: integer) */
        replace_queen: ((account: FieldLike, points: bigint | number) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;
        /** replace_queen_unsafe() */
        replace_queen_unsafe: (() => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;
        /** send_to_l1() */
        send_to_l1: (() => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;
        /** simple_macro_example(a: field, b: field) */
        simple_macro_example: ((a: FieldLike, b: FieldLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;
        /** simple_macro_example_expanded(a: field, b: field) */
        simple_macro_example_expanded: ((a: FieldLike, b: FieldLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;
        /** unlock() */
        unlock: (() => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;
        /** update_legendary_card(new_points: integer, new_secret: field) */
        update_legendary_card: ((new_points: bigint | number, new_secret: FieldLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;
    };
}
//# sourceMappingURL=docs_example.d.ts.map