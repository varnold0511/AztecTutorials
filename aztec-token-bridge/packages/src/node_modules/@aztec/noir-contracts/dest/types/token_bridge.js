/* Autogenerated file, do not edit! */
/* eslint-disable */
import { Contract, ContractBase, DeployMethod, EthAddress, Point, } from '@aztec/aztec.js';
import TokenBridgeContractArtifactJson from '../artifacts/token_bridge_contract.json' assert { type: 'json' };
export const TokenBridgeContractArtifact = TokenBridgeContractArtifactJson;
/**
 * Type-safe interface for contract TokenBridge;
 */
export class TokenBridgeContract extends ContractBase {
    constructor(completeAddress, wallet, portalContract = EthAddress.ZERO) {
        super(completeAddress, TokenBridgeContractArtifact, wallet, portalContract);
    }
    /**
     * Creates a contract instance.
     * @param address - The deployed contract's address.
     * @param wallet - The wallet to use when interacting with the contract.
     * @returns A promise that resolves to a new Contract instance.
     */
    static async at(address, wallet) {
        return Contract.at(address, TokenBridgeContract.artifact, wallet);
    }
    /**
     * Creates a tx to deploy a new instance of this contract.
     */
    static deploy(wallet, token) {
        return new DeployMethod(Point.ZERO, wallet, TokenBridgeContractArtifact, Array.from(arguments).slice(1));
    }
    /**
     * Creates a tx to deploy a new instance of this contract using the specified public key to derive the address.
     */
    static deployWithPublicKey(publicKey, wallet, token) {
        return new DeployMethod(publicKey, wallet, TokenBridgeContractArtifact, Array.from(arguments).slice(2));
    }
    /**
     * Returns this contract's artifact.
     */
    static get artifact() {
        return TokenBridgeContractArtifact;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9rZW5fYnJpZGdlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3R5cGVzL3Rva2VuX2JyaWRnZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxzQ0FBc0M7QUFFdEMsb0JBQW9CO0FBQ3BCLE9BQU8sRUFJTCxRQUFRLEVBRVIsWUFBWSxFQUdaLFlBQVksRUFDWixVQUFVLEVBSVYsS0FBSyxHQUdOLE1BQU0saUJBQWlCLENBQUM7QUFFekIsT0FBTywrQkFBK0IsTUFBTSx5Q0FBeUMsQ0FBQyxTQUFTLElBQUksRUFBRSxNQUFNLEVBQUUsQ0FBQztBQUU5RyxNQUFNLENBQUMsTUFBTSwyQkFBMkIsR0FBRywrQkFBbUQsQ0FBQztBQUUvRjs7R0FFRztBQUNILE1BQU0sT0FBTyxtQkFBb0IsU0FBUSxZQUFZO0lBQ25ELFlBQW9CLGVBQWdDLEVBQUUsTUFBYyxFQUFFLGNBQWMsR0FBRyxVQUFVLENBQUMsSUFBSTtRQUNwRyxLQUFLLENBQUMsZUFBZSxFQUFFLDJCQUEyQixFQUFFLE1BQU0sRUFBRSxjQUFjLENBQUMsQ0FBQztJQUM5RSxDQUFDO0lBRUQ7Ozs7O09BS0c7SUFDSSxNQUFNLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxPQUFxQixFQUFFLE1BQWM7UUFDMUQsT0FBTyxRQUFRLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxtQkFBbUIsQ0FBQyxRQUFRLEVBQUUsTUFBTSxDQUFpQyxDQUFDO0lBQ3BHLENBQUM7SUFFRDs7T0FFRztJQUNJLE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBYyxFQUFFLEtBQXVCO1FBQzFELE9BQU8sSUFBSSxZQUFZLENBQ3JCLEtBQUssQ0FBQyxJQUFJLEVBQ1YsTUFBTSxFQUNOLDJCQUEyQixFQUMzQixLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FDL0IsQ0FBQztJQUNKLENBQUM7SUFFRDs7T0FFRztJQUNJLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxTQUFvQixFQUFFLE1BQWMsRUFBRSxLQUF1QjtRQUM3RixPQUFPLElBQUksWUFBWSxDQUNyQixTQUFTLEVBQ1QsTUFBTSxFQUNOLDJCQUEyQixFQUMzQixLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FDL0IsQ0FBQztJQUNKLENBQUM7SUFFRDs7T0FFRztJQUNJLE1BQU0sS0FBSyxRQUFRO1FBQ3hCLE9BQU8sMkJBQTJCLENBQUM7SUFDckMsQ0FBQztDQW9FRiJ9