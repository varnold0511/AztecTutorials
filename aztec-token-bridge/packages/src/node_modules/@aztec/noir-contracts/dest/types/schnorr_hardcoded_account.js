/* Autogenerated file, do not edit! */
/* eslint-disable */
import { Contract, ContractBase, DeployMethod, EthAddress, Point, } from '@aztec/aztec.js';
import SchnorrHardcodedAccountContractArtifactJson from '../artifacts/schnorr_hardcoded_account_contract.json' assert { type: 'json' };
export const SchnorrHardcodedAccountContractArtifact = SchnorrHardcodedAccountContractArtifactJson;
/**
 * Type-safe interface for contract SchnorrHardcodedAccount;
 */
export class SchnorrHardcodedAccountContract extends ContractBase {
    constructor(completeAddress, wallet, portalContract = EthAddress.ZERO) {
        super(completeAddress, SchnorrHardcodedAccountContractArtifact, wallet, portalContract);
    }
    /**
     * Creates a contract instance.
     * @param address - The deployed contract's address.
     * @param wallet - The wallet to use when interacting with the contract.
     * @returns A promise that resolves to a new Contract instance.
     */
    static async at(address, wallet) {
        return Contract.at(address, SchnorrHardcodedAccountContract.artifact, wallet);
    }
    /**
     * Creates a tx to deploy a new instance of this contract.
     */
    static deploy(wallet) {
        return new DeployMethod(Point.ZERO, wallet, SchnorrHardcodedAccountContractArtifact, Array.from(arguments).slice(1));
    }
    /**
     * Creates a tx to deploy a new instance of this contract using the specified public key to derive the address.
     */
    static deployWithPublicKey(publicKey, wallet) {
        return new DeployMethod(publicKey, wallet, SchnorrHardcodedAccountContractArtifact, Array.from(arguments).slice(2));
    }
    /**
     * Returns this contract's artifact.
     */
    static get artifact() {
        return SchnorrHardcodedAccountContractArtifact;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2Nobm9ycl9oYXJkY29kZWRfYWNjb3VudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90eXBlcy9zY2hub3JyX2hhcmRjb2RlZF9hY2NvdW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHNDQUFzQztBQUV0QyxvQkFBb0I7QUFDcEIsT0FBTyxFQUlMLFFBQVEsRUFFUixZQUFZLEVBR1osWUFBWSxFQUNaLFVBQVUsRUFJVixLQUFLLEdBR04sTUFBTSxpQkFBaUIsQ0FBQztBQUV6QixPQUFPLDJDQUEyQyxNQUFNLHNEQUFzRCxDQUFDLFNBQVMsSUFBSSxFQUFFLE1BQU0sRUFBRSxDQUFDO0FBRXZJLE1BQU0sQ0FBQyxNQUFNLHVDQUF1QyxHQUFHLDJDQUErRCxDQUFDO0FBRXZIOztHQUVHO0FBQ0gsTUFBTSxPQUFPLCtCQUFnQyxTQUFRLFlBQVk7SUFDL0QsWUFBb0IsZUFBZ0MsRUFBRSxNQUFjLEVBQUUsY0FBYyxHQUFHLFVBQVUsQ0FBQyxJQUFJO1FBQ3BHLEtBQUssQ0FBQyxlQUFlLEVBQUUsdUNBQXVDLEVBQUUsTUFBTSxFQUFFLGNBQWMsQ0FBQyxDQUFDO0lBQzFGLENBQUM7SUFFRDs7Ozs7T0FLRztJQUNJLE1BQU0sQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLE9BQXFCLEVBQUUsTUFBYztRQUMxRCxPQUFPLFFBQVEsQ0FBQyxFQUFFLENBQ2hCLE9BQU8sRUFDUCwrQkFBK0IsQ0FBQyxRQUFRLEVBQ3hDLE1BQU0sQ0FDcUMsQ0FBQztJQUNoRCxDQUFDO0lBRUQ7O09BRUc7SUFDSSxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQWM7UUFDakMsT0FBTyxJQUFJLFlBQVksQ0FDckIsS0FBSyxDQUFDLElBQUksRUFDVixNQUFNLEVBQ04sdUNBQXVDLEVBQ3ZDLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUMvQixDQUFDO0lBQ0osQ0FBQztJQUVEOztPQUVHO0lBQ0ksTUFBTSxDQUFDLG1CQUFtQixDQUFDLFNBQW9CLEVBQUUsTUFBYztRQUNwRSxPQUFPLElBQUksWUFBWSxDQUNyQixTQUFTLEVBQ1QsTUFBTSxFQUNOLHVDQUF1QyxFQUN2QyxLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FDL0IsQ0FBQztJQUNKLENBQUM7SUFFRDs7T0FFRztJQUNJLE1BQU0sS0FBSyxRQUFRO1FBQ3hCLE9BQU8sdUNBQXVDLENBQUM7SUFDakQsQ0FBQztDQTBCRiJ9