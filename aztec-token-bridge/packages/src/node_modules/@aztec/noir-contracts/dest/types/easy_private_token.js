/* Autogenerated file, do not edit! */
/* eslint-disable */
import { Contract, ContractBase, DeployMethod, EthAddress, Point, } from '@aztec/aztec.js';
import EasyPrivateTokenContractArtifactJson from '../artifacts/easy_private_token_contract.json' assert { type: 'json' };
export const EasyPrivateTokenContractArtifact = EasyPrivateTokenContractArtifactJson;
/**
 * Type-safe interface for contract EasyPrivateToken;
 */
export class EasyPrivateTokenContract extends ContractBase {
    constructor(completeAddress, wallet, portalContract = EthAddress.ZERO) {
        super(completeAddress, EasyPrivateTokenContractArtifact, wallet, portalContract);
    }
    /**
     * Creates a contract instance.
     * @param address - The deployed contract's address.
     * @param wallet - The wallet to use when interacting with the contract.
     * @returns A promise that resolves to a new Contract instance.
     */
    static async at(address, wallet) {
        return Contract.at(address, EasyPrivateTokenContract.artifact, wallet);
    }
    /**
     * Creates a tx to deploy a new instance of this contract.
     */
    static deploy(wallet, initial_supply, owner) {
        return new DeployMethod(Point.ZERO, wallet, EasyPrivateTokenContractArtifact, Array.from(arguments).slice(1));
    }
    /**
     * Creates a tx to deploy a new instance of this contract using the specified public key to derive the address.
     */
    static deployWithPublicKey(publicKey, wallet, initial_supply, owner) {
        return new DeployMethod(publicKey, wallet, EasyPrivateTokenContractArtifact, Array.from(arguments).slice(2));
    }
    /**
     * Returns this contract's artifact.
     */
    static get artifact() {
        return EasyPrivateTokenContractArtifact;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWFzeV9wcml2YXRlX3Rva2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3R5cGVzL2Vhc3lfcHJpdmF0ZV90b2tlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxzQ0FBc0M7QUFFdEMsb0JBQW9CO0FBQ3BCLE9BQU8sRUFJTCxRQUFRLEVBRVIsWUFBWSxFQUdaLFlBQVksRUFDWixVQUFVLEVBSVYsS0FBSyxHQUdOLE1BQU0saUJBQWlCLENBQUM7QUFFekIsT0FBTyxvQ0FBb0MsTUFBTSwrQ0FBK0MsQ0FBQyxTQUFTLElBQUksRUFBRSxNQUFNLEVBQUUsQ0FBQztBQUV6SCxNQUFNLENBQUMsTUFBTSxnQ0FBZ0MsR0FBRyxvQ0FBd0QsQ0FBQztBQUV6Rzs7R0FFRztBQUNILE1BQU0sT0FBTyx3QkFBeUIsU0FBUSxZQUFZO0lBQ3hELFlBQW9CLGVBQWdDLEVBQUUsTUFBYyxFQUFFLGNBQWMsR0FBRyxVQUFVLENBQUMsSUFBSTtRQUNwRyxLQUFLLENBQUMsZUFBZSxFQUFFLGdDQUFnQyxFQUFFLE1BQU0sRUFBRSxjQUFjLENBQUMsQ0FBQztJQUNuRixDQUFDO0lBRUQ7Ozs7O09BS0c7SUFDSSxNQUFNLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxPQUFxQixFQUFFLE1BQWM7UUFDMUQsT0FBTyxRQUFRLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSx3QkFBd0IsQ0FBQyxRQUFRLEVBQUUsTUFBTSxDQUFzQyxDQUFDO0lBQzlHLENBQUM7SUFFRDs7T0FFRztJQUNJLE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBYyxFQUFFLGNBQStCLEVBQUUsS0FBZ0I7UUFDcEYsT0FBTyxJQUFJLFlBQVksQ0FDckIsS0FBSyxDQUFDLElBQUksRUFDVixNQUFNLEVBQ04sZ0NBQWdDLEVBQ2hDLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUMvQixDQUFDO0lBQ0osQ0FBQztJQUVEOztPQUVHO0lBQ0ksTUFBTSxDQUFDLG1CQUFtQixDQUMvQixTQUFvQixFQUNwQixNQUFjLEVBQ2QsY0FBK0IsRUFDL0IsS0FBZ0I7UUFFaEIsT0FBTyxJQUFJLFlBQVksQ0FDckIsU0FBUyxFQUNULE1BQU0sRUFDTixnQ0FBZ0MsRUFDaEMsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQy9CLENBQUM7SUFDSixDQUFDO0lBRUQ7O09BRUc7SUFDSSxNQUFNLEtBQUssUUFBUTtRQUN4QixPQUFPLGdDQUFnQyxDQUFDO0lBQzFDLENBQUM7Q0F3QkYifQ==