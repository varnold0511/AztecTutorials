/* Autogenerated file, do not edit! */
/* eslint-disable */
import { Contract, ContractBase, DeployMethod, EthAddress, Point, } from '@aztec/aztec.js';
import SchnorrSingleKeyAccountContractArtifactJson from '../artifacts/schnorr_single_key_account_contract.json' assert { type: 'json' };
export const SchnorrSingleKeyAccountContractArtifact = SchnorrSingleKeyAccountContractArtifactJson;
/**
 * Type-safe interface for contract SchnorrSingleKeyAccount;
 */
export class SchnorrSingleKeyAccountContract extends ContractBase {
    constructor(completeAddress, wallet, portalContract = EthAddress.ZERO) {
        super(completeAddress, SchnorrSingleKeyAccountContractArtifact, wallet, portalContract);
    }
    /**
     * Creates a contract instance.
     * @param address - The deployed contract's address.
     * @param wallet - The wallet to use when interacting with the contract.
     * @returns A promise that resolves to a new Contract instance.
     */
    static async at(address, wallet) {
        return Contract.at(address, SchnorrSingleKeyAccountContract.artifact, wallet);
    }
    /**
     * Creates a tx to deploy a new instance of this contract.
     */
    static deploy(wallet) {
        return new DeployMethod(Point.ZERO, wallet, SchnorrSingleKeyAccountContractArtifact, Array.from(arguments).slice(1));
    }
    /**
     * Creates a tx to deploy a new instance of this contract using the specified public key to derive the address.
     */
    static deployWithPublicKey(publicKey, wallet) {
        return new DeployMethod(publicKey, wallet, SchnorrSingleKeyAccountContractArtifact, Array.from(arguments).slice(2));
    }
    /**
     * Returns this contract's artifact.
     */
    static get artifact() {
        return SchnorrSingleKeyAccountContractArtifact;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2Nobm9ycl9zaW5nbGVfa2V5X2FjY291bnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdHlwZXMvc2Nobm9ycl9zaW5nbGVfa2V5X2FjY291bnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsc0NBQXNDO0FBRXRDLG9CQUFvQjtBQUNwQixPQUFPLEVBSUwsUUFBUSxFQUVSLFlBQVksRUFHWixZQUFZLEVBQ1osVUFBVSxFQUlWLEtBQUssR0FHTixNQUFNLGlCQUFpQixDQUFDO0FBRXpCLE9BQU8sMkNBQTJDLE1BQU0sdURBQXVELENBQUMsU0FBUyxJQUFJLEVBQUUsTUFBTSxFQUFFLENBQUM7QUFFeEksTUFBTSxDQUFDLE1BQU0sdUNBQXVDLEdBQUcsMkNBQStELENBQUM7QUFFdkg7O0dBRUc7QUFDSCxNQUFNLE9BQU8sK0JBQWdDLFNBQVEsWUFBWTtJQUMvRCxZQUFvQixlQUFnQyxFQUFFLE1BQWMsRUFBRSxjQUFjLEdBQUcsVUFBVSxDQUFDLElBQUk7UUFDcEcsS0FBSyxDQUFDLGVBQWUsRUFBRSx1Q0FBdUMsRUFBRSxNQUFNLEVBQUUsY0FBYyxDQUFDLENBQUM7SUFDMUYsQ0FBQztJQUVEOzs7OztPQUtHO0lBQ0ksTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsT0FBcUIsRUFBRSxNQUFjO1FBQzFELE9BQU8sUUFBUSxDQUFDLEVBQUUsQ0FDaEIsT0FBTyxFQUNQLCtCQUErQixDQUFDLFFBQVEsRUFDeEMsTUFBTSxDQUNxQyxDQUFDO0lBQ2hELENBQUM7SUFFRDs7T0FFRztJQUNJLE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBYztRQUNqQyxPQUFPLElBQUksWUFBWSxDQUNyQixLQUFLLENBQUMsSUFBSSxFQUNWLE1BQU0sRUFDTix1Q0FBdUMsRUFDdkMsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQy9CLENBQUM7SUFDSixDQUFDO0lBRUQ7O09BRUc7SUFDSSxNQUFNLENBQUMsbUJBQW1CLENBQUMsU0FBb0IsRUFBRSxNQUFjO1FBQ3BFLE9BQU8sSUFBSSxZQUFZLENBQ3JCLFNBQVMsRUFDVCxNQUFNLEVBQ04sdUNBQXVDLEVBQ3ZDLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUMvQixDQUFDO0lBQ0osQ0FBQztJQUVEOztPQUVHO0lBQ0ksTUFBTSxLQUFLLFFBQVE7UUFDeEIsT0FBTyx1Q0FBdUMsQ0FBQztJQUNqRCxDQUFDO0NBMEJGIn0=