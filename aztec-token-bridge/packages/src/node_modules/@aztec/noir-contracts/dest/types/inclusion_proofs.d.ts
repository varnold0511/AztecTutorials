import { AztecAddress, AztecAddressLike, ContractArtifact, ContractBase, ContractFunctionInteraction, ContractMethod, DeployMethod, FieldLike, PublicKey, Wallet } from '@aztec/aztec.js';
export declare const InclusionProofsContractArtifact: ContractArtifact;
/**
 * Type-safe interface for contract InclusionProofs;
 */
export declare class InclusionProofsContract extends ContractBase {
    private constructor();
    /**
     * Creates a contract instance.
     * @param address - The deployed contract's address.
     * @param wallet - The wallet to use when interacting with the contract.
     * @returns A promise that resolves to a new Contract instance.
     */
    static at(address: AztecAddress, wallet: Wallet): Promise<InclusionProofsContract>;
    /**
     * Creates a tx to deploy a new instance of this contract.
     */
    static deploy(wallet: Wallet, public_value: FieldLike): DeployMethod<InclusionProofsContract>;
    /**
     * Creates a tx to deploy a new instance of this contract using the specified public key to derive the address.
     */
    static deployWithPublicKey(publicKey: PublicKey, wallet: Wallet, public_value: FieldLike): DeployMethod<InclusionProofsContract>;
    /**
     * Returns this contract's artifact.
     */
    static get artifact(): ContractArtifact;
    /** Type-safe wrappers for the public methods exposed by the contract. */
    methods: {
        /** _initialize(value: field) */
        _initialize: ((value: FieldLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;
        /** compute_note_hash_and_nullifier(contract_address: field, nonce: field, storage_slot: field, serialized_note: array) */
        compute_note_hash_and_nullifier: ((contract_address: FieldLike, nonce: FieldLike, storage_slot: FieldLike, serialized_note: FieldLike[]) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;
        /** create_note(owner: struct, value: field) */
        create_note: ((owner: AztecAddressLike, value: FieldLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;
        /** nullify_note(owner: struct) */
        nullify_note: ((owner: AztecAddressLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;
        /** test_note_inclusion_proof(owner: struct, block_number: integer, spare_commitment: field) */
        test_note_inclusion_proof: ((owner: AztecAddressLike, block_number: bigint | number, spare_commitment: FieldLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;
        /** test_note_validity_proof(owner: struct, block_number: integer) */
        test_note_validity_proof: ((owner: AztecAddressLike, block_number: bigint | number) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;
        /** test_nullifier_inclusion_proof(nullifier: field, block_number: integer) */
        test_nullifier_inclusion_proof: ((nullifier: FieldLike, block_number: bigint | number) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;
        /** test_nullifier_non_inclusion_proof(owner: struct, block_number: integer, spare_nullifier: field) */
        test_nullifier_non_inclusion_proof: ((owner: AztecAddressLike, block_number: bigint | number, spare_nullifier: FieldLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;
        /** test_public_value_inclusion_proof(public_value: field, block_number: integer) */
        test_public_value_inclusion_proof: ((public_value: FieldLike, block_number: bigint | number) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;
    };
}
//# sourceMappingURL=inclusion_proofs.d.ts.map