import { AztecAddress, ContractArtifact, ContractBase, ContractFunctionInteraction, ContractMethod, DeployMethod, FieldLike, PublicKey, Wallet } from '@aztec/aztec.js';
export declare const LendingContractArtifact: ContractArtifact;
/**
 * Type-safe interface for contract Lending;
 */
export declare class LendingContract extends ContractBase {
    private constructor();
    /**
     * Creates a contract instance.
     * @param address - The deployed contract's address.
     * @param wallet - The wallet to use when interacting with the contract.
     * @returns A promise that resolves to a new Contract instance.
     */
    static at(address: AztecAddress, wallet: Wallet): Promise<LendingContract>;
    /**
     * Creates a tx to deploy a new instance of this contract.
     */
    static deploy(wallet: Wallet): DeployMethod<LendingContract>;
    /**
     * Creates a tx to deploy a new instance of this contract using the specified public key to derive the address.
     */
    static deployWithPublicKey(publicKey: PublicKey, wallet: Wallet): DeployMethod<LendingContract>;
    /**
     * Returns this contract's artifact.
     */
    static get artifact(): ContractArtifact;
    /** Type-safe wrappers for the public methods exposed by the contract. */
    methods: {
        /** _borrow(owner: field, to: field, amount: field) */
        _borrow: ((owner: FieldLike, to: FieldLike, amount: FieldLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;
        /** _deposit(owner: field, amount: field, collateral_asset: field) */
        _deposit: ((owner: FieldLike, amount: FieldLike, collateral_asset: FieldLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;
        /** _repay(owner: field, amount: field, stable_coin: field) */
        _repay: ((owner: FieldLike, amount: FieldLike, stable_coin: FieldLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;
        /** _withdraw(owner: field, recipient: field, amount: field) */
        _withdraw: ((owner: FieldLike, recipient: FieldLike, amount: FieldLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;
        /** borrow_private(secret: field, to: field, amount: field) */
        borrow_private: ((secret: FieldLike, to: FieldLike, amount: FieldLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;
        /** borrow_public(to: field, amount: field) */
        borrow_public: ((to: FieldLike, amount: FieldLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;
        /** compute_note_hash_and_nullifier(contract_address: field, nonce: field, storage_slot: field, serialized_note: array) */
        compute_note_hash_and_nullifier: ((contract_address: FieldLike, nonce: FieldLike, storage_slot: FieldLike, serialized_note: FieldLike[]) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;
        /** deposit_private(from: field, amount: field, nonce: field, secret: field, on_behalf_of: field, collateral_asset: field) */
        deposit_private: ((from: FieldLike, amount: FieldLike, nonce: FieldLike, secret: FieldLike, on_behalf_of: FieldLike, collateral_asset: FieldLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;
        /** deposit_public(amount: field, nonce: field, on_behalf_of: field, collateral_asset: field) */
        deposit_public: ((amount: FieldLike, nonce: FieldLike, on_behalf_of: FieldLike, collateral_asset: FieldLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;
        /** get_asset(assetId: field) */
        get_asset: ((assetId: FieldLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;
        /** get_assets() */
        get_assets: (() => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;
        /** get_position(owner: field) */
        get_position: ((owner: FieldLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;
        /** init(oracle_address: field, loan_to_value: field, collateral_asset: field, stable_coin: field) */
        init: ((oracle_address: FieldLike, loan_to_value: FieldLike, collateral_asset: FieldLike, stable_coin: FieldLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;
        /** repay_private(from: field, amount: field, nonce: field, secret: field, on_behalf_of: field, stable_coin: field) */
        repay_private: ((from: FieldLike, amount: FieldLike, nonce: FieldLike, secret: FieldLike, on_behalf_of: FieldLike, stable_coin: FieldLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;
        /** repay_public(amount: field, nonce: field, owner: field, stable_coin: field) */
        repay_public: ((amount: FieldLike, nonce: FieldLike, owner: FieldLike, stable_coin: FieldLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;
        /** update_accumulator() */
        update_accumulator: (() => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;
        /** withdraw_private(secret: field, to: field, amount: field) */
        withdraw_private: ((secret: FieldLike, to: FieldLike, amount: FieldLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;
        /** withdraw_public(to: field, amount: field) */
        withdraw_public: ((to: FieldLike, amount: FieldLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;
    };
}
//# sourceMappingURL=lending.d.ts.map