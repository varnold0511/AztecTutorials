{
    "name": "SchnorrSingleKeyAccount",
    "functions": [
        {
            "name": "constructor",
            "functionType": "secret",
            "isInternal": false,
            "parameters": [],
            "returnTypes": [],
            "bytecode": "H4sIAAAAAAAA/+XdZZOTZxSH8V0gSd27uLu1ySbZJFVK3alSL6Rk6y1V6qXU3XB390/IuWbCwAt4xb0z3HNl5j9590x+m+yj5z7nZE9Pz7aeM6/e7vuC7nv5wl6VQmyjcI7tVssDtVqn0d+pVCtLy/2tdrNertXbA81Ks1Jv1pf1N6vVTrPWbLTarUa5ValVO5XBeqs62N1wId1nLA+FuxjbKA6Bu3iRu0uxjdIQuEuJ3ef7vV/o5xw5RJ9zWOLvqTeheVQm5mEJzaMzMQ9PaB6TiXlEQvPYTMyFhOZxmZiLCc3jMzGXEponZGIemdA8UWieJDRPFpqnCM1TheZpQvN0oXmG0DxTaJ4lNM8WmucIzXOF5nlC83yh+Sah+WahuSw0V4TmfqG5KjTXhOa60DwgNDeE5qbQ3BKabxGabxWabxOabxea7xCa7xSaFwjNdwnNC4Xmu4Xme4Tme4Xm+4Tm+4XmB4TmB4Xmh4Tmh4XmR4TmR4Xmx4Tmx4XmRULzE0Lzk0LzU0Lz00LzM0Lzs0LzYqH5OaH5eaH5BaH5RaH5JaH5ZaH5FaH5VaF5idC8VGhuC82vCc3LhOaO0DwoNL8uNL8hNL8pNL8lNL8tNL8jNL8rNL8nNL8vNC8Xmj8Qmj8Umj8Smj8Wmj8Rmj8VmlcIzZ8JzZ8LzV8IzV8KzV8JzV8Lzd8Izd8KzSuF5u+E5lVC8/dC8w9C849C809C889C8y9C869C829C8+9C8x9C859C819C899C8z9C879C839C8/9C82qheY3QvFZoXic0rxeaNwjNG4XmTULzZqF5i9C8VWjeJjRvF5p3CM07heZdmZgvSWjenYn50oTmPZmYL0to3puJ+fKE5n2ZmK9IaN6fifnKhOYDmZivSmg+mIn56oTmQ5mYr0loPpyJ+dqE5iOZmK9LaD6aifn6hOZjmZhvSGg+non5xoTmE5mY+xKaTyY093W309s1D4+MiBQixUgpwjUh10hcM3AOzTkl51icc3AM5pjEPpp9Fv/D/Kb5jvvO+ntu6r6PioyOjImMjYyLjI9MiEyMTIpMjkyJTI1Mi0yPzIjMjMyKzI7MicyNzIvMjzDjnpnvfInMBGdGNjOjmaHMTGFm7DYizGBlJikzOplZyQxHZhoy4+/0zDtmoi2MMDOLGVLMVGLGEDN3mEHDTBZmlDCzgxkWzHRgxgE9/xdF6AlPj3R6htNDm57S9FheHKEHLz1p6dFKz1J6eNLTkh6P9DxcEqEnXjtCzzR6iNFTix5T9FyiBxE9eehRQ88WepjQ04MeF/R8WB6hJwBr5Fkzzhpq1hSzxnZFhDWYrElkjR5r1ljDxZom1viw5mVlhDURqyLUzFNDTk01NcbU3FKDSk0mNYrU7FHDRk0XNU7U/FADQ00INRLUDPAMnWfKPGPlmSPP4HgmxTMafhPcw+eeNvd4uee5PcI9Me4Rcc+EewhcU3ONyTUX1yCck3OOyjkb5zAc0znGsc9nH8g+gf+R069TXMw0LzyaAAA=",
            "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
        },
        {
            "name": "entrypoint",
            "functionType": "secret",
            "isInternal": false,
            "parameters": [
                {
                    "name": "payload",
                    "type": {
                        "kind": "struct",
                        "path": "authwit::entrypoint::EntrypointPayload",
                        "fields": [
                            {
                                "name": "function_calls",
                                "type": {
                                    "kind": "array",
                                    "length": 4,
                                    "type": {
                                        "kind": "struct",
                                        "path": "authwit::entrypoint::FunctionCall",
                                        "fields": [
                                            {
                                                "name": "args_hash",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "function_selector",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "target_address",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "is_public",
                                                "type": {
                                                    "kind": "boolean"
                                                }
                                            }
                                        ]
                                    }
                                }
                            },
                            {
                                "name": "nonce",
                                "type": {
                                    "kind": "field"
                                }
                            }
                        ]
                    },
                    "visibility": "public"
                }
            ],
            "returnTypes": [],
            "bytecode": "",
            "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
        },
        {
            "name": "is_valid",
            "functionType": "secret",
            "isInternal": false,
            "parameters": [
                {
                    "name": "message_hash",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                }
            ],
            "returnTypes": [],
            "bytecode": "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",
            "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
        },
        {
            "name": "is_valid_public",
            "functionType": "open",
            "isInternal": false,
            "parameters": [
                {
                    "name": "message_hash",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                }
            ],
            "returnTypes": [
                {
                    "kind": "struct",
                    "path": "aztec::abi::PublicCircuitPublicInputs",
                    "fields": [
                        {
                            "name": "call_context",
                            "type": {
                                "kind": "struct",
                                "path": "aztec::abi::CallContext",
                                "fields": [
                                    {
                                        "name": "msg_sender",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "storage_contract_address",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "portal_contract_address",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "function_selector",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "is_delegate_call",
                                        "type": {
                                            "kind": "boolean"
                                        }
                                    },
                                    {
                                        "name": "is_static_call",
                                        "type": {
                                            "kind": "boolean"
                                        }
                                    },
                                    {
                                        "name": "is_contract_deployment",
                                        "type": {
                                            "kind": "boolean"
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "name": "args_hash",
                            "type": {
                                "kind": "field"
                            }
                        },
                        {
                            "name": "return_values",
                            "type": {
                                "kind": "array",
                                "length": 4,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "contract_storage_update_requests",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "struct",
                                    "path": "aztec::abi::ContractStorageUpdateRequest",
                                    "fields": [
                                        {
                                            "name": "storage_slot",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "old_value",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "new_value",
                                            "type": {
                                                "kind": "field"
                                            }
                                        }
                                    ]
                                }
                            }
                        },
                        {
                            "name": "contract_storage_read",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "struct",
                                    "path": "aztec::abi::ContractStorageRead",
                                    "fields": [
                                        {
                                            "name": "storage_slot",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "value",
                                            "type": {
                                                "kind": "field"
                                            }
                                        }
                                    ]
                                }
                            }
                        },
                        {
                            "name": "public_call_stack",
                            "type": {
                                "kind": "array",
                                "length": 4,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "new_commitments",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "new_nullifiers",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "new_l2_to_l1_msgs",
                            "type": {
                                "kind": "array",
                                "length": 2,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "unencrypted_logs_hash",
                            "type": {
                                "kind": "array",
                                "length": 2,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "unencrypted_log_preimages_length",
                            "type": {
                                "kind": "field"
                            }
                        },
                        {
                            "name": "block_header",
                            "type": {
                                "kind": "struct",
                                "path": "aztec::abi::BlockHeader",
                                "fields": [
                                    {
                                        "name": "note_hash_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "nullifier_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "contract_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "l1_to_l2_messages_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "archive_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "public_data_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "global_variables_hash",
                                        "type": {
                                            "kind": "field"
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "name": "prover_address",
                            "type": {
                                "kind": "field"
                            }
                        }
                    ]
                }
            ],
            "bytecode": "",
            "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
        },
        {
            "name": "set_is_valid_storage",
            "functionType": "open",
            "isInternal": true,
            "parameters": [
                {
                    "name": "message_hash",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                },
                {
                    "name": "value",
                    "type": {
                        "kind": "boolean"
                    },
                    "visibility": "private"
                }
            ],
            "returnTypes": [
                {
                    "kind": "struct",
                    "path": "aztec::abi::PublicCircuitPublicInputs",
                    "fields": [
                        {
                            "name": "call_context",
                            "type": {
                                "kind": "struct",
                                "path": "aztec::abi::CallContext",
                                "fields": [
                                    {
                                        "name": "msg_sender",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "storage_contract_address",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "portal_contract_address",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "function_selector",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "is_delegate_call",
                                        "type": {
                                            "kind": "boolean"
                                        }
                                    },
                                    {
                                        "name": "is_static_call",
                                        "type": {
                                            "kind": "boolean"
                                        }
                                    },
                                    {
                                        "name": "is_contract_deployment",
                                        "type": {
                                            "kind": "boolean"
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "name": "args_hash",
                            "type": {
                                "kind": "field"
                            }
                        },
                        {
                            "name": "return_values",
                            "type": {
                                "kind": "array",
                                "length": 4,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "contract_storage_update_requests",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "struct",
                                    "path": "aztec::abi::ContractStorageUpdateRequest",
                                    "fields": [
                                        {
                                            "name": "storage_slot",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "old_value",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "new_value",
                                            "type": {
                                                "kind": "field"
                                            }
                                        }
                                    ]
                                }
                            }
                        },
                        {
                            "name": "contract_storage_read",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "struct",
                                    "path": "aztec::abi::ContractStorageRead",
                                    "fields": [
                                        {
                                            "name": "storage_slot",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "value",
                                            "type": {
                                                "kind": "field"
                                            }
                                        }
                                    ]
                                }
                            }
                        },
                        {
                            "name": "public_call_stack",
                            "type": {
                                "kind": "array",
                                "length": 4,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "new_commitments",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "new_nullifiers",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "new_l2_to_l1_msgs",
                            "type": {
                                "kind": "array",
                                "length": 2,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "unencrypted_logs_hash",
                            "type": {
                                "kind": "array",
                                "length": 2,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "unencrypted_log_preimages_length",
                            "type": {
                                "kind": "field"
                            }
                        },
                        {
                            "name": "block_header",
                            "type": {
                                "kind": "struct",
                                "path": "aztec::abi::BlockHeader",
                                "fields": [
                                    {
                                        "name": "note_hash_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "nullifier_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "contract_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "l1_to_l2_messages_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "archive_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "public_data_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "global_variables_hash",
                                        "type": {
                                            "kind": "field"
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "name": "prover_address",
                            "type": {
                                "kind": "field"
                            }
                        }
                    ]
                }
            ],
            "bytecode": "",
            "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
        }
    ],
    "events": [],
    "debug": {
        "debugSymbols": [
            "eJyrVsrJT04syczPK1ayqq6tBQAz9wY7",
            "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",
            "",
            ""
        ],
        "fileMap": {
            "1": {
                "source": "mod util;\nmod auth_oracle;\n\ncontract SchnorrSingleKeyAccount {\n    use dep::std::{\n        option::Option,\n    };\n    use dep::aztec::context::{ PrivateContext, PublicContext, Context };\n\n    use dep::authwit::{\n        entrypoint::EntrypointPayload,\n        account::AccountActions,\n    };\n\n    use crate::{ util::recover_address, auth_oracle::get_auth_witness };\n\n    global ACCOUNT_ACTIONS_STORAGE_SLOT = 1;\n\n    #[aztec(private)]\n    fn constructor() {}\n\n    #[aztec(private)]\n    fn entrypoint(payload: pub EntrypointPayload) {\n        let actions = AccountActions::private(&mut context, ACCOUNT_ACTIONS_STORAGE_SLOT, is_valid_impl);\n        actions.entrypoint(payload);\n    }\n\n    #[aztec(private)]\n    fn is_valid(message_hash: Field) -> Field {\n        let actions = AccountActions::private(&mut context, ACCOUNT_ACTIONS_STORAGE_SLOT, is_valid_impl);\n        actions.is_valid(message_hash)\n    }\n\n    #[aztec(public)]\n    fn is_valid_public(message_hash: Field) -> Field {\n        let actions = AccountActions::public(&mut context, ACCOUNT_ACTIONS_STORAGE_SLOT, is_valid_impl);\n        actions.is_valid_public(message_hash)\n    }\n\n    #[aztec(public)]\n    internal fn set_is_valid_storage(message_hash: Field, value: bool) {\n        let actions = AccountActions::public(&mut context, ACCOUNT_ACTIONS_STORAGE_SLOT, is_valid_impl);\n        actions.internal_set_is_valid_storage(message_hash, value)\n    }\n\n    #[contract_library_method]\n    fn is_valid_impl(context: &mut PrivateContext, message_hash: Field) -> pub bool {\n        let witness = get_auth_witness(message_hash);\n        assert(recover_address(message_hash, witness) == context.this_address());\n        true\n    }\n}\n",
                "path": "/usr/src/yarn-project/noir-contracts/src/contracts/schnorr_single_key_account_contract/src/main.nr"
            },
            "23": {
                "source": "impl Field {\n    pub fn to_le_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_le_bits(bit_size)\n    }\n    \n    pub fn to_be_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_be_bits(bit_size)\n    }\n\n    #[builtin(to_le_bits)]\n    fn __to_le_bits(_self: Self, _bit_size: u32) -> [u1] {}\n    \n    #[builtin(to_be_bits)]\n    fn __to_be_bits(_self: Self, _bit_size: u32) -> [u1] {}\n\n    pub fn to_le_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_le_radix(256, byte_size)\n    }\n\n    pub fn to_be_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_be_radix(256, byte_size)\n    }\n\n\n    pub fn to_le_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_le_radix(radix, result_len)\n    }\n\n    pub fn to_be_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_be_radix(radix, result_len)\n    }\n\n\n\n    // decompose `_self` into a `_result_len` vector over the `_radix` basis\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix(_self: Self, _radix: u32, _result_len: u32) -> [u8] {}\n    \n    #[builtin(to_be_radix)]\n    fn __to_be_radix(_self: Self, _radix: u32, _result_len: u32) -> [u8] {}\n\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b = exponent.to_le_bits(32);\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32-i] as Field) * (r * self) + (1 - b[32-i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x ∈ {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub fn modulus_num_bits() -> Field {}\n\n#[builtin(modulus_be_bits)]\npub fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub fn modulus_le_bytes() -> [u8] {}\n// Convert a 32 byte array to a field element\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n",
                "path": "std/field.nr"
            },
            "34": {
                "source": "struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::unsafe::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default\n        }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            other\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<U, Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            default()\n        }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some {\n                Option::none()\n            } else {\n                self\n            }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n",
                "path": "std/option.nr"
            },
            "76": {
                "source": "global ARGS_LENGTH: Field = 16;\nglobal RETURN_VALUES_LENGTH: Field = 4;\n\n/**\n * Convention for constant array lengths are mainly divided in 2 classes:\n *  - FUNCTION CALL\n *  - TRANSACTION\n *\n * Agreed convention is to use MAX_XXX_PER_CALL resp. MAX_XXX_PER_TX, where XXX denotes a type of element such as\n * commitment, or nullifier, e.g.,:\n *  - MAX_NEW_NULLIFIERS_PER_CALL\n *  - MAX_NEW_COMMITMENTS_PER_TX\n *\n * In the kernel circuits, we accumulate elements such as commitments and the nullifiers from all functions calls in a\n * transaction. Therefore, we always must have:\n * MAX_XXX_PER_TX ≥ MAX_XXX_PER_CALL\n *\n * For instance:\n * MAX_NEW_COMMITMENTS_PER_TX ≥ MAX_NEW_COMMITMENTS_PER_CALL\n * MAX_NEW_NULLIFIERS_PER_TX ≥ MAX_NEW_NULLIFIERS_PER_CALL\n *\n */\n\n// docs:start:constants\n// \"PER CALL\" CONSTANTS\nglobal MAX_NEW_COMMITMENTS_PER_CALL: Field = 16;\nglobal MAX_NEW_NULLIFIERS_PER_CALL: Field = 16;\nglobal MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL: Field = 4;\nglobal MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL: Field = 4;\nglobal MAX_NEW_L2_TO_L1_MSGS_PER_CALL: Field = 2;\nglobal MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL: Field = 16;\nglobal MAX_PUBLIC_DATA_READS_PER_CALL: Field = 16;\nglobal MAX_READ_REQUESTS_PER_CALL: Field = 32;\nglobal MAX_PENDING_READ_REQUESTS_PER_CALL: Field = 32;\n\n// \"PER TRANSACTION\" CONSTANTS\nglobal MAX_NEW_COMMITMENTS_PER_TX: Field = 64;\nglobal MAX_NEW_NULLIFIERS_PER_TX: Field = 64;\nglobal MAX_PRIVATE_CALL_STACK_LENGTH_PER_TX: Field = 8;\nglobal MAX_PUBLIC_CALL_STACK_LENGTH_PER_TX: Field = 8;\nglobal MAX_NEW_L2_TO_L1_MSGS_PER_TX: Field = 2;\nglobal MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_TX: Field = 16;\nglobal MAX_PUBLIC_DATA_READS_PER_TX: Field = 16;\nglobal MAX_NEW_CONTRACTS_PER_TX: Field = 1;\nglobal MAX_OPTIONALLY_REVEALED_DATA_LENGTH_PER_TX: Field = 4;\nglobal MAX_READ_REQUESTS_PER_TX: Field = 128;\nglobal MAX_PENDING_READ_REQUESTS_PER_TX: Field = 128;\nglobal NUM_ENCRYPTED_LOGS_HASHES_PER_TX: Field = 1;\nglobal NUM_UNENCRYPTED_LOGS_HASHES_PER_TX: Field = 1;\n// docs:end:constants\n\n// ROLLUP CONTRACT CONSTANTS - constants used only in l1-contracts\nglobal NUMBER_OF_L1_L2_MESSAGES_PER_ROLLUP: Field = 16;\n// TODO(961): Use this constant everywhere instead of hard-coded \"2\".\nglobal KERNELS_PER_BASE_ROLLUP: Field = 2;\nglobal MAX_NEW_NULLIFIERS_PER_BASE_ROLLUP: Field = 128;\nglobal MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_BASE_ROLLUP: Field = 32;\nglobal MAX_PUBLIC_DATA_READS_PER_BASE_ROLLUP: Field = 32;\n\n// TREES RELATED CONSTANTS\nglobal VK_TREE_HEIGHT: Field = 3;\nglobal FUNCTION_TREE_HEIGHT: Field = 5;\nglobal CONTRACT_TREE_HEIGHT: Field = 16;\nglobal NOTE_HASH_TREE_HEIGHT: Field = 32;\nglobal PUBLIC_DATA_TREE_HEIGHT: Field = 254;\nglobal NULLIFIER_TREE_HEIGHT: Field = 20;\nglobal L1_TO_L2_MSG_TREE_HEIGHT: Field = 16;\nglobal ROLLUP_VK_TREE_HEIGHT: Field = 8;\n\n// SUB-TREES RELATED CONSTANTS\nglobal CONTRACT_SUBTREE_HEIGHT: Field = 1;\nglobal CONTRACT_SUBTREE_SIBLING_PATH_LENGTH: Field = 15;\nglobal NOTE_HASH_SUBTREE_HEIGHT: Field = 7;\nglobal NOTE_HASH_SUBTREE_SIBLING_PATH_LENGTH: Field = 25;\nglobal NULLIFIER_SUBTREE_HEIGHT: Field = 7;\nglobal ARCHIVE_HEIGHT: Field = 16;\nglobal NULLIFIER_SUBTREE_SIBLING_PATH_LENGTH: Field = 13;\nglobal L1_TO_L2_MSG_SUBTREE_HEIGHT: Field = 4;\nglobal L1_TO_L2_MSG_SUBTREE_SIBLING_PATH_LENGTH: Field = 12;\n\n// MISC CONSTANTS\nglobal FUNCTION_SELECTOR_NUM_BYTES: Field = 4;\nglobal MAPPING_SLOT_PEDERSEN_SEPARATOR: Field = 4;\nglobal NUM_FIELDS_PER_SHA256: Field = 2;\nglobal ARGS_HASH_CHUNK_LENGTH: u32 = 32;\nglobal ARGS_HASH_CHUNK_COUNT: u32 = 16;\n\n\n// NOIR CONSTANTS - constants used only in yarn-packages/noir-contracts\n// Some are defined here because Noir doesn't yet support globals referencing other globals yet.\n// Move these constants to a noir file once the issue bellow is resolved:\n// https://github.com/noir-lang/noir/issues/1734\nglobal L1_TO_L2_MESSAGE_LENGTH: Field = 8;\nglobal L1_TO_L2_MESSAGE_ORACLE_CALL_LENGTH: Field = 26;\nglobal MAX_NOTE_FIELDS_LENGTH: Field = 20;\n// GET_NOTE_ORACLE_RETURN_LENGT = MAX_NOTE_FIELDS_LENGTH + 1 + 2\n// The plus 1 is 1 extra field for nonce.\n// + 2 for EXTRA_DATA: [number_of_return_notes, contract_address]\nglobal GET_NOTE_ORACLE_RETURN_LENGTH: Field = 23;\nglobal MAX_NOTES_PER_PAGE: Field = 10;\n// VIEW_NOTE_ORACLE_RETURN_LENGTH = MAX_NOTES_PER_PAGE * (MAX_NOTE_FIELDS_LENGTH + 1) + 2;\nglobal VIEW_NOTE_ORACLE_RETURN_LENGTH: Field = 212;\nglobal CALL_CONTEXT_LENGTH: Field = 7;\nglobal BLOCK_HEADER_LENGTH: Field = 7;\nglobal FUNCTION_DATA_LENGTH: Field = 4;\nglobal CONTRACT_DEPLOYMENT_DATA_LENGTH: Field = 6;\n// Change this ONLY if you have changed the PrivateCircuitPublicInputs structure.\n// In other words, if the structure/size of the public inputs of a function call changes then we\n// should change this constant as well as the offsets in private_call_stack_item.nr\nglobal PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH: Field = 155;\nglobal CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH: Field = 3;\nglobal CONTRACT_STORAGE_READ_LENGTH: Field = 2;\n// Change this ONLY if you have changed the PublicCircuitPublicInputs structure.\nglobal PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH: Field = 142;\nglobal GET_NOTES_ORACLE_RETURN_LENGTH: Field = 674;\nglobal EMPTY_NULLIFIED_COMMITMENT: Field = 1000000;\nglobal CALL_PRIVATE_FUNCTION_RETURN_SIZE: Field = 161;\nglobal PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH: Field = 87;\nglobal PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH: Field = 144;\nglobal COMMITMENTS_NUM_BYTES_PER_BASE_ROLLUP: Field = 4096;\nglobal NULLIFIERS_NUM_BYTES_PER_BASE_ROLLUP: Field = 4096;\nglobal PUBLIC_DATA_WRITES_NUM_BYTES_PER_BASE_ROLLUP: Field = 2048;\nglobal CONTRACTS_NUM_BYTES_PER_BASE_ROLLUP: Field = 64;\nglobal CONTRACT_DATA_NUM_BYTES_PER_BASE_ROLLUP: Field = 128;\nglobal CONTRACT_DATA_NUM_BYTES_PER_BASE_ROLLUP_UNPADDED: Field = 104;\nglobal L2_TO_L1_MSGS_NUM_BYTES_PER_BASE_ROLLUP: Field = 128;\nglobal LOGS_HASHES_NUM_BYTES_PER_BASE_ROLLUP: Field = 128;\n\n/**\n * Enumerate the hash_indices which are used for pedersen hashing.\n * We start from 1 to avoid the default generators. The generator indices are listed\n * based on the number of elements each index hashes. The following conditions must be met:\n *\n * +-----------+-------------------------------+----------------------+\n * | Hash size | Number of elements hashed (n) | Condition to use     |\n * |-----------+-------------------------------+----------------------|\n * | LOW       | n ≤ 8                         | 0 < hash_index ≤ 32  |\n * | MID       | 8 < n ≤ 16                    | 32 < hash_index ≤ 40 |\n * | HIGH      | 16 < n ≤ 48                   | 40 < hash_index ≤ 48 |\n * +-----------+-------------------------------+----------------------+\n *\n * Note: When modifying, modify `GeneratorIndexPacker` in packer.hpp accordingly.\n */\n// Indices with size ≤ 8\nglobal GENERATOR_INDEX__COMMITMENT = 1;\nglobal GENERATOR_INDEX__COMMITMENT_NONCE = 2;\nglobal GENERATOR_INDEX__UNIQUE_COMMITMENT = 3;\nglobal GENERATOR_INDEX__SILOED_COMMITMENT = 4;\nglobal GENERATOR_INDEX__NULLIFIER = 5;\nglobal GENERATOR_INDEX__INITIALIZATION_NULLIFIER = 6;\nglobal GENERATOR_INDEX__OUTER_NULLIFIER = 7;\nglobal GENERATOR_INDEX__PUBLIC_DATA_READ = 8;\nglobal GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST = 9;\nglobal GENERATOR_INDEX__FUNCTION_DATA = 10;\nglobal GENERATOR_INDEX__FUNCTION_LEAF = 11;\nglobal GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA = 12;\nglobal GENERATOR_INDEX__CONSTRUCTOR = 13;\nglobal GENERATOR_INDEX__CONSTRUCTOR_ARGS = 14;\nglobal GENERATOR_INDEX__CONTRACT_ADDRESS = 15;\nglobal GENERATOR_INDEX__CONTRACT_LEAF = 16;\nglobal GENERATOR_INDEX__CALL_CONTEXT = 17;\nglobal GENERATOR_INDEX__CALL_STACK_ITEM = 18;\nglobal GENERATOR_INDEX__CALL_STACK_ITEM_2 = 19;\nglobal GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET = 20;\nglobal GENERATOR_INDEX__L2_TO_L1_MSG = 21;\nglobal GENERATOR_INDEX__TX_CONTEXT = 22;\nglobal GENERATOR_INDEX__PUBLIC_LEAF_INDEX = 23;\nglobal GENERATOR_INDEX__PUBLIC_DATA_LEAF = 24;\nglobal GENERATOR_INDEX__SIGNED_TX_REQUEST = 25;\nglobal GENERATOR_INDEX__GLOBAL_VARIABLES = 26;\nglobal GENERATOR_INDEX__PARTIAL_ADDRESS = 27;\nglobal GENERATOR_INDEX__BLOCK_HASH = 28;\n// Indices with size ≤ 16\nglobal GENERATOR_INDEX__TX_REQUEST = 33;\nglobal GENERATOR_INDEX__SIGNATURE_PAYLOAD = 34;\n// Indices with size ≤ 44\nglobal GENERATOR_INDEX__VK = 41;\nglobal GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS = 42;\nglobal GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS = 43;\nglobal GENERATOR_INDEX__FUNCTION_ARGS = 44;\n",
                "path": "/protocol_types/constants.nr"
            },
            "93": {
                "source": "use dep::protocol_types::constants::{\n    RETURN_VALUES_LENGTH,\n    MAX_READ_REQUESTS_PER_CALL,\n    MAX_PENDING_READ_REQUESTS_PER_CALL,\n    MAX_NEW_COMMITMENTS_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n    NUM_FIELDS_PER_SHA256,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL,\n    GENERATOR_INDEX__FUNCTION_ARGS,\n    BLOCK_HEADER_LENGTH,\n    CONTRACT_DEPLOYMENT_DATA_LENGTH,\n    CALL_CONTEXT_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n    CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH,\n    CONTRACT_STORAGE_READ_LENGTH,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n    GENERATOR_INDEX__BLOCK_HASH,\n    GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS,\n    GENERATOR_INDEX__FUNCTION_DATA,\n    GENERATOR_INDEX__PUBLIC_DATA_READ,\n    GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST,\n    GENERATOR_INDEX__CALL_CONTEXT,\n    GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS,\n    GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA,\n};\n\nuse crate::oracle::debug_log;\nuse crate::types::vec::BoundedVec;\nuse crate::types::point::Point;\nuse crate::hash::pedersen_hash;\n\n// docs:start:private-global-variables\nstruct PrivateGlobalVariables {\n    chain_id: Field,\n    version: Field,\n}\n// docs:end:private-global-variables\n\nimpl PrivateGlobalVariables {\n    fn serialize(self) -> [Field; 2] {\n        [self.chain_id, self.version]\n    }\n}\n\n// docs:start:public-global-variables\nstruct PublicGlobalVariables {\n    chain_id: Field,\n    version: Field,\n    block_number: Field,\n    timestamp: Field,\n}\n// docs:end:public-global-variables\n\nimpl PublicGlobalVariables {\n    fn serialize(self) -> [Field; 4] {\n        [self.chain_id, self.version, self.block_number, self.timestamp]\n    }\n}\n\n// docs:start:contract-deployment-data\nstruct ContractDeploymentData {\n    deployer_public_key: Point,\n    constructor_vk_hash : Field,\n    function_tree_root : Field,\n    contract_address_salt : Field,\n    portal_contract_address : Field,\n}\n// docs:end:contract-deployment-data\n\nimpl ContractDeploymentData {\n    fn serialize(self) -> [Field; CONTRACT_DEPLOYMENT_DATA_LENGTH] {\n        [\n            self.deployer_public_key.x,\n            self.deployer_public_key.y,\n            self.constructor_vk_hash,\n            self.function_tree_root,\n            self.contract_address_salt,\n            self.portal_contract_address,\n        ]\n    }\n\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA)\n    }\n}\n\n// PrivateContextInputs are expected to be provided to each private function\n// docs:start:private-context-inputs\nstruct PrivateContextInputs {\n    call_context : CallContext,\n    block_header: BlockHeader,\n    contract_deployment_data: ContractDeploymentData,\n    private_global_variables: PrivateGlobalVariables,\n}\n// docs:end:private-context-inputs\n\n// PublicContextInputs are expected to be provided to each public function\n// docs:start:public-context-inputs\nstruct PublicContextInputs {\n    call_context: CallContext,\n    block_header: BlockHeader,\n\n    public_global_variables: PublicGlobalVariables,\n}\n// docs:end:public-context-inputs\n\n// docs:start:call-context\nstruct CallContext {\n    msg_sender : Field,\n    storage_contract_address : Field,\n    portal_contract_address : Field,\n    function_selector: Field,\n\n    is_delegate_call : bool,\n    is_static_call : bool,\n    is_contract_deployment: bool,\n}\n// docs:end:call-context\n\nimpl CallContext {\n    fn serialize(self) -> [Field; CALL_CONTEXT_LENGTH] {\n        [\n            self.msg_sender,\n            self.storage_contract_address,\n            self.portal_contract_address,\n            self.function_selector,\n            self.is_delegate_call as Field,\n            self.is_static_call as Field,\n            self.is_contract_deployment as Field,\n        ]\n    }\n\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CALL_CONTEXT)\n    }\n}\n\n// docs:start:block-header\nstruct BlockHeader {\n    note_hash_tree_root : Field,\n    nullifier_tree_root : Field,\n    contract_tree_root : Field,\n    l1_to_l2_messages_tree_root : Field,\n    archive_root: Field,\n    public_data_tree_root: Field,\n    global_variables_hash: Field,\n}\n// docs:end:block-header\n\nimpl BlockHeader {\n    // NOTE: this order must match the order in `private_circuit_public_inputs.hpp`\n    pub fn serialize(self) -> [Field; BLOCK_HEADER_LENGTH] {\n        [\n            self.note_hash_tree_root,\n            self.nullifier_tree_root,\n            self.contract_tree_root,\n            self.l1_to_l2_messages_tree_root,\n            self.archive_root,\n            self.public_data_tree_root,\n            self.global_variables_hash,\n        ]\n    }\n\n    pub fn deserialize(deserialized: [Field; BLOCK_HEADER_LENGTH]) -> Self {\n        BlockHeader {\n            note_hash_tree_root: deserialized[0],\n            nullifier_tree_root: deserialized[1],\n            contract_tree_root: deserialized[2],\n            l1_to_l2_messages_tree_root: deserialized[3],\n            archive_root: deserialized[4],\n            public_data_tree_root: deserialized[5],\n            global_variables_hash: deserialized[6],\n        }\n    }\n\n    pub fn empty() -> Self {\n        Self { note_hash_tree_root: 0, nullifier_tree_root: 0, contract_tree_root: 0, l1_to_l2_messages_tree_root: 0, archive_root: 0, public_data_tree_root: 0, global_variables_hash: 0 }\n    }\n\n    pub fn block_hash(self) -> Field {\n        // TODO(#3442): Unify the ordering in `BlockHeader::serialize` function and the ordering\n        // in the block hash preimage --> This requires changes in the circuits.\n        let inputs = [\n            self.global_variables_hash,\n            self.note_hash_tree_root,\n            self.nullifier_tree_root,\n            self.contract_tree_root,\n            self.l1_to_l2_messages_tree_root,\n            self.public_data_tree_root\n        ];\n        pedersen_hash(inputs, GENERATOR_INDEX__BLOCK_HASH)\n    }\n}\n\nstruct FunctionData {\n    function_selector: Field,\n    is_internal: bool,\n    is_private: bool,\n    is_constructor: bool,\n}\n\nimpl FunctionData {\n    fn hash(self) -> Field {\n        pedersen_hash([\n            self.function_selector,\n            self.is_internal as Field,\n            self.is_private as Field,\n            self.is_constructor as Field,\n        ], GENERATOR_INDEX__FUNCTION_DATA)\n    }\n}\n\nstruct PrivateCircuitPublicInputs {\n    call_context: CallContext,\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n    read_requests: [Field; crate::abi::MAX_READ_REQUESTS_PER_CALL],\n    pending_read_requests: [Field; crate::abi::MAX_PENDING_READ_REQUESTS_PER_CALL],\n    new_commitments: [Field; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [Field; MAX_NEW_NULLIFIERS_PER_CALL],\n    nullified_commitments: [Field; MAX_NEW_NULLIFIERS_PER_CALL],\n    private_call_stack: [Field; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL],\n    public_call_stack: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_l2_to_l1_msgs: [Field; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    // Explore introducing a new type like uint256 (similar to Point), so it's more explicit that\n    // we're talking about a single number backed by two field elements.\n    encrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    encrypted_log_preimages_length: Field,\n    unencrypted_log_preimages_length: Field,\n    block_header: BlockHeader,\n    contract_deployment_data: ContractDeploymentData,\n    chain_id: Field,\n    version: Field,\n}\n\nimpl PrivateCircuitPublicInputs {\n    fn hash(self) -> Field {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0); \n        fields.push(self.call_context.hash());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.push_array(self.read_requests);\n        fields.push_array(self.pending_read_requests);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.nullified_commitments);\n        fields.push_array(self.private_call_stack);\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_header.serialize());\n        fields.push(self.contract_deployment_data.hash());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n\n        pedersen_hash(fields.storage, GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS)\n    }\n\n    fn serialize(self) -> [Field; PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.push_array(self.read_requests);\n        fields.push_array(self.pending_read_requests);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.private_call_stack);\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_header.serialize());\n        fields.push_array(self.contract_deployment_data.serialize());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n        fields.storage\n    }\n}\n\nstruct ContractStorageRead {\n    storage_slot: Field,\n    value: Field,\n}\n\nimpl ContractStorageRead {\n    pub fn serialize(self) -> [Field; CONTRACT_STORAGE_READ_LENGTH] {\n        [self.storage_slot, self.value]\n    }\n\n    pub fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_READ)\n    }\n\n    pub fn empty() -> Self {\n        Self { storage_slot: 0, value: 0 }\n    }\n}\n\nstruct ContractStorageUpdateRequest {\n    storage_slot: Field,\n    old_value: Field,\n    new_value: Field,\n}\n\nimpl ContractStorageUpdateRequest {\n    pub fn serialize(self) -> [Field; CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH] {\n        [self.storage_slot, self.old_value, self.new_value]\n    }\n\n    pub fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST)\n    }\n\n    pub fn empty() -> Self {\n        Self { storage_slot: 0, old_value: 0, new_value: 0 }\n    }\n}\n\nstruct PublicCircuitPublicInputs {\n    call_context: CallContext,\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n    contract_storage_update_requests: [ContractStorageUpdateRequest; MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n    contract_storage_read: [ContractStorageRead; MAX_PUBLIC_DATA_READS_PER_CALL],\n    public_call_stack: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_commitments: [Field; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [Field; crate::abi::MAX_NEW_NULLIFIERS_PER_CALL],\n    new_l2_to_l1_msgs: [Field; crate::abi::MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_log_preimages_length: Field,\n    block_header: BlockHeader,\n    prover_address: Field,\n}\n\nimpl PublicCircuitPublicInputs {\n    \n    pub fn hash(self) -> Field {\n        let mut inputs: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0);\n        inputs.push(self.call_context.hash());\n        inputs.push(self.args_hash);\n        inputs.push_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            inputs.push(self.contract_storage_update_requests[i].hash());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            inputs.push(self.contract_storage_read[i].hash());\n        }\n        inputs.push_array(self.public_call_stack);\n        inputs.push_array(self.new_commitments);\n        inputs.push_array(self.new_nullifiers);\n        inputs.push_array(self.new_l2_to_l1_msgs);\n\n        inputs.push_array(self.unencrypted_logs_hash);\n        inputs.push(self.unencrypted_log_preimages_length);\n        inputs.push_array(self.block_header.serialize());\n        inputs.push(self.prover_address);\n\n        pedersen_hash(inputs.storage, GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS)\n    }\n\n    pub fn serialize(self) -> [Field; PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());   \n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            fields.push_array(self.contract_storage_update_requests[i].serialize());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            fields.push_array(self.contract_storage_read[i].serialize());\n        }\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_header.serialize());\n        fields.push(self.prover_address);\n        fields.storage\n    }\n}\n\nstruct Hasher {\n    fields: [Field],\n}\n\nimpl Hasher {\n    pub fn new()-> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<N>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n\n    pub fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nglobal ARGS_HASH_CHUNK_LENGTH: u32 = 32;\nglobal ARGS_HASH_CHUNK_COUNT: u32 = 16;\n\npub fn hash_args<N>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        let mut chunks_hashes = [0; ARGS_HASH_CHUNK_COUNT];\n        for i in 0..ARGS_HASH_CHUNK_COUNT {\n            let mut chunk_hash = 0;\n            let start_chunk_index = i * ARGS_HASH_CHUNK_LENGTH;\n            if start_chunk_index < (args.len() as u32) {\n                let mut chunk_args = [0; ARGS_HASH_CHUNK_LENGTH];\n                for j in 0..ARGS_HASH_CHUNK_LENGTH {\n                    let item_index = i * ARGS_HASH_CHUNK_LENGTH + j;\n                    if item_index < (args.len() as u32) {\n                        chunk_args[j] = args[item_index];\n                    }\n                }\n                chunk_hash = pedersen_hash(chunk_args, GENERATOR_INDEX__FUNCTION_ARGS);\n            }\n            chunks_hashes[i] = chunk_hash;\n        }\n        pedersen_hash(chunks_hashes, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n",
                "path": "/aztec/abi.nr"
            },
            "94": {
                "source": "use dep::protocol_types::constants::GENERATOR_INDEX__CONTRACT_ADDRESS;\nuse crate::hash::pedersen_hash;\n\npub fn compute_address(pub_key_x: Field, pub_key_y: Field, partial_address: Field) -> Field {\n    pedersen_hash([pub_key_x, pub_key_y, partial_address],\n        GENERATOR_INDEX__CONTRACT_ADDRESS)\n}\n",
                "path": "/aztec/address.nr"
            },
            "95": {
                "source": "use dep::protocol_types::constants::{\n    EMPTY_NULLIFIED_COMMITMENT,\n    MAX_NEW_COMMITMENTS_PER_CALL,\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_READ_REQUESTS_PER_CALL,\n    MAX_PENDING_READ_REQUESTS_PER_CALL,\n    NUM_FIELDS_PER_SHA256,\n    RETURN_VALUES_LENGTH,\n};\n\nuse crate::abi;\n\nuse crate::abi::{\n    hash_args,\n    CallContext,\n    ContractDeploymentData,\n    BlockHeader,\n    FunctionData,\n    PrivateCircuitPublicInputs,\n    PublicCircuitPublicInputs,\n};\n\n// TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n// use dep::std::collections::vec::Vec;\n\n// l1 to l2 messaging\nuse crate::messaging::process_l1_to_l2_message;\nuse crate::private_call_stack_item::PrivateCallStackItem;\nuse crate::public_call_stack_item::PublicCallStackItem;\n\nuse crate::types::{\n    vec::BoundedVec,\n    point::Point,\n};\n\nuse crate::utils::arr_copy_slice;\n\nuse crate::oracle::{\n    arguments,\n    call_private_function::call_private_function_internal,\n    public_call::call_public_function_internal,\n    enqueue_public_function_call::enqueue_public_function_call_internal,\n    context::get_portal_address,\n    get_block_header::get_block_header,\n};\n\nuse dep::std::option::Option;\n\n// When finished, one can call .finish() to convert back to the abi\nstruct PrivateContext {\n    // docs:start:private-context\n    inputs: abi::PrivateContextInputs,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    read_requests: BoundedVec<Field, MAX_READ_REQUESTS_PER_CALL>,\n    pending_read_requests: BoundedVec<Field, MAX_PENDING_READ_REQUESTS_PER_CALL>,\n\n    new_commitments: BoundedVec<Field, MAX_NEW_COMMITMENTS_PER_CALL>,\n    new_nullifiers: BoundedVec<Field, MAX_NEW_NULLIFIERS_PER_CALL>,\n    nullified_commitments: BoundedVec<Field, MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    private_call_stack : BoundedVec<Field, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_stack : BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    new_l2_to_l1_msgs : BoundedVec<Field, MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    block_header: BlockHeader,\n\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    // encrypted_logs_preimages: Vec<Field>,\n    // unencrypted_logs_preimages: Vec<Field>,\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: abi::PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs: inputs,\n\n            args_hash: args_hash,\n            return_values: BoundedVec::new(0),\n\n            read_requests: BoundedVec::new(0),\n            pending_read_requests: BoundedVec::new(0),\n\n            new_commitments: BoundedVec::new(0),\n            new_nullifiers: BoundedVec::new(0),\n            nullified_commitments: BoundedVec::new(0),\n\n            block_header: inputs.block_header,\n\n            private_call_stack: BoundedVec::new(0),\n            public_call_stack: BoundedVec::new(0),\n            new_l2_to_l1_msgs: BoundedVec::new(0),\n\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    pub fn msg_sender(self) -> Field {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> Field {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    pub fn this_portal_address(self) -> Field {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.private_global_variables.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.private_global_variables.version\n    }\n\n    pub fn selector(self) -> Field {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn get_block_header(self, block_number: u32) -> BlockHeader {\n        get_block_header(block_number, self)\n    }\n\n    pub fn finish(self) -> abi::PrivateCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let encrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let encrypted_log_preimages_length = 0;\n        let unencrypted_log_preimages_length = 0;\n\n        let priv_circuit_pub_inputs = abi::PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            return_values: self.return_values.storage,\n            read_requests: self.read_requests.storage,\n            pending_read_requests: self.pending_read_requests.storage,\n            new_commitments: self.new_commitments.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            nullified_commitments: self.nullified_commitments.storage,\n            private_call_stack: self.private_call_stack.storage,\n            public_call_stack: self.public_call_stack.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            encrypted_logs_hash: encrypted_logs_hash,\n            unencrypted_logs_hash: unencrypted_logs_hash,\n            encrypted_log_preimages_length: encrypted_log_preimages_length,\n            unencrypted_log_preimages_length: unencrypted_log_preimages_length,\n            block_header: self.block_header,\n            contract_deployment_data: self.inputs.contract_deployment_data,\n            chain_id: self.inputs.private_global_variables.chain_id,\n            version: self.inputs.private_global_variables.version,\n        };\n        priv_circuit_pub_inputs\n    }\n\n    pub fn push_read_request(&mut self, read_request: Field) {\n        self.read_requests.push(read_request);\n    }\n\n    pub fn push_pending_read_request(&mut self, pending_read_request: Field) {\n        self.pending_read_requests.push(pending_read_request);\n    }\n\n    pub fn push_new_note_hash(&mut self, note_hash: Field) {\n        self.new_commitments.push(note_hash);\n    }\n\n    // We never push a zero nullified_commitment as zero is used to indicate the end\n    // of a field array in private kernel. This routine transparently replaces a\n    // zero value into the special placeholder: EMPTY_NULLIFIED_COMMITMENT.\n    pub fn push_new_nullifier(&mut self, nullifier: Field, nullified_commitment: Field) {\n        self.new_nullifiers.push(nullifier);\n        let mut non_zero_nullified = nullified_commitment;\n        if (non_zero_nullified == 0) {\n            non_zero_nullified = EMPTY_NULLIFIED_COMMITMENT;\n        }\n        self.nullified_commitments.push(non_zero_nullified);\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, content: Field) \n    // docs:end:context_message_portal\n    {\n        self.new_l2_to_l1_msgs.push(content);\n    }\n\n    // PrivateContextInputs must be temporarily passed in to prevent too many unknowns\n    // Note this returns self to get around an issue where mutable structs do not maintain mutations unless reassigned\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        msg_key: Field,\n        content: Field,\n        secret: Field\n    ) \n    // docs:end:context_consume_l1_to_l2_message\n    {\n        let nullifier = process_l1_to_l2_message(self.block_header.l1_to_l2_messages_tree_root, self.this_address(), self.this_portal_address(), self.chain_id(), self.version(), msg_key, content, secret);\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash)\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0)\n    }\n\n    pub fn call_private_function_with_packed_args(\n        &mut self,\n        contract_address: Field,\n        function_selector: Field,\n        args_hash: Field\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let fields = call_private_function_internal(\n            contract_address, \n            function_selector, \n            args_hash\n        );\n        let item = PrivateCallStackItem {\n            contract_address: fields[0],\n            function_data: FunctionData {\n                function_selector: fields[1],\n                is_internal: fields[2] as bool,\n                is_private: fields[3] as bool,\n                is_constructor: fields[4] as bool,\n            },\n            public_inputs: PrivateCircuitPublicInputs {\n                call_context: CallContext {\n                    msg_sender : fields[5],\n                    storage_contract_address : fields[6],\n                    portal_contract_address : fields[7],\n                    function_selector: fields[8], // practically same as fields[1]\n                    is_delegate_call : fields[9] as bool,\n                    is_static_call : fields[10] as bool,\n                    is_contract_deployment: fields[11] as bool,\n                },\n                // TODO handle the offsets as a variable incremented during extraction?\n                args_hash: fields[12],\n                return_values: arr_copy_slice(fields, [0; RETURN_VALUES_LENGTH], 13),\n                read_requests: arr_copy_slice(fields, [0; MAX_READ_REQUESTS_PER_CALL], 17),\n                pending_read_requests: arr_copy_slice(fields, [0; MAX_READ_REQUESTS_PER_CALL], 49),\n                new_commitments: arr_copy_slice(fields, [0; MAX_NEW_COMMITMENTS_PER_CALL], 81),\n                new_nullifiers: arr_copy_slice(fields, [0; MAX_NEW_NULLIFIERS_PER_CALL], 97),\n                nullified_commitments: arr_copy_slice(fields, [0; MAX_NEW_NULLIFIERS_PER_CALL], 113),\n                private_call_stack: arr_copy_slice(fields, [0; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL], 129),\n                public_call_stack: arr_copy_slice(fields, [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL], 133),\n                new_l2_to_l1_msgs: arr_copy_slice(fields, [0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL], 137),\n                encrypted_logs_hash: arr_copy_slice(fields, [0; NUM_FIELDS_PER_SHA256], 139),\n                unencrypted_logs_hash: arr_copy_slice(fields, [0; NUM_FIELDS_PER_SHA256], 141),\n                encrypted_log_preimages_length: fields[143],\n                unencrypted_log_preimages_length: fields[144],\n                block_header: BlockHeader {\n                    // Must match order in `private_circuit_public_inputs.hpp`\n                    note_hash_tree_root : fields[145],\n                    nullifier_tree_root : fields[146],\n                    contract_tree_root : fields[147],\n                    l1_to_l2_messages_tree_root : fields[148],\n                    archive_root : fields[149],\n                    public_data_tree_root: fields[150],\n                    global_variables_hash: fields[151],\n                },\n                contract_deployment_data: ContractDeploymentData {\n                    deployer_public_key: Point::new(fields[152], fields[153]),\n                    constructor_vk_hash : fields[154],\n                    function_tree_root : fields[155],\n                    contract_address_salt : fields[156],\n                    portal_contract_address : fields[157],\n                },\n                chain_id: fields[158],\n                version: fields[159],\n            },\n            is_execution_request: fields[160] as bool,\n        };\n        assert(contract_address == item.contract_address);\n        assert(function_selector == item.function_data.function_selector);\n\n        assert(args_hash == item.public_inputs.args_hash);\n\n        assert(item.is_execution_request == false);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        // We are issuing a regular call which is not delegate, static, or deployment. We also constrain\n        // the msg_sender in the nested call to be equal to our address, and the execution context address\n        // for the nested call to be equal to the address we actually called.\n        assert(item.public_inputs.call_context.is_delegate_call == false);\n        assert(item.public_inputs.call_context.is_static_call == false);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n        assert(item.public_inputs.call_context.msg_sender == self.inputs.call_context.storage_contract_address);\n        assert(item.public_inputs.call_context.storage_contract_address == contract_address);\n\n        self.private_call_stack.push(item.hash());\n\n        item.public_inputs.return_values\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field,\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: Field,\n        function_selector: Field,\n        args_hash: Field\n    ) {\n        let fields = enqueue_public_function_call_internal(\n            contract_address, \n            function_selector, \n            args_hash\n        );\n        let item = PublicCallStackItem {\n            contract_address: fields[0],\n            function_data: FunctionData {\n                function_selector: fields[1],\n                is_internal: fields[2] as bool,\n                is_private: fields[3] as bool,\n                is_constructor: fields[4] as bool,\n            },\n            public_inputs: PublicCircuitPublicInputs {\n                call_context: CallContext {\n                    msg_sender : fields[5],\n                    storage_contract_address : fields[6],\n                    portal_contract_address : fields[7],\n                    function_selector: fields[8], // practically same as fields[1]\n                    is_delegate_call : fields[9] as bool,\n                    is_static_call : fields[10] as bool,\n                    is_contract_deployment: fields[11] as bool,\n                },\n                args_hash: fields[12],\n                return_values: [0; RETURN_VALUES_LENGTH],\n                contract_storage_update_requests: [ContractStorageUpdateRequest::empty(); MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n                contract_storage_read: [ContractStorageRead::empty(); MAX_PUBLIC_DATA_READS_PER_CALL],\n                public_call_stack: [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n                new_commitments: [0; MAX_NEW_COMMITMENTS_PER_CALL],\n                new_nullifiers: [0; MAX_NEW_NULLIFIERS_PER_CALL],\n                new_l2_to_l1_msgs:[0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n                unencrypted_logs_hash:[0; NUM_FIELDS_PER_SHA256],\n                unencrypted_log_preimages_length: 0,\n                block_header: BlockHeader::empty(),\n                prover_address: 0,\n            },\n            is_execution_request: true,\n        };\n\n        assert(contract_address == item.contract_address);\n        assert(function_selector == item.function_data.function_selector);\n        \n        assert(args_hash == item.public_inputs.args_hash);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        // We are issuing a regular call which is not delegate, static, or deployment. We also constrain\n        // the msg_sender in the nested call to be equal to our address, and the execution context address\n        // for the nested call to be equal to the address we actually called.\n        assert(item.public_inputs.call_context.is_delegate_call == false);\n        assert(item.public_inputs.call_context.is_static_call == false);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n        assert(item.public_inputs.call_context.msg_sender == self.inputs.call_context.storage_contract_address);\n        assert(item.public_inputs.call_context.storage_contract_address == contract_address);\n\n        self.public_call_stack.push(item.hash());\n    }\n}\n\nuse crate::abi::{\n    ContractStorageRead,\n    ContractStorageUpdateRequest\n};\n\nstruct PublicContext {\n    inputs: abi::PublicContextInputs,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    contract_storage_update_requests: BoundedVec<ContractStorageUpdateRequest, MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL>,\n    contract_storage_read: BoundedVec<ContractStorageRead, MAX_PUBLIC_DATA_READS_PER_CALL>,\n    public_call_stack: BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n\n    new_commitments: BoundedVec<Field, MAX_NEW_COMMITMENTS_PER_CALL>,\n    new_nullifiers: BoundedVec<Field, crate::abi::MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    new_l2_to_l1_msgs: BoundedVec<Field, crate::abi::MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n\n    unencrypted_logs_hash: BoundedVec<Field, NUM_FIELDS_PER_SHA256>,\n    unencrypted_logs_preimages_length: Field,\n\n    block_header: BlockHeader,\n    prover_address: Field,\n}\n\nimpl PublicContext {\n    pub fn new(inputs: abi::PublicContextInputs, args_hash: Field) -> PublicContext {\n        let empty_storage_read = ContractStorageRead::empty();\n        let empty_storage_update = ContractStorageUpdateRequest::empty();\n        PublicContext {\n            inputs: inputs,\n\n            args_hash: args_hash,\n            return_values: BoundedVec::new(0),\n\n            contract_storage_update_requests: BoundedVec::new(empty_storage_update),\n            contract_storage_read: BoundedVec::new(empty_storage_read),\n            public_call_stack: BoundedVec::new(0),\n\n            new_commitments: BoundedVec::new(0),\n            new_nullifiers: BoundedVec::new(0),\n\n            new_l2_to_l1_msgs: BoundedVec::new(0),\n\n            \n            unencrypted_logs_hash: BoundedVec::new(0),\n            unencrypted_logs_preimages_length: 0,\n\n            block_header: inputs.block_header,\n            prover_address: 0,\n\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    pub fn msg_sender(self) -> Field {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> Field {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    pub fn this_portal_address(self) -> Field {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.public_global_variables.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.public_global_variables.version\n    }\n\n    pub fn selector(self) -> Field {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn block_number(self) -> Field {\n        self.inputs.public_global_variables.block_number\n    }\n\n    pub fn timestamp(self) -> Field {\n        self.inputs.public_global_variables.timestamp\n    }\n\n    pub fn finish(self) -> abi::PublicCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_log_preimages_length = 0;\n\n\n        // Compute the public call stack hashes\n        let pub_circuit_pub_inputs = abi::PublicCircuitPublicInputs {\n            call_context: self.inputs.call_context, // Done\n            args_hash: self.args_hash, // Done\n            contract_storage_update_requests: self.contract_storage_update_requests.storage,\n            contract_storage_read: self.contract_storage_read.storage,\n            return_values: self.return_values.storage,\n            new_commitments: self.new_commitments.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            public_call_stack: self.public_call_stack.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            unencrypted_logs_hash: unencrypted_logs_hash,\n            unencrypted_log_preimages_length: unencrypted_log_preimages_length,\n            block_header: self.inputs.block_header,\n            prover_address: self.prover_address,\n        };\n        pub_circuit_pub_inputs\n    }\n\n    pub fn push_new_note_hash(&mut self, note_hash: Field) {\n        self.new_commitments.push(note_hash);\n    }\n\n    pub fn push_new_nullifier(&mut self, nullifier: Field, _nullified_commitment: Field) {\n        self.new_nullifiers.push(nullifier);\n    }\n\n    pub fn message_portal(&mut self, content: Field) {\n        self.new_l2_to_l1_msgs.push(content);\n    }\n\n    // PrivateContextInputs must be temporarily passed in to prevent too many unknowns\n    // Note this returns self to get around an issue where mutable structs do not maintain mutations unless reassigned\n    pub fn consume_l1_to_l2_message(&mut self, msg_key: Field, content: Field, secret: Field) {\n        let this = (*self).this_address();\n        let nullifier = process_l1_to_l2_message(self.block_header.l1_to_l2_messages_tree_root, this, self.this_portal_address(), self.chain_id(), self.version(), msg_key, content, secret);\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT)\n    }\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        _self: Self,\n        contract_address: Field, \n        function_selector: Field,\n        args: [Field; ARGS_COUNT],\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = abi::hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        call_public_function_internal(\n            contract_address, \n            function_selector, \n            args_hash,\n        )\n    }\n\n    pub fn call_public_function_no_args(\n        _self: Self,\n        contract_address: Field, \n        function_selector: Field,\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        call_public_function_internal(\n            contract_address, \n            function_selector, \n            0,\n        )\n    }\n\n}\n\nstruct Context {\n    private: Option<&mut PrivateContext>,\n    public: Option<&mut PublicContext>,\n}\n\nimpl Context {\n    pub fn private(context: &mut PrivateContext) -> Context {\n        Context {\n            private: Option::some(context),\n            public: Option::none()\n        }\n    }\n\n    pub fn public(context: &mut PublicContext) -> Context {\n        Context {\n            public: Option::some(context),\n            private: Option::none()\n        }\n    }\n\n    pub fn none() -> Context {\n        Context {\n            public: Option::none(),\n            private: Option::none()\n        }\n    }\n}\n",
                "path": "/aztec/context.nr"
            },
            "96": {
                "source": "use dep::std::hash::{pedersen_hash_with_separator, sha256};\nuse dep::protocol_types::constants::{\n  GENERATOR_INDEX__SIGNATURE_PAYLOAD,\n  GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET,\n};\n\npub fn sha256_to_field<N>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = sha256(bytes_to_hash);\n\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (sha256_hashed[15 - i] as Field) * v;\n        low = low + (sha256_hashed[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    let hash_in_a_field = low + high * v;\n\n    hash_in_a_field\n}\n\npub fn compute_secret_hash(secret: Field) -> Field {\n    // TODO(#1205) This is probably not the right index to use\n    pedersen_hash([secret], GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET)\n}\n\npub fn pedersen_hash<N>(inputs: [Field; N], hash_index: u32) -> Field {\n    pedersen_hash_with_separator(inputs, hash_index)\n}\n",
                "path": "/aztec/hash.nr"
            },
            "118": {
                "source": "use dep::protocol_types::constants::CALL_PRIVATE_FUNCTION_RETURN_SIZE;\n\n#[oracle(callPrivateFunction)]\nfn call_private_function_oracle(_contract_address: Field, _function_selector: Field, _args_hash: Field) -> [Field; CALL_PRIVATE_FUNCTION_RETURN_SIZE] {}\n\nunconstrained pub fn call_private_function_internal(contract_address: Field, function_selector: Field, args_hash: Field) -> [Field; CALL_PRIVATE_FUNCTION_RETURN_SIZE] {\n    call_private_function_oracle(contract_address, function_selector, args_hash)\n}\n",
                "path": "/aztec/oracle/call_private_function.nr"
            },
            "128": {
                "source": "\n// contract_address + \n// args_hash +\n// crate::abi::FUNCTION_DATA_SIZE +\n// crate::abi::CALL_CONTEXT_SIZE +\n// = 2 + 4 + 7\nglobal ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE: Field = 13;\n\n#[oracle(enqueuePublicFunctionCall)]\nfn enqueue_public_function_call_oracle(_contract_address: Field, _function_selector: Field, _args_hash: Field) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE] {}\n\nunconstrained pub fn enqueue_public_function_call_internal(contract_address: Field, function_selector: Field, args_hash: Field) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE] {\n    enqueue_public_function_call_oracle(contract_address, function_selector, args_hash)\n}\n",
                "path": "/aztec/oracle/enqueue_public_function_call.nr"
            },
            "132": {
                "source": "#[oracle(storageRead)]\nfn storage_read_oracle<N>(_storage_slot: Field, _number_of_elements: Field) -> [Field; N] {}\n\nunconstrained fn storage_read_oracle_wrapper<N>(_storage_slot: Field) -> [Field; N] {\n    storage_read_oracle(_storage_slot, N)\n}\n\npub fn storage_read<T, N>(storage_slot: Field, deserialize: fn ([Field; N]) -> T) -> T {\n    let fields = storage_read_oracle_wrapper(storage_slot);\n    deserialize(fields)\n}\n\n#[oracle(storageWrite)]\nfn storage_write_oracle<N>(_storage_slot: Field, _values: [Field; N]) -> [Field; N] {}\n\n// TODO: Remove return value.\nunconstrained pub fn storage_write<N>(storage_slot: Field, fields: [Field; N]) {\n    let _hash = storage_write_oracle(storage_slot, fields);\n}\n",
                "path": "/aztec/oracle/storage.nr"
            },
            "134": {
                "source": "use crate::abi::FunctionData;\nuse crate::abi::PrivateCircuitPublicInputs;\nuse dep::protocol_types::constants::GENERATOR_INDEX__CALL_STACK_ITEM;\nuse crate::hash::pedersen_hash;\n\nstruct PrivateCallStackItem {\n    contract_address: Field,\n    function_data: FunctionData,\n    public_inputs: PrivateCircuitPublicInputs,\n    is_execution_request: bool,\n}\n\nimpl PrivateCallStackItem {\n    pub fn hash(self) -> Field {\n        pedersen_hash([\n            self.contract_address,\n            self.function_data.hash(),\n            self.public_inputs.hash(),\n        ], GENERATOR_INDEX__CALL_STACK_ITEM)\n    }\n}\n",
                "path": "/aztec/private_call_stack_item.nr"
            },
            "135": {
                "source": "use crate::{\n    abi,\n    hash::pedersen_hash,\n    abi::{\n        PublicCircuitPublicInputs,\n        FunctionData,\n    },\n};\nuse dep::protocol_types::constants::{\n    RETURN_VALUES_LENGTH,\n    GENERATOR_INDEX__CALL_STACK_ITEM,\n};\n\n// oracles\nuse crate::oracle::{\n    enqueue_public_function_call::enqueue_public_function_call_internal,\n};\n\nstruct PublicCallStackItem {\n    contract_address: Field,\n    function_data: FunctionData,\n    public_inputs: PublicCircuitPublicInputs,\n    is_execution_request: bool,\n}\n\nimpl PublicCallStackItem {\n    pub fn hash(self) -> Field {\n        pedersen_hash([\n            self.contract_address,\n            self.function_data.hash(),\n            self.public_inputs.hash(),\n        ], GENERATOR_INDEX__CALL_STACK_ITEM)\n    }\n}\n\n",
                "path": "/aztec/public_call_stack_item.nr"
            },
            "139": {
                "source": "use crate::context::{PrivateContext, PublicContext, Context};\nuse dep::std::option::Option;\nuse crate::hash::pedersen_hash;\n\n// docs:start:map\nstruct Map<V> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\nimpl<V> Map<V> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V,\n    ) -> Map<V> {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map {\n            context,\n            storage_slot,\n            state_var_constructor,\n        }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: Field) -> V {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = pedersen_hash([self.storage_slot, key],0);\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n",
                "path": "/aztec/state_vars/map.nr"
            },
            "140": {
                "source": "use crate::context::{Context};\nuse crate::oracle::storage::storage_read;\nuse crate::oracle::storage::storage_write;\nuse crate::types::type_serialization::TypeSerializationInterface;\nuse dep::std::option::Option;\n\n// docs:start:public_state_struct\nstruct PublicState<T, T_SERIALIZED_LEN> {\n    context: Context,\n    storage_slot: Field,\n    serialization_methods: TypeSerializationInterface<T, T_SERIALIZED_LEN>,\n}\n// docs:end:public_state_struct\n\nimpl<T, T_SERIALIZED_LEN> PublicState<T, T_SERIALIZED_LEN> {\n    // docs:start:public_state_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field,\n        serialization_methods: TypeSerializationInterface<T, T_SERIALIZED_LEN>,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicState {\n            context,\n            storage_slot,\n            serialization_methods,\n        }\n    }\n    // docs:end:public_state_struct_new\n\n    // docs:start:public_state_struct_read\n    pub fn read(self) -> T {\n        assert(self.context.private.is_none(), \"Public state writes only supported in public functions\");\n        storage_read(self.storage_slot, self.serialization_methods.deserialize)\n    }\n    // docs:end:public_state_struct_read\n\n    // docs:start:public_state_struct_write\n    pub fn write(self, value: T) {\n        assert(self.context.private.is_none(), \"Public state writes only supported in public functions\");\n        let serialize = self.serialization_methods.serialize;\n        let fields = serialize(value);\n        storage_write(self.storage_slot, fields);\n    }\n    // docs:end:public_state_struct_write\n}\n",
                "path": "/aztec/state_vars/public_state.nr"
            },
            "146": {
                "source": "struct BoundedVec<T, MaxLen> {\n    storage: [T; MaxLen],\n    len: Field,\n}\n\nimpl<T, MaxLen> BoundedVec<T, MaxLen> {\n    pub fn new(initial_value: T) -> Self {\n        BoundedVec { storage: [initial_value; MaxLen], len: 0 }\n    }\n\n    pub fn get(mut self: Self, index: Field) -> T {\n        assert(index as u64 < self.len as u64);\n        self.storage[index]\n    }\n\n    pub fn get_unchecked(mut self: Self, index: Field) -> T {\n        self.storage[index]\n    }\n\n    pub fn push(&mut self, elem: T) {\n        assert(self.len as u64 < MaxLen as u64);\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    pub fn push_array<Len>(&mut self, array: [T; Len]) {\n        let newLen = self.len + array.len();\n        assert(newLen as u64 <= MaxLen as u64);\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = newLen;\n    }\n\n    pub fn pop(&mut self) -> T {\n        assert(self.len as u64 > 0);\n\n        let elem = self.storage[self.len - 1];\n        self.len -= 1;\n        elem\n    }\n\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        let mut exceeded_len = false;\n        for i in 0..MaxLen {\n            exceeded_len |= i == self.len;\n            if (!exceeded_len) {\n                ret |= predicate(self.storage[i]);\n            }\n        }\n        ret\n    }\n}\n\n#[test]\nfn test_vec_push_pop() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    assert(vec.len == 0);\n    vec.push(2);\n    assert(vec.len == 1);\n    vec.push(4);\n    assert(vec.len == 2);\n    vec.push(6);\n    assert(vec.len == 3);\n    let x = vec.pop();\n    assert(x == 6);\n    assert(vec.len == 2);\n    assert(vec.get(0) == 2);\n    assert(vec.get(1) == 4);\n}\n\n#[test]\nfn test_vec_push_array() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    vec.push_array([2, 4]);\n    assert(vec.len == 2);\n    assert(vec.get(0) == 2);\n    assert(vec.get(1) == 4);\n}\n\n#[test(should_fail)]\nfn test_vec_get_out_of_bound() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    vec.push_array([2, 4]);\n    let _x = vec.get(2);\n}\n\n#[test(should_fail)]\nfn test_vec_get_not_declared() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    vec.push_array([2]);\n    let _x = vec.get(1);\n}\n\n#[test(should_fail)]\nfn test_vec_get_uninitialized() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    let _x = vec.get(0);\n}\n\n#[test(should_fail)]\nfn test_vec_push_overflow() {\n    let mut vec: BoundedVec<Field, 1> = BoundedVec::new(0);\n    vec.push(1);\n    vec.push(2);\n}\n\n#[test]\nfn test_vec_any() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    vec.push_array([2, 4, 6]);\n    assert(vec.any(|v| v == 2) == true);\n    assert(vec.any(|v| v == 4) == true);\n    assert(vec.any(|v| v == 6) == true);\n    assert(vec.any(|v| v == 3) == false);\n}\n\n#[test]\nfn test_vec_any_not_default() {\n    let default_value = 1;\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(default_value);\n    vec.push_array([2, 4]);\n    assert(vec.any(|v| v == default_value) == false);\n}\n",
                "path": "/aztec/types/vec.nr"
            },
            "148": {
                "source": "use crate::types::type_serialization::TypeSerializationInterface;\n\nglobal BOOL_SERIALIZED_LEN: Field = 1;\n\nfn deserializeBool(fields: [Field; BOOL_SERIALIZED_LEN]) -> bool {\n    fields[0] as bool\n}\n\nfn serializeBool(value: bool) -> [Field; BOOL_SERIALIZED_LEN] {\n    [value as Field]\n}\n\nglobal BoolSerializationMethods = TypeSerializationInterface {\n    deserialize: deserializeBool,\n    serialize: serializeBool,\n};\n",
                "path": "/aztec/types/type_serialization/bool_serialization.nr"
            },
            "153": {
                "source": "use dep::aztec::context::{PrivateContext, PublicContext, Context};\nuse dep::aztec::selector::compute_selector;\nuse dep::aztec::state_vars::{map::Map, public_state::PublicState};\nuse dep::aztec::types::type_serialization::bool_serialization::{BoolSerializationMethods,BOOL_SERIALIZED_LEN};\n\nuse crate::entrypoint::EntrypointPayload;\nuse crate::auth::IS_VALID_SELECTOR;\n\nstruct AccountActions {\n  context: Context,\n  is_valid_impl: fn(&mut PrivateContext, Field) -> bool,\n  approved_action: Map<PublicState<bool, BOOL_SERIALIZED_LEN>>,\n}\n\nimpl AccountActions {\n  pub fn init(context: Context, approved_action_storage_slot: Field, is_valid_impl: fn(&mut PrivateContext, Field) -> bool) -> Self {\n    AccountActions {\n      context: context,\n      is_valid_impl: is_valid_impl,\n      approved_action: Map::new(\n        context,\n        approved_action_storage_slot,\n        |context, slot| {\n          PublicState::new(context, slot, BoolSerializationMethods)\n        },\n      ),\n    }\n  }\n\n  pub fn private(context: &mut PrivateContext, approved_action_storage_slot: Field, is_valid_impl: fn(&mut PrivateContext, Field) -> bool) -> Self {\n    AccountActions::init(Context::private(context), approved_action_storage_slot, is_valid_impl)\n  }\n\n  pub fn public(context: &mut PublicContext, approved_action_storage_slot: Field, is_valid_impl: fn(&mut PrivateContext, Field) -> bool) -> Self {\n    AccountActions::init(Context::public(context), approved_action_storage_slot, is_valid_impl)\n  }\n  \n  // docs:start:entrypoint\n  pub fn entrypoint(self, payload: EntrypointPayload) {\n    let message_hash = payload.hash();\n    let valid_fn = self.is_valid_impl;\n    let private_context = self.context.private.unwrap();\n    assert(valid_fn(private_context, message_hash));\n    payload.execute_calls(private_context);\n  }\n  // docs:end:entrypoint\n\n  pub fn is_valid(self, message_hash: Field) -> Field {\n    let valid_fn = self.is_valid_impl;\n    if (valid_fn(self.context.private.unwrap(), message_hash)) {\n        IS_VALID_SELECTOR\n    } else {\n        0\n    }\n  }\n\n  pub fn is_valid_public(self, message_hash: Field) -> Field {\n    let value = self.approved_action.at(message_hash).read();\n    if (value){\n        IS_VALID_SELECTOR\n    } else {\n        0\n    }\n  }\n\n  pub fn internal_set_is_valid_storage(self, message_hash: Field, value: bool) {\n    self.approved_action.at(message_hash).write(value);\n  }\n}\n",
                "path": "/authwit/account.nr"
            },
            "154": {
                "source": "#[oracle(getAuthWitness)]\nfn get_auth_witness_oracle<N>(_message_hash: Field) -> [Field; N] {}\n\nunconstrained pub fn get_auth_witness<N>(message_hash: Field) -> [Field; N] {\n    get_auth_witness_oracle(message_hash)\n}\n",
                "path": "/authwit/auth_witness.nr"
            },
            "156": {
                "source": "use dep::aztec::abi;\nuse dep::aztec::types::vec::BoundedVec;\nuse dep::aztec::hash::pedersen_hash;\nuse dep::aztec::context::PrivateContext;\nuse dep::aztec::private_call_stack_item::PrivateCallStackItem;\nuse dep::aztec::public_call_stack_item::PublicCallStackItem;\nuse dep::protocol_types::constants::GENERATOR_INDEX__SIGNATURE_PAYLOAD;\n\nglobal ACCOUNT_MAX_CALLS: Field = 4;\n// 1 (ARGS_HASH) + 1 (FUNCTION_SELECTOR) + 1 (TARGET_ADDRESS) + 1 (IS_PUBLIC)\nglobal FUNCTION_CALL_SIZE: Field = 4;\n// 3 * 32 + 1\nglobal FUNCTION_CALL_SIZE_IN_BYTES: Field = 97;\n\nstruct FunctionCall {\n  args_hash: Field,\n  function_selector: Field,\n  target_address: Field,\n  is_public: bool,\n}\n\nimpl FunctionCall {\n  fn serialize(self) -> [Field; FUNCTION_CALL_SIZE] {\n    [self.args_hash, self.function_selector, self.target_address, self.is_public as Field]\n  }\n\n  fn to_be_bytes(self) -> [u8; FUNCTION_CALL_SIZE_IN_BYTES] {\n    let mut bytes: [u8; FUNCTION_CALL_SIZE_IN_BYTES] = [0; FUNCTION_CALL_SIZE_IN_BYTES];\n    let args_hash_bytes = self.args_hash.to_be_bytes(32);\n    for i in 0..32 { bytes[i] = args_hash_bytes[i]; }\n    let function_selector_bytes = self.function_selector.to_be_bytes(32);\n    for i in 0..32 { bytes[i + 32] = function_selector_bytes[i]; }\n    let target_address_bytes = self.target_address.to_be_bytes(32);\n    for i in 0..32 { bytes[i + 64] = target_address_bytes[i]; }\n    bytes[96] = self.is_public as u8;\n    bytes\n  }\n}\n\n// FUNCTION_CALL_SIZE * ACCOUNT_MAX_CALLS + 1\nglobal ENTRYPOINT_PAYLOAD_SIZE: Field = 17;\n// FUNCTION_CALL_SIZE_IN_BYTES * ACCOUNT_MAX_CALLS + 32\nglobal ENTRYPOINT_PAYLOAD_SIZE_IN_BYTES: Field = 420;\n\n// docs:start:entrypoint-struct\nstruct EntrypointPayload {\n  function_calls: [FunctionCall; ACCOUNT_MAX_CALLS],\n  nonce: Field,\n}\n// docs:end:entrypoint-struct\n\nimpl EntrypointPayload {\n  fn hash(self) -> Field {\n    pedersen_hash(\n      self.serialize(), \n      GENERATOR_INDEX__SIGNATURE_PAYLOAD\n    )\n  }\n\n  // Serializes the entrypoint struct\n  fn serialize(self) -> [Field; ENTRYPOINT_PAYLOAD_SIZE] {\n    let mut fields: BoundedVec<Field, ENTRYPOINT_PAYLOAD_SIZE> = BoundedVec::new(0); \n    for call in self.function_calls {\n      fields.push_array(call.serialize());\n    }\n    fields.push(self.nonce);\n    fields.storage\n  }\n\n  // Serializes the payload as an array of bytes. Useful for hashing with sha256.\n  fn to_be_bytes(self) -> [u8; ENTRYPOINT_PAYLOAD_SIZE_IN_BYTES] {\n    let mut bytes: [u8; ENTRYPOINT_PAYLOAD_SIZE_IN_BYTES] = [0; ENTRYPOINT_PAYLOAD_SIZE_IN_BYTES];\n\n    for i in 0..ACCOUNT_MAX_CALLS {\n      let item_bytes = self.function_calls[i].to_be_bytes();\n      for j in 0..FUNCTION_CALL_SIZE_IN_BYTES { \n        bytes[i * FUNCTION_CALL_SIZE_IN_BYTES + j] = item_bytes[j];\n      }\n    }\n\n    let nonce_bytes = self.nonce.to_be_bytes(32);\n    let nonce_offset = FUNCTION_CALL_SIZE_IN_BYTES * ACCOUNT_MAX_CALLS;\n    for j in 0..32 {\n      bytes[nonce_offset + j] = nonce_bytes[j];\n    }\n    \n    bytes\n  }\n\n  // Executes all private and public calls \n  // docs:start:entrypoint-execute-calls\n  fn execute_calls(self, context: &mut PrivateContext) {\n    for call in self.function_calls {\n      if call.target_address != 0 {\n        if call.is_public {\n          context.call_public_function_with_packed_args(\n            call.target_address, call.function_selector, call.args_hash\n          );\n        } else {\n          let _result = context.call_private_function_with_packed_args(\n            call.target_address, call.function_selector, call.args_hash\n          );\n        }\n      }\n    }\n  }\n  // docs:end:entrypoint-execute-calls\n}\n",
                "path": "/authwit/entrypoint.nr"
            },
            "157": {
                "source": "use dep::std::{schnorr::verify_signature};\nuse dep::aztec::address::compute_address;\nuse crate::auth_oracle::{AuthWitness};\n\npub fn recover_address(message_hash: Field, witness: AuthWitness) -> Field {\n    let message_bytes = message_hash.to_be_bytes(32);\n    let verification = verify_signature(witness.owner.x,\n        witness.owner.y,\n        witness.signature,\n        message_bytes);\n    assert(verification == true);\n\n    let reproduced_address = compute_address(witness.owner.x, witness.owner.y, witness.partial_address);\n    reproduced_address\n}\n",
                "path": "/usr/src/yarn-project/noir-contracts/src/contracts/schnorr_single_key_account_contract/src/util.nr"
            },
            "158": {
                "source": "use dep::aztec::types::point::Point;\nuse dep::authwit::auth_witness;\n\nstruct AuthWitness {\n    owner: Point,\n    signature: [u8; 64],\n    partial_address: Field,\n}\n\nimpl AuthWitness {\n    fn deserialize(values: [Field; 67]) -> Self {\n        let mut signature = [0; 64];\n        for i in 0..64 {\n            signature[i] = values[i + 2] as u8;\n        }\n        Self {\n            owner: Point::new(values[0], values[1]),\n            signature,\n            partial_address: values[66],\n        }\n    }\n}\n\nunconstrained pub fn get_auth_witness(message_hash: Field) -> AuthWitness {\n    let witness: [Field; 67] = auth_witness::get_auth_witness(message_hash);\n    AuthWitness::deserialize(witness)\n}\n",
                "path": "/usr/src/yarn-project/noir-contracts/src/contracts/schnorr_single_key_account_contract/src/auth_oracle.nr"
            }
        }
    }
}
