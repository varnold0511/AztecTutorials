{
    "name": "Uniswap",
    "functions": [
        {
            "name": "_approve_bridge_and_exit_input_asset_to_L1",
            "functionType": "open",
            "isInternal": true,
            "parameters": [
                {
                    "name": "token",
                    "type": {
                        "kind": "struct",
                        "path": "aztec::types::address::AztecAddress",
                        "fields": [
                            {
                                "name": "address",
                                "type": {
                                    "kind": "field"
                                }
                            }
                        ]
                    },
                    "visibility": "private"
                },
                {
                    "name": "token_bridge",
                    "type": {
                        "kind": "struct",
                        "path": "aztec::types::address::AztecAddress",
                        "fields": [
                            {
                                "name": "address",
                                "type": {
                                    "kind": "field"
                                }
                            }
                        ]
                    },
                    "visibility": "private"
                },
                {
                    "name": "amount",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                }
            ],
            "returnTypes": [
                {
                    "kind": "struct",
                    "path": "aztec::abi::PublicCircuitPublicInputs",
                    "fields": [
                        {
                            "name": "call_context",
                            "type": {
                                "kind": "struct",
                                "path": "aztec::abi::CallContext",
                                "fields": [
                                    {
                                        "name": "msg_sender",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "storage_contract_address",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "portal_contract_address",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "function_selector",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "is_delegate_call",
                                        "type": {
                                            "kind": "boolean"
                                        }
                                    },
                                    {
                                        "name": "is_static_call",
                                        "type": {
                                            "kind": "boolean"
                                        }
                                    },
                                    {
                                        "name": "is_contract_deployment",
                                        "type": {
                                            "kind": "boolean"
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "name": "args_hash",
                            "type": {
                                "kind": "field"
                            }
                        },
                        {
                            "name": "return_values",
                            "type": {
                                "kind": "array",
                                "length": 4,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "contract_storage_update_requests",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "struct",
                                    "path": "aztec::abi::ContractStorageUpdateRequest",
                                    "fields": [
                                        {
                                            "name": "storage_slot",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "old_value",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "new_value",
                                            "type": {
                                                "kind": "field"
                                            }
                                        }
                                    ]
                                }
                            }
                        },
                        {
                            "name": "contract_storage_read",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "struct",
                                    "path": "aztec::abi::ContractStorageRead",
                                    "fields": [
                                        {
                                            "name": "storage_slot",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "value",
                                            "type": {
                                                "kind": "field"
                                            }
                                        }
                                    ]
                                }
                            }
                        },
                        {
                            "name": "public_call_stack",
                            "type": {
                                "kind": "array",
                                "length": 4,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "new_commitments",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "new_nullifiers",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "new_l2_to_l1_msgs",
                            "type": {
                                "kind": "array",
                                "length": 2,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "unencrypted_logs_hash",
                            "type": {
                                "kind": "array",
                                "length": 2,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "unencrypted_log_preimages_length",
                            "type": {
                                "kind": "field"
                            }
                        },
                        {
                            "name": "block_header",
                            "type": {
                                "kind": "struct",
                                "path": "aztec::abi::BlockHeader",
                                "fields": [
                                    {
                                        "name": "note_hash_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "nullifier_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "contract_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "l1_to_l2_messages_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "archive_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "public_data_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "global_variables_hash",
                                        "type": {
                                            "kind": "field"
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "name": "prover_address",
                            "type": {
                                "kind": "field"
                            }
                        }
                    ]
                }
            ],
            "bytecode": "",
            "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
        },
        {
            "name": "_assert_token_is_same",
            "functionType": "open",
            "isInternal": true,
            "parameters": [
                {
                    "name": "token",
                    "type": {
                        "kind": "struct",
                        "path": "aztec::types::address::AztecAddress",
                        "fields": [
                            {
                                "name": "address",
                                "type": {
                                    "kind": "field"
                                }
                            }
                        ]
                    },
                    "visibility": "private"
                },
                {
                    "name": "token_bridge",
                    "type": {
                        "kind": "struct",
                        "path": "aztec::types::address::AztecAddress",
                        "fields": [
                            {
                                "name": "address",
                                "type": {
                                    "kind": "field"
                                }
                            }
                        ]
                    },
                    "visibility": "private"
                }
            ],
            "returnTypes": [
                {
                    "kind": "struct",
                    "path": "aztec::abi::PublicCircuitPublicInputs",
                    "fields": [
                        {
                            "name": "call_context",
                            "type": {
                                "kind": "struct",
                                "path": "aztec::abi::CallContext",
                                "fields": [
                                    {
                                        "name": "msg_sender",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "storage_contract_address",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "portal_contract_address",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "function_selector",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "is_delegate_call",
                                        "type": {
                                            "kind": "boolean"
                                        }
                                    },
                                    {
                                        "name": "is_static_call",
                                        "type": {
                                            "kind": "boolean"
                                        }
                                    },
                                    {
                                        "name": "is_contract_deployment",
                                        "type": {
                                            "kind": "boolean"
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "name": "args_hash",
                            "type": {
                                "kind": "field"
                            }
                        },
                        {
                            "name": "return_values",
                            "type": {
                                "kind": "array",
                                "length": 4,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "contract_storage_update_requests",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "struct",
                                    "path": "aztec::abi::ContractStorageUpdateRequest",
                                    "fields": [
                                        {
                                            "name": "storage_slot",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "old_value",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "new_value",
                                            "type": {
                                                "kind": "field"
                                            }
                                        }
                                    ]
                                }
                            }
                        },
                        {
                            "name": "contract_storage_read",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "struct",
                                    "path": "aztec::abi::ContractStorageRead",
                                    "fields": [
                                        {
                                            "name": "storage_slot",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "value",
                                            "type": {
                                                "kind": "field"
                                            }
                                        }
                                    ]
                                }
                            }
                        },
                        {
                            "name": "public_call_stack",
                            "type": {
                                "kind": "array",
                                "length": 4,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "new_commitments",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "new_nullifiers",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "new_l2_to_l1_msgs",
                            "type": {
                                "kind": "array",
                                "length": 2,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "unencrypted_logs_hash",
                            "type": {
                                "kind": "array",
                                "length": 2,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "unencrypted_log_preimages_length",
                            "type": {
                                "kind": "field"
                            }
                        },
                        {
                            "name": "block_header",
                            "type": {
                                "kind": "struct",
                                "path": "aztec::abi::BlockHeader",
                                "fields": [
                                    {
                                        "name": "note_hash_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "nullifier_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "contract_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "l1_to_l2_messages_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "archive_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "public_data_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "global_variables_hash",
                                        "type": {
                                            "kind": "field"
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "name": "prover_address",
                            "type": {
                                "kind": "field"
                            }
                        }
                    ]
                }
            ],
            "bytecode": "",
            "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
        },
        {
            "name": "compute_note_hash_and_nullifier",
            "functionType": "unconstrained",
            "isInternal": false,
            "parameters": [
                {
                    "name": "contract_address",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                },
                {
                    "name": "nonce",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                },
                {
                    "name": "storage_slot",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                },
                {
                    "name": "serialized_note",
                    "type": {
                        "kind": "array",
                        "length": 0,
                        "type": {
                            "kind": "field"
                        }
                    },
                    "visibility": "private"
                }
            ],
            "returnTypes": [
                {
                    "kind": "array",
                    "length": 4,
                    "type": {
                        "kind": "field"
                    }
                }
            ],
            "bytecode": "H4sIAAAAAAAA/+1VQQ4CIQws7C5sheg/PGHiA/b/rxK0TSYsnuwejDZpgBaGYWggEpGjl03VZ9qb5jdpy2d2c3ZY5Uie/kt4ToY83YCng7po7VI9VI/VrxJn2tcOy1zEYlnbzEMsSn+Sts1ZjXUKwM0IswT7+ywM2sygkWqzDDQPA83jQPMVMC6Qp+5OzrKGbc92x7tWc914gz7D+Y6oh5Mt5rMekjFmw8igieqn3BPkE+iVjfVysKfi6hj5/bn+NleGGL5Bml8h5rtz4DuXAaN/I0w/T5INPGze7N2np/YAao7Tjj0JAAA=",
            "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
        },
        {
            "name": "constructor",
            "functionType": "secret",
            "isInternal": false,
            "parameters": [],
            "returnTypes": [],
            "bytecode": "H4sIAAAAAAAA/+XdZZOTZxSH8V0gSd27uLu1ySbZJFVK3alSL6Rk6y1V6qXU3XB390/IuWbCwAt4xb0z3HNl5j9590x+m+yj5z7nZE9Pz7aeM6/e7vuC7nv5wl6VQmyjcI7tVssDtVqn0d+pVCtLy/2tdrNertXbA81Ks1Jv1pf1N6vVTrPWbLTarUa5ValVO5XBeqs62N1wId1nLA+FuxjbKA6Bu3iRu0uxjdIQuEuJ3ef7vV/o5xw5RJ9zWOLvqTeheVQm5mEJzaMzMQ9PaB6TiXlEQvPYTMyFhOZxmZiLCc3jMzGXEponZGIemdA8UWieJDRPFpqnCM1TheZpQvN0oXmG0DxTaJ4lNM8WmucIzXOF5nlC83yh+Sah+WahuSw0V4TmfqG5KjTXhOa60DwgNDeE5qbQ3BKabxGabxWabxOabxea7xCa7xSaFwjNdwnNC4Xmu4Xme4Tme4Xm+4Tm+4XmB4TmB4Xmh4Tmh4XmR4TmR4Xmx4Tmx4XmRULzE0Lzk0LzU0Lz00LzM0Lzs0LzYqH5OaH5eaH5BaH5RaH5JaH5ZaH5FaH5VaF5idC8VGhuC82vCc3LhOaO0DwoNL8uNL8hNL8pNL8lNL8tNL8jNL8rNL8nNL8vNC8Xmj8Qmj8Umj8Smj8Wmj8Rmj8VmlcIzZ8JzZ8LzV8IzV8KzV8JzV8Lzd8Izd8KzSuF5u+E5lVC8/dC8w9C849C809C889C8y9C869C829C8+9C8x9C859C819C899C8z9C879C839C8/9C82qheY3QvFZoXic0rxeaNwjNG4XmTULzZqF5i9C8VWjeJjRvF5p3CM07heZdmZgvSWjenYn50oTmPZmYL0to3puJ+fKE5n2ZmK9IaN6fifnKhOYDmZivSmg+mIn56oTmQ5mYr0loPpyJ+dqE5iOZmK9LaD6aifn6hOZjmZhvSGg+non5xoTmE5mY+xKaTyY093W309s1D4+MiBQixUgpwjUh10hcM3AOzTkl51icc3AM5pjEPpp9Fv/D/Kb5jvvO+ntu6r6PioyOjImMjYyLjI9MiEyMTIpMjkyJTI1Mi0yPzIjMjMyKzI7MicyNzIvMjzDjnpnvfInMBGdGNjOjmaHMTGFm7DYizGBlJikzOplZyQxHZhoy4+/0zDtmoi2MMDOLGVLMVGLGEDN3mEHDTBZmlDCzgxkWzHRgxgE9/xdF6AlPj3R6htNDm57S9FheHKEHLz1p6dFKz1J6eNLTkh6P9DxcEqEnXjtCzzR6iNFTix5T9FyiBxE9eehRQ88WepjQ04MeF/R8WB6hJwBr5Fkzzhpq1hSzxnZFhDWYrElkjR5r1ljDxZom1viw5mVlhDURqyLUzFNDTk01NcbU3FKDSk0mNYrU7FHDRk0XNU7U/FADQ00INRLUDPAMnWfKPGPlmSPP4HgmxTMafhPcw+eeNvd4uee5PcI9Me4Rcc+EewhcU3ONyTUX1yCck3OOyjkb5zAc0znGsc9nH8g+gf+R069TXMw0LzyaAAA=",
            "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
        },
        {
            "name": "is_valid_public",
            "functionType": "open",
            "isInternal": false,
            "parameters": [
                {
                    "name": "message_hash",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                }
            ],
            "returnTypes": [
                {
                    "kind": "struct",
                    "path": "aztec::abi::PublicCircuitPublicInputs",
                    "fields": [
                        {
                            "name": "call_context",
                            "type": {
                                "kind": "struct",
                                "path": "aztec::abi::CallContext",
                                "fields": [
                                    {
                                        "name": "msg_sender",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "storage_contract_address",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "portal_contract_address",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "function_selector",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "is_delegate_call",
                                        "type": {
                                            "kind": "boolean"
                                        }
                                    },
                                    {
                                        "name": "is_static_call",
                                        "type": {
                                            "kind": "boolean"
                                        }
                                    },
                                    {
                                        "name": "is_contract_deployment",
                                        "type": {
                                            "kind": "boolean"
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "name": "args_hash",
                            "type": {
                                "kind": "field"
                            }
                        },
                        {
                            "name": "return_values",
                            "type": {
                                "kind": "array",
                                "length": 4,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "contract_storage_update_requests",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "struct",
                                    "path": "aztec::abi::ContractStorageUpdateRequest",
                                    "fields": [
                                        {
                                            "name": "storage_slot",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "old_value",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "new_value",
                                            "type": {
                                                "kind": "field"
                                            }
                                        }
                                    ]
                                }
                            }
                        },
                        {
                            "name": "contract_storage_read",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "struct",
                                    "path": "aztec::abi::ContractStorageRead",
                                    "fields": [
                                        {
                                            "name": "storage_slot",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "value",
                                            "type": {
                                                "kind": "field"
                                            }
                                        }
                                    ]
                                }
                            }
                        },
                        {
                            "name": "public_call_stack",
                            "type": {
                                "kind": "array",
                                "length": 4,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "new_commitments",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "new_nullifiers",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "new_l2_to_l1_msgs",
                            "type": {
                                "kind": "array",
                                "length": 2,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "unencrypted_logs_hash",
                            "type": {
                                "kind": "array",
                                "length": 2,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "unencrypted_log_preimages_length",
                            "type": {
                                "kind": "field"
                            }
                        },
                        {
                            "name": "block_header",
                            "type": {
                                "kind": "struct",
                                "path": "aztec::abi::BlockHeader",
                                "fields": [
                                    {
                                        "name": "note_hash_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "nullifier_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "contract_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "l1_to_l2_messages_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "archive_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "public_data_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "global_variables_hash",
                                        "type": {
                                            "kind": "field"
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "name": "prover_address",
                            "type": {
                                "kind": "field"
                            }
                        }
                    ]
                }
            ],
            "bytecode": "",
            "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
        },
        {
            "name": "nonce_for_burn_approval",
            "functionType": "unconstrained",
            "isInternal": false,
            "parameters": [],
            "returnTypes": [
                {
                    "kind": "field"
                }
            ],
            "bytecode": "H4sIAAAAAAAA/8VUSQ7CMAx0QhYCEl/gzqnwgr6BH1Si4ogE/F8QyKiDVfXSVPgS10lmnLFdIyJGvraSwYzyD8UPFG/L2sy0QHy1MP0bwxesRDnbsu7KW2xd3tN2RMNA2lbiOXJ9GFeIK8lvHRFbKS0S+djL2u1p34/cCSN8fB8xJ4MO+i5r5NVbmnn20Yh5WvoG10blsGQu0AG4TuXyT95Yl7fJGGviRV9E0h38OJfI5/6x6lyUZWYqyNADtTC5/2FTs7tkD2b98H96PG/37tqf++5iKC2nUrSUGvs88iipo9hUGSPFgMOl1fJUe7/GNWrN9gJfUAj+EAcAAA==",
            "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
        },
        {
            "name": "swap_private",
            "functionType": "secret",
            "isInternal": false,
            "parameters": [
                {
                    "name": "input_asset",
                    "type": {
                        "kind": "struct",
                        "path": "aztec::types::address::AztecAddress",
                        "fields": [
                            {
                                "name": "address",
                                "type": {
                                    "kind": "field"
                                }
                            }
                        ]
                    },
                    "visibility": "private"
                },
                {
                    "name": "input_asset_bridge",
                    "type": {
                        "kind": "struct",
                        "path": "aztec::types::address::AztecAddress",
                        "fields": [
                            {
                                "name": "address",
                                "type": {
                                    "kind": "field"
                                }
                            }
                        ]
                    },
                    "visibility": "private"
                },
                {
                    "name": "input_amount",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                },
                {
                    "name": "output_asset_bridge",
                    "type": {
                        "kind": "struct",
                        "path": "aztec::types::address::AztecAddress",
                        "fields": [
                            {
                                "name": "address",
                                "type": {
                                    "kind": "field"
                                }
                            }
                        ]
                    },
                    "visibility": "private"
                },
                {
                    "name": "nonce_for_unshield_approval",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                },
                {
                    "name": "uniswap_fee_tier",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                },
                {
                    "name": "minimum_output_amount",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                },
                {
                    "name": "secret_hash_for_redeeming_minted_notes",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                },
                {
                    "name": "secret_hash_for_L1_to_l2_message",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                },
                {
                    "name": "deadline_for_L1_to_l2_message",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                },
                {
                    "name": "canceller_for_L1_to_L2_message",
                    "type": {
                        "kind": "struct",
                        "path": "aztec::types::address::EthereumAddress",
                        "fields": [
                            {
                                "name": "address",
                                "type": {
                                    "kind": "field"
                                }
                            }
                        ]
                    },
                    "visibility": "private"
                },
                {
                    "name": "caller_on_L1",
                    "type": {
                        "kind": "struct",
                        "path": "aztec::types::address::EthereumAddress",
                        "fields": [
                            {
                                "name": "address",
                                "type": {
                                    "kind": "field"
                                }
                            }
                        ]
                    },
                    "visibility": "private"
                }
            ],
            "returnTypes": [],
            "bytecode": "",
            "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
        },
        {
            "name": "swap_public",
            "functionType": "open",
            "isInternal": false,
            "parameters": [
                {
                    "name": "sender",
                    "type": {
                        "kind": "struct",
                        "path": "aztec::types::address::AztecAddress",
                        "fields": [
                            {
                                "name": "address",
                                "type": {
                                    "kind": "field"
                                }
                            }
                        ]
                    },
                    "visibility": "private"
                },
                {
                    "name": "input_asset_bridge",
                    "type": {
                        "kind": "struct",
                        "path": "aztec::types::address::AztecAddress",
                        "fields": [
                            {
                                "name": "address",
                                "type": {
                                    "kind": "field"
                                }
                            }
                        ]
                    },
                    "visibility": "private"
                },
                {
                    "name": "input_amount",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                },
                {
                    "name": "output_asset_bridge",
                    "type": {
                        "kind": "struct",
                        "path": "aztec::types::address::AztecAddress",
                        "fields": [
                            {
                                "name": "address",
                                "type": {
                                    "kind": "field"
                                }
                            }
                        ]
                    },
                    "visibility": "private"
                },
                {
                    "name": "nonce_for_transfer_approval",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                },
                {
                    "name": "uniswap_fee_tier",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                },
                {
                    "name": "minimum_output_amount",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                },
                {
                    "name": "recipient",
                    "type": {
                        "kind": "struct",
                        "path": "aztec::types::address::AztecAddress",
                        "fields": [
                            {
                                "name": "address",
                                "type": {
                                    "kind": "field"
                                }
                            }
                        ]
                    },
                    "visibility": "private"
                },
                {
                    "name": "secret_hash_for_L1_to_l2_message",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                },
                {
                    "name": "deadline_for_L1_to_l2_message",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                },
                {
                    "name": "canceller_for_L1_to_L2_message",
                    "type": {
                        "kind": "struct",
                        "path": "aztec::types::address::EthereumAddress",
                        "fields": [
                            {
                                "name": "address",
                                "type": {
                                    "kind": "field"
                                }
                            }
                        ]
                    },
                    "visibility": "private"
                },
                {
                    "name": "caller_on_L1",
                    "type": {
                        "kind": "struct",
                        "path": "aztec::types::address::EthereumAddress",
                        "fields": [
                            {
                                "name": "address",
                                "type": {
                                    "kind": "field"
                                }
                            }
                        ]
                    },
                    "visibility": "private"
                },
                {
                    "name": "nonce_for_swap_approval",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                }
            ],
            "returnTypes": [
                {
                    "kind": "struct",
                    "path": "aztec::abi::PublicCircuitPublicInputs",
                    "fields": [
                        {
                            "name": "call_context",
                            "type": {
                                "kind": "struct",
                                "path": "aztec::abi::CallContext",
                                "fields": [
                                    {
                                        "name": "msg_sender",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "storage_contract_address",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "portal_contract_address",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "function_selector",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "is_delegate_call",
                                        "type": {
                                            "kind": "boolean"
                                        }
                                    },
                                    {
                                        "name": "is_static_call",
                                        "type": {
                                            "kind": "boolean"
                                        }
                                    },
                                    {
                                        "name": "is_contract_deployment",
                                        "type": {
                                            "kind": "boolean"
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "name": "args_hash",
                            "type": {
                                "kind": "field"
                            }
                        },
                        {
                            "name": "return_values",
                            "type": {
                                "kind": "array",
                                "length": 4,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "contract_storage_update_requests",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "struct",
                                    "path": "aztec::abi::ContractStorageUpdateRequest",
                                    "fields": [
                                        {
                                            "name": "storage_slot",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "old_value",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "new_value",
                                            "type": {
                                                "kind": "field"
                                            }
                                        }
                                    ]
                                }
                            }
                        },
                        {
                            "name": "contract_storage_read",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "struct",
                                    "path": "aztec::abi::ContractStorageRead",
                                    "fields": [
                                        {
                                            "name": "storage_slot",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "value",
                                            "type": {
                                                "kind": "field"
                                            }
                                        }
                                    ]
                                }
                            }
                        },
                        {
                            "name": "public_call_stack",
                            "type": {
                                "kind": "array",
                                "length": 4,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "new_commitments",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "new_nullifiers",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "new_l2_to_l1_msgs",
                            "type": {
                                "kind": "array",
                                "length": 2,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "unencrypted_logs_hash",
                            "type": {
                                "kind": "array",
                                "length": 2,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "unencrypted_log_preimages_length",
                            "type": {
                                "kind": "field"
                            }
                        },
                        {
                            "name": "block_header",
                            "type": {
                                "kind": "struct",
                                "path": "aztec::abi::BlockHeader",
                                "fields": [
                                    {
                                        "name": "note_hash_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "nullifier_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "contract_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "l1_to_l2_messages_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "archive_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "public_data_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "global_variables_hash",
                                        "type": {
                                            "kind": "field"
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "name": "prover_address",
                            "type": {
                                "kind": "field"
                            }
                        }
                    ]
                }
            ],
            "bytecode": "",
            "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
        }
    ],
    "events": [],
    "debug": {
        "debugSymbols": [
            "",
            "",
            "eJyrVsrJT04syczPK1ayqq6tBQAz9wY7",
            "eJyrVsrJT04syczPK1ayqq6tBQAz9wY7",
            "",
            "eJzNlUEKgzAQRe8y61AyM1GrVyldSGtBEFuqO8nda4tii6HZiPxdBv4Pb5F5Gai5X8q+vrcdFQPZQ0LFaaDuUbbvuevLZ08FM6szVLXXzzkTb+hWN9U4ebNOSypzWFWXrLOBtCbzzZonS1bFn83Ik4LxZGA8RzCeHIyHLRoQowEJGpCiATk0IDRLM5qmGc3TjCZqRjO1oJla0EwtaKYWNFMLmqlld1M7y1PYif0BWmeF0ykr8gXv8gl+d6tvCb/7D7AhvAbVIzabS86t35oG9RArBVc4VgquWawUXIVYKfgE/5S8fwERGkCC",
            "eJztnc1uIzcaRd/F60ZAsvhTlVcZzCKYyQABgmQwyS7odx91ukUpKrIYm1e8vAWt4gCq9vEn+zuiJR/98fbzr//64feffv3lt7fv/3hb3r7/xx9vv/33h1++/N9vv//wv9/fvjef3n785d+X/37+9Pafn37+8e17+/nT7lbWLzF+u+Xl43XNt96W0s2Ds/Z68+Bi4+ZbStcbGxdut42f//npzUtSh4HUiw+Z2pvQQR1L1DEs7tslMdntmH3Z0vWrvHy83n2C8OSJp+HsuLmv3eze2AzjjY/37JdPsAE+gXEHn8AawGcIeUTe+tQYvw9pyzdP1j0C2eFAm13yzbfFPAK52YCKPmACFVc9E6i4xZlA/QsaDNS/dcFAiFUKBUKsXiSQG7+pG0CETR3NDSilRyDCpj4GImzqYyDCpj4GImzqYyDCpj4GImzqYyDCpj4GImzqQ6CFsKmPgYZv6mDuzofGrY9Awzd1C2j4pm4BDd/ULaDhm7oFNHxTt4CGb+oW0PBN3QIavqkbQH74pm4Bjd/U3t39Nsw//jrGj9/UDaDxm7oBNH5TN4DGb+oG0PhN3QAav6kbQOM3dQNo/KY+BgrjN3UDiLCp15s6/LY9AhE29TEQYVMfAxE29TEQYVMfAxE29TEQYVMfAxE29TEQYVMfAkXCpj4GGr+pw90zzCEuj0DjN3UDaPymbgCN39QNoPGbugE0flM3gMZv6gbQ+E3dABq/qY+B0vhN3QAavqmjX/OLUS6f5/EpzjR8U8eLzDJQvH9x0leg4Zs6xvxvXz5Ou7ts+KZOZs0TStbvJjR8Uycb89PkydnHX+ml4Zs6uSXegHaPh9LwTZ0Wm2+e/O4lX2n4pk5+yc+XpWAeXxSXhm/qFPztLguhcfPor99w8e6ll3Yp3nZx1y/18gXc/fi+/8WOw3UhMZXhznrnVNYrSDKpMRVrty2fpJyxjZfGepNt7u3dP/6BIQ737BOHeFFAfkzhLqv4eC7WrEueudn6xjj80cE5xzj+Mc0pxzj+kdgpxzj+8eMpxzj+Ue8pxzj+sfopxzj7CUNjjNvsRxKRMZ7pDEMc4+sUAxnj6xQDGePrFAMZ4+sUAxnj6xQDGePrFAMZ46lOMYvL//Rliq41xsXnJ/SMNz3phu1UpxjaGK051TGGOMdTnWOIczzVQYY4x1OdZIhzPNVRhjjHU51liHM81WGGOMdTnWaIc3wdZzBzfJ1nIHMcH5U76Rxf5xnMHF/nGcwcX+cZzBxPdZ5J2+23uGsKXYOZ/IAS1uurhlNYGoNpfKXlI0RK+TXM292fx5S+0rheb7re/ercfvkSdrddg8k3Dn/9C4XCTIBxX1sJTc7xdeJCwLbSr3za15n/SmgN6fEPPGylXfk0mCUcwFS6lU+D2a4/omtc7fF3wGbzv7wtZk9efvg1BXnIP6Jb2FWEbKWEqUBefoihQF6WugJ52boK5IMtCiQf7EUg+WDTAckHaxFHXimKKpDP7NCwZvL7c8s38pkdekw+s0OPyWd26DH5zA49Jp/ZocfkMzv0mHxmhx6Tz+zQQ/JK61WBfGKHRnP95d8W3e7NhSr1WAXyiR3aIJ/YoQ3yiR3aIJ/YoQ3yiR3aIJ/YoQ3yiR16TF6p8CqQz+tQa4zz3259+djbHfu8Fm2zz+vRNvu8Jm2zz+vSNvu8Nm2zz+vTNvu8Rm2zz+vUJnulmKzBPrVX88s1Lh9vu99NVzrMGuxTe7XBPrVXG+xTe7XBPrVXG+xTe7XBPrVXG+xTe/WYvdK31mCf2avW3x4T2Lh7B/dKNVuDfWavtthn9mqLfWavtthn9mqLfWavtthn9mqLfWavNtgrIXAN9om96m5PA18+3r2Ls61UsjXYJ/Zqk31irzbZJ/Zqk31irzbZJ/Zqk31irzbZJ/Zqi71Ss9Vgn9mr0eS/83LR754brnRbJ2GP+fGMS273+/dKLHUO9uTNjX3ds8/s1dXc2NfF79gn9urifP6L3GXZvbuRrbQ452Bfbs83Lcv+rwkrAcxJ2Lf8J6KLj49vJmcr1ck52H3K+30Ju7d5s5XU4xzs4fauRUuMj25ylbziHOzJ3OZ+/8ftxZv7zBHuCgT2y3raM8Pe4spVuoqvAf7tAU78CON9AwzummIId22F8gDTlgsbaQvmeIC4NxNzleziyae9pmz9Na2NmIEL21WzLnYVHpyZ+FHcE6d9+exXjs03pt0Y4MwPJd+3XfPCDNvSGGBjJsWHqMnE3F9x63o4E3t5MJYfwS/b/Q/Es6Mnrtw1fCo9LmXiyjXBd9F7YzPOZbE/nkBcObT3zk9h3NGnKDfo3vkp3pUS8iHlY5dPu3e5deWa21OJNrvkm2+7d7d25S4alaiobipRUW9UoqIvqET92xpN1L+B0USIrYolQixhKFE5FUUlIuzs/G9fPt79ot2V005UIsLObhARdnaDiLCzG0SEnd0gIuzsBhFhZzeICDv7mKicJqISDd/ZwdydHc0uguTKKSEq0fCd3SQavrObRMN3dpNo+M5uEg3f2U2i4Tu7STR8Z7eIyikcKtH4ne3d3W/M/O63NeV0DZVo/M5uEY3f2S2i8Tu7RTR+Z7eIxu/sFtH4nd0iGr+zG0Tl9AqViLCz15tF/Pb44iBXDqVQiQg7u0FE2NkNIsLObhARdnaDiLCzG0SEnd0gIuzsY6Jy2INKNH5nh7tnpkN8fGGhK0c4qETjd3aLaPzObhGN39ktovE7u0U0fme3iMbv7BbR+J3dICpHI6hEw3d29Gt+JUsM+2dFy4GHpxLd3vDIxnj/+qZvRMN3doz5TckuH+9eMO/KMYZnEiWz5hkl6/czGr6zk4352fXk/vp+XH8SDd/ZyS23t3tz+8dH5RzCU4kWm2+e/P5VY+XIwVOJ/JKfX0th9+dDrpwueCrR+9690OcXzt69jLP8Jn3A1/iXqwivsQy31xPf69Jut780csY2XmYL/JOGcvpBdIoXE9zeMdTdvWK98s6r65KHbrbOOQ5/nHDSOY5/dHPOOY5/THbOOY5/JHnOOY5//HvOOY5/1H7OOc5+1hCZYzkt85rju+d4ptMMc46v8wxmjq/zDGaOr/MMZo6v8wxmjq/zDGaOr/MMZo6nOs8suUtz+fi+EVye4+LzM33G32WDPjLHU51naHNcykmv1xzfPcdTnWeIczzVeYY4x1OdZ4hzPNV5hjjHU51niHM81XmGOMdTnWeIc3ydZzBzfJ1nIHMcX6s76Rxf5xnMHF/nGcwcX+cZzBxPdZ5J2+33uGsKXYOZ/IAS8tucprA0BtP4SstHCL+F/Anu3p7cfr2m/HA5bPneisv2eE35oWHKRdv0l6/k6zXlh0GH11Rih8fXlPV2fE15la/u+uRAWu/equLbNeW1dXxN+Uf0+Jryd+/xNeXvgy0vm3VJ8fA7fnE5rb1cxnO7bVhLP9rx1uG+fVO68sq7FYCtjfc3/pO8/N2oQF7+mVAgL/9kCpBXwnoK5OUtpUBe3pUK5OWNrUBe9oYCedleCuSyDq0EBxXIZR1aCRgKkFdChwrksg6thBMVyGUdWgkxKpDLOrQSdlQgl3VoJRSpQC7r0Ep4UoFc1qGVkKUCuaxDK2FMBXJZh1ZCmwrksg6thDsVyGUdWgmBKpDLOrQSFlUgl3VoJVSqQC7r0Er4VIFc1qGVkKoCuaxDK2FWBXJZh1ZCrwrksg6thGMVyGUdWgnRKpDLOrQStlUgl3VopVGrQC7r0Eq6VYFc1qGVPKkCuaxDKwlOBXJZh1Yykwrksg6tpBTfQ74Ek8nTOo6836Es8n6Hssj7Hcoi73coi7zfoSzyfoeyyPsdyiLvdyiLvN+hHHJfyXcpkKs61FcSVQrkqg71RtWhvhI+UiBXdaivxH0UyFUd6isBGwHySjJGgVzWoZUsigK5rEMr6Q8FclmHVlobCuSyDq10RxTIZR1aabAokMs6tNKjUSCXdWilzaNALutQQKeIRS7rUECniEUu61BAp4hFLutQQKeIRS7rUECniEUu61BAp4hFLutQQKeIRS7rUECniEUu61BAp4hFLutQQKeIRS7rUECniEUu61BAp4hFLutQQKeIRS7rUECniEUu61BAp8jb/Mr5i9jGkfc7lEXe71AWeb9DWeT9DmWR9zuURA7oFLHI+x3KIu93KIu836EsclmHAjpFLHJZhwI6RSxyWYcCOkUkckCniEUu61BAp4hFLutQQKeIRS7rUECniEUu61BAp4hFLutQQKeIRS7rUECniEUu61BAp4hFLutQQKeIRS7rUECniEUu61BAp4hFLutQQKeIRS7rUECniEUu61BAp4hFLutQQKeIRa7q0ADoFLHIVR0aAJ0iFrmqQ4NRdWgAdIpY5KoODYBOEYtc1aEB0CkikQM6RSxyWYcCOkUsclmHAjpFLHJZhwI6RSxyWYcCOkV+zeRhWcaRAxzKIQd0iljkAIeSyAEOJZEDHEoiBziURA5wKIkc4FASOcChJHJZhwI6RSRyQKeIRS7rUECniEUu61BAp4hFLutQQKeIRS7rUECniEUu61BAp4hFLutQQKeIRS7rUECniEUu61BAp4hFLutQQKeIRS7rUECniEUu61BAp4hFLutQRKeIRC7rUESniEQu61BEp4hELutQRKeIRC7rUESniEQu61BEp4hELutQRKeIRC7rUESniEQu61BEp4hELutQRKeIRC7rUESniEQu61BEp4hELutQRKeIRC7rUESniEQu61BAp+jyGP9KHs1A8n6Hssj7Hcoi73coi7zfoSzyfoeyyPsdyiLvdyiJHNApYpH3O5RFLutQQKeIRS7rUECniEUu61BAp4hFLutQQKeIQx4BnSIWuapDI6BTxCJXdWg0qg6NgE4Ri1zVoRHQKWKRqzo0AjpFJHJAp4hFLutQQKeIRS7rUECniEUu61BAp4hFLutQQKeIRS7rUECniEUu61BAp4hFLutQQKeIRS7rUECniEUu61BAp4hFLutQQKeIRS7rUECniEUu61BAp4hFLutQQKeIRS7rUECniEUu61BAp4hFLutQQKeIRS7rUECniEUu61BApyhGcyVP1o8j73coi7zfoSzyfoeSyAGdIhZ5v0NZ5P0OZZH3O5RF3u9QFnm/Q1nksg4FdIpY5LIOBXSKSOSAThGLXNahgE4Ri1zWoYBOEYtc1qGAThGLXNahgE4Ri1zWoYBOEYtc1qGAThGLXNahgE4Ri1zWoYBOEYtc1qGAThGLXNahgE4Ri1zWoYBOEYtc1qGAThGLXNahgE4Ri1zWoYBOEYtc1qGAThGLXNahgE4Ri1zWoYBOEYtc1qGAThGLXNahgE4Ri1zVoQnQKWKRqzo0ATpFLHJVhyaj6tAE6BSxyFUdmgCdIha5qkMToFNEIgd0ilIMV/LVDnvlfAJ0iljk/Q5lkfc7lEXe71AWeb9DWeT9DmWR9zuURd7vUBZ5v0NJ5IBOEYtc1qGAThGLXNahgE4Ri1zWoYBOEYtc1qGAThGLXNahgE4Ri1zWoYBOEYtc1qGAThGLXNahgE4Ri1zWoYBOEYtc1qGAThGLXNahgE4Ri1zWoYBOEYtc1qGAThGLXNahgE4Ri1zWoYBOEYtc1qGAThGLXNahgE4Ri1zWoYBOEYtc1qGAThGLXNahgE4Ri1zWoYBOEYtc1qGAThGLXNahgE4Ri1zWoYBOEYtc1qGAThGLXNahgE4Ri1zWoYBO0RrtlXwzcRx5v0NZ5P0OZZH3O5RF3u9QFnm/Q0nkgE4Ri7zfoSzyfoeyyPsdyiKXdSigU8Qil3UooFPEIpd1KKBTRCIHdIpY5LIOBXSKWOSyDgV0iljksg4FdIpY5LIOBXSKWOSqDl0BnSIWuapDV0CniEWu6tDVqDp0BXSKWOSqDl0BnSIWuapDV0CniEQO6BSxyGUdCugUschlHQroFLHIZR0K6BSxyGUdCugUschlHQroFLHIZR0K6BSxyGUdCugUschlHQroFLHIZR0K6BSxyGUdCugUschlHQroFLHIZR0K6BSxyGUdCugUschlHQroFG2Lz+SrGUfe71ASOaBTxCLvdyiLvN+hLPJ+h7LI+x3KIu93KIu836Es8n6HsshlHQroFJHIAZ0iFrmsQwGdIha5rEMBnSIWuaxDAZ0iFrmsQwGdIha5rEMBnSIWuaxDAZ0iFrmsQwGdIha5rEMBnSIWuaxDAZ0iFrmsQwGdIha5rEMBnSIWuaxDAZ0iFrmsQwGdIha5rEMBnSIWuaxDAZ0iFrmsQwGdIha5rEMBnSIWuaxDAZ0iFrmsQwGdIha5rEMBnSIWuaxDAZ0iFrmsQwGdIha5rEMBnSIWuaxDAZ0iFrmqQzdAp4hFrurQrb9T5I29vnLem2UbR97tUBp5t0Np5N0OpZF3O5RG3u1QGnm3Q2nk3Q5lkfd3imjk3Q6lkcs6tL9TRCOXdWh/p4hGLuvQ/k4RjVzWof2dIhZ5f6eIRi7r0P5OEY1c1qH9nSIauaxD+ztFNHJZh/Z3imjksg7t7xTRyGUd2t8popHLOrS/U0Qjl3Vof6eIRi7r0P5OEY1c1qH9nSIauaxD+ztFNHJZh/Z3imjksg7t7xTRyGUd2t8popHLOrS/U0Qjl3Vof6eIRi7r0P5OEY1c1qH9nSIauaxD+ztFNHJZh/Z3imjksg7t7xTRyGUd2t8popHLOrS/U+Q3n8m3uDbIXbzSuO32KvstfoXp1yIQpt90QJh+eeFg+ps/OJj1u+JkrDchXb/tvfXpdln4eln5hbp/47qi0uxmroj2do29fHy5yJrKVSH/aMboble59XpVUULNq4oCaF5VXL7Nq4qL7/gqW7nP/HKdYbh/AwibryrfZe3LPnCPudpddvzZXO0+a19WvNPalxXvtfZlxbvt8DJnKnfb4Z395ary3da+7P13m/vYT5r72I+a+9jPmvvYD5v72E/bYuN3RavaLS/V5f7O3r5eld591efP/weAROcz",
            ""
        ],
        "fileMap": {
            "1": {
                "source": "// docs:start:uniswap_setup\nmod interfaces;\nmod util;\n\n// Demonstrates how to use portal contracts to swap on L1 Uniswap with funds on L2\n// Has two separate flows for private and public respectively\n// Uses the token bridge contract, which tells which input token we need to talk to and handles the exit funds to L1 \ncontract Uniswap {\n    use dep::aztec::{\n        context::{PrivateContext, PublicContext, Context},\n        oracle::{context::get_portal_address},\n        state_vars::{map::Map, public_state::PublicState},\n        types::address::{AztecAddress, EthereumAddress},\n        types::type_serialization::bool_serialization::{\n            BoolSerializationMethods, BOOL_SERIALIZED_LEN,\n        },\n        types::type_serialization::field_serialization::{\n            FieldSerializationMethods, FIELD_SERIALIZED_LEN,\n        },\n        selector::compute_selector,\n    };\n\n    use dep::authwit::auth::{IS_VALID_SELECTOR, assert_current_call_valid_authwit_public, compute_authwit_message_hash};\n\n    use crate::interfaces::{Token, TokenBridge};\n    use crate::util::{compute_swap_private_content_hash, compute_swap_public_content_hash};\n\n    struct Storage {\n        // like with account contracts, stores the approval message on a slot and tracks if they are active\n        approved_action: Map<PublicState<bool, BOOL_SERIALIZED_LEN>>,\n        // tracks the nonce used to create the approval message for burning funds\n        // gets incremented each time after use to prevent replay attacks\n        nonce_for_burn_approval: PublicState<Field, FIELD_SERIALIZED_LEN>,\n    }\n\n    impl Storage {\n        fn init(context: Context) -> pub Self {\n            Storage {\n                approved_action: Map::new(\n                    context,\n                    1,\n                    |context, slot| {\n                        PublicState::new(context, slot, BoolSerializationMethods)\n                    },\n                ),\n                nonce_for_burn_approval: PublicState::new(context, 2, FieldSerializationMethods),\n            }\n        }\n    }\n\n    #[aztec(private)]\n    fn constructor() {}\n    // docs:end:uniswap_setup\n\n    // docs:start:swap_public\n    #[aztec(public)]\n    fn swap_public(\n        sender: AztecAddress,\n        input_asset_bridge: AztecAddress,\n        input_amount: Field,\n        output_asset_bridge: AztecAddress,\n        // params for using the transfer approval\n        nonce_for_transfer_approval: Field,\n        // params for the swap\n        uniswap_fee_tier: Field,\n        minimum_output_amount: Field,\n        // params for the depositing output_asset back to Aztec\n        recipient: AztecAddress,\n        secret_hash_for_L1_to_l2_message: Field,\n        deadline_for_L1_to_l2_message: Field,\n        canceller_for_L1_to_L2_message: EthereumAddress,\n        caller_on_L1: EthereumAddress,\n        // nonce for someone to call swap on sender's behalf\n        nonce_for_swap_approval: Field\n    ) {\n        if (sender.address != context.msg_sender()) {\n            assert_current_call_valid_authwit_public(&mut context, sender);\n        }\n\n        let input_asset = TokenBridge::at(input_asset_bridge.address).token(context);\n\n        // Transfer funds to this contract\n        Token::at(input_asset.address).transfer_public(context,\n            sender.address,\n            context.this_address(),\n            input_amount,\n            nonce_for_transfer_approval);\n\n        // Approve bridge to burn this contract's funds and exit to L1 Uniswap Portal\n        let _void = context.call_public_function(context.this_address(),\n            compute_selector(\"_approve_bridge_and_exit_input_asset_to_L1((Field),(Field),Field)\"),\n            [input_asset.address, input_asset_bridge.address, input_amount]);\n\n        // Create swap message and send to Outbox for Uniswap Portal\n        // this ensures the integrity of what the user originally intends to do on L1.\n        let input_asset_bridge_portal_address = get_portal_address(input_asset_bridge.address);\n        let output_asset_bridge_portal_address = get_portal_address(output_asset_bridge.address);\n        // ensure portal exists - else funds might be lost\n        assert(input_asset_bridge_portal_address != 0, \"L1 portal address of input_asset's bridge is 0\");\n        assert(output_asset_bridge_portal_address != 0, \"L1 portal address of output_asset's bridge is 0\");\n\n        let content_hash = compute_swap_public_content_hash(input_asset_bridge_portal_address,\n            input_amount,\n            uniswap_fee_tier,\n            output_asset_bridge_portal_address,\n            minimum_output_amount,\n            recipient.address,\n            secret_hash_for_L1_to_l2_message,\n            deadline_for_L1_to_l2_message,\n            canceller_for_L1_to_L2_message.address,\n            caller_on_L1.address);\n        context.message_portal(content_hash);\n    }\n    // docs:end:swap_public\n\n    // docs:start:swap_private\n    #[aztec(private)]\n    fn swap_private(\n        input_asset: AztecAddress, // since private, we pass here and later assert that this is as expected by input_bridge\n        input_asset_bridge: AztecAddress,\n        input_amount: Field,\n        output_asset_bridge: AztecAddress,\n        // params for using the unshield approval\n        nonce_for_unshield_approval: Field,\n        // params for the swap\n        uniswap_fee_tier: Field,// which uniswap tier to use (eg 3000 for 0.3% fee)\n        minimum_output_amount: Field, // minimum output amount to receive (slippage protection for the swap)\n        // params for the depositing output_asset back to Aztec\n        secret_hash_for_redeeming_minted_notes: Field,// secret hash used to redeem minted notes at a later time. This enables anyone to call this function and mint tokens to a user on their behalf\n        secret_hash_for_L1_to_l2_message: Field, // for when l1 uniswap portal inserts the message to consume output assets on L2\n        deadline_for_L1_to_l2_message: Field, // for when l1 uniswap portal inserts the message to consume output assets on L2\n        canceller_for_L1_to_L2_message: EthereumAddress, // L1 address of who can cancel the message to consume assets on L2.\n        caller_on_L1: EthereumAddress // ethereum address that can call this function on the L1 portal (0x0 if anyone can call)\n    ) {\n        // Assert that user provided token address is same as expected by token bridge.\n        // we can't directly use `input_asset_bridge.token` because that is a public method and public can't return data to private\n        context.call_public_function(context.this_address(),\n            compute_selector(\"_assert_token_is_same((Field),(Field))\"),\n            [input_asset.address, input_asset_bridge.address]);\n\n        // Transfer funds to this contract\n        Token::at(input_asset.address).unshield(&mut context,\n            context.msg_sender(),\n            context.this_address(),\n            input_amount,\n            nonce_for_unshield_approval);\n\n        // Approve bridge to burn this contract's funds and exit to L1 Uniswap Portal\n        context.call_public_function(context.this_address(),\n            compute_selector(\"_approve_bridge_and_exit_input_asset_to_L1((Field),(Field),Field)\"),\n            [input_asset.address, input_asset_bridge.address, input_amount]);\n\n        // Create swap message and send to Outbox for Uniswap Portal\n        // this ensures the integrity of what the user originally intends to do on L1.\n        let input_asset_bridge_portal_address = get_portal_address(input_asset_bridge.address);\n        let output_asset_bridge_portal_address = get_portal_address(output_asset_bridge.address);\n        // ensure portal exists - else funds might be lost\n        assert(input_asset_bridge_portal_address != 0, \"L1 portal address of input_asset's bridge is 0\");\n        assert(output_asset_bridge_portal_address != 0, \"L1 portal address of output_asset's bridge is 0\");\n\n        let content_hash = compute_swap_private_content_hash(input_asset_bridge_portal_address,\n            input_amount,\n            uniswap_fee_tier,\n            output_asset_bridge_portal_address,\n            minimum_output_amount,\n            secret_hash_for_redeeming_minted_notes,\n            secret_hash_for_L1_to_l2_message,\n            deadline_for_L1_to_l2_message,\n            canceller_for_L1_to_L2_message.address,\n            caller_on_L1.address);\n        context.message_portal(content_hash);\n    }\n    // docs:end:swap_private\n\n    // docs:start:authwit_uniswap_get\n    // Since the token bridge burns funds on behalf of this contract, this contract has to tell the token contract if the signature is valid\n    // implementation is similar to how account contracts validate public approvals.\n    // if valid, it returns the IS_VALID selector which is expected by token contract\n    #[aztec(public)]\n    fn is_valid_public(message_hash: Field) -> Field {\n        let value = storage.approved_action.at(message_hash).read();\n        if (value) { IS_VALID_SELECTOR } else { 0 }\n    }\n    // docs:end:authwit_uniswap_get\n\n    // docs:start:authwit_uniswap_set\n    // This helper method approves the bridge to burn this contract's funds and exits the input asset to L1\n    // Assumes contract already has funds. \n    // Assume `token` relates to `token_bridge` (ie token_bridge.token == token)\n    // Note that private can't read public return values so created an internal public that handles everything\n    // this method is used for both private and public swaps.\n    #[aztec(public)]\n    internal fn _approve_bridge_and_exit_input_asset_to_L1(token: AztecAddress, token_bridge: AztecAddress, amount: Field) {\n        // approve bridge to burn this contract's funds (required when exiting on L1, as it burns funds on L2):\n        let nonce_for_burn_approval = storage.nonce_for_burn_approval.read();\n        let selector = compute_selector(\"burn_public((Field),Field,Field)\");\n        let message_hash = compute_authwit_message_hash(token_bridge,\n            token,\n            selector,\n            [context.this_address(), amount, nonce_for_burn_approval]);\n        storage.approved_action.at(message_hash).write(true);\n\n        // increment nonce_for_burn_approval so it won't be used again\n        storage.nonce_for_burn_approval.write(nonce_for_burn_approval + 1);\n\n        // Exit to L1 Uniswap Portal !\n        TokenBridge::at(token_bridge.address).exit_to_l1_public(context,\n            context.this_portal_address(),\n            amount,\n            context.this_portal_address(),\n            nonce_for_burn_approval);\n    }\n    // docs:end:authwit_uniswap_set\n\n    // docs:start:assert_token_is_same\n    #[aztec(public)]\n    internal fn _assert_token_is_same(token: AztecAddress, token_bridge: AztecAddress) {\n        assert(token.eq(TokenBridge::at(token_bridge.address).token(context)), \"input_asset address is not the same as seen in the bridge contract\");\n    }\n    // docs:end:assert_token_is_same\n\n    // /// Unconstrained /// \n\n    // this method exists solely for e2e tests to test that nonce gets incremented each time.\n    unconstrained fn nonce_for_burn_approval() -> Field {\n        storage.nonce_for_burn_approval.read()\n    }\n\n    // TODO: remove this placeholder once https://github.com/AztecProtocol/aztec-packages/issues/2918 is implemented\n    unconstrained fn compute_note_hash_and_nullifier(contract_address: Field, nonce: Field, storage_slot: Field, serialized_note: [Field; 0]) -> [Field; 4] {\n        [0, 0, 0, 0]\n    }\n}\n",
                "path": "/usr/src/yarn-project/noir-contracts/src/contracts/uniswap_contract/src/main.nr"
            },
            "23": {
                "source": "impl Field {\n    pub fn to_le_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_le_bits(bit_size)\n    }\n    \n    pub fn to_be_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_be_bits(bit_size)\n    }\n\n    #[builtin(to_le_bits)]\n    fn __to_le_bits(_self: Self, _bit_size: u32) -> [u1] {}\n    \n    #[builtin(to_be_bits)]\n    fn __to_be_bits(_self: Self, _bit_size: u32) -> [u1] {}\n\n    pub fn to_le_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_le_radix(256, byte_size)\n    }\n\n    pub fn to_be_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_be_radix(256, byte_size)\n    }\n\n\n    pub fn to_le_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_le_radix(radix, result_len)\n    }\n\n    pub fn to_be_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_be_radix(radix, result_len)\n    }\n\n\n\n    // decompose `_self` into a `_result_len` vector over the `_radix` basis\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix(_self: Self, _radix: u32, _result_len: u32) -> [u8] {}\n    \n    #[builtin(to_be_radix)]\n    fn __to_be_radix(_self: Self, _radix: u32, _result_len: u32) -> [u8] {}\n\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b = exponent.to_le_bits(32);\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32-i] as Field) * (r * self) + (1 - b[32-i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x ∈ {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub fn modulus_num_bits() -> Field {}\n\n#[builtin(modulus_be_bits)]\npub fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub fn modulus_le_bytes() -> [u8] {}\n// Convert a 32 byte array to a field element\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n",
                "path": "std/field.nr"
            },
            "34": {
                "source": "struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::unsafe::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default\n        }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            other\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<U, Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            default()\n        }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some {\n                Option::none()\n            } else {\n                self\n            }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n",
                "path": "std/option.nr"
            },
            "76": {
                "source": "global ARGS_LENGTH: Field = 16;\nglobal RETURN_VALUES_LENGTH: Field = 4;\n\n/**\n * Convention for constant array lengths are mainly divided in 2 classes:\n *  - FUNCTION CALL\n *  - TRANSACTION\n *\n * Agreed convention is to use MAX_XXX_PER_CALL resp. MAX_XXX_PER_TX, where XXX denotes a type of element such as\n * commitment, or nullifier, e.g.,:\n *  - MAX_NEW_NULLIFIERS_PER_CALL\n *  - MAX_NEW_COMMITMENTS_PER_TX\n *\n * In the kernel circuits, we accumulate elements such as commitments and the nullifiers from all functions calls in a\n * transaction. Therefore, we always must have:\n * MAX_XXX_PER_TX ≥ MAX_XXX_PER_CALL\n *\n * For instance:\n * MAX_NEW_COMMITMENTS_PER_TX ≥ MAX_NEW_COMMITMENTS_PER_CALL\n * MAX_NEW_NULLIFIERS_PER_TX ≥ MAX_NEW_NULLIFIERS_PER_CALL\n *\n */\n\n// docs:start:constants\n// \"PER CALL\" CONSTANTS\nglobal MAX_NEW_COMMITMENTS_PER_CALL: Field = 16;\nglobal MAX_NEW_NULLIFIERS_PER_CALL: Field = 16;\nglobal MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL: Field = 4;\nglobal MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL: Field = 4;\nglobal MAX_NEW_L2_TO_L1_MSGS_PER_CALL: Field = 2;\nglobal MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL: Field = 16;\nglobal MAX_PUBLIC_DATA_READS_PER_CALL: Field = 16;\nglobal MAX_READ_REQUESTS_PER_CALL: Field = 32;\nglobal MAX_PENDING_READ_REQUESTS_PER_CALL: Field = 32;\n\n// \"PER TRANSACTION\" CONSTANTS\nglobal MAX_NEW_COMMITMENTS_PER_TX: Field = 64;\nglobal MAX_NEW_NULLIFIERS_PER_TX: Field = 64;\nglobal MAX_PRIVATE_CALL_STACK_LENGTH_PER_TX: Field = 8;\nglobal MAX_PUBLIC_CALL_STACK_LENGTH_PER_TX: Field = 8;\nglobal MAX_NEW_L2_TO_L1_MSGS_PER_TX: Field = 2;\nglobal MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_TX: Field = 16;\nglobal MAX_PUBLIC_DATA_READS_PER_TX: Field = 16;\nglobal MAX_NEW_CONTRACTS_PER_TX: Field = 1;\nglobal MAX_OPTIONALLY_REVEALED_DATA_LENGTH_PER_TX: Field = 4;\nglobal MAX_READ_REQUESTS_PER_TX: Field = 128;\nglobal MAX_PENDING_READ_REQUESTS_PER_TX: Field = 128;\nglobal NUM_ENCRYPTED_LOGS_HASHES_PER_TX: Field = 1;\nglobal NUM_UNENCRYPTED_LOGS_HASHES_PER_TX: Field = 1;\n// docs:end:constants\n\n// ROLLUP CONTRACT CONSTANTS - constants used only in l1-contracts\nglobal NUMBER_OF_L1_L2_MESSAGES_PER_ROLLUP: Field = 16;\n// TODO(961): Use this constant everywhere instead of hard-coded \"2\".\nglobal KERNELS_PER_BASE_ROLLUP: Field = 2;\nglobal MAX_NEW_NULLIFIERS_PER_BASE_ROLLUP: Field = 128;\nglobal MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_BASE_ROLLUP: Field = 32;\nglobal MAX_PUBLIC_DATA_READS_PER_BASE_ROLLUP: Field = 32;\n\n// TREES RELATED CONSTANTS\nglobal VK_TREE_HEIGHT: Field = 3;\nglobal FUNCTION_TREE_HEIGHT: Field = 5;\nglobal CONTRACT_TREE_HEIGHT: Field = 16;\nglobal NOTE_HASH_TREE_HEIGHT: Field = 32;\nglobal PUBLIC_DATA_TREE_HEIGHT: Field = 254;\nglobal NULLIFIER_TREE_HEIGHT: Field = 20;\nglobal L1_TO_L2_MSG_TREE_HEIGHT: Field = 16;\nglobal ROLLUP_VK_TREE_HEIGHT: Field = 8;\n\n// SUB-TREES RELATED CONSTANTS\nglobal CONTRACT_SUBTREE_HEIGHT: Field = 1;\nglobal CONTRACT_SUBTREE_SIBLING_PATH_LENGTH: Field = 15;\nglobal NOTE_HASH_SUBTREE_HEIGHT: Field = 7;\nglobal NOTE_HASH_SUBTREE_SIBLING_PATH_LENGTH: Field = 25;\nglobal NULLIFIER_SUBTREE_HEIGHT: Field = 7;\nglobal ARCHIVE_HEIGHT: Field = 16;\nglobal NULLIFIER_SUBTREE_SIBLING_PATH_LENGTH: Field = 13;\nglobal L1_TO_L2_MSG_SUBTREE_HEIGHT: Field = 4;\nglobal L1_TO_L2_MSG_SUBTREE_SIBLING_PATH_LENGTH: Field = 12;\n\n// MISC CONSTANTS\nglobal FUNCTION_SELECTOR_NUM_BYTES: Field = 4;\nglobal MAPPING_SLOT_PEDERSEN_SEPARATOR: Field = 4;\nglobal NUM_FIELDS_PER_SHA256: Field = 2;\nglobal ARGS_HASH_CHUNK_LENGTH: u32 = 32;\nglobal ARGS_HASH_CHUNK_COUNT: u32 = 16;\n\n\n// NOIR CONSTANTS - constants used only in yarn-packages/noir-contracts\n// Some are defined here because Noir doesn't yet support globals referencing other globals yet.\n// Move these constants to a noir file once the issue bellow is resolved:\n// https://github.com/noir-lang/noir/issues/1734\nglobal L1_TO_L2_MESSAGE_LENGTH: Field = 8;\nglobal L1_TO_L2_MESSAGE_ORACLE_CALL_LENGTH: Field = 26;\nglobal MAX_NOTE_FIELDS_LENGTH: Field = 20;\n// GET_NOTE_ORACLE_RETURN_LENGT = MAX_NOTE_FIELDS_LENGTH + 1 + 2\n// The plus 1 is 1 extra field for nonce.\n// + 2 for EXTRA_DATA: [number_of_return_notes, contract_address]\nglobal GET_NOTE_ORACLE_RETURN_LENGTH: Field = 23;\nglobal MAX_NOTES_PER_PAGE: Field = 10;\n// VIEW_NOTE_ORACLE_RETURN_LENGTH = MAX_NOTES_PER_PAGE * (MAX_NOTE_FIELDS_LENGTH + 1) + 2;\nglobal VIEW_NOTE_ORACLE_RETURN_LENGTH: Field = 212;\nglobal CALL_CONTEXT_LENGTH: Field = 7;\nglobal BLOCK_HEADER_LENGTH: Field = 7;\nglobal FUNCTION_DATA_LENGTH: Field = 4;\nglobal CONTRACT_DEPLOYMENT_DATA_LENGTH: Field = 6;\n// Change this ONLY if you have changed the PrivateCircuitPublicInputs structure.\n// In other words, if the structure/size of the public inputs of a function call changes then we\n// should change this constant as well as the offsets in private_call_stack_item.nr\nglobal PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH: Field = 155;\nglobal CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH: Field = 3;\nglobal CONTRACT_STORAGE_READ_LENGTH: Field = 2;\n// Change this ONLY if you have changed the PublicCircuitPublicInputs structure.\nglobal PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH: Field = 142;\nglobal GET_NOTES_ORACLE_RETURN_LENGTH: Field = 674;\nglobal EMPTY_NULLIFIED_COMMITMENT: Field = 1000000;\nglobal CALL_PRIVATE_FUNCTION_RETURN_SIZE: Field = 161;\nglobal PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH: Field = 87;\nglobal PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH: Field = 144;\nglobal COMMITMENTS_NUM_BYTES_PER_BASE_ROLLUP: Field = 4096;\nglobal NULLIFIERS_NUM_BYTES_PER_BASE_ROLLUP: Field = 4096;\nglobal PUBLIC_DATA_WRITES_NUM_BYTES_PER_BASE_ROLLUP: Field = 2048;\nglobal CONTRACTS_NUM_BYTES_PER_BASE_ROLLUP: Field = 64;\nglobal CONTRACT_DATA_NUM_BYTES_PER_BASE_ROLLUP: Field = 128;\nglobal CONTRACT_DATA_NUM_BYTES_PER_BASE_ROLLUP_UNPADDED: Field = 104;\nglobal L2_TO_L1_MSGS_NUM_BYTES_PER_BASE_ROLLUP: Field = 128;\nglobal LOGS_HASHES_NUM_BYTES_PER_BASE_ROLLUP: Field = 128;\n\n/**\n * Enumerate the hash_indices which are used for pedersen hashing.\n * We start from 1 to avoid the default generators. The generator indices are listed\n * based on the number of elements each index hashes. The following conditions must be met:\n *\n * +-----------+-------------------------------+----------------------+\n * | Hash size | Number of elements hashed (n) | Condition to use     |\n * |-----------+-------------------------------+----------------------|\n * | LOW       | n ≤ 8                         | 0 < hash_index ≤ 32  |\n * | MID       | 8 < n ≤ 16                    | 32 < hash_index ≤ 40 |\n * | HIGH      | 16 < n ≤ 48                   | 40 < hash_index ≤ 48 |\n * +-----------+-------------------------------+----------------------+\n *\n * Note: When modifying, modify `GeneratorIndexPacker` in packer.hpp accordingly.\n */\n// Indices with size ≤ 8\nglobal GENERATOR_INDEX__COMMITMENT = 1;\nglobal GENERATOR_INDEX__COMMITMENT_NONCE = 2;\nglobal GENERATOR_INDEX__UNIQUE_COMMITMENT = 3;\nglobal GENERATOR_INDEX__SILOED_COMMITMENT = 4;\nglobal GENERATOR_INDEX__NULLIFIER = 5;\nglobal GENERATOR_INDEX__INITIALIZATION_NULLIFIER = 6;\nglobal GENERATOR_INDEX__OUTER_NULLIFIER = 7;\nglobal GENERATOR_INDEX__PUBLIC_DATA_READ = 8;\nglobal GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST = 9;\nglobal GENERATOR_INDEX__FUNCTION_DATA = 10;\nglobal GENERATOR_INDEX__FUNCTION_LEAF = 11;\nglobal GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA = 12;\nglobal GENERATOR_INDEX__CONSTRUCTOR = 13;\nglobal GENERATOR_INDEX__CONSTRUCTOR_ARGS = 14;\nglobal GENERATOR_INDEX__CONTRACT_ADDRESS = 15;\nglobal GENERATOR_INDEX__CONTRACT_LEAF = 16;\nglobal GENERATOR_INDEX__CALL_CONTEXT = 17;\nglobal GENERATOR_INDEX__CALL_STACK_ITEM = 18;\nglobal GENERATOR_INDEX__CALL_STACK_ITEM_2 = 19;\nglobal GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET = 20;\nglobal GENERATOR_INDEX__L2_TO_L1_MSG = 21;\nglobal GENERATOR_INDEX__TX_CONTEXT = 22;\nglobal GENERATOR_INDEX__PUBLIC_LEAF_INDEX = 23;\nglobal GENERATOR_INDEX__PUBLIC_DATA_LEAF = 24;\nglobal GENERATOR_INDEX__SIGNED_TX_REQUEST = 25;\nglobal GENERATOR_INDEX__GLOBAL_VARIABLES = 26;\nglobal GENERATOR_INDEX__PARTIAL_ADDRESS = 27;\nglobal GENERATOR_INDEX__BLOCK_HASH = 28;\n// Indices with size ≤ 16\nglobal GENERATOR_INDEX__TX_REQUEST = 33;\nglobal GENERATOR_INDEX__SIGNATURE_PAYLOAD = 34;\n// Indices with size ≤ 44\nglobal GENERATOR_INDEX__VK = 41;\nglobal GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS = 42;\nglobal GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS = 43;\nglobal GENERATOR_INDEX__FUNCTION_ARGS = 44;\n",
                "path": "/protocol_types/constants.nr"
            },
            "93": {
                "source": "use dep::protocol_types::constants::{\n    RETURN_VALUES_LENGTH,\n    MAX_READ_REQUESTS_PER_CALL,\n    MAX_PENDING_READ_REQUESTS_PER_CALL,\n    MAX_NEW_COMMITMENTS_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n    NUM_FIELDS_PER_SHA256,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL,\n    GENERATOR_INDEX__FUNCTION_ARGS,\n    BLOCK_HEADER_LENGTH,\n    CONTRACT_DEPLOYMENT_DATA_LENGTH,\n    CALL_CONTEXT_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n    CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH,\n    CONTRACT_STORAGE_READ_LENGTH,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n    GENERATOR_INDEX__BLOCK_HASH,\n    GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS,\n    GENERATOR_INDEX__FUNCTION_DATA,\n    GENERATOR_INDEX__PUBLIC_DATA_READ,\n    GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST,\n    GENERATOR_INDEX__CALL_CONTEXT,\n    GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS,\n    GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA,\n};\n\nuse crate::oracle::debug_log;\nuse crate::types::vec::BoundedVec;\nuse crate::types::point::Point;\nuse crate::hash::pedersen_hash;\n\n// docs:start:private-global-variables\nstruct PrivateGlobalVariables {\n    chain_id: Field,\n    version: Field,\n}\n// docs:end:private-global-variables\n\nimpl PrivateGlobalVariables {\n    fn serialize(self) -> [Field; 2] {\n        [self.chain_id, self.version]\n    }\n}\n\n// docs:start:public-global-variables\nstruct PublicGlobalVariables {\n    chain_id: Field,\n    version: Field,\n    block_number: Field,\n    timestamp: Field,\n}\n// docs:end:public-global-variables\n\nimpl PublicGlobalVariables {\n    fn serialize(self) -> [Field; 4] {\n        [self.chain_id, self.version, self.block_number, self.timestamp]\n    }\n}\n\n// docs:start:contract-deployment-data\nstruct ContractDeploymentData {\n    deployer_public_key: Point,\n    constructor_vk_hash : Field,\n    function_tree_root : Field,\n    contract_address_salt : Field,\n    portal_contract_address : Field,\n}\n// docs:end:contract-deployment-data\n\nimpl ContractDeploymentData {\n    fn serialize(self) -> [Field; CONTRACT_DEPLOYMENT_DATA_LENGTH] {\n        [\n            self.deployer_public_key.x,\n            self.deployer_public_key.y,\n            self.constructor_vk_hash,\n            self.function_tree_root,\n            self.contract_address_salt,\n            self.portal_contract_address,\n        ]\n    }\n\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA)\n    }\n}\n\n// PrivateContextInputs are expected to be provided to each private function\n// docs:start:private-context-inputs\nstruct PrivateContextInputs {\n    call_context : CallContext,\n    block_header: BlockHeader,\n    contract_deployment_data: ContractDeploymentData,\n    private_global_variables: PrivateGlobalVariables,\n}\n// docs:end:private-context-inputs\n\n// PublicContextInputs are expected to be provided to each public function\n// docs:start:public-context-inputs\nstruct PublicContextInputs {\n    call_context: CallContext,\n    block_header: BlockHeader,\n\n    public_global_variables: PublicGlobalVariables,\n}\n// docs:end:public-context-inputs\n\n// docs:start:call-context\nstruct CallContext {\n    msg_sender : Field,\n    storage_contract_address : Field,\n    portal_contract_address : Field,\n    function_selector: Field,\n\n    is_delegate_call : bool,\n    is_static_call : bool,\n    is_contract_deployment: bool,\n}\n// docs:end:call-context\n\nimpl CallContext {\n    fn serialize(self) -> [Field; CALL_CONTEXT_LENGTH] {\n        [\n            self.msg_sender,\n            self.storage_contract_address,\n            self.portal_contract_address,\n            self.function_selector,\n            self.is_delegate_call as Field,\n            self.is_static_call as Field,\n            self.is_contract_deployment as Field,\n        ]\n    }\n\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CALL_CONTEXT)\n    }\n}\n\n// docs:start:block-header\nstruct BlockHeader {\n    note_hash_tree_root : Field,\n    nullifier_tree_root : Field,\n    contract_tree_root : Field,\n    l1_to_l2_messages_tree_root : Field,\n    archive_root: Field,\n    public_data_tree_root: Field,\n    global_variables_hash: Field,\n}\n// docs:end:block-header\n\nimpl BlockHeader {\n    // NOTE: this order must match the order in `private_circuit_public_inputs.hpp`\n    pub fn serialize(self) -> [Field; BLOCK_HEADER_LENGTH] {\n        [\n            self.note_hash_tree_root,\n            self.nullifier_tree_root,\n            self.contract_tree_root,\n            self.l1_to_l2_messages_tree_root,\n            self.archive_root,\n            self.public_data_tree_root,\n            self.global_variables_hash,\n        ]\n    }\n\n    pub fn deserialize(deserialized: [Field; BLOCK_HEADER_LENGTH]) -> Self {\n        BlockHeader {\n            note_hash_tree_root: deserialized[0],\n            nullifier_tree_root: deserialized[1],\n            contract_tree_root: deserialized[2],\n            l1_to_l2_messages_tree_root: deserialized[3],\n            archive_root: deserialized[4],\n            public_data_tree_root: deserialized[5],\n            global_variables_hash: deserialized[6],\n        }\n    }\n\n    pub fn empty() -> Self {\n        Self { note_hash_tree_root: 0, nullifier_tree_root: 0, contract_tree_root: 0, l1_to_l2_messages_tree_root: 0, archive_root: 0, public_data_tree_root: 0, global_variables_hash: 0 }\n    }\n\n    pub fn block_hash(self) -> Field {\n        // TODO(#3442): Unify the ordering in `BlockHeader::serialize` function and the ordering\n        // in the block hash preimage --> This requires changes in the circuits.\n        let inputs = [\n            self.global_variables_hash,\n            self.note_hash_tree_root,\n            self.nullifier_tree_root,\n            self.contract_tree_root,\n            self.l1_to_l2_messages_tree_root,\n            self.public_data_tree_root\n        ];\n        pedersen_hash(inputs, GENERATOR_INDEX__BLOCK_HASH)\n    }\n}\n\nstruct FunctionData {\n    function_selector: Field,\n    is_internal: bool,\n    is_private: bool,\n    is_constructor: bool,\n}\n\nimpl FunctionData {\n    fn hash(self) -> Field {\n        pedersen_hash([\n            self.function_selector,\n            self.is_internal as Field,\n            self.is_private as Field,\n            self.is_constructor as Field,\n        ], GENERATOR_INDEX__FUNCTION_DATA)\n    }\n}\n\nstruct PrivateCircuitPublicInputs {\n    call_context: CallContext,\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n    read_requests: [Field; crate::abi::MAX_READ_REQUESTS_PER_CALL],\n    pending_read_requests: [Field; crate::abi::MAX_PENDING_READ_REQUESTS_PER_CALL],\n    new_commitments: [Field; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [Field; MAX_NEW_NULLIFIERS_PER_CALL],\n    nullified_commitments: [Field; MAX_NEW_NULLIFIERS_PER_CALL],\n    private_call_stack: [Field; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL],\n    public_call_stack: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_l2_to_l1_msgs: [Field; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    // Explore introducing a new type like uint256 (similar to Point), so it's more explicit that\n    // we're talking about a single number backed by two field elements.\n    encrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    encrypted_log_preimages_length: Field,\n    unencrypted_log_preimages_length: Field,\n    block_header: BlockHeader,\n    contract_deployment_data: ContractDeploymentData,\n    chain_id: Field,\n    version: Field,\n}\n\nimpl PrivateCircuitPublicInputs {\n    fn hash(self) -> Field {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0); \n        fields.push(self.call_context.hash());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.push_array(self.read_requests);\n        fields.push_array(self.pending_read_requests);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.nullified_commitments);\n        fields.push_array(self.private_call_stack);\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_header.serialize());\n        fields.push(self.contract_deployment_data.hash());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n\n        pedersen_hash(fields.storage, GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS)\n    }\n\n    fn serialize(self) -> [Field; PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.push_array(self.read_requests);\n        fields.push_array(self.pending_read_requests);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.private_call_stack);\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_header.serialize());\n        fields.push_array(self.contract_deployment_data.serialize());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n        fields.storage\n    }\n}\n\nstruct ContractStorageRead {\n    storage_slot: Field,\n    value: Field,\n}\n\nimpl ContractStorageRead {\n    pub fn serialize(self) -> [Field; CONTRACT_STORAGE_READ_LENGTH] {\n        [self.storage_slot, self.value]\n    }\n\n    pub fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_READ)\n    }\n\n    pub fn empty() -> Self {\n        Self { storage_slot: 0, value: 0 }\n    }\n}\n\nstruct ContractStorageUpdateRequest {\n    storage_slot: Field,\n    old_value: Field,\n    new_value: Field,\n}\n\nimpl ContractStorageUpdateRequest {\n    pub fn serialize(self) -> [Field; CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH] {\n        [self.storage_slot, self.old_value, self.new_value]\n    }\n\n    pub fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST)\n    }\n\n    pub fn empty() -> Self {\n        Self { storage_slot: 0, old_value: 0, new_value: 0 }\n    }\n}\n\nstruct PublicCircuitPublicInputs {\n    call_context: CallContext,\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n    contract_storage_update_requests: [ContractStorageUpdateRequest; MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n    contract_storage_read: [ContractStorageRead; MAX_PUBLIC_DATA_READS_PER_CALL],\n    public_call_stack: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_commitments: [Field; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [Field; crate::abi::MAX_NEW_NULLIFIERS_PER_CALL],\n    new_l2_to_l1_msgs: [Field; crate::abi::MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_log_preimages_length: Field,\n    block_header: BlockHeader,\n    prover_address: Field,\n}\n\nimpl PublicCircuitPublicInputs {\n    \n    pub fn hash(self) -> Field {\n        let mut inputs: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0);\n        inputs.push(self.call_context.hash());\n        inputs.push(self.args_hash);\n        inputs.push_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            inputs.push(self.contract_storage_update_requests[i].hash());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            inputs.push(self.contract_storage_read[i].hash());\n        }\n        inputs.push_array(self.public_call_stack);\n        inputs.push_array(self.new_commitments);\n        inputs.push_array(self.new_nullifiers);\n        inputs.push_array(self.new_l2_to_l1_msgs);\n\n        inputs.push_array(self.unencrypted_logs_hash);\n        inputs.push(self.unencrypted_log_preimages_length);\n        inputs.push_array(self.block_header.serialize());\n        inputs.push(self.prover_address);\n\n        pedersen_hash(inputs.storage, GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS)\n    }\n\n    pub fn serialize(self) -> [Field; PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());   \n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            fields.push_array(self.contract_storage_update_requests[i].serialize());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            fields.push_array(self.contract_storage_read[i].serialize());\n        }\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_header.serialize());\n        fields.push(self.prover_address);\n        fields.storage\n    }\n}\n\nstruct Hasher {\n    fields: [Field],\n}\n\nimpl Hasher {\n    pub fn new()-> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<N>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n\n    pub fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nglobal ARGS_HASH_CHUNK_LENGTH: u32 = 32;\nglobal ARGS_HASH_CHUNK_COUNT: u32 = 16;\n\npub fn hash_args<N>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        let mut chunks_hashes = [0; ARGS_HASH_CHUNK_COUNT];\n        for i in 0..ARGS_HASH_CHUNK_COUNT {\n            let mut chunk_hash = 0;\n            let start_chunk_index = i * ARGS_HASH_CHUNK_LENGTH;\n            if start_chunk_index < (args.len() as u32) {\n                let mut chunk_args = [0; ARGS_HASH_CHUNK_LENGTH];\n                for j in 0..ARGS_HASH_CHUNK_LENGTH {\n                    let item_index = i * ARGS_HASH_CHUNK_LENGTH + j;\n                    if item_index < (args.len() as u32) {\n                        chunk_args[j] = args[item_index];\n                    }\n                }\n                chunk_hash = pedersen_hash(chunk_args, GENERATOR_INDEX__FUNCTION_ARGS);\n            }\n            chunks_hashes[i] = chunk_hash;\n        }\n        pedersen_hash(chunks_hashes, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n",
                "path": "/aztec/abi.nr"
            },
            "95": {
                "source": "use dep::protocol_types::constants::{\n    EMPTY_NULLIFIED_COMMITMENT,\n    MAX_NEW_COMMITMENTS_PER_CALL,\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_READ_REQUESTS_PER_CALL,\n    MAX_PENDING_READ_REQUESTS_PER_CALL,\n    NUM_FIELDS_PER_SHA256,\n    RETURN_VALUES_LENGTH,\n};\n\nuse crate::abi;\n\nuse crate::abi::{\n    hash_args,\n    CallContext,\n    ContractDeploymentData,\n    BlockHeader,\n    FunctionData,\n    PrivateCircuitPublicInputs,\n    PublicCircuitPublicInputs,\n};\n\n// TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n// use dep::std::collections::vec::Vec;\n\n// l1 to l2 messaging\nuse crate::messaging::process_l1_to_l2_message;\nuse crate::private_call_stack_item::PrivateCallStackItem;\nuse crate::public_call_stack_item::PublicCallStackItem;\n\nuse crate::types::{\n    vec::BoundedVec,\n    point::Point,\n};\n\nuse crate::utils::arr_copy_slice;\n\nuse crate::oracle::{\n    arguments,\n    call_private_function::call_private_function_internal,\n    public_call::call_public_function_internal,\n    enqueue_public_function_call::enqueue_public_function_call_internal,\n    context::get_portal_address,\n    get_block_header::get_block_header,\n};\n\nuse dep::std::option::Option;\n\n// When finished, one can call .finish() to convert back to the abi\nstruct PrivateContext {\n    // docs:start:private-context\n    inputs: abi::PrivateContextInputs,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    read_requests: BoundedVec<Field, MAX_READ_REQUESTS_PER_CALL>,\n    pending_read_requests: BoundedVec<Field, MAX_PENDING_READ_REQUESTS_PER_CALL>,\n\n    new_commitments: BoundedVec<Field, MAX_NEW_COMMITMENTS_PER_CALL>,\n    new_nullifiers: BoundedVec<Field, MAX_NEW_NULLIFIERS_PER_CALL>,\n    nullified_commitments: BoundedVec<Field, MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    private_call_stack : BoundedVec<Field, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_stack : BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    new_l2_to_l1_msgs : BoundedVec<Field, MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    block_header: BlockHeader,\n\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    // encrypted_logs_preimages: Vec<Field>,\n    // unencrypted_logs_preimages: Vec<Field>,\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: abi::PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs: inputs,\n\n            args_hash: args_hash,\n            return_values: BoundedVec::new(0),\n\n            read_requests: BoundedVec::new(0),\n            pending_read_requests: BoundedVec::new(0),\n\n            new_commitments: BoundedVec::new(0),\n            new_nullifiers: BoundedVec::new(0),\n            nullified_commitments: BoundedVec::new(0),\n\n            block_header: inputs.block_header,\n\n            private_call_stack: BoundedVec::new(0),\n            public_call_stack: BoundedVec::new(0),\n            new_l2_to_l1_msgs: BoundedVec::new(0),\n\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    pub fn msg_sender(self) -> Field {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> Field {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    pub fn this_portal_address(self) -> Field {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.private_global_variables.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.private_global_variables.version\n    }\n\n    pub fn selector(self) -> Field {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn get_block_header(self, block_number: u32) -> BlockHeader {\n        get_block_header(block_number, self)\n    }\n\n    pub fn finish(self) -> abi::PrivateCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let encrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let encrypted_log_preimages_length = 0;\n        let unencrypted_log_preimages_length = 0;\n\n        let priv_circuit_pub_inputs = abi::PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            return_values: self.return_values.storage,\n            read_requests: self.read_requests.storage,\n            pending_read_requests: self.pending_read_requests.storage,\n            new_commitments: self.new_commitments.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            nullified_commitments: self.nullified_commitments.storage,\n            private_call_stack: self.private_call_stack.storage,\n            public_call_stack: self.public_call_stack.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            encrypted_logs_hash: encrypted_logs_hash,\n            unencrypted_logs_hash: unencrypted_logs_hash,\n            encrypted_log_preimages_length: encrypted_log_preimages_length,\n            unencrypted_log_preimages_length: unencrypted_log_preimages_length,\n            block_header: self.block_header,\n            contract_deployment_data: self.inputs.contract_deployment_data,\n            chain_id: self.inputs.private_global_variables.chain_id,\n            version: self.inputs.private_global_variables.version,\n        };\n        priv_circuit_pub_inputs\n    }\n\n    pub fn push_read_request(&mut self, read_request: Field) {\n        self.read_requests.push(read_request);\n    }\n\n    pub fn push_pending_read_request(&mut self, pending_read_request: Field) {\n        self.pending_read_requests.push(pending_read_request);\n    }\n\n    pub fn push_new_note_hash(&mut self, note_hash: Field) {\n        self.new_commitments.push(note_hash);\n    }\n\n    // We never push a zero nullified_commitment as zero is used to indicate the end\n    // of a field array in private kernel. This routine transparently replaces a\n    // zero value into the special placeholder: EMPTY_NULLIFIED_COMMITMENT.\n    pub fn push_new_nullifier(&mut self, nullifier: Field, nullified_commitment: Field) {\n        self.new_nullifiers.push(nullifier);\n        let mut non_zero_nullified = nullified_commitment;\n        if (non_zero_nullified == 0) {\n            non_zero_nullified = EMPTY_NULLIFIED_COMMITMENT;\n        }\n        self.nullified_commitments.push(non_zero_nullified);\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, content: Field) \n    // docs:end:context_message_portal\n    {\n        self.new_l2_to_l1_msgs.push(content);\n    }\n\n    // PrivateContextInputs must be temporarily passed in to prevent too many unknowns\n    // Note this returns self to get around an issue where mutable structs do not maintain mutations unless reassigned\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        msg_key: Field,\n        content: Field,\n        secret: Field\n    ) \n    // docs:end:context_consume_l1_to_l2_message\n    {\n        let nullifier = process_l1_to_l2_message(self.block_header.l1_to_l2_messages_tree_root, self.this_address(), self.this_portal_address(), self.chain_id(), self.version(), msg_key, content, secret);\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash)\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0)\n    }\n\n    pub fn call_private_function_with_packed_args(\n        &mut self,\n        contract_address: Field,\n        function_selector: Field,\n        args_hash: Field\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let fields = call_private_function_internal(\n            contract_address, \n            function_selector, \n            args_hash\n        );\n        let item = PrivateCallStackItem {\n            contract_address: fields[0],\n            function_data: FunctionData {\n                function_selector: fields[1],\n                is_internal: fields[2] as bool,\n                is_private: fields[3] as bool,\n                is_constructor: fields[4] as bool,\n            },\n            public_inputs: PrivateCircuitPublicInputs {\n                call_context: CallContext {\n                    msg_sender : fields[5],\n                    storage_contract_address : fields[6],\n                    portal_contract_address : fields[7],\n                    function_selector: fields[8], // practically same as fields[1]\n                    is_delegate_call : fields[9] as bool,\n                    is_static_call : fields[10] as bool,\n                    is_contract_deployment: fields[11] as bool,\n                },\n                // TODO handle the offsets as a variable incremented during extraction?\n                args_hash: fields[12],\n                return_values: arr_copy_slice(fields, [0; RETURN_VALUES_LENGTH], 13),\n                read_requests: arr_copy_slice(fields, [0; MAX_READ_REQUESTS_PER_CALL], 17),\n                pending_read_requests: arr_copy_slice(fields, [0; MAX_READ_REQUESTS_PER_CALL], 49),\n                new_commitments: arr_copy_slice(fields, [0; MAX_NEW_COMMITMENTS_PER_CALL], 81),\n                new_nullifiers: arr_copy_slice(fields, [0; MAX_NEW_NULLIFIERS_PER_CALL], 97),\n                nullified_commitments: arr_copy_slice(fields, [0; MAX_NEW_NULLIFIERS_PER_CALL], 113),\n                private_call_stack: arr_copy_slice(fields, [0; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL], 129),\n                public_call_stack: arr_copy_slice(fields, [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL], 133),\n                new_l2_to_l1_msgs: arr_copy_slice(fields, [0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL], 137),\n                encrypted_logs_hash: arr_copy_slice(fields, [0; NUM_FIELDS_PER_SHA256], 139),\n                unencrypted_logs_hash: arr_copy_slice(fields, [0; NUM_FIELDS_PER_SHA256], 141),\n                encrypted_log_preimages_length: fields[143],\n                unencrypted_log_preimages_length: fields[144],\n                block_header: BlockHeader {\n                    // Must match order in `private_circuit_public_inputs.hpp`\n                    note_hash_tree_root : fields[145],\n                    nullifier_tree_root : fields[146],\n                    contract_tree_root : fields[147],\n                    l1_to_l2_messages_tree_root : fields[148],\n                    archive_root : fields[149],\n                    public_data_tree_root: fields[150],\n                    global_variables_hash: fields[151],\n                },\n                contract_deployment_data: ContractDeploymentData {\n                    deployer_public_key: Point::new(fields[152], fields[153]),\n                    constructor_vk_hash : fields[154],\n                    function_tree_root : fields[155],\n                    contract_address_salt : fields[156],\n                    portal_contract_address : fields[157],\n                },\n                chain_id: fields[158],\n                version: fields[159],\n            },\n            is_execution_request: fields[160] as bool,\n        };\n        assert(contract_address == item.contract_address);\n        assert(function_selector == item.function_data.function_selector);\n\n        assert(args_hash == item.public_inputs.args_hash);\n\n        assert(item.is_execution_request == false);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        // We are issuing a regular call which is not delegate, static, or deployment. We also constrain\n        // the msg_sender in the nested call to be equal to our address, and the execution context address\n        // for the nested call to be equal to the address we actually called.\n        assert(item.public_inputs.call_context.is_delegate_call == false);\n        assert(item.public_inputs.call_context.is_static_call == false);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n        assert(item.public_inputs.call_context.msg_sender == self.inputs.call_context.storage_contract_address);\n        assert(item.public_inputs.call_context.storage_contract_address == contract_address);\n\n        self.private_call_stack.push(item.hash());\n\n        item.public_inputs.return_values\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field,\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: Field,\n        function_selector: Field,\n        args_hash: Field\n    ) {\n        let fields = enqueue_public_function_call_internal(\n            contract_address, \n            function_selector, \n            args_hash\n        );\n        let item = PublicCallStackItem {\n            contract_address: fields[0],\n            function_data: FunctionData {\n                function_selector: fields[1],\n                is_internal: fields[2] as bool,\n                is_private: fields[3] as bool,\n                is_constructor: fields[4] as bool,\n            },\n            public_inputs: PublicCircuitPublicInputs {\n                call_context: CallContext {\n                    msg_sender : fields[5],\n                    storage_contract_address : fields[6],\n                    portal_contract_address : fields[7],\n                    function_selector: fields[8], // practically same as fields[1]\n                    is_delegate_call : fields[9] as bool,\n                    is_static_call : fields[10] as bool,\n                    is_contract_deployment: fields[11] as bool,\n                },\n                args_hash: fields[12],\n                return_values: [0; RETURN_VALUES_LENGTH],\n                contract_storage_update_requests: [ContractStorageUpdateRequest::empty(); MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n                contract_storage_read: [ContractStorageRead::empty(); MAX_PUBLIC_DATA_READS_PER_CALL],\n                public_call_stack: [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n                new_commitments: [0; MAX_NEW_COMMITMENTS_PER_CALL],\n                new_nullifiers: [0; MAX_NEW_NULLIFIERS_PER_CALL],\n                new_l2_to_l1_msgs:[0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n                unencrypted_logs_hash:[0; NUM_FIELDS_PER_SHA256],\n                unencrypted_log_preimages_length: 0,\n                block_header: BlockHeader::empty(),\n                prover_address: 0,\n            },\n            is_execution_request: true,\n        };\n\n        assert(contract_address == item.contract_address);\n        assert(function_selector == item.function_data.function_selector);\n        \n        assert(args_hash == item.public_inputs.args_hash);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        // We are issuing a regular call which is not delegate, static, or deployment. We also constrain\n        // the msg_sender in the nested call to be equal to our address, and the execution context address\n        // for the nested call to be equal to the address we actually called.\n        assert(item.public_inputs.call_context.is_delegate_call == false);\n        assert(item.public_inputs.call_context.is_static_call == false);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n        assert(item.public_inputs.call_context.msg_sender == self.inputs.call_context.storage_contract_address);\n        assert(item.public_inputs.call_context.storage_contract_address == contract_address);\n\n        self.public_call_stack.push(item.hash());\n    }\n}\n\nuse crate::abi::{\n    ContractStorageRead,\n    ContractStorageUpdateRequest\n};\n\nstruct PublicContext {\n    inputs: abi::PublicContextInputs,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    contract_storage_update_requests: BoundedVec<ContractStorageUpdateRequest, MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL>,\n    contract_storage_read: BoundedVec<ContractStorageRead, MAX_PUBLIC_DATA_READS_PER_CALL>,\n    public_call_stack: BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n\n    new_commitments: BoundedVec<Field, MAX_NEW_COMMITMENTS_PER_CALL>,\n    new_nullifiers: BoundedVec<Field, crate::abi::MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    new_l2_to_l1_msgs: BoundedVec<Field, crate::abi::MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n\n    unencrypted_logs_hash: BoundedVec<Field, NUM_FIELDS_PER_SHA256>,\n    unencrypted_logs_preimages_length: Field,\n\n    block_header: BlockHeader,\n    prover_address: Field,\n}\n\nimpl PublicContext {\n    pub fn new(inputs: abi::PublicContextInputs, args_hash: Field) -> PublicContext {\n        let empty_storage_read = ContractStorageRead::empty();\n        let empty_storage_update = ContractStorageUpdateRequest::empty();\n        PublicContext {\n            inputs: inputs,\n\n            args_hash: args_hash,\n            return_values: BoundedVec::new(0),\n\n            contract_storage_update_requests: BoundedVec::new(empty_storage_update),\n            contract_storage_read: BoundedVec::new(empty_storage_read),\n            public_call_stack: BoundedVec::new(0),\n\n            new_commitments: BoundedVec::new(0),\n            new_nullifiers: BoundedVec::new(0),\n\n            new_l2_to_l1_msgs: BoundedVec::new(0),\n\n            \n            unencrypted_logs_hash: BoundedVec::new(0),\n            unencrypted_logs_preimages_length: 0,\n\n            block_header: inputs.block_header,\n            prover_address: 0,\n\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    pub fn msg_sender(self) -> Field {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> Field {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    pub fn this_portal_address(self) -> Field {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.public_global_variables.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.public_global_variables.version\n    }\n\n    pub fn selector(self) -> Field {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn block_number(self) -> Field {\n        self.inputs.public_global_variables.block_number\n    }\n\n    pub fn timestamp(self) -> Field {\n        self.inputs.public_global_variables.timestamp\n    }\n\n    pub fn finish(self) -> abi::PublicCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_log_preimages_length = 0;\n\n\n        // Compute the public call stack hashes\n        let pub_circuit_pub_inputs = abi::PublicCircuitPublicInputs {\n            call_context: self.inputs.call_context, // Done\n            args_hash: self.args_hash, // Done\n            contract_storage_update_requests: self.contract_storage_update_requests.storage,\n            contract_storage_read: self.contract_storage_read.storage,\n            return_values: self.return_values.storage,\n            new_commitments: self.new_commitments.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            public_call_stack: self.public_call_stack.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            unencrypted_logs_hash: unencrypted_logs_hash,\n            unencrypted_log_preimages_length: unencrypted_log_preimages_length,\n            block_header: self.inputs.block_header,\n            prover_address: self.prover_address,\n        };\n        pub_circuit_pub_inputs\n    }\n\n    pub fn push_new_note_hash(&mut self, note_hash: Field) {\n        self.new_commitments.push(note_hash);\n    }\n\n    pub fn push_new_nullifier(&mut self, nullifier: Field, _nullified_commitment: Field) {\n        self.new_nullifiers.push(nullifier);\n    }\n\n    pub fn message_portal(&mut self, content: Field) {\n        self.new_l2_to_l1_msgs.push(content);\n    }\n\n    // PrivateContextInputs must be temporarily passed in to prevent too many unknowns\n    // Note this returns self to get around an issue where mutable structs do not maintain mutations unless reassigned\n    pub fn consume_l1_to_l2_message(&mut self, msg_key: Field, content: Field, secret: Field) {\n        let this = (*self).this_address();\n        let nullifier = process_l1_to_l2_message(self.block_header.l1_to_l2_messages_tree_root, this, self.this_portal_address(), self.chain_id(), self.version(), msg_key, content, secret);\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT)\n    }\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        _self: Self,\n        contract_address: Field, \n        function_selector: Field,\n        args: [Field; ARGS_COUNT],\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = abi::hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        call_public_function_internal(\n            contract_address, \n            function_selector, \n            args_hash,\n        )\n    }\n\n    pub fn call_public_function_no_args(\n        _self: Self,\n        contract_address: Field, \n        function_selector: Field,\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        call_public_function_internal(\n            contract_address, \n            function_selector, \n            0,\n        )\n    }\n\n}\n\nstruct Context {\n    private: Option<&mut PrivateContext>,\n    public: Option<&mut PublicContext>,\n}\n\nimpl Context {\n    pub fn private(context: &mut PrivateContext) -> Context {\n        Context {\n            private: Option::some(context),\n            public: Option::none()\n        }\n    }\n\n    pub fn public(context: &mut PublicContext) -> Context {\n        Context {\n            public: Option::some(context),\n            private: Option::none()\n        }\n    }\n\n    pub fn none() -> Context {\n        Context {\n            public: Option::none(),\n            private: Option::none()\n        }\n    }\n}\n",
                "path": "/aztec/context.nr"
            },
            "96": {
                "source": "use dep::std::hash::{pedersen_hash_with_separator, sha256};\nuse dep::protocol_types::constants::{\n  GENERATOR_INDEX__SIGNATURE_PAYLOAD,\n  GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET,\n};\n\npub fn sha256_to_field<N>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = sha256(bytes_to_hash);\n\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (sha256_hashed[15 - i] as Field) * v;\n        low = low + (sha256_hashed[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    let hash_in_a_field = low + high * v;\n\n    hash_in_a_field\n}\n\npub fn compute_secret_hash(secret: Field) -> Field {\n    // TODO(#1205) This is probably not the right index to use\n    pedersen_hash([secret], GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET)\n}\n\npub fn pedersen_hash<N>(inputs: [Field; N], hash_index: u32) -> Field {\n    pedersen_hash_with_separator(inputs, hash_index)\n}\n",
                "path": "/aztec/hash.nr"
            },
            "117": {
                "source": "#[oracle(packArguments)]\nfn pack_arguments_oracle<N>(_args: [Field; N]) -> Field {}\n\n// TODO: explain what this does.\nunconstrained pub fn pack_arguments<N>(args: [Field; N]) -> Field {\n    pack_arguments_oracle(args)\n}\n",
                "path": "/aztec/oracle/arguments.nr"
            },
            "118": {
                "source": "use dep::protocol_types::constants::CALL_PRIVATE_FUNCTION_RETURN_SIZE;\n\n#[oracle(callPrivateFunction)]\nfn call_private_function_oracle(_contract_address: Field, _function_selector: Field, _args_hash: Field) -> [Field; CALL_PRIVATE_FUNCTION_RETURN_SIZE] {}\n\nunconstrained pub fn call_private_function_internal(contract_address: Field, function_selector: Field, args_hash: Field) -> [Field; CALL_PRIVATE_FUNCTION_RETURN_SIZE] {\n    call_private_function_oracle(contract_address, function_selector, args_hash)\n}\n",
                "path": "/aztec/oracle/call_private_function.nr"
            },
            "119": {
                "source": "#[oracle(getPortalContractAddress)]\nfn _get_portal_address(_contract_address: Field) -> Field {}\n\nunconstrained pub fn get_portal_address(contract_address: Field) -> Field {\n    let portal_address = _get_portal_address(contract_address);\n    portal_address\n}\n",
                "path": "/aztec/oracle/context.nr"
            },
            "128": {
                "source": "\n// contract_address + \n// args_hash +\n// crate::abi::FUNCTION_DATA_SIZE +\n// crate::abi::CALL_CONTEXT_SIZE +\n// = 2 + 4 + 7\nglobal ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE: Field = 13;\n\n#[oracle(enqueuePublicFunctionCall)]\nfn enqueue_public_function_call_oracle(_contract_address: Field, _function_selector: Field, _args_hash: Field) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE] {}\n\nunconstrained pub fn enqueue_public_function_call_internal(contract_address: Field, function_selector: Field, args_hash: Field) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE] {\n    enqueue_public_function_call_oracle(contract_address, function_selector, args_hash)\n}\n",
                "path": "/aztec/oracle/enqueue_public_function_call.nr"
            },
            "130": {
                "source": "use dep::protocol_types::constants::RETURN_VALUES_LENGTH;\n\n#[oracle(callPublicFunction)]\nfn call_public_function_oracle(_contract_address: Field, _function_selector: Field, _args_hash: Field) -> [Field; RETURN_VALUES_LENGTH] {}\n\nunconstrained pub fn call_public_function_internal(contract_address: Field, function_selector: Field, args_hash: Field) -> [Field; RETURN_VALUES_LENGTH] {\n    call_public_function_oracle(contract_address, function_selector, args_hash)\n}\n",
                "path": "/aztec/oracle/public_call.nr"
            },
            "132": {
                "source": "#[oracle(storageRead)]\nfn storage_read_oracle<N>(_storage_slot: Field, _number_of_elements: Field) -> [Field; N] {}\n\nunconstrained fn storage_read_oracle_wrapper<N>(_storage_slot: Field) -> [Field; N] {\n    storage_read_oracle(_storage_slot, N)\n}\n\npub fn storage_read<T, N>(storage_slot: Field, deserialize: fn ([Field; N]) -> T) -> T {\n    let fields = storage_read_oracle_wrapper(storage_slot);\n    deserialize(fields)\n}\n\n#[oracle(storageWrite)]\nfn storage_write_oracle<N>(_storage_slot: Field, _values: [Field; N]) -> [Field; N] {}\n\n// TODO: Remove return value.\nunconstrained pub fn storage_write<N>(storage_slot: Field, fields: [Field; N]) {\n    let _hash = storage_write_oracle(storage_slot, fields);\n}\n",
                "path": "/aztec/oracle/storage.nr"
            },
            "134": {
                "source": "use crate::abi::FunctionData;\nuse crate::abi::PrivateCircuitPublicInputs;\nuse dep::protocol_types::constants::GENERATOR_INDEX__CALL_STACK_ITEM;\nuse crate::hash::pedersen_hash;\n\nstruct PrivateCallStackItem {\n    contract_address: Field,\n    function_data: FunctionData,\n    public_inputs: PrivateCircuitPublicInputs,\n    is_execution_request: bool,\n}\n\nimpl PrivateCallStackItem {\n    pub fn hash(self) -> Field {\n        pedersen_hash([\n            self.contract_address,\n            self.function_data.hash(),\n            self.public_inputs.hash(),\n        ], GENERATOR_INDEX__CALL_STACK_ITEM)\n    }\n}\n",
                "path": "/aztec/private_call_stack_item.nr"
            },
            "135": {
                "source": "use crate::{\n    abi,\n    hash::pedersen_hash,\n    abi::{\n        PublicCircuitPublicInputs,\n        FunctionData,\n    },\n};\nuse dep::protocol_types::constants::{\n    RETURN_VALUES_LENGTH,\n    GENERATOR_INDEX__CALL_STACK_ITEM,\n};\n\n// oracles\nuse crate::oracle::{\n    enqueue_public_function_call::enqueue_public_function_call_internal,\n};\n\nstruct PublicCallStackItem {\n    contract_address: Field,\n    function_data: FunctionData,\n    public_inputs: PublicCircuitPublicInputs,\n    is_execution_request: bool,\n}\n\nimpl PublicCallStackItem {\n    pub fn hash(self) -> Field {\n        pedersen_hash([\n            self.contract_address,\n            self.function_data.hash(),\n            self.public_inputs.hash(),\n        ], GENERATOR_INDEX__CALL_STACK_ITEM)\n    }\n}\n\n",
                "path": "/aztec/public_call_stack_item.nr"
            },
            "136": {
                "source": "use crate::utils::field_from_bytes;\n\nglobal SELECTOR_SIZE = 4;\n\npub fn compute_selector<N>(signature: str<N>) -> Field {\n    let bytes = signature.as_bytes();\n    let hash = dep::std::hash::keccak256(bytes, bytes.len() as u32);\n\n    let mut selector_be_bytes = [0; SELECTOR_SIZE];\n    for i in 0..SELECTOR_SIZE {\n        selector_be_bytes[i] = hash[i];\n    }\n\n    field_from_bytes(selector_be_bytes, true)\n}\n",
                "path": "/aztec/selector.nr"
            },
            "139": {
                "source": "use crate::context::{PrivateContext, PublicContext, Context};\nuse dep::std::option::Option;\nuse crate::hash::pedersen_hash;\n\n// docs:start:map\nstruct Map<V> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\nimpl<V> Map<V> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V,\n    ) -> Map<V> {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map {\n            context,\n            storage_slot,\n            state_var_constructor,\n        }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: Field) -> V {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = pedersen_hash([self.storage_slot, key],0);\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n",
                "path": "/aztec/state_vars/map.nr"
            },
            "140": {
                "source": "use crate::context::{Context};\nuse crate::oracle::storage::storage_read;\nuse crate::oracle::storage::storage_write;\nuse crate::types::type_serialization::TypeSerializationInterface;\nuse dep::std::option::Option;\n\n// docs:start:public_state_struct\nstruct PublicState<T, T_SERIALIZED_LEN> {\n    context: Context,\n    storage_slot: Field,\n    serialization_methods: TypeSerializationInterface<T, T_SERIALIZED_LEN>,\n}\n// docs:end:public_state_struct\n\nimpl<T, T_SERIALIZED_LEN> PublicState<T, T_SERIALIZED_LEN> {\n    // docs:start:public_state_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field,\n        serialization_methods: TypeSerializationInterface<T, T_SERIALIZED_LEN>,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicState {\n            context,\n            storage_slot,\n            serialization_methods,\n        }\n    }\n    // docs:end:public_state_struct_new\n\n    // docs:start:public_state_struct_read\n    pub fn read(self) -> T {\n        assert(self.context.private.is_none(), \"Public state writes only supported in public functions\");\n        storage_read(self.storage_slot, self.serialization_methods.deserialize)\n    }\n    // docs:end:public_state_struct_read\n\n    // docs:start:public_state_struct_write\n    pub fn write(self, value: T) {\n        assert(self.context.private.is_none(), \"Public state writes only supported in public functions\");\n        let serialize = self.serialization_methods.serialize;\n        let fields = serialize(value);\n        storage_write(self.storage_slot, fields);\n    }\n    // docs:end:public_state_struct_write\n}\n",
                "path": "/aztec/state_vars/public_state.nr"
            },
            "144": {
                "source": "struct AztecAddress {\n  address: Field\n}\n\nimpl AztecAddress {\n  pub fn new(address: Field) -> Self {\n    Self {\n      address\n    }\n  }\n\n  pub fn eq(self: Self, other: Self) -> bool {\n    self.address == other.address\n  }\n\n  pub fn serialize(self: Self) -> [Field; 1] {\n    [self.address]\n  }\n\n  pub fn deserialize(fields: [Field; 1]) -> Self {\n    Self {\n      address: fields[0]\n    }\n  }\n}\n\nstruct EthereumAddress {\n  address: Field\n}\n\nimpl EthereumAddress {\n  pub fn new(address: Field) -> Self {\n    // Check that it actually will fit. Spending a lot of constraints here :grimacing:\n    let bytes = address.to_be_bytes(32);\n    for i in 0..12 {\n        assert(bytes[i] == 0, \"Value too large for an ethereum address\");\n    }\n    Self {\n      address\n    }\n  }\n\n\n  pub fn serialize(self: Self) -> [Field; 1] {\n    [self.address]\n  }\n\n  pub fn deserialize(fields: [Field; 1]) -> Self {\n    Self {\n      address: fields[0]\n    }\n  }\n}\n",
                "path": "/aztec/types/address.nr"
            },
            "146": {
                "source": "struct BoundedVec<T, MaxLen> {\n    storage: [T; MaxLen],\n    len: Field,\n}\n\nimpl<T, MaxLen> BoundedVec<T, MaxLen> {\n    pub fn new(initial_value: T) -> Self {\n        BoundedVec { storage: [initial_value; MaxLen], len: 0 }\n    }\n\n    pub fn get(mut self: Self, index: Field) -> T {\n        assert(index as u64 < self.len as u64);\n        self.storage[index]\n    }\n\n    pub fn get_unchecked(mut self: Self, index: Field) -> T {\n        self.storage[index]\n    }\n\n    pub fn push(&mut self, elem: T) {\n        assert(self.len as u64 < MaxLen as u64);\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    pub fn push_array<Len>(&mut self, array: [T; Len]) {\n        let newLen = self.len + array.len();\n        assert(newLen as u64 <= MaxLen as u64);\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = newLen;\n    }\n\n    pub fn pop(&mut self) -> T {\n        assert(self.len as u64 > 0);\n\n        let elem = self.storage[self.len - 1];\n        self.len -= 1;\n        elem\n    }\n\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        let mut exceeded_len = false;\n        for i in 0..MaxLen {\n            exceeded_len |= i == self.len;\n            if (!exceeded_len) {\n                ret |= predicate(self.storage[i]);\n            }\n        }\n        ret\n    }\n}\n\n#[test]\nfn test_vec_push_pop() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    assert(vec.len == 0);\n    vec.push(2);\n    assert(vec.len == 1);\n    vec.push(4);\n    assert(vec.len == 2);\n    vec.push(6);\n    assert(vec.len == 3);\n    let x = vec.pop();\n    assert(x == 6);\n    assert(vec.len == 2);\n    assert(vec.get(0) == 2);\n    assert(vec.get(1) == 4);\n}\n\n#[test]\nfn test_vec_push_array() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    vec.push_array([2, 4]);\n    assert(vec.len == 2);\n    assert(vec.get(0) == 2);\n    assert(vec.get(1) == 4);\n}\n\n#[test(should_fail)]\nfn test_vec_get_out_of_bound() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    vec.push_array([2, 4]);\n    let _x = vec.get(2);\n}\n\n#[test(should_fail)]\nfn test_vec_get_not_declared() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    vec.push_array([2]);\n    let _x = vec.get(1);\n}\n\n#[test(should_fail)]\nfn test_vec_get_uninitialized() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    let _x = vec.get(0);\n}\n\n#[test(should_fail)]\nfn test_vec_push_overflow() {\n    let mut vec: BoundedVec<Field, 1> = BoundedVec::new(0);\n    vec.push(1);\n    vec.push(2);\n}\n\n#[test]\nfn test_vec_any() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    vec.push_array([2, 4, 6]);\n    assert(vec.any(|v| v == 2) == true);\n    assert(vec.any(|v| v == 4) == true);\n    assert(vec.any(|v| v == 6) == true);\n    assert(vec.any(|v| v == 3) == false);\n}\n\n#[test]\nfn test_vec_any_not_default() {\n    let default_value = 1;\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(default_value);\n    vec.push_array([2, 4]);\n    assert(vec.any(|v| v == default_value) == false);\n}\n",
                "path": "/aztec/types/vec.nr"
            },
            "148": {
                "source": "use crate::types::type_serialization::TypeSerializationInterface;\n\nglobal BOOL_SERIALIZED_LEN: Field = 1;\n\nfn deserializeBool(fields: [Field; BOOL_SERIALIZED_LEN]) -> bool {\n    fields[0] as bool\n}\n\nfn serializeBool(value: bool) -> [Field; BOOL_SERIALIZED_LEN] {\n    [value as Field]\n}\n\nglobal BoolSerializationMethods = TypeSerializationInterface {\n    deserialize: deserializeBool,\n    serialize: serializeBool,\n};\n",
                "path": "/aztec/types/type_serialization/bool_serialization.nr"
            },
            "149": {
                "source": "use crate::types::type_serialization::TypeSerializationInterface;\n\n// docs:start:field_serialization\nglobal FIELD_SERIALIZED_LEN: Field = 1;\n\nfn deserializeField(fields: [Field; FIELD_SERIALIZED_LEN]) -> Field {\n    fields[0]\n}\n\nfn serializeField(value: Field) -> [Field; FIELD_SERIALIZED_LEN] {\n    [value]\n}\n\nglobal FieldSerializationMethods = TypeSerializationInterface {\n    deserialize: deserializeField,\n    serialize: serializeField,\n};\n// docs:end:field_serialization",
                "path": "/aztec/types/type_serialization/field_serialization.nr"
            },
            "152": {
                "source": "pub fn arr_copy_slice<T, N, M>(src: [T; N], mut dst: [T; M], offset: Field) -> [T; M] {\n    for i in 0..dst.len() {\n        dst[i] = src[i + offset];\n    }\n    dst\n}\n\npub fn field_from_bytes<N>(bytes: [u8; N], big_endian: bool) -> Field {\n    assert(bytes.len() as u32 < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        let mut index = i;\n        if big_endian {\n            index = N - i - 1;\n        }\n        as_field += (bytes[index] as Field) * offset;\n        offset *= 256;\n    }\n\n    as_field\n}\n\n// TODO(#3470): Copied over from https://github.com/AztecProtocol/aztec-packages/blob/a07c4bd47313be6aa604a63f37857eb0136b41ba/yarn-project/noir-protocol-circuits/src/crates/rollup-lib/src/base/base_rollup_inputs.nr#L599\n// move to a shared place?\n\n// TODO to radix returns u8, so we cannot use bigger radixes. It'd be ideal to use a radix of the maximum range-constrained integer noir supports\npub fn full_field_less_than(lhs: Field, rhs: Field) -> bool {\n    dep::std::eddsa::lt_bytes32(lhs, rhs)\n}\n\npub fn full_field_greater_than(lhs: Field, rhs: Field) -> bool {\n    dep::std::eddsa::lt_bytes32(rhs, lhs)\n}",
                "path": "/aztec/utils.nr"
            },
            "155": {
                "source": "use dep::protocol_types::constants::{EMPTY_NULLIFIED_COMMITMENT, GENERATOR_INDEX__SIGNATURE_PAYLOAD};\nuse dep::aztec::{\n  context::{PrivateContext, PublicContext, Context},\n  types::address::AztecAddress,\n  abi::hash_args,\n  hash::pedersen_hash,\n};\n\nglobal IS_VALID_SELECTOR = 0xe86ab4ff;\nglobal IS_VALID_PUBLIC_SELECTOR = 0xf3661153;\n\n// @todo #2676 Should use different generator than the payload to limit probability of collisions.\n\n// docs:start:assert_valid_authwit\n// Assert that `on_behalf_of` have authorized `message_hash` with a valid authentication witness\npub fn assert_valid_authwit(context: &mut PrivateContext, on_behalf_of: AztecAddress, message_hash: Field) {\n    let result = context.call_private_function(on_behalf_of.address, IS_VALID_SELECTOR, [message_hash])[0];\n    context.push_new_nullifier(message_hash, EMPTY_NULLIFIED_COMMITMENT);\n    assert(result == IS_VALID_SELECTOR, \"Message not authorized by account\");\n}\n// docs:end:assert_valid_authwit\n\n// docs:start:assert_current_call_valid_authwit\n// Assert that `on_behalf_of` have authorized the current call with a valid authentication witness\npub fn assert_current_call_valid_authwit(context: &mut PrivateContext, on_behalf_of: AztecAddress) {\n    // message_hash = H(caller, contract_this, selector, args_hash)\n    let message_hash = pedersen_hash([context.msg_sender(), context.this_address(), context.selector(), context.args_hash],\n        GENERATOR_INDEX__SIGNATURE_PAYLOAD);\n    assert_valid_authwit(context, on_behalf_of, message_hash);\n}\n// docs:end:assert_current_call_valid_authwit\n\n// docs:start:assert_valid_authwit_public\n// Assert that `on_behalf_of` have authorized `message_hash` in a public context\npub fn assert_valid_authwit_public(context: &mut PublicContext, on_behalf_of: AztecAddress, message_hash: Field) {\n    let result = context.call_public_function(on_behalf_of.address, IS_VALID_PUBLIC_SELECTOR, [message_hash])[0];\n    context.push_new_nullifier(message_hash, EMPTY_NULLIFIED_COMMITMENT);\n    assert(result == IS_VALID_SELECTOR, \"Message not authorized by account\");\n}\n// docs:end:assert_valid_authwit_public\n\n// docs:start:assert_current_call_valid_authwit_public\n// Assert that `on_behalf_of` have authorized the current call in a public context\npub fn assert_current_call_valid_authwit_public(context: &mut PublicContext, on_behalf_of: AztecAddress) {\n    // message_hash = H(caller, contract_this, selector, args_hash)\n    let message_hash = pedersen_hash([context.msg_sender(), context.this_address(), context.selector(), context.args_hash],\n        GENERATOR_INDEX__SIGNATURE_PAYLOAD);\n    assert_valid_authwit_public(context, on_behalf_of, message_hash);\n}\n// docs:end:assert_current_call_valid_authwit_public\n\n// docs:start:compute_authwit_message_hash\n// Compute the message hash to be used by an authentication witness \npub fn compute_authwit_message_hash<N>(caller: AztecAddress, target: AztecAddress, selector: Field, args: [Field; N]) -> Field {\n    let args_hash = hash_args(args);\n    pedersen_hash([caller.address, target.address, selector, args_hash],\n        GENERATOR_INDEX__SIGNATURE_PAYLOAD)\n}\n// docs:end:compute_authwit_message_hash",
                "path": "/authwit/auth.nr"
            },
            "157": {
                "source": "// docs:start:interfaces\nuse dep::aztec::{\n  context::{ PrivateContext, PublicContext, Context },\n  selector::compute_selector,\n  types::address::AztecAddress,\n};\n\nstruct Token {\n  address: Field,\n}\n\nimpl Token {\n  pub fn at(address: Field) -> Self {\n    Self { address }\n  }\n\n  pub fn transfer_public(self: Self, context: PublicContext, from: Field, to: Field, amount: Field, nonce: Field) {\n    context.call_public_function(\n      self.address,\n      compute_selector(\"transfer_public((Field),(Field),Field,Field)\"),\n      [from, to, amount, nonce]\n    );\n  }\n\n  pub fn unshield(self: Self, context: &mut PrivateContext, from: Field, to: Field,  amount: Field, nonce: Field) {\n    context.call_private_function(\n      self.address,\n      compute_selector(\"unshield((Field),(Field),Field,Field)\"),\n      [from, to, amount, nonce]\n    );\n  }\n}\n\nstruct TokenBridge {\n  address: Field,\n}\n\nimpl TokenBridge {\n  pub fn at(address: Field) -> Self {\n    Self { address }\n  }\n\n  pub fn token(self: Self, context: PublicContext) -> AztecAddress {\n    let return_values = context.call_public_function(self.address, compute_selector(\"get_token()\"), []);\n    AztecAddress::new(return_values[0])\n  }\n\n  pub fn exit_to_l1_public(self: Self, context: PublicContext, recipient: Field, amount: Field, callerOnL1: Field, nonce: Field) {\n    context.call_public_function(\n      self.address,\n      compute_selector(\"exit_to_l1_public((Field),Field,(Field),Field)\"),\n      [recipient, amount, callerOnL1, nonce]\n    );\n  }\n}\n// docs:end:interfaces\n",
                "path": "/usr/src/yarn-project/noir-contracts/src/contracts/uniswap_contract/src/interfaces.nr"
            },
            "158": {
                "source": "// docs:start:uniswap_public_content_hash\nuse dep::aztec::hash::sha256_to_field;\n\n// This method computes the L2 to L1 message content hash for the public\n// refer `l1-contracts/test/portals/UniswapPortal.sol` on how L2 to L1 message is expected\npub fn compute_swap_public_content_hash(\n    input_asset_bridge_portal_address: Field,\n    input_amount: Field,\n    uniswap_fee_tier: Field,\n    output_asset_bridge_portal_address: Field,\n    minimum_output_amount: Field,\n    aztec_recipient: Field,\n    secret_hash_for_L1_to_l2_message: Field,\n    deadline_for_L1_to_l2_message: Field,\n    canceller_for_L1_to_L2_message: Field,\n    caller_on_L1: Field\n) -> Field {\n    let mut hash_bytes: [u8; 324] = [0; 324]; // 10 fields of 32 bytes each + 4 bytes fn selector\n\n    let input_token_portal_bytes = input_asset_bridge_portal_address.to_be_bytes(32);\n    let in_amount_bytes = input_amount.to_be_bytes(32);\n    let uniswap_fee_tier_bytes = uniswap_fee_tier.to_be_bytes(32);\n    let output_token_portal_bytes = output_asset_bridge_portal_address.to_be_bytes(32);\n    let amount_out_min_bytes = minimum_output_amount.to_be_bytes(32);\n    let aztec_recipient_bytes = aztec_recipient.to_be_bytes(32);\n    let secret_hash_for_L1_to_l2_message_bytes = secret_hash_for_L1_to_l2_message.to_be_bytes(32);\n    let deadline_for_L1_to_l2_message_bytes = deadline_for_L1_to_l2_message.to_be_bytes(32);\n    let canceller_bytes = canceller_for_L1_to_L2_message.to_be_bytes(32);\n    let caller_on_L1_bytes = caller_on_L1.to_be_bytes(32);\n\n    // function selector: 0xf3068cac keccak256(\"swap_public(address,uint256,uint24,address,uint256,bytes32,bytes32,uint32,address,address)\")\n    hash_bytes[0] = 0xf3;\n    hash_bytes[1] = 0x06;\n    hash_bytes[2] = 0x8c;\n    hash_bytes[3] = 0xac;\n\n    for i in 0..32 {\n        hash_bytes[i + 4] = input_token_portal_bytes[i];\n        hash_bytes[i + 36] = in_amount_bytes[i];\n        hash_bytes[i + 68] = uniswap_fee_tier_bytes[i];\n        hash_bytes[i + 100] = output_token_portal_bytes[i];\n        hash_bytes[i + 132] = amount_out_min_bytes[i];\n        hash_bytes[i + 164] = aztec_recipient_bytes[i];\n        hash_bytes[i + 196] = secret_hash_for_L1_to_l2_message_bytes[i];\n        hash_bytes[i + 228] = deadline_for_L1_to_l2_message_bytes[i];\n        hash_bytes[i + 260] = canceller_bytes[i];\n        hash_bytes[i + 292] = caller_on_L1_bytes[i];\n    }\n\n    let content_hash = sha256_to_field(hash_bytes);\n    content_hash\n}\n// docs:end:uniswap_public_content_hash\n\n// docs:start:compute_swap_private_content_hash\n// This method computes the L2 to L1 message content hash for the private\n// refer `l1-contracts/test/portals/UniswapPortal.sol` on how L2 to L1 message is expected\npub fn compute_swap_private_content_hash(\n    input_asset_bridge_portal_address: Field,\n    input_amount: Field,\n    uniswap_fee_tier: Field,\n    output_asset_bridge_portal_address: Field,\n    minimum_output_amount: Field,\n    secret_hash_for_redeeming_minted_notes: Field,\n    secret_hash_for_L1_to_l2_message: Field,\n    deadline_for_L1_to_l2_message: Field,\n    canceller_for_L1_to_L2_message: Field,\n    caller_on_L1: Field\n) -> Field {\n    let mut hash_bytes: [u8; 324] = [0; 324]; // 10 fields of 32 bytes each + 4 bytes fn selector\n\n    let input_token_portal_bytes = input_asset_bridge_portal_address.to_be_bytes(32);\n    let in_amount_bytes = input_amount.to_be_bytes(32);\n    let uniswap_fee_tier_bytes = uniswap_fee_tier.to_be_bytes(32);\n    let output_token_portal_bytes = output_asset_bridge_portal_address.to_be_bytes(32);\n    let amount_out_min_bytes = minimum_output_amount.to_be_bytes(32);\n    let secret_hash_for_redeeming_minted_notes_bytes = secret_hash_for_redeeming_minted_notes.to_be_bytes(32);\n    let secret_hash_for_L1_to_l2_message_bytes = secret_hash_for_L1_to_l2_message.to_be_bytes(32);\n    let deadline_for_L1_to_l2_message_bytes = deadline_for_L1_to_l2_message.to_be_bytes(32);\n    let canceller_bytes = canceller_for_L1_to_L2_message.to_be_bytes(32);\n    let caller_on_L1_bytes = caller_on_L1.to_be_bytes(32);\n\n    // function selector: 0xbd87d14b keccak256(\"swap_private(address,uint256,uint24,address,uint256,bytes32,bytes32,uint32,address,address)\")\n    hash_bytes[0] = 0xbd;\n    hash_bytes[1] = 0x87;\n    hash_bytes[2] = 0xd1;\n    hash_bytes[3] = 0x4b;\n\n    for i in 0..32 {\n        hash_bytes[i + 4] = input_token_portal_bytes[i];\n        hash_bytes[i + 36] = in_amount_bytes[i];\n        hash_bytes[i + 68] = uniswap_fee_tier_bytes[i];\n        hash_bytes[i + 100] = output_token_portal_bytes[i];\n        hash_bytes[i + 132] = amount_out_min_bytes[i];\n        hash_bytes[i + 164] = secret_hash_for_redeeming_minted_notes_bytes[i];\n        hash_bytes[i + 196] = secret_hash_for_L1_to_l2_message_bytes[i];\n        hash_bytes[i + 228] = deadline_for_L1_to_l2_message_bytes[i];\n        hash_bytes[i + 260] = canceller_bytes[i];\n        hash_bytes[i + 292] = caller_on_L1_bytes[i];\n    }\n    let content_hash = sha256_to_field(hash_bytes);\n    content_hash\n}\n// docs:end:compute_swap_private_content_hash",
                "path": "/usr/src/yarn-project/noir-contracts/src/contracts/uniswap_contract/src/util.nr"
            }
        }
    }
}
