{
    "name": "Escrow",
    "functions": [
        {
            "name": "compute_note_hash_and_nullifier",
            "functionType": "unconstrained",
            "isInternal": false,
            "parameters": [
                {
                    "name": "contract_address",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                },
                {
                    "name": "nonce",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                },
                {
                    "name": "storage_slot",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                },
                {
                    "name": "serialized_note",
                    "type": {
                        "kind": "array",
                        "length": 3,
                        "type": {
                            "kind": "field"
                        }
                    },
                    "visibility": "private"
                }
            ],
            "returnTypes": [
                {
                    "kind": "array",
                    "length": 4,
                    "type": {
                        "kind": "field"
                    }
                }
            ],
            "bytecode": "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",
            "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
        },
        {
            "name": "constructor",
            "functionType": "secret",
            "isInternal": false,
            "parameters": [
                {
                    "name": "owner",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "public"
                }
            ],
            "returnTypes": [],
            "bytecode": "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",
            "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
        },
        {
            "name": "withdraw",
            "functionType": "secret",
            "isInternal": false,
            "parameters": [
                {
                    "name": "token",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                },
                {
                    "name": "amount",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                },
                {
                    "name": "recipient",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                }
            ],
            "returnTypes": [],
            "bytecode": "",
            "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
        }
    ],
    "events": [],
    "debug": {
        "debugSymbols": [
            "eJzt3d+u5LhxwOF3metFoPpHivsqQS6MxAEMGOsg9p2x7x4tMt1zBpbMHYun+WuSV14YfUZVxelSkXM+6e9f/vyX//zD3/70l1/++uXnv3/Z/k3iy8///vcvf/2fP/zy2//x17/94X//9uXn7acvf/zlv47//fWnL//9pz//8cvP8utP//ApdQ/5+snjv1M8P13i5OOS8+PD27c/2PzX//jpt0ASJZBMCWSnBFIggehGCUQogSglEKME4pRAKJ1VKZ1VKZ1VKZ1VKZ3VKJ3VKJ3VKJ3VKJ3VKJ3VKJ3VKJ3VKJ3VKJ3VKJ3VKZ3VKZ3VKZ3VKZ3VKZ3VKZ3VKZ3VKZ3VKZ3VKZ01KJ01KJ01KJ01KJ01KJ01KJ01KJ01KJ01KJ01KJ01UTpronTWROmsidJZE6WzJkpnTZTOmiidNVE6a6J01kzprJnSWTOls2ZKZ82UzpopnTVTOmumdNZM6ayZ0ll3SmfdKZ11p3TWndJZd0pn3Smddad01p3SWXdKZ90pnbVQOmuhdNZC6ayF0lkLpbMWSmctlM5aKJ21UDproXRW2SitVTZKb5WN0lxlo3RX2SjtVTZKf5WN0mBlo3RY2SgtVjZMjxVMjxVMjxVMjxVMjxVMj+WYLA7K4qgsDsvCuCzBwCzByCzB0CzB2CzB4CzB6CzB8CzB+CzBAC3BCC3BEC3BGC3BIC3BKC3BMC3BOC3BQC3BSC3BUC3BWC3BYC3BaC3BcC3BeC3BgC3BiC3BkC3BmC3BoC3BqC3BsC3BuC3BwC3ByC3B0C3B2C3B4C3B6C3B8C3B+C3BAC7BCC7BEC7BGC7BIC7BKC7BMC7BOC7BQC7BSC7BUC7BWC7BYC7BaC7BcC7BeC7BgC7BiC7BkC7BmC7BoC7BqC7BsC7BuC7BwC7ByC7B0C7B2C7B4C7B6C7B8C7B+C7BAC/BCC/BEC/BGC/BIC/BKC/BMC/BOC/FOC/FOC/FOC/FOC/dKD1WMc5LMc5LMc5LMc5LMc5LMc5LMc5LMc5LMc5LMc5LMc5LMc5LMc5LMc5LMc5LMc5LMc5LMc5LMc5LMc5LMc5LMc5LMc5LMc5LMc5LMc5LMc5LMc5LMc5LMc5LMc5LMc5LMc5LMc5LMc5LMc5LMc5LMc5LMc5LMc5LMc5LMc5LMc5LMc5LMc5LMc5LMc5LMc5LMc5LMc5LMc5LMc5LMc5LMc5LMc5LMc5LMc5LMc5LMc5LMc5LMc5LMc5LMc5LMc5LMc5LMc5LMc5LMc5LMc5LMc5LMc5LMc5LMc5LMc5LMc5LMc5LMc5LMc5LMc5LMc5LMc5LMc5LMc5LMc5LMc5LMc5LMc5LMc5LMc5LMc5LMc5LMc5LMc5LMc5LMc7LMM7LMM7LMM7LMM7LNkqPNYzzMozzMozzMozzMozzMozzMozzMozzMozzMozzMozzMozzMozzMozzMozzMozzMozzMozzMozzMozzMozzMozzMozzMozzMozzMozzMozzMozzMozzMozzMozzMozzMozzMozzMozzMozzMozzMozzMozzMozzMozzMozzMozzMozzMozzMozzMozzMozzMozzMozzMozzMozzMozzMozzMozzMozzMozzMozzMozzMozzMozzMozzMozzMozzMozzMozzMozzMozzMozzMozzMozzMozzMozzMozzMozzMozzMozzMozzMozzMozzMozzMozzMozzMozzMozzMozzMozzMozzMozzMozzMozzMozzMozzMozzMozzcozzcozzcozzcozz8o3SYx3jvBzjvBzjvBzjvBzjvBzjvBzjvBzjvBzjvBzjvBzjvBzjvBzjvBzjvBzjvBzjvBzjvBzjvBzjvBzjvBzjvBzjvBzjvBzjvBzjvBzjvBzjvBzjvBzjvBzjvBzjvBzjvBzjvBzjvBzjvBzjvBzjvBzjvBzjvBzjvBzjvBzjvBzjvBzjvBzjvBzjvBzjvBzjvBzjvBzjvBzjvBzjvBzjvBzjvBzjvBzjvBzjvBzjvBzjvBzjvBzjvBzjvBzjvBzjvBzjvBzjvBzjvBzjvBzjvBzjvBzjvBzjvBzjvBzjvBzjvBzjvBzjvBzjvBzjvBzjvBzjvBzjvBzjvBzjvBzjvBzjvBzjvBzjvBzjvBzjvBzjvBzjvBzjvBzjvBzjvALjvALjvALjvALjvGKj9NjAOK/AOK/AOK/AOK/AOK/AOK/AOK/AOK/AOK/AOK/AOK/AOK/AOK/AOK/AOK/AOK/AOK/AOK/AOK/AOK/AOK/AOK/AOK/AOK/AOK/AOK/AOK/AOK/AOK/AOK/AOK/AOK/AOK/AOK/AOK/AOK/AOK/AOK/AOK/AOK/AOK/AOK/AOK/AOK/AOK/AOK/AOK/AOK/AOK/AOK/AOK/AOK/A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WwwhO0LhdFsMIjtC4XRbDCM7QuF0WwwkO0LhdFsMJTtCwXRb4Vgy4Vgy4Vgy4Vgy2TDdVjiWTDiWTDiWTDiWTDiWTDiWTDiWTDiWTDiWTDiWTDiWTDiWTDiWTDiWTDiWTDiWTDiWTDiWTDiWTDiWTDiWTDiWTDiWTDiWTDiWTDiWTDiWTDiWTDiWTDiWTDiWTDiWTDiWTDiWTDiWTDiWTDiWTDiWTDiWTDiWTDiWTDiWTDiWTDiWTDiWTDiWTDiWTDiWTDiWTDiWTDiWTDiWTDiWTDiWTDiWTDiWTDiWTDiWTDiWTDiWTDiWTDiWTDiWTDiWTDiWTDiWTDiWTDiWTDiWTDiWTDiWTDiWTDiWTDiWTDiWTDiWTDiWTDiWTDiWTDiWTDiWTDiWTDiWTDiWTDiWTDiWTDiWTDiWTDiWTDiWTDiWTDiWTDiWTDiWTDiWTDmWTDmWTDmWTDmWTDdMt1WOJVOOJVOOJVOOJVOOJVOOJVOOJVOOJVOOJVOOJVOOJVOOJVOOJVOOJVOOJVOOJVOOJVOOJVOOJVOOJVOOJVOOJVOOJVOOJVOOJVOOJVOOJVOOJVOOJVOOJVOOJVOOJVOOJVOOJVOOJVOOJVOOJVOOJVOOJVOOJVOOJVOOJVOOJVOOJVOOJVOOJVOOJVOOJVOOJVOOJVOOJVOOJVOOJVOOJVOOJVOOJVOOJVOOJVOOJVOOJVOOJVOOJVOOJVOOJVOOJVOOJVOOJVOOJVOOJVOOJVOOJVOOJVOOJVOOJVOOJVOOJVOOJVOOJVOOJVOOJVOOJVOOJVOOJVOOJVOOJVOOJVOOJVOOJVOOJVOOJVOOJVOOJVOOJVOOJVOOJTOOJTOOJTOOJTOOJbMN022NY8mMY8mMY8mMY8mMY8mMY8mMY8mMY8mMY8mMY8mMY8mMY8mMY8mMY8mMY8mMY8mMY8mMY8mMY8mMY8mMY8mMY8mMY8mMY8mMY8mMY8mMY8mMY8mMY8mMY8mMY8mMY8mMY8mMY8mMY8mMY8mMY8mMY8mMY8mMY8mMY8mMY8mMY8mMY8mMY8mMY8mMY8mMY8mMY8mMY8mMY8mMY8mMY8mMY8mMY8mMY8mMY8mMY8mMY8mMY8mMY8mMY8mMY8mMY8mMY8mMY8mMY8mMY8mMY8mMY8mMY8mMY8mMY8mMY8mMY8mMY8mMY8mMY8mMY8mMY8mMY8mMY8mMY8mMY8mMY8mMY8mMY8mMY8mMY8mMY8mMY8mMY8mMY8mMY8mMY8mcY8mcY8mcY8mcY8l8w3Rb51gy51gy51gy51gy51gy51gy51gy51gy51gy51gy51gy51gy51gy51gy51gy51gy51gy51gy51gy51gy51gy51gy51gy51gy51gy51gy51gy51gy51gy51gy51gy51gy51gy51gy51gy51gy51gy51gy51gy51gy51gy51gy51gy51gy51gy51gy51gy51gy51gy51gy51gy51gy51gy51gy51gy51gy51gy51gy51gy51gy51gy51gy51gy51gy51gy51gy51gy51gy51gy51gy51gy51gy51gy51gy51gy51gy51gy51gy51gy51gy51gy51gy51gy51gy51gy51gy51gy51gy51gy51gy51gy51gy51gy51gy51iy4Fiy4Fiy4Fiy4Fiy2DDdNjiWLDiWLDiWLDiWLDiWLDiWLDiWLDiWLDiWLDiWLDiWLDiWLDiWLDiWLDiWLDiWLDiWLDiWLDiWLDiWLDiWLDiWLDiWLDiWLDiWLDiWLDiWLDiWLDiWLDiWLDiWLDiWLDiWLM4tmZo+r2EeHwJ6/NhpZ6z+2LnRqv/Yacep/9hpd6j/2Ok3uf5jp986tUjP1fLyT5fWLMfXzx7/mb59VuJ5kdPvU+uLnH5Tfuwi9uEi+buLnHx638vj00X0NKTTb0zfkC6+OT1DuvhWdgzp3An1Demim/QM6aJT9Qzpogv2DKlBh20dUoN+3DokXvc+90V9Q+J173Nv1DWkc3fUNyRe9z53SH1D4nXvc5fUNyRe9z53Sn1D4nXvc7fUNyRe9z53TH1DenFfks2/fljEvn029BnQi7tSPaAXf9vkeawhWk4DevF3rR7Qi79p1YDOBUvPgF48I9UD+tQJ6XGRT+0tj4s06Bdq3y6yV0qrxxUff3L6cIIrYc+QGkwxrUNqMMX8UEie9fEnx3d91c7+uh4BPpvwxyPQDwk06MJ9E2jQtfsm0KDLf2YCJT9bnsRZAufS5p0SaHAX6ZtAg7vOJyagLs8Eopwm0OCO1jeBV98tmyfwqffWx0U+9W75uMin3tEeF/nUu87jIp96Z/j/i6RzudP6Ip/aYR8X+dQu+LjIp3aqx0U+tZs8LvKCb3w6Vy2tL/KCb3w6lyitL/KKb/y5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",
            ""
        ],
        "fileMap": {
            "1": {
                "source": "// Sample escrow contract that stores a balance of a private token on behalf of an owner.\ncontract Escrow {\n    use dep::std::option::Option;\n\n    use dep::aztec::{\n        context::{PrivateContext, PublicContext, Context},\n        note::{\n            note_getter_options::NoteGetterOptions,\n            note_header::NoteHeader,\n            utils as note_utils,\n        },\n        oracle::get_public_key::get_public_key,\n        selector::compute_selector,\n        state_vars::set::Set,\n    };\n\n    use dep::address_note::address_note::{\n        AddressNote,\n        AddressNoteMethods,\n        ADDRESS_NOTE_LEN,\n    };\n\n    struct Storage {\n        owners: Set<AddressNote, ADDRESS_NOTE_LEN>,\n    }\n\n    impl Storage {\n        fn init(context: Context) -> pub Self {\n            Storage {\n                owners: Set::new(context, 1, AddressNoteMethods),\n            }\n        }\n    }\n\n    // Creates a new instance\n    // docs:start:constructor\n    #[aztec(private)]\n    fn constructor(owner: pub Field) {\n        let this = context.this_address();\n\n        // Create a new note and add it to the owners set.\n        let mut note = AddressNote::new(owner, this);\n\n        // Insert the owner into storage\n        storage.owners.insert(&mut note, true);\n    }\n    // docs:end:constructor\n\n    // Withdraws balance. Requires that msg.sender is registered as an owner.\n    #[aztec(private)]\n    fn withdraw(token: Field, amount: Field, recipient: Field) {\n        let this = context.this_address();\n        let sender = context.msg_sender();\n\n        // We don't remove note from the owners set. If a note exists, the owner and recipient are legit.\n        let options = NoteGetterOptions::new().select(0, sender).select(1, this).set_limit(1);\n        let notes = storage.owners.get_notes(options);\n        assert(notes[0].is_some(), \"Sender is not an owner.\");\n\n        let selector = compute_selector(\"transfer((Field),(Field),Field,Field)\");\n        let _callStackItem = context.call_private_function(token, selector, [this, recipient, amount, 0]);\n    }\n\n    unconstrained fn compute_note_hash_and_nullifier(contract_address: Field, nonce: Field, storage_slot: Field, serialized_note: [Field; ADDRESS_NOTE_LEN]) -> [Field; 4] {\n        let note_header = NoteHeader::new(contract_address, nonce, storage_slot);\n        assert(storage_slot == 1);\n        note_utils::compute_note_hash_and_nullifier(AddressNoteMethods, note_header, serialized_note)\n    }\n}\n",
                "path": "/usr/src/yarn-project/noir-contracts/src/contracts/escrow_contract/src/main.nr"
            },
            "18": {
                "source": "struct GrumpkinScalar {\n    low: Field,\n    high: Field,\n}\n\nimpl GrumpkinScalar {\n    pub fn new(low: Field, high: Field) -> Self {\n        // TODO: check that the low and high value fit within the grumpkin modulus\n        GrumpkinScalar { low, high }\n    }\n}\n\nglobal GRUMPKIN_SCALAR_SERIALIZED_LEN: Field = 2;\n\npub fn deserialize_grumpkin_scalar(fields: [Field; GRUMPKIN_SCALAR_SERIALIZED_LEN]) -> GrumpkinScalar {\n    GrumpkinScalar { low: fields[0], high: fields[1] }\n}\n\npub fn serialize_grumpkin_scalar(scalar: GrumpkinScalar) -> [Field; GRUMPKIN_SCALAR_SERIALIZED_LEN] {\n    [scalar.low, scalar.high]\n}\n",
                "path": "std/grumpkin_scalar.nr"
            },
            "19": {
                "source": "use crate::grumpkin_scalar::GrumpkinScalar;\nuse crate::scalar_mul::fixed_base_embedded_curve;\n\npub fn grumpkin_fixed_base(scalar: GrumpkinScalar) -> [Field; 2] {\n    // TODO: this should use both the low and high limbs to do the scalar multiplication\n    fixed_base_embedded_curve(scalar.low, scalar.high)\n}\n",
                "path": "std/grumpkin_scalar_mul.nr"
            },
            "34": {
                "source": "struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::unsafe::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default\n        }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            other\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<U, Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            default()\n        }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some {\n                Option::none()\n            } else {\n                self\n            }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n",
                "path": "std/option.nr"
            },
            "93": {
                "source": "use dep::protocol_types::constants::{\n    RETURN_VALUES_LENGTH,\n    MAX_READ_REQUESTS_PER_CALL,\n    MAX_PENDING_READ_REQUESTS_PER_CALL,\n    MAX_NEW_COMMITMENTS_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n    NUM_FIELDS_PER_SHA256,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL,\n    GENERATOR_INDEX__FUNCTION_ARGS,\n    BLOCK_HEADER_LENGTH,\n    CONTRACT_DEPLOYMENT_DATA_LENGTH,\n    CALL_CONTEXT_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n    CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH,\n    CONTRACT_STORAGE_READ_LENGTH,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n    GENERATOR_INDEX__BLOCK_HASH,\n    GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS,\n    GENERATOR_INDEX__FUNCTION_DATA,\n    GENERATOR_INDEX__PUBLIC_DATA_READ,\n    GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST,\n    GENERATOR_INDEX__CALL_CONTEXT,\n    GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS,\n    GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA,\n};\n\nuse crate::oracle::debug_log;\nuse crate::types::vec::BoundedVec;\nuse crate::types::point::Point;\nuse crate::hash::pedersen_hash;\n\n// docs:start:private-global-variables\nstruct PrivateGlobalVariables {\n    chain_id: Field,\n    version: Field,\n}\n// docs:end:private-global-variables\n\nimpl PrivateGlobalVariables {\n    fn serialize(self) -> [Field; 2] {\n        [self.chain_id, self.version]\n    }\n}\n\n// docs:start:public-global-variables\nstruct PublicGlobalVariables {\n    chain_id: Field,\n    version: Field,\n    block_number: Field,\n    timestamp: Field,\n}\n// docs:end:public-global-variables\n\nimpl PublicGlobalVariables {\n    fn serialize(self) -> [Field; 4] {\n        [self.chain_id, self.version, self.block_number, self.timestamp]\n    }\n}\n\n// docs:start:contract-deployment-data\nstruct ContractDeploymentData {\n    deployer_public_key: Point,\n    constructor_vk_hash : Field,\n    function_tree_root : Field,\n    contract_address_salt : Field,\n    portal_contract_address : Field,\n}\n// docs:end:contract-deployment-data\n\nimpl ContractDeploymentData {\n    fn serialize(self) -> [Field; CONTRACT_DEPLOYMENT_DATA_LENGTH] {\n        [\n            self.deployer_public_key.x,\n            self.deployer_public_key.y,\n            self.constructor_vk_hash,\n            self.function_tree_root,\n            self.contract_address_salt,\n            self.portal_contract_address,\n        ]\n    }\n\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA)\n    }\n}\n\n// PrivateContextInputs are expected to be provided to each private function\n// docs:start:private-context-inputs\nstruct PrivateContextInputs {\n    call_context : CallContext,\n    block_header: BlockHeader,\n    contract_deployment_data: ContractDeploymentData,\n    private_global_variables: PrivateGlobalVariables,\n}\n// docs:end:private-context-inputs\n\n// PublicContextInputs are expected to be provided to each public function\n// docs:start:public-context-inputs\nstruct PublicContextInputs {\n    call_context: CallContext,\n    block_header: BlockHeader,\n\n    public_global_variables: PublicGlobalVariables,\n}\n// docs:end:public-context-inputs\n\n// docs:start:call-context\nstruct CallContext {\n    msg_sender : Field,\n    storage_contract_address : Field,\n    portal_contract_address : Field,\n    function_selector: Field,\n\n    is_delegate_call : bool,\n    is_static_call : bool,\n    is_contract_deployment: bool,\n}\n// docs:end:call-context\n\nimpl CallContext {\n    fn serialize(self) -> [Field; CALL_CONTEXT_LENGTH] {\n        [\n            self.msg_sender,\n            self.storage_contract_address,\n            self.portal_contract_address,\n            self.function_selector,\n            self.is_delegate_call as Field,\n            self.is_static_call as Field,\n            self.is_contract_deployment as Field,\n        ]\n    }\n\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CALL_CONTEXT)\n    }\n}\n\n// docs:start:block-header\nstruct BlockHeader {\n    note_hash_tree_root : Field,\n    nullifier_tree_root : Field,\n    contract_tree_root : Field,\n    l1_to_l2_messages_tree_root : Field,\n    archive_root: Field,\n    public_data_tree_root: Field,\n    global_variables_hash: Field,\n}\n// docs:end:block-header\n\nimpl BlockHeader {\n    // NOTE: this order must match the order in `private_circuit_public_inputs.hpp`\n    pub fn serialize(self) -> [Field; BLOCK_HEADER_LENGTH] {\n        [\n            self.note_hash_tree_root,\n            self.nullifier_tree_root,\n            self.contract_tree_root,\n            self.l1_to_l2_messages_tree_root,\n            self.archive_root,\n            self.public_data_tree_root,\n            self.global_variables_hash,\n        ]\n    }\n\n    pub fn deserialize(deserialized: [Field; BLOCK_HEADER_LENGTH]) -> Self {\n        BlockHeader {\n            note_hash_tree_root: deserialized[0],\n            nullifier_tree_root: deserialized[1],\n            contract_tree_root: deserialized[2],\n            l1_to_l2_messages_tree_root: deserialized[3],\n            archive_root: deserialized[4],\n            public_data_tree_root: deserialized[5],\n            global_variables_hash: deserialized[6],\n        }\n    }\n\n    pub fn empty() -> Self {\n        Self { note_hash_tree_root: 0, nullifier_tree_root: 0, contract_tree_root: 0, l1_to_l2_messages_tree_root: 0, archive_root: 0, public_data_tree_root: 0, global_variables_hash: 0 }\n    }\n\n    pub fn block_hash(self) -> Field {\n        // TODO(#3442): Unify the ordering in `BlockHeader::serialize` function and the ordering\n        // in the block hash preimage --> This requires changes in the circuits.\n        let inputs = [\n            self.global_variables_hash,\n            self.note_hash_tree_root,\n            self.nullifier_tree_root,\n            self.contract_tree_root,\n            self.l1_to_l2_messages_tree_root,\n            self.public_data_tree_root\n        ];\n        pedersen_hash(inputs, GENERATOR_INDEX__BLOCK_HASH)\n    }\n}\n\nstruct FunctionData {\n    function_selector: Field,\n    is_internal: bool,\n    is_private: bool,\n    is_constructor: bool,\n}\n\nimpl FunctionData {\n    fn hash(self) -> Field {\n        pedersen_hash([\n            self.function_selector,\n            self.is_internal as Field,\n            self.is_private as Field,\n            self.is_constructor as Field,\n        ], GENERATOR_INDEX__FUNCTION_DATA)\n    }\n}\n\nstruct PrivateCircuitPublicInputs {\n    call_context: CallContext,\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n    read_requests: [Field; crate::abi::MAX_READ_REQUESTS_PER_CALL],\n    pending_read_requests: [Field; crate::abi::MAX_PENDING_READ_REQUESTS_PER_CALL],\n    new_commitments: [Field; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [Field; MAX_NEW_NULLIFIERS_PER_CALL],\n    nullified_commitments: [Field; MAX_NEW_NULLIFIERS_PER_CALL],\n    private_call_stack: [Field; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL],\n    public_call_stack: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_l2_to_l1_msgs: [Field; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    // Explore introducing a new type like uint256 (similar to Point), so it's more explicit that\n    // we're talking about a single number backed by two field elements.\n    encrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    encrypted_log_preimages_length: Field,\n    unencrypted_log_preimages_length: Field,\n    block_header: BlockHeader,\n    contract_deployment_data: ContractDeploymentData,\n    chain_id: Field,\n    version: Field,\n}\n\nimpl PrivateCircuitPublicInputs {\n    fn hash(self) -> Field {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0); \n        fields.push(self.call_context.hash());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.push_array(self.read_requests);\n        fields.push_array(self.pending_read_requests);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.nullified_commitments);\n        fields.push_array(self.private_call_stack);\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_header.serialize());\n        fields.push(self.contract_deployment_data.hash());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n\n        pedersen_hash(fields.storage, GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS)\n    }\n\n    fn serialize(self) -> [Field; PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.push_array(self.read_requests);\n        fields.push_array(self.pending_read_requests);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.private_call_stack);\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_header.serialize());\n        fields.push_array(self.contract_deployment_data.serialize());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n        fields.storage\n    }\n}\n\nstruct ContractStorageRead {\n    storage_slot: Field,\n    value: Field,\n}\n\nimpl ContractStorageRead {\n    pub fn serialize(self) -> [Field; CONTRACT_STORAGE_READ_LENGTH] {\n        [self.storage_slot, self.value]\n    }\n\n    pub fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_READ)\n    }\n\n    pub fn empty() -> Self {\n        Self { storage_slot: 0, value: 0 }\n    }\n}\n\nstruct ContractStorageUpdateRequest {\n    storage_slot: Field,\n    old_value: Field,\n    new_value: Field,\n}\n\nimpl ContractStorageUpdateRequest {\n    pub fn serialize(self) -> [Field; CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH] {\n        [self.storage_slot, self.old_value, self.new_value]\n    }\n\n    pub fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST)\n    }\n\n    pub fn empty() -> Self {\n        Self { storage_slot: 0, old_value: 0, new_value: 0 }\n    }\n}\n\nstruct PublicCircuitPublicInputs {\n    call_context: CallContext,\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n    contract_storage_update_requests: [ContractStorageUpdateRequest; MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n    contract_storage_read: [ContractStorageRead; MAX_PUBLIC_DATA_READS_PER_CALL],\n    public_call_stack: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_commitments: [Field; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [Field; crate::abi::MAX_NEW_NULLIFIERS_PER_CALL],\n    new_l2_to_l1_msgs: [Field; crate::abi::MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_log_preimages_length: Field,\n    block_header: BlockHeader,\n    prover_address: Field,\n}\n\nimpl PublicCircuitPublicInputs {\n    \n    pub fn hash(self) -> Field {\n        let mut inputs: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0);\n        inputs.push(self.call_context.hash());\n        inputs.push(self.args_hash);\n        inputs.push_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            inputs.push(self.contract_storage_update_requests[i].hash());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            inputs.push(self.contract_storage_read[i].hash());\n        }\n        inputs.push_array(self.public_call_stack);\n        inputs.push_array(self.new_commitments);\n        inputs.push_array(self.new_nullifiers);\n        inputs.push_array(self.new_l2_to_l1_msgs);\n\n        inputs.push_array(self.unencrypted_logs_hash);\n        inputs.push(self.unencrypted_log_preimages_length);\n        inputs.push_array(self.block_header.serialize());\n        inputs.push(self.prover_address);\n\n        pedersen_hash(inputs.storage, GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS)\n    }\n\n    pub fn serialize(self) -> [Field; PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());   \n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            fields.push_array(self.contract_storage_update_requests[i].serialize());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            fields.push_array(self.contract_storage_read[i].serialize());\n        }\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_header.serialize());\n        fields.push(self.prover_address);\n        fields.storage\n    }\n}\n\nstruct Hasher {\n    fields: [Field],\n}\n\nimpl Hasher {\n    pub fn new()-> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<N>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n\n    pub fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nglobal ARGS_HASH_CHUNK_LENGTH: u32 = 32;\nglobal ARGS_HASH_CHUNK_COUNT: u32 = 16;\n\npub fn hash_args<N>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        let mut chunks_hashes = [0; ARGS_HASH_CHUNK_COUNT];\n        for i in 0..ARGS_HASH_CHUNK_COUNT {\n            let mut chunk_hash = 0;\n            let start_chunk_index = i * ARGS_HASH_CHUNK_LENGTH;\n            if start_chunk_index < (args.len() as u32) {\n                let mut chunk_args = [0; ARGS_HASH_CHUNK_LENGTH];\n                for j in 0..ARGS_HASH_CHUNK_LENGTH {\n                    let item_index = i * ARGS_HASH_CHUNK_LENGTH + j;\n                    if item_index < (args.len() as u32) {\n                        chunk_args[j] = args[item_index];\n                    }\n                }\n                chunk_hash = pedersen_hash(chunk_args, GENERATOR_INDEX__FUNCTION_ARGS);\n            }\n            chunks_hashes[i] = chunk_hash;\n        }\n        pedersen_hash(chunks_hashes, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n",
                "path": "/aztec/abi.nr"
            },
            "94": {
                "source": "use dep::protocol_types::constants::GENERATOR_INDEX__CONTRACT_ADDRESS;\nuse crate::hash::pedersen_hash;\n\npub fn compute_address(pub_key_x: Field, pub_key_y: Field, partial_address: Field) -> Field {\n    pedersen_hash([pub_key_x, pub_key_y, partial_address],\n        GENERATOR_INDEX__CONTRACT_ADDRESS)\n}\n",
                "path": "/aztec/address.nr"
            },
            "95": {
                "source": "use dep::protocol_types::constants::{\n    EMPTY_NULLIFIED_COMMITMENT,\n    MAX_NEW_COMMITMENTS_PER_CALL,\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_READ_REQUESTS_PER_CALL,\n    MAX_PENDING_READ_REQUESTS_PER_CALL,\n    NUM_FIELDS_PER_SHA256,\n    RETURN_VALUES_LENGTH,\n};\n\nuse crate::abi;\n\nuse crate::abi::{\n    hash_args,\n    CallContext,\n    ContractDeploymentData,\n    BlockHeader,\n    FunctionData,\n    PrivateCircuitPublicInputs,\n    PublicCircuitPublicInputs,\n};\n\n// TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n// use dep::std::collections::vec::Vec;\n\n// l1 to l2 messaging\nuse crate::messaging::process_l1_to_l2_message;\nuse crate::private_call_stack_item::PrivateCallStackItem;\nuse crate::public_call_stack_item::PublicCallStackItem;\n\nuse crate::types::{\n    vec::BoundedVec,\n    point::Point,\n};\n\nuse crate::utils::arr_copy_slice;\n\nuse crate::oracle::{\n    arguments,\n    call_private_function::call_private_function_internal,\n    public_call::call_public_function_internal,\n    enqueue_public_function_call::enqueue_public_function_call_internal,\n    context::get_portal_address,\n    get_block_header::get_block_header,\n};\n\nuse dep::std::option::Option;\n\n// When finished, one can call .finish() to convert back to the abi\nstruct PrivateContext {\n    // docs:start:private-context\n    inputs: abi::PrivateContextInputs,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    read_requests: BoundedVec<Field, MAX_READ_REQUESTS_PER_CALL>,\n    pending_read_requests: BoundedVec<Field, MAX_PENDING_READ_REQUESTS_PER_CALL>,\n\n    new_commitments: BoundedVec<Field, MAX_NEW_COMMITMENTS_PER_CALL>,\n    new_nullifiers: BoundedVec<Field, MAX_NEW_NULLIFIERS_PER_CALL>,\n    nullified_commitments: BoundedVec<Field, MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    private_call_stack : BoundedVec<Field, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_stack : BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    new_l2_to_l1_msgs : BoundedVec<Field, MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    block_header: BlockHeader,\n\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    // encrypted_logs_preimages: Vec<Field>,\n    // unencrypted_logs_preimages: Vec<Field>,\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: abi::PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs: inputs,\n\n            args_hash: args_hash,\n            return_values: BoundedVec::new(0),\n\n            read_requests: BoundedVec::new(0),\n            pending_read_requests: BoundedVec::new(0),\n\n            new_commitments: BoundedVec::new(0),\n            new_nullifiers: BoundedVec::new(0),\n            nullified_commitments: BoundedVec::new(0),\n\n            block_header: inputs.block_header,\n\n            private_call_stack: BoundedVec::new(0),\n            public_call_stack: BoundedVec::new(0),\n            new_l2_to_l1_msgs: BoundedVec::new(0),\n\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    pub fn msg_sender(self) -> Field {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> Field {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    pub fn this_portal_address(self) -> Field {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.private_global_variables.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.private_global_variables.version\n    }\n\n    pub fn selector(self) -> Field {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn get_block_header(self, block_number: u32) -> BlockHeader {\n        get_block_header(block_number, self)\n    }\n\n    pub fn finish(self) -> abi::PrivateCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let encrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let encrypted_log_preimages_length = 0;\n        let unencrypted_log_preimages_length = 0;\n\n        let priv_circuit_pub_inputs = abi::PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            return_values: self.return_values.storage,\n            read_requests: self.read_requests.storage,\n            pending_read_requests: self.pending_read_requests.storage,\n            new_commitments: self.new_commitments.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            nullified_commitments: self.nullified_commitments.storage,\n            private_call_stack: self.private_call_stack.storage,\n            public_call_stack: self.public_call_stack.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            encrypted_logs_hash: encrypted_logs_hash,\n            unencrypted_logs_hash: unencrypted_logs_hash,\n            encrypted_log_preimages_length: encrypted_log_preimages_length,\n            unencrypted_log_preimages_length: unencrypted_log_preimages_length,\n            block_header: self.block_header,\n            contract_deployment_data: self.inputs.contract_deployment_data,\n            chain_id: self.inputs.private_global_variables.chain_id,\n            version: self.inputs.private_global_variables.version,\n        };\n        priv_circuit_pub_inputs\n    }\n\n    pub fn push_read_request(&mut self, read_request: Field) {\n        self.read_requests.push(read_request);\n    }\n\n    pub fn push_pending_read_request(&mut self, pending_read_request: Field) {\n        self.pending_read_requests.push(pending_read_request);\n    }\n\n    pub fn push_new_note_hash(&mut self, note_hash: Field) {\n        self.new_commitments.push(note_hash);\n    }\n\n    // We never push a zero nullified_commitment as zero is used to indicate the end\n    // of a field array in private kernel. This routine transparently replaces a\n    // zero value into the special placeholder: EMPTY_NULLIFIED_COMMITMENT.\n    pub fn push_new_nullifier(&mut self, nullifier: Field, nullified_commitment: Field) {\n        self.new_nullifiers.push(nullifier);\n        let mut non_zero_nullified = nullified_commitment;\n        if (non_zero_nullified == 0) {\n            non_zero_nullified = EMPTY_NULLIFIED_COMMITMENT;\n        }\n        self.nullified_commitments.push(non_zero_nullified);\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, content: Field) \n    // docs:end:context_message_portal\n    {\n        self.new_l2_to_l1_msgs.push(content);\n    }\n\n    // PrivateContextInputs must be temporarily passed in to prevent too many unknowns\n    // Note this returns self to get around an issue where mutable structs do not maintain mutations unless reassigned\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        msg_key: Field,\n        content: Field,\n        secret: Field\n    ) \n    // docs:end:context_consume_l1_to_l2_message\n    {\n        let nullifier = process_l1_to_l2_message(self.block_header.l1_to_l2_messages_tree_root, self.this_address(), self.this_portal_address(), self.chain_id(), self.version(), msg_key, content, secret);\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash)\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0)\n    }\n\n    pub fn call_private_function_with_packed_args(\n        &mut self,\n        contract_address: Field,\n        function_selector: Field,\n        args_hash: Field\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let fields = call_private_function_internal(\n            contract_address, \n            function_selector, \n            args_hash\n        );\n        let item = PrivateCallStackItem {\n            contract_address: fields[0],\n            function_data: FunctionData {\n                function_selector: fields[1],\n                is_internal: fields[2] as bool,\n                is_private: fields[3] as bool,\n                is_constructor: fields[4] as bool,\n            },\n            public_inputs: PrivateCircuitPublicInputs {\n                call_context: CallContext {\n                    msg_sender : fields[5],\n                    storage_contract_address : fields[6],\n                    portal_contract_address : fields[7],\n                    function_selector: fields[8], // practically same as fields[1]\n                    is_delegate_call : fields[9] as bool,\n                    is_static_call : fields[10] as bool,\n                    is_contract_deployment: fields[11] as bool,\n                },\n                // TODO handle the offsets as a variable incremented during extraction?\n                args_hash: fields[12],\n                return_values: arr_copy_slice(fields, [0; RETURN_VALUES_LENGTH], 13),\n                read_requests: arr_copy_slice(fields, [0; MAX_READ_REQUESTS_PER_CALL], 17),\n                pending_read_requests: arr_copy_slice(fields, [0; MAX_READ_REQUESTS_PER_CALL], 49),\n                new_commitments: arr_copy_slice(fields, [0; MAX_NEW_COMMITMENTS_PER_CALL], 81),\n                new_nullifiers: arr_copy_slice(fields, [0; MAX_NEW_NULLIFIERS_PER_CALL], 97),\n                nullified_commitments: arr_copy_slice(fields, [0; MAX_NEW_NULLIFIERS_PER_CALL], 113),\n                private_call_stack: arr_copy_slice(fields, [0; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL], 129),\n                public_call_stack: arr_copy_slice(fields, [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL], 133),\n                new_l2_to_l1_msgs: arr_copy_slice(fields, [0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL], 137),\n                encrypted_logs_hash: arr_copy_slice(fields, [0; NUM_FIELDS_PER_SHA256], 139),\n                unencrypted_logs_hash: arr_copy_slice(fields, [0; NUM_FIELDS_PER_SHA256], 141),\n                encrypted_log_preimages_length: fields[143],\n                unencrypted_log_preimages_length: fields[144],\n                block_header: BlockHeader {\n                    // Must match order in `private_circuit_public_inputs.hpp`\n                    note_hash_tree_root : fields[145],\n                    nullifier_tree_root : fields[146],\n                    contract_tree_root : fields[147],\n                    l1_to_l2_messages_tree_root : fields[148],\n                    archive_root : fields[149],\n                    public_data_tree_root: fields[150],\n                    global_variables_hash: fields[151],\n                },\n                contract_deployment_data: ContractDeploymentData {\n                    deployer_public_key: Point::new(fields[152], fields[153]),\n                    constructor_vk_hash : fields[154],\n                    function_tree_root : fields[155],\n                    contract_address_salt : fields[156],\n                    portal_contract_address : fields[157],\n                },\n                chain_id: fields[158],\n                version: fields[159],\n            },\n            is_execution_request: fields[160] as bool,\n        };\n        assert(contract_address == item.contract_address);\n        assert(function_selector == item.function_data.function_selector);\n\n        assert(args_hash == item.public_inputs.args_hash);\n\n        assert(item.is_execution_request == false);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        // We are issuing a regular call which is not delegate, static, or deployment. We also constrain\n        // the msg_sender in the nested call to be equal to our address, and the execution context address\n        // for the nested call to be equal to the address we actually called.\n        assert(item.public_inputs.call_context.is_delegate_call == false);\n        assert(item.public_inputs.call_context.is_static_call == false);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n        assert(item.public_inputs.call_context.msg_sender == self.inputs.call_context.storage_contract_address);\n        assert(item.public_inputs.call_context.storage_contract_address == contract_address);\n\n        self.private_call_stack.push(item.hash());\n\n        item.public_inputs.return_values\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field,\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: Field,\n        function_selector: Field,\n        args_hash: Field\n    ) {\n        let fields = enqueue_public_function_call_internal(\n            contract_address, \n            function_selector, \n            args_hash\n        );\n        let item = PublicCallStackItem {\n            contract_address: fields[0],\n            function_data: FunctionData {\n                function_selector: fields[1],\n                is_internal: fields[2] as bool,\n                is_private: fields[3] as bool,\n                is_constructor: fields[4] as bool,\n            },\n            public_inputs: PublicCircuitPublicInputs {\n                call_context: CallContext {\n                    msg_sender : fields[5],\n                    storage_contract_address : fields[6],\n                    portal_contract_address : fields[7],\n                    function_selector: fields[8], // practically same as fields[1]\n                    is_delegate_call : fields[9] as bool,\n                    is_static_call : fields[10] as bool,\n                    is_contract_deployment: fields[11] as bool,\n                },\n                args_hash: fields[12],\n                return_values: [0; RETURN_VALUES_LENGTH],\n                contract_storage_update_requests: [ContractStorageUpdateRequest::empty(); MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n                contract_storage_read: [ContractStorageRead::empty(); MAX_PUBLIC_DATA_READS_PER_CALL],\n                public_call_stack: [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n                new_commitments: [0; MAX_NEW_COMMITMENTS_PER_CALL],\n                new_nullifiers: [0; MAX_NEW_NULLIFIERS_PER_CALL],\n                new_l2_to_l1_msgs:[0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n                unencrypted_logs_hash:[0; NUM_FIELDS_PER_SHA256],\n                unencrypted_log_preimages_length: 0,\n                block_header: BlockHeader::empty(),\n                prover_address: 0,\n            },\n            is_execution_request: true,\n        };\n\n        assert(contract_address == item.contract_address);\n        assert(function_selector == item.function_data.function_selector);\n        \n        assert(args_hash == item.public_inputs.args_hash);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        // We are issuing a regular call which is not delegate, static, or deployment. We also constrain\n        // the msg_sender in the nested call to be equal to our address, and the execution context address\n        // for the nested call to be equal to the address we actually called.\n        assert(item.public_inputs.call_context.is_delegate_call == false);\n        assert(item.public_inputs.call_context.is_static_call == false);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n        assert(item.public_inputs.call_context.msg_sender == self.inputs.call_context.storage_contract_address);\n        assert(item.public_inputs.call_context.storage_contract_address == contract_address);\n\n        self.public_call_stack.push(item.hash());\n    }\n}\n\nuse crate::abi::{\n    ContractStorageRead,\n    ContractStorageUpdateRequest\n};\n\nstruct PublicContext {\n    inputs: abi::PublicContextInputs,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    contract_storage_update_requests: BoundedVec<ContractStorageUpdateRequest, MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL>,\n    contract_storage_read: BoundedVec<ContractStorageRead, MAX_PUBLIC_DATA_READS_PER_CALL>,\n    public_call_stack: BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n\n    new_commitments: BoundedVec<Field, MAX_NEW_COMMITMENTS_PER_CALL>,\n    new_nullifiers: BoundedVec<Field, crate::abi::MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    new_l2_to_l1_msgs: BoundedVec<Field, crate::abi::MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n\n    unencrypted_logs_hash: BoundedVec<Field, NUM_FIELDS_PER_SHA256>,\n    unencrypted_logs_preimages_length: Field,\n\n    block_header: BlockHeader,\n    prover_address: Field,\n}\n\nimpl PublicContext {\n    pub fn new(inputs: abi::PublicContextInputs, args_hash: Field) -> PublicContext {\n        let empty_storage_read = ContractStorageRead::empty();\n        let empty_storage_update = ContractStorageUpdateRequest::empty();\n        PublicContext {\n            inputs: inputs,\n\n            args_hash: args_hash,\n            return_values: BoundedVec::new(0),\n\n            contract_storage_update_requests: BoundedVec::new(empty_storage_update),\n            contract_storage_read: BoundedVec::new(empty_storage_read),\n            public_call_stack: BoundedVec::new(0),\n\n            new_commitments: BoundedVec::new(0),\n            new_nullifiers: BoundedVec::new(0),\n\n            new_l2_to_l1_msgs: BoundedVec::new(0),\n\n            \n            unencrypted_logs_hash: BoundedVec::new(0),\n            unencrypted_logs_preimages_length: 0,\n\n            block_header: inputs.block_header,\n            prover_address: 0,\n\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    pub fn msg_sender(self) -> Field {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> Field {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    pub fn this_portal_address(self) -> Field {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.public_global_variables.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.public_global_variables.version\n    }\n\n    pub fn selector(self) -> Field {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn block_number(self) -> Field {\n        self.inputs.public_global_variables.block_number\n    }\n\n    pub fn timestamp(self) -> Field {\n        self.inputs.public_global_variables.timestamp\n    }\n\n    pub fn finish(self) -> abi::PublicCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_log_preimages_length = 0;\n\n\n        // Compute the public call stack hashes\n        let pub_circuit_pub_inputs = abi::PublicCircuitPublicInputs {\n            call_context: self.inputs.call_context, // Done\n            args_hash: self.args_hash, // Done\n            contract_storage_update_requests: self.contract_storage_update_requests.storage,\n            contract_storage_read: self.contract_storage_read.storage,\n            return_values: self.return_values.storage,\n            new_commitments: self.new_commitments.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            public_call_stack: self.public_call_stack.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            unencrypted_logs_hash: unencrypted_logs_hash,\n            unencrypted_log_preimages_length: unencrypted_log_preimages_length,\n            block_header: self.inputs.block_header,\n            prover_address: self.prover_address,\n        };\n        pub_circuit_pub_inputs\n    }\n\n    pub fn push_new_note_hash(&mut self, note_hash: Field) {\n        self.new_commitments.push(note_hash);\n    }\n\n    pub fn push_new_nullifier(&mut self, nullifier: Field, _nullified_commitment: Field) {\n        self.new_nullifiers.push(nullifier);\n    }\n\n    pub fn message_portal(&mut self, content: Field) {\n        self.new_l2_to_l1_msgs.push(content);\n    }\n\n    // PrivateContextInputs must be temporarily passed in to prevent too many unknowns\n    // Note this returns self to get around an issue where mutable structs do not maintain mutations unless reassigned\n    pub fn consume_l1_to_l2_message(&mut self, msg_key: Field, content: Field, secret: Field) {\n        let this = (*self).this_address();\n        let nullifier = process_l1_to_l2_message(self.block_header.l1_to_l2_messages_tree_root, this, self.this_portal_address(), self.chain_id(), self.version(), msg_key, content, secret);\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT)\n    }\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        _self: Self,\n        contract_address: Field, \n        function_selector: Field,\n        args: [Field; ARGS_COUNT],\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = abi::hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        call_public_function_internal(\n            contract_address, \n            function_selector, \n            args_hash,\n        )\n    }\n\n    pub fn call_public_function_no_args(\n        _self: Self,\n        contract_address: Field, \n        function_selector: Field,\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        call_public_function_internal(\n            contract_address, \n            function_selector, \n            0,\n        )\n    }\n\n}\n\nstruct Context {\n    private: Option<&mut PrivateContext>,\n    public: Option<&mut PublicContext>,\n}\n\nimpl Context {\n    pub fn private(context: &mut PrivateContext) -> Context {\n        Context {\n            private: Option::some(context),\n            public: Option::none()\n        }\n    }\n\n    pub fn public(context: &mut PublicContext) -> Context {\n        Context {\n            public: Option::some(context),\n            private: Option::none()\n        }\n    }\n\n    pub fn none() -> Context {\n        Context {\n            public: Option::none(),\n            private: Option::none()\n        }\n    }\n}\n",
                "path": "/aztec/context.nr"
            },
            "96": {
                "source": "use dep::std::hash::{pedersen_hash_with_separator, sha256};\nuse dep::protocol_types::constants::{\n  GENERATOR_INDEX__SIGNATURE_PAYLOAD,\n  GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET,\n};\n\npub fn sha256_to_field<N>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = sha256(bytes_to_hash);\n\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (sha256_hashed[15 - i] as Field) * v;\n        low = low + (sha256_hashed[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    let hash_in_a_field = low + high * v;\n\n    hash_in_a_field\n}\n\npub fn compute_secret_hash(secret: Field) -> Field {\n    // TODO(#1205) This is probably not the right index to use\n    pedersen_hash([secret], GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET)\n}\n\npub fn pedersen_hash<N>(inputs: [Field; N], hash_index: u32) -> Field {\n    pedersen_hash_with_separator(inputs, hash_index)\n}\n",
                "path": "/aztec/hash.nr"
            },
            "103": {
                "source": "use crate::context::{PrivateContext, PublicContext};\nuse crate::oracle;\nuse crate::types::point::Point;\n\npub fn emit_encrypted_log<N>(\n    context: &mut PrivateContext,\n    contract_address: Field,\n    storage_slot: Field,\n    encryption_pub_key: Point,\n    log: [Field; N]\n) {\n    let _ = oracle::logs::emit_encrypted_log(contract_address, storage_slot, encryption_pub_key, log);\n    context.accumulate_encrypted_logs(log);\n}\n\npub fn emit_unencrypted_log<T>(context: &mut PublicContext, log: T) {\n    let contract_address = context.this_address();\n    let event_selector = 5; // TODO: compute actual event selector.\n    let _ = oracle::logs::emit_unencrypted_log(contract_address, event_selector, log);\n    // context.accumulate_unencrypted_logs(log);\n}\n\n// TODO: We might want to remove this since emitting unencrypted logs from private functions is violating privacy.\n// --> might be a better approach to force devs to make a public function call that emits the log if needed then\n// it would be less easy to accidentally leak information.\n// If we decide to keep this function around would make sense to wait for traits and then merge it with emit_unencrypted_log.\npub fn emit_unencrypted_log_from_private<T>(context: &mut PrivateContext, log: T) {\n    let contract_address = context.this_address();\n    let event_selector = 5; // TODO: compute actual event selector.\n    let _ = oracle::logs::emit_unencrypted_log(contract_address, event_selector, log);\n    // context.accumulate_unencrypted_logs(log);\n}\n",
                "path": "/aztec/log.nr"
            },
            "108": {
                "source": "use crate::abi::PublicContextInputs;\nuse crate::context::{\n    PrivateContext,\n    PublicContext,\n};\nuse crate::note::{\n    note_header::NoteHeader,\n    note_interface::NoteInterface,\n    utils::compute_inner_note_hash,\n};\nuse crate::oracle::notes::{notify_created_note, notify_nullified_note};\nuse dep::protocol_types::constants::EMPTY_NULLIFIED_COMMITMENT;\n\npub fn create_note<Note, N>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note: &mut Note,\n    note_interface: NoteInterface<Note, N>,\n    broadcast: bool\n) {\n    let contract_address = (*context).this_address();\n\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, is_transient: true };\n    let set_header = note_interface.set_header;\n    set_header(note, header);\n    let inner_note_hash = compute_inner_note_hash(note_interface, *note);\n\n    let serialize = note_interface.serialize;\n    let serialized_note = serialize(*note);\n    assert(notify_created_note(storage_slot, serialized_note, inner_note_hash) == 0);\n\n    context.push_new_note_hash(inner_note_hash);\n\n    if broadcast {\n        let broadcast = note_interface.broadcast;\n        broadcast(context, storage_slot, *note);\n    }\n}\n\npub fn create_note_hash_from_public<Note, N>(\n    context: &mut PublicContext,\n    storage_slot: Field,\n    note: &mut Note,\n    note_interface: NoteInterface<Note, N>\n) {\n    let contract_address = (*context).this_address();\n\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, is_transient: true };\n    let set_header = note_interface.set_header;\n    set_header(note, header);\n    let inner_note_hash = compute_inner_note_hash(note_interface, *note);\n\n    context.push_new_note_hash(inner_note_hash);\n}\n\npub fn destroy_note<Note, N>(context: &mut PrivateContext, note: Note, note_interface: NoteInterface<Note, N>) {\n    let mut nullifier = 0;\n    let mut nullified_commitment: Field = EMPTY_NULLIFIED_COMMITMENT;\n    let compute_nullifier = note_interface.compute_nullifier;\n    nullifier = compute_nullifier(note);\n\n    // We also need the note commitment corresponding to the \"nullifier\"\n    let get_header = note_interface.get_header;\n    let header = get_header(note);\n    // `nullified_commitment` is used to inform the kernel which pending commitment\n    // the nullifier corresponds to so they can be matched and both squashed/deleted.\n    // nonzero nonce implies \"persistable\" nullifier (nullifies a persistent/in-tree\n    // commitment) in which case `nullified_commitment` is not used since the kernel\n    // just siloes and forwards the nullifier to its output.\n    if (header.is_transient) {\n        // TODO(1718): Can we reuse the note commitment computed in `compute_nullifier`?\n        nullified_commitment = compute_inner_note_hash(note_interface, note);\n    }\n    assert(notify_nullified_note(nullifier, nullified_commitment) == 0);\n\n    context.push_new_nullifier(nullifier, nullified_commitment)\n}\n",
                "path": "/aztec/note/lifecycle.nr"
            },
            "109": {
                "source": "use dep::std::option::Option;\nuse dep::protocol_types::constants::{\n    MAX_READ_REQUESTS_PER_CALL,\n    GET_NOTE_ORACLE_RETURN_LENGTH,\n    GET_NOTES_ORACLE_RETURN_LENGTH,\n    MAX_NOTES_PER_PAGE,\n    VIEW_NOTE_ORACLE_RETURN_LENGTH,\n};\nuse crate::context::PrivateContext;\nuse crate::note::{\n    note_getter_options::{NoteGetterOptions, Select, Sort, SortOrder},\n    note_interface::NoteInterface,\n    note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_read_or_nullify,\n};\nuse crate::oracle;\nuse crate::types::vec::BoundedVec;\n\nfn check_note_header<Note, N>(context: PrivateContext, storage_slot: Field, note_interface: NoteInterface<Note, N>, note: Note) {\n    let get_header = note_interface.get_header;\n    let header = get_header(note);\n    let contract_address = context.this_address();\n    assert(header.contract_address == contract_address);\n    assert(header.storage_slot == storage_slot);\n}\n\nfn check_note_fields<N>(fields: [Field; N], selects: BoundedVec<Option<Select>, N>) {\n    for i in 0..selects.len {\n        let select = selects.get_unchecked(i).unwrap_unchecked();\n        assert(fields[select.field_index] == select.value, \"Mismatch return note field.\");\n    }\n}\n\nfn check_notes_order<N>(fields_0: [Field; N], fields_1: [Field; N], sorts: BoundedVec<Option<Sort>, N>) {\n    for i in 0..sorts.len {\n        let sort = sorts.get_unchecked(i).unwrap_unchecked();\n        let eq = fields_0[sort.field_index] == fields_1[sort.field_index];\n        let lt = fields_0[sort.field_index] as u120 < fields_1[sort.field_index] as u120;\n        if sort.order == SortOrder.ASC {\n            assert(eq | lt, \"Return notes not sorted in ascending order.\");\n        } else if !eq {\n            assert(!lt, \"Return notes not sorted in descending order.\");\n        }\n    }\n}\n\npub fn get_note<Note, N>(context: &mut PrivateContext, storage_slot: Field, note_interface: NoteInterface<Note, N>) -> Note {\n    let note = get_note_internal(storage_slot, note_interface);\n\n    check_note_header(*context, storage_slot, note_interface, note);\n\n    let note_hash_for_read_request = compute_note_hash_for_read_or_nullify(note_interface, note);\n\n    context.push_read_request(note_hash_for_read_request);\n    note\n}\n\npub fn get_notes<Note, N, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    options: NoteGetterOptions<Note, N, FILTER_ARGS>\n) -> [Option<Note>; MAX_READ_REQUESTS_PER_CALL] {\n    let opt_notes = get_notes_internal(storage_slot, note_interface, options);\n    let mut num_notes = 0;\n    let mut prev_fields = [0; N];\n    for i in 0..opt_notes.len() {\n        let opt_note = opt_notes[i];\n        if opt_note.is_some() {\n            let note = opt_note.unwrap_unchecked();\n            let serialize = note_interface.serialize;\n            let fields = serialize(note);\n            check_note_header(*context, storage_slot, note_interface, note);\n            check_note_fields(fields, options.selects);\n            if i != 0 {\n                check_notes_order(prev_fields, fields, options.sorts);\n            }\n            prev_fields = fields;\n\n            let note_hash_for_read_request = compute_note_hash_for_read_or_nullify(note_interface, note);\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1410): test to ensure\n            // failure if malicious oracle injects 0 nonce here for a \"pre-existing\" note.\n            context.push_read_request(note_hash_for_read_request);\n\n            num_notes += 1;\n        };\n    }\n    if options.limit != 0 {\n        assert(num_notes <= options.limit, \"Invalid number of return notes.\");\n    }\n    opt_notes\n}\n\nunconstrained fn get_note_internal<Note, N>(storage_slot: Field, note_interface: NoteInterface<Note, N>) -> Note {\n    let placeholder_note = [Option::none()];\n    let placeholder_fields = [0; GET_NOTE_ORACLE_RETURN_LENGTH];\n    oracle::notes::get_notes(storage_slot,\n        note_interface,\n        0,\n        [],\n        [],\n        [],\n        [],\n        1, // limit\n        0, // offset\n        placeholder_note,\n        placeholder_fields)[0].unwrap() // Notice: we don't allow dummies to be returned from get_note (singular).\n}\n\nunconstrained fn get_notes_internal<Note, N, FILTER_ARGS>(\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    options: NoteGetterOptions<Note, N, FILTER_ARGS>\n) -> [Option<Note>; MAX_READ_REQUESTS_PER_CALL] {\n    let (num_selects, select_by, select_values, sort_by, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_READ_REQUESTS_PER_CALL];\n    let placeholder_fields = [0; GET_NOTES_ORACLE_RETURN_LENGTH];\n    let opt_notes = oracle::notes::get_notes(storage_slot,\n        note_interface,\n        num_selects,\n        select_by,\n        select_values,\n        sort_by,\n        sort_order,\n        options.limit,\n        options.offset,\n        placeholder_opt_notes,\n        placeholder_fields);\n\n    let filter = options.filter;\n    let filter_args = options.filter_args;\n    filter(opt_notes, filter_args)\n}\n\nunconstrained pub fn view_notes<Note, N>(storage_slot: Field, note_interface: NoteInterface<Note, N>, options: NoteViewerOptions<Note, N>) -> [Option<Note>; MAX_NOTES_PER_PAGE] {\n    let (num_selects, select_by, select_values, sort_by, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_NOTES_PER_PAGE];\n    let placeholder_fields = [0; VIEW_NOTE_ORACLE_RETURN_LENGTH];\n    oracle::notes::get_notes(storage_slot,\n        note_interface,\n        num_selects,\n        select_by,\n        select_values,\n        sort_by,\n        sort_order,\n        options.limit,\n        options.offset,\n        placeholder_opt_notes,\n        placeholder_fields)\n}\n\nunconstrained fn flatten_options<Note, N>(selects: BoundedVec<Option<Select>, N>, sorts: BoundedVec<Option<Sort>, N>) -> (u8, [u8; N], [Field; N], [u8; N], [u2; N]) {\n    let mut num_selects = 0;\n    let mut select_by = [0; N];\n    let mut select_values = [0; N];\n    for i in 0..selects.len {\n        let select = selects.get(i);\n        if select.is_some() {\n            select_by[num_selects] = select.unwrap_unchecked().field_index;\n            select_values[num_selects] = select.unwrap_unchecked().value;\n            num_selects += 1;\n        };\n    }\n\n    let mut sort_by = [0; N];\n    let mut sort_order = [0; N];\n    for i in 0..sorts.len {\n        let sort = sorts.get(i);\n        if sort.is_some() {\n            sort_by[i] = sort.unwrap_unchecked().field_index;\n            sort_order[i] = sort.unwrap_unchecked().order;\n        };\n    }\n\n    (num_selects, select_by, select_values, sort_by, sort_order)\n}\n",
                "path": "/aztec/note/note_getter.nr"
            },
            "111": {
                "source": "use crate::hash::pedersen_hash;\nuse dep::protocol_types::constants::{GENERATOR_INDEX__UNIQUE_COMMITMENT, GENERATOR_INDEX__SILOED_COMMITMENT};\n\npub fn compute_inner_hash(storage_slot: Field, note_hash: Field) -> Field {\n    // TODO(#1205) Do we need a generator index here?\n    pedersen_hash([storage_slot, note_hash], 0)\n}\n\npub fn compute_siloed_hash(contract_address: Field, inner_note_hash: Field) -> Field {\n    let inputs = [contract_address, inner_note_hash];\n    pedersen_hash(inputs, GENERATOR_INDEX__SILOED_COMMITMENT)\n}\n\npub fn compute_unique_hash(nonce: Field, siloed_note_hash: Field) -> Field {\n    let inputs = [nonce, siloed_note_hash];\n    pedersen_hash(inputs, GENERATOR_INDEX__UNIQUE_COMMITMENT)\n}\n",
                "path": "/aztec/note/note_hash.nr"
            },
            "115": {
                "source": "use dep::protocol_types::constants::GENERATOR_INDEX__OUTER_NULLIFIER;\nuse crate::{\n    note::{\n        note_hash::{compute_inner_hash, compute_siloed_hash, compute_unique_hash},\n        note_header::NoteHeader,\n        note_interface::NoteInterface,\n    },\n    utils::arr_copy_slice,\n    hash::pedersen_hash,\n};\n\npub fn compute_inner_note_hash<Note, N>(note_interface: NoteInterface<Note, N>, note: Note) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note);\n\n    let compute_note_hash = note_interface.compute_note_hash;\n    let note_hash = compute_note_hash(note);\n\n    compute_inner_hash(header.storage_slot, note_hash)\n}\n\npub fn compute_siloed_note_hash<Note, N>(note_interface: NoteInterface<Note, N>, note_with_header: Note) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note_with_header);\n\n    let inner_note_hash = compute_inner_note_hash(note_interface, note_with_header);\n\n    compute_siloed_hash(header.contract_address, inner_note_hash)\n}\n\npub fn compute_unique_siloed_note_hash<Note, N>(note_interface: NoteInterface<Note, N>, note_with_header: Note) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note_with_header);\n\n    let siloed_note_hash = compute_siloed_note_hash(note_interface, note_with_header);\n\n    compute_unique_hash(header.nonce, siloed_note_hash)\n}\n\npub fn compute_siloed_nullifier<Note, N>(note_interface: NoteInterface<Note, N>, note_with_header: Note) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note_with_header);\n\n    let compute_nullifier = note_interface.compute_nullifier;\n    let inner_nullifier = compute_nullifier(note_with_header);\n\n    let input = [header.contract_address, inner_nullifier];\n    pedersen_hash(input, GENERATOR_INDEX__OUTER_NULLIFIER)\n}\n\npub fn compute_note_hash_for_read_or_nullify<Note, N>(note_interface: NoteInterface<Note, N>, note_with_header: Note) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note_with_header);\n\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1386)\n    if (header.is_transient) {\n        // If a note is transient, we just read the inner_note_hash (kernel will silo by contract address).\n        compute_inner_note_hash(note_interface, note_with_header)\n    } else if (header.nonce == 0) {\n        // If not transient and nonce is zero, that means we are reading a public note.\n        compute_siloed_note_hash(note_interface, note_with_header)\n    } else {\n        // When nonce is nonzero, that means we are reading a settled note (from tree) created in a\n        // previous TX. So we need the unique_siloed_note_hash which has already been hashed with\n        // contract address and then nonce. This hash will match the existing leaf in the private\n        // data tree, so the kernel can just perform a membership check directly on this hash/leaf.\n        compute_unique_siloed_note_hash(note_interface, note_with_header)\n    }\n}\n\npub fn compute_note_hash_and_nullifier<Note, N, S>(note_interface: NoteInterface<Note, N>, note_header: NoteHeader, serialized_note: [Field; S]) -> [Field; 4] {\n    let deserialize = note_interface.deserialize;\n    let set_header = note_interface.set_header;\n    let mut note = deserialize(arr_copy_slice(serialized_note, [0; N], 0));\n    set_header(&mut note, note_header);\n\n    let compute_note_hash = note_interface.compute_note_hash;\n    let note_hash = compute_note_hash(note);\n    let inner_note_hash = compute_inner_hash(note_header.storage_slot, note_hash);\n\n    let siloed_note_hash = compute_siloed_hash(note_header.contract_address, inner_note_hash);\n\n    let unique_siloed_note_hash = compute_unique_hash(note_header.nonce, siloed_note_hash);\n\n    let compute_nullifier = note_interface.compute_nullifier;\n    let inner_nullifier = compute_nullifier(note);\n\n    [inner_note_hash, siloed_note_hash, unique_siloed_note_hash, inner_nullifier]\n}\n",
                "path": "/aztec/note/utils.nr"
            },
            "117": {
                "source": "#[oracle(packArguments)]\nfn pack_arguments_oracle<N>(_args: [Field; N]) -> Field {}\n\n// TODO: explain what this does.\nunconstrained pub fn pack_arguments<N>(args: [Field; N]) -> Field {\n    pack_arguments_oracle(args)\n}\n",
                "path": "/aztec/oracle/arguments.nr"
            },
            "118": {
                "source": "use dep::protocol_types::constants::CALL_PRIVATE_FUNCTION_RETURN_SIZE;\n\n#[oracle(callPrivateFunction)]\nfn call_private_function_oracle(_contract_address: Field, _function_selector: Field, _args_hash: Field) -> [Field; CALL_PRIVATE_FUNCTION_RETURN_SIZE] {}\n\nunconstrained pub fn call_private_function_internal(contract_address: Field, function_selector: Field, args_hash: Field) -> [Field; CALL_PRIVATE_FUNCTION_RETURN_SIZE] {\n    call_private_function_oracle(contract_address, function_selector, args_hash)\n}\n",
                "path": "/aztec/oracle/call_private_function.nr"
            },
            "124": {
                "source": "use crate::types::point::Point;\nuse crate::address::compute_address;\n\n#[oracle(getPublicKeyAndPartialAddress)]\nfn get_public_key_and_partial_address_oracle(_address: Field) -> [Field; 3] {}\n\nunconstrained fn get_public_key_and_partial_address_internal(address: Field) -> [Field; 3] {\n    get_public_key_and_partial_address_oracle(address)\n}\n\npub fn get_public_key(address: Field) -> Point {\n    let result = get_public_key_and_partial_address_internal(address);\n    let pub_key_x = result[0];\n    let pub_key_y = result[1];\n    let partial_address = result[2];\n\n    let calculated_address = compute_address(pub_key_x, pub_key_y, partial_address);\n    assert(calculated_address == address);\n\n    Point::new(pub_key_x, pub_key_y)\n}\n",
                "path": "/aztec/oracle/get_public_key.nr"
            },
            "125": {
                "source": "use crate::oracle::get_public_key::get_public_key;\nuse crate::types::point::Point;\n\n#[oracle(getSecretKey)]\nfn get_secret_key_oracle(_owner: Point) -> [Field; dep::std::grumpkin_scalar::GRUMPKIN_SCALAR_SERIALIZED_LEN] {}\n\nunconstrained fn get_secret_key_internal(owner_public_key: Point) -> dep::std::grumpkin_scalar::GrumpkinScalar {\n    dep::std::grumpkin_scalar::deserialize_grumpkin_scalar(get_secret_key_oracle(owner_public_key))\n}\n\npub fn get_secret_key(owner: Field) -> dep::std::grumpkin_scalar::GrumpkinScalar {\n    let owner_public_key = get_public_key(owner);\n    let secret = get_secret_key_internal(owner_public_key);\n\n    // Constrain the owner - Nullifier secret key is currently just the encryption private key so we can constrain\n    // the owner by deriving the public key from the secret key and checking the result.\n    let computed_public_key = dep::std::grumpkin_scalar_mul::grumpkin_fixed_base(secret);\n    assert(owner_public_key.x == computed_public_key[0]);\n    assert(owner_public_key.y == computed_public_key[1]);\n\n    secret\n}\n",
                "path": "/aztec/oracle/get_secret_key.nr"
            },
            "127": {
                "source": "#[oracle(getRandomField)]\nfn rand_oracle() -> Field {}\n\nunconstrained pub fn rand() -> Field {\n    rand_oracle()\n}\n",
                "path": "/aztec/oracle/rand.nr"
            },
            "131": {
                "source": "use dep::std::option::Option;\nuse crate::note::{\n    note_header::NoteHeader,\n    note_interface::NoteInterface,\n};\nuse crate::utils::arr_copy_slice;\n\n#[oracle(notifyCreatedNote)]\nfn notify_created_note_oracle<N>(_storage_slot: Field, _serialized_note: [Field; N], _inner_note_hash: Field) -> Field {}\n\nunconstrained pub fn notify_created_note<N>(storage_slot: Field, serialized_note: [Field; N], inner_note_hash: Field) -> Field {\n    notify_created_note_oracle(storage_slot, serialized_note, inner_note_hash)\n}\n\n#[oracle(notifyNullifiedNote)]\nfn notify_nullified_note_oracle<N>(_nullifier: Field, _inner_note_hash: Field) -> Field {}\n\nunconstrained pub fn notify_nullified_note<N>(nullifier: Field, inner_note_hash: Field) -> Field {\n    notify_nullified_note_oracle(nullifier, inner_note_hash)\n}\n\n#[oracle(getNotes)]\nfn get_notes_oracle<N, S>(\n    _storage_slot: Field,\n    _num_selects: u8,\n    _select_by: [u8; N],\n    _select_values: [Field; N],\n    _sort_by: [u8; N],\n    _sort_order: [u2; N],\n    _limit: u32,\n    _offset: u32,\n    _return_size: u32,\n    _placeholder_fields: [Field; S]\n) -> [Field; S] {}\n\nunconstrained fn get_notes_oracle_wrapper<N, S>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by: [u8; N],\n    select_values: [Field; N],\n    sort_by: [u8; N],\n    sort_order: [u2; N],\n    limit: u32,\n    offset: u32,\n    mut placeholder_fields: [Field; S]\n) -> [Field; S] {\n    let return_size = placeholder_fields.len() as u32;\n    get_notes_oracle(storage_slot,\n        num_selects,\n        select_by,\n        select_values,\n        sort_by,\n        sort_order,\n        limit,\n        offset,\n        return_size,\n        placeholder_fields)\n}\n\nunconstrained pub fn get_notes<Note, N, M, S, NS>(\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    num_selects: u8,\n    select_by: [u8; M],\n    select_values: [Field; M],\n    sort_by: [u8; M],\n    sort_order: [u2; M],\n    limit: u32,\n    offset: u32,\n    mut placeholder_opt_notes: [Option<Note>; S], // TODO: Remove it and use `limit` to initialize the note array.\n    placeholder_fields: [Field; NS] // TODO: Remove it and use `limit` to initialize the note array.\n) -> [Option<Note>; S] {\n    let fields = get_notes_oracle_wrapper(storage_slot,\n        num_selects,\n        select_by,\n        select_values,\n        sort_by,\n        sort_order,\n        limit,\n        offset,\n        placeholder_fields);\n    let num_notes = fields[0] as u32;\n    let contract_address = fields[1];\n    let deserialize = note_interface.deserialize;\n    let set_header = note_interface.set_header;\n    for i in 0..placeholder_opt_notes.len() {\n        if i as u32 < num_notes {\n            // lengths named as per typescript.\n            let return_header_length: Field = 2; // num_notes & contract_address.\n            let extra_preimage_length: Field = 2; // nonce & is_transient.\n            let read_offset: Field = return_header_length + i * (N + extra_preimage_length);\n            let nonce = fields[read_offset];\n            let is_transient = fields[read_offset + 1] as bool;\n            let header = NoteHeader { contract_address, nonce, storage_slot, is_transient };\n            let serialized_note = arr_copy_slice(fields, [0; N], read_offset + 2);\n            let mut note = deserialize(serialized_note);\n            set_header(&mut note, header);\n            placeholder_opt_notes[i] = Option::some(note);\n        };\n    }\n    placeholder_opt_notes\n}\n\n#[oracle(checkNullifierExists)]\nfn check_nullifier_exists_oracle(_inner_nullifier: Field) -> Field {}\n\nunconstrained pub fn check_nullifier_exists(inner_nullifier: Field) -> bool {\n    check_nullifier_exists_oracle(inner_nullifier) == 1\n}\n",
                "path": "/aztec/oracle/notes.nr"
            },
            "133": {
                "source": "use crate::types::point::Point;\nuse dep::protocol_types::constants::NUM_FIELDS_PER_SHA256;\n\n// TODO: Should take encrypted data.\n#[oracle(emitEncryptedLog)]\nfn emit_encrypted_log_oracle<N>(_contract_address: Field, _storage_slot: Field, _encryption_pub_key: Point, _preimage: [Field; N]) -> Field {}\n\nunconstrained pub fn emit_encrypted_log<N>(contract_address: Field, storage_slot: Field, encryption_pub_key: Point, preimage: [Field; N]) -> [Field; NUM_FIELDS_PER_SHA256] {\n    [emit_encrypted_log_oracle(contract_address, storage_slot, encryption_pub_key, preimage), 0]\n}\n\n#[oracle(emitUnencryptedLog)]\nfn emit_unencrypted_log_oracle<T>(_contract_address: Field, _event_selector: Field, _message: T) -> Field {}\n\nunconstrained pub fn emit_unencrypted_log<T>(contract_address: Field, event_selector: Field, message: T) -> [Field; NUM_FIELDS_PER_SHA256] {\n    // https://github.com/AztecProtocol/aztec-packages/issues/885\n    [emit_unencrypted_log_oracle(contract_address, event_selector, message), 0]\n}\n",
                "path": "/aztec/oracle/logs.nr"
            },
            "134": {
                "source": "use crate::abi::FunctionData;\nuse crate::abi::PrivateCircuitPublicInputs;\nuse dep::protocol_types::constants::GENERATOR_INDEX__CALL_STACK_ITEM;\nuse crate::hash::pedersen_hash;\n\nstruct PrivateCallStackItem {\n    contract_address: Field,\n    function_data: FunctionData,\n    public_inputs: PrivateCircuitPublicInputs,\n    is_execution_request: bool,\n}\n\nimpl PrivateCallStackItem {\n    pub fn hash(self) -> Field {\n        pedersen_hash([\n            self.contract_address,\n            self.function_data.hash(),\n            self.public_inputs.hash(),\n        ], GENERATOR_INDEX__CALL_STACK_ITEM)\n    }\n}\n",
                "path": "/aztec/private_call_stack_item.nr"
            },
            "141": {
                "source": "use dep::std::option::Option;\nuse crate::abi::PublicContextInputs;\nuse dep::protocol_types::constants::{MAX_NOTES_PER_PAGE, MAX_READ_REQUESTS_PER_CALL};\nuse crate::context::{PrivateContext, PublicContext, Context};\nuse crate::note::{\n    lifecycle::{create_note, create_note_hash_from_public, destroy_note},\n    note_getter::{get_notes, view_notes},\n    note_getter_options::NoteGetterOptions,\n    note_header::NoteHeader,\n    note_interface::NoteInterface,\n    note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_read_or_nullify,\n};\n\n// docs:start:struct\nstruct Set<Note, N> {\n    context: Context,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n}\n// docs:end:struct\n\nimpl<Note, N> Set<Note, N> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        note_interface: NoteInterface<Note, N>,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Set {\n            context,\n            storage_slot,\n            note_interface,\n        }\n    }\n    // docs:end:new\n\n    // docs:start:insert\n    pub fn insert(self,\n        note: &mut Note,\n        broadcast: bool,\n    ) {\n        create_note(\n            self.context.private.unwrap(),\n            self.storage_slot,\n            note,\n            self.note_interface,\n            broadcast,\n        );\n    }\n    // docs:end:insert\n\n    // docs:start:insert_from_public\n    pub fn insert_from_public(self, note: &mut Note) {\n        create_note_hash_from_public(\n            self.context.public.unwrap(),\n            self.storage_slot,\n            note,\n            self.note_interface,\n        );\n    }\n    // docs:end:insert_from_public\n    \n    // DEPRECATED\n    fn assert_contains_and_remove(_self: Self, _note: &mut Note, _nonce: Field) {\n        assert(false, \"`assert_contains_and_remove` has been deprecated. Please call PXE.addNote() to add a note to the database. Then use Set.get_notes() and Set.remove() in your contract to verify and remove a note.\");\n    }\n\n    // DEPRECATED\n    fn assert_contains_and_remove_publicly_created(_self: Self, _note: &mut Note) {\n        assert(false, \"`assert_contains_and_remove_publicly_created` has been deprecated. Please call PXE.addNote() to add a note to the database. Then use Set.get_notes() and Set.remove() in your contract to verify and remove a note.\");\n    }\n\n    // docs:start:remove\n    pub fn remove(self, note: Note) {\n        let context = self.context.private.unwrap();\n        let note_hash = compute_note_hash_for_read_or_nullify(self.note_interface, note);\n        let has_been_read = context.read_requests.any(|r| r == note_hash);\n        assert(has_been_read, \"Can only remove a note that has been read from the set.\");\n\n        destroy_note(\n            context,\n            note,\n            self.note_interface,\n        );\n    }\n    // docs:end:remove\n\n    // docs:start:get_notes\n    pub fn get_notes<FILTER_ARGS>(\n        self,\n        options: NoteGetterOptions<Note, N, FILTER_ARGS>,\n    ) -> [Option<Note>; MAX_READ_REQUESTS_PER_CALL] {\n        let storage_slot = self.storage_slot;\n        let opt_notes = get_notes(\n            self.context.private.unwrap(),\n            storage_slot,\n            self.note_interface,\n            options,\n        );\n        opt_notes\n    }\n    // docs:end:get_notes\n\n    // docs:start:view_notes\n    unconstrained pub fn view_notes(\n        self,\n        options: NoteViewerOptions<Note, N>,\n    ) -> [Option<Note>; MAX_NOTES_PER_PAGE] {\n        view_notes(self.storage_slot, self.note_interface, options)\n    }\n    // docs:end:view_notes\n}\n",
                "path": "/aztec/state_vars/set.nr"
            },
            "146": {
                "source": "struct BoundedVec<T, MaxLen> {\n    storage: [T; MaxLen],\n    len: Field,\n}\n\nimpl<T, MaxLen> BoundedVec<T, MaxLen> {\n    pub fn new(initial_value: T) -> Self {\n        BoundedVec { storage: [initial_value; MaxLen], len: 0 }\n    }\n\n    pub fn get(mut self: Self, index: Field) -> T {\n        assert(index as u64 < self.len as u64);\n        self.storage[index]\n    }\n\n    pub fn get_unchecked(mut self: Self, index: Field) -> T {\n        self.storage[index]\n    }\n\n    pub fn push(&mut self, elem: T) {\n        assert(self.len as u64 < MaxLen as u64);\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    pub fn push_array<Len>(&mut self, array: [T; Len]) {\n        let newLen = self.len + array.len();\n        assert(newLen as u64 <= MaxLen as u64);\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = newLen;\n    }\n\n    pub fn pop(&mut self) -> T {\n        assert(self.len as u64 > 0);\n\n        let elem = self.storage[self.len - 1];\n        self.len -= 1;\n        elem\n    }\n\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        let mut exceeded_len = false;\n        for i in 0..MaxLen {\n            exceeded_len |= i == self.len;\n            if (!exceeded_len) {\n                ret |= predicate(self.storage[i]);\n            }\n        }\n        ret\n    }\n}\n\n#[test]\nfn test_vec_push_pop() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    assert(vec.len == 0);\n    vec.push(2);\n    assert(vec.len == 1);\n    vec.push(4);\n    assert(vec.len == 2);\n    vec.push(6);\n    assert(vec.len == 3);\n    let x = vec.pop();\n    assert(x == 6);\n    assert(vec.len == 2);\n    assert(vec.get(0) == 2);\n    assert(vec.get(1) == 4);\n}\n\n#[test]\nfn test_vec_push_array() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    vec.push_array([2, 4]);\n    assert(vec.len == 2);\n    assert(vec.get(0) == 2);\n    assert(vec.get(1) == 4);\n}\n\n#[test(should_fail)]\nfn test_vec_get_out_of_bound() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    vec.push_array([2, 4]);\n    let _x = vec.get(2);\n}\n\n#[test(should_fail)]\nfn test_vec_get_not_declared() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    vec.push_array([2]);\n    let _x = vec.get(1);\n}\n\n#[test(should_fail)]\nfn test_vec_get_uninitialized() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    let _x = vec.get(0);\n}\n\n#[test(should_fail)]\nfn test_vec_push_overflow() {\n    let mut vec: BoundedVec<Field, 1> = BoundedVec::new(0);\n    vec.push(1);\n    vec.push(2);\n}\n\n#[test]\nfn test_vec_any() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    vec.push_array([2, 4, 6]);\n    assert(vec.any(|v| v == 2) == true);\n    assert(vec.any(|v| v == 4) == true);\n    assert(vec.any(|v| v == 6) == true);\n    assert(vec.any(|v| v == 3) == false);\n}\n\n#[test]\nfn test_vec_any_not_default() {\n    let default_value = 1;\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(default_value);\n    vec.push_array([2, 4]);\n    assert(vec.any(|v| v == default_value) == false);\n}\n",
                "path": "/aztec/types/vec.nr"
            },
            "152": {
                "source": "pub fn arr_copy_slice<T, N, M>(src: [T; N], mut dst: [T; M], offset: Field) -> [T; M] {\n    for i in 0..dst.len() {\n        dst[i] = src[i + offset];\n    }\n    dst\n}\n\npub fn field_from_bytes<N>(bytes: [u8; N], big_endian: bool) -> Field {\n    assert(bytes.len() as u32 < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        let mut index = i;\n        if big_endian {\n            index = N - i - 1;\n        }\n        as_field += (bytes[index] as Field) * offset;\n        offset *= 256;\n    }\n\n    as_field\n}\n\n// TODO(#3470): Copied over from https://github.com/AztecProtocol/aztec-packages/blob/a07c4bd47313be6aa604a63f37857eb0136b41ba/yarn-project/noir-protocol-circuits/src/crates/rollup-lib/src/base/base_rollup_inputs.nr#L599\n// move to a shared place?\n\n// TODO to radix returns u8, so we cannot use bigger radixes. It'd be ideal to use a radix of the maximum range-constrained integer noir supports\npub fn full_field_less_than(lhs: Field, rhs: Field) -> bool {\n    dep::std::eddsa::lt_bytes32(lhs, rhs)\n}\n\npub fn full_field_greater_than(lhs: Field, rhs: Field) -> bool {\n    dep::std::eddsa::lt_bytes32(rhs, lhs)\n}",
                "path": "/aztec/utils.nr"
            },
            "153": {
                "source": "// docs:start:encrypted_import\nuse dep::aztec::log::emit_encrypted_log;\n// docs:end:encrypted_import\nuse dep::aztec::{\n    note::{\n        note_header::NoteHeader,\n        note_interface::NoteInterface,\n        utils::compute_note_hash_for_read_or_nullify,\n    },\n    oracle::{\n        rand::rand,\n        get_secret_key::get_secret_key,\n        get_public_key::get_public_key,\n    },\n    hash::pedersen_hash,\n    context::PrivateContext,\n};\n\nglobal ADDRESS_NOTE_LEN: Field = 3;\n\n// docs:start:address_note_def\n// Stores an address\nstruct AddressNote {\n    address: Field,\n    owner: Field,\n    randomness: Field,\n    header: NoteHeader,\n}\n\nimpl AddressNote {\n    pub fn new(address: Field, owner: Field) -> Self {\n        let randomness = rand();\n        AddressNote {\n            address,\n            owner,\n            randomness,\n            header: NoteHeader::empty(),\n        }\n    }\n// docs:end:address_note_def\n\n\n    pub fn serialize(self) -> [Field; ADDRESS_NOTE_LEN]{\n        [self.address, self.owner, self.randomness]\n    }\n\n    pub fn deserialize(serialized_note: [Field; ADDRESS_NOTE_LEN]) -> Self {\n        AddressNote {\n            address: serialized_note[0],\n            owner: serialized_note[1],\n            randomness: serialized_note[2],\n            header: NoteHeader::empty(),\n        }\n    }\n\n    pub fn compute_note_hash(self) -> Field {\n        // TODO(#1205) Should use a non-zero generator index.\n        pedersen_hash(self.serialize(), 0)\n    }\n\n    pub fn compute_nullifier(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_read_or_nullify(AddressNoteMethods, self);\n        let secret = get_secret_key(self.owner);\n        // TODO(#1205) Should use a non-zero generator index.\n        pedersen_hash([\n            note_hash_for_nullify,\n            secret.low,\n            secret.high,\n        ],0)\n    }\n\n    pub fn set_header(&mut self, header: NoteHeader) {\n        self.header = header;\n    }\n\n    // Broadcasts the note as an encrypted log on L1.\n    pub fn broadcast(self, context: &mut PrivateContext, slot: Field) {\n        let encryption_pub_key = get_public_key(self.owner);\n        // docs:start:encrypted\n        emit_encrypted_log(\n            context,\n            (*context).this_address(),\n            slot,\n            encryption_pub_key,\n            self.serialize(),\n        );\n        // docs:end:encrypted\n    }\n}\n\nfn deserialize(serialized_note: [Field; ADDRESS_NOTE_LEN]) -> AddressNote {\n    AddressNote::deserialize(serialized_note)\n}\n\nfn serialize(note: AddressNote) -> [Field; ADDRESS_NOTE_LEN] {\n    note.serialize()\n}\n\nfn compute_note_hash(note: AddressNote) -> Field {\n    note.compute_note_hash()\n}\n\nfn compute_nullifier(note: AddressNote) -> Field {\n    note.compute_nullifier()\n}\n\nfn get_header(note: AddressNote) -> NoteHeader {\n    note.header\n}\n\nfn set_header(note: &mut AddressNote, header: NoteHeader) {\n    note.set_header(header);\n}\n\n// Broadcasts the note as an encrypted log on L1.\nfn broadcast(context: &mut PrivateContext, slot: Field, note: AddressNote) {\n    note.broadcast(context, slot);\n}\n\nglobal AddressNoteMethods = NoteInterface {\n    deserialize,\n    serialize,\n    compute_note_hash,\n    compute_nullifier,\n    get_header,\n    set_header,\n    broadcast,\n};\n",
                "path": "/address_note/address_note.nr"
            }
        }
    }
}
