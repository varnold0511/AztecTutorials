{
    "name": "SlowTree",
    "functions": [
        {
            "name": "_assert_current_root",
            "functionType": "open",
            "isInternal": true,
            "parameters": [
                {
                    "name": "caller",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                },
                {
                    "name": "expected",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                }
            ],
            "returnTypes": [
                {
                    "kind": "struct",
                    "path": "aztec::abi::PublicCircuitPublicInputs",
                    "fields": [
                        {
                            "name": "call_context",
                            "type": {
                                "kind": "struct",
                                "path": "aztec::abi::CallContext",
                                "fields": [
                                    {
                                        "name": "msg_sender",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "storage_contract_address",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "portal_contract_address",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "function_selector",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "is_delegate_call",
                                        "type": {
                                            "kind": "boolean"
                                        }
                                    },
                                    {
                                        "name": "is_static_call",
                                        "type": {
                                            "kind": "boolean"
                                        }
                                    },
                                    {
                                        "name": "is_contract_deployment",
                                        "type": {
                                            "kind": "boolean"
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "name": "args_hash",
                            "type": {
                                "kind": "field"
                            }
                        },
                        {
                            "name": "return_values",
                            "type": {
                                "kind": "array",
                                "length": 4,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "contract_storage_update_requests",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "struct",
                                    "path": "aztec::abi::ContractStorageUpdateRequest",
                                    "fields": [
                                        {
                                            "name": "storage_slot",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "old_value",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "new_value",
                                            "type": {
                                                "kind": "field"
                                            }
                                        }
                                    ]
                                }
                            }
                        },
                        {
                            "name": "contract_storage_read",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "struct",
                                    "path": "aztec::abi::ContractStorageRead",
                                    "fields": [
                                        {
                                            "name": "storage_slot",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "value",
                                            "type": {
                                                "kind": "field"
                                            }
                                        }
                                    ]
                                }
                            }
                        },
                        {
                            "name": "public_call_stack",
                            "type": {
                                "kind": "array",
                                "length": 4,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "new_commitments",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "new_nullifiers",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "new_l2_to_l1_msgs",
                            "type": {
                                "kind": "array",
                                "length": 2,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "unencrypted_logs_hash",
                            "type": {
                                "kind": "array",
                                "length": 2,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "unencrypted_log_preimages_length",
                            "type": {
                                "kind": "field"
                            }
                        },
                        {
                            "name": "block_header",
                            "type": {
                                "kind": "struct",
                                "path": "aztec::abi::BlockHeader",
                                "fields": [
                                    {
                                        "name": "note_hash_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "nullifier_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "contract_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "l1_to_l2_messages_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "archive_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "public_data_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "global_variables_hash",
                                        "type": {
                                            "kind": "field"
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "name": "prover_address",
                            "type": {
                                "kind": "field"
                            }
                        }
                    ]
                }
            ],
            "bytecode": "",
            "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
        },
        {
            "name": "_update",
            "functionType": "open",
            "isInternal": true,
            "parameters": [
                {
                    "name": "caller",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                },
                {
                    "name": "index",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                },
                {
                    "name": "new_value",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                },
                {
                    "name": "before",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                },
                {
                    "name": "after",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                },
                {
                    "name": "new_root",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                }
            ],
            "returnTypes": [
                {
                    "kind": "struct",
                    "path": "aztec::abi::PublicCircuitPublicInputs",
                    "fields": [
                        {
                            "name": "call_context",
                            "type": {
                                "kind": "struct",
                                "path": "aztec::abi::CallContext",
                                "fields": [
                                    {
                                        "name": "msg_sender",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "storage_contract_address",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "portal_contract_address",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "function_selector",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "is_delegate_call",
                                        "type": {
                                            "kind": "boolean"
                                        }
                                    },
                                    {
                                        "name": "is_static_call",
                                        "type": {
                                            "kind": "boolean"
                                        }
                                    },
                                    {
                                        "name": "is_contract_deployment",
                                        "type": {
                                            "kind": "boolean"
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "name": "args_hash",
                            "type": {
                                "kind": "field"
                            }
                        },
                        {
                            "name": "return_values",
                            "type": {
                                "kind": "array",
                                "length": 4,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "contract_storage_update_requests",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "struct",
                                    "path": "aztec::abi::ContractStorageUpdateRequest",
                                    "fields": [
                                        {
                                            "name": "storage_slot",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "old_value",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "new_value",
                                            "type": {
                                                "kind": "field"
                                            }
                                        }
                                    ]
                                }
                            }
                        },
                        {
                            "name": "contract_storage_read",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "struct",
                                    "path": "aztec::abi::ContractStorageRead",
                                    "fields": [
                                        {
                                            "name": "storage_slot",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "value",
                                            "type": {
                                                "kind": "field"
                                            }
                                        }
                                    ]
                                }
                            }
                        },
                        {
                            "name": "public_call_stack",
                            "type": {
                                "kind": "array",
                                "length": 4,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "new_commitments",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "new_nullifiers",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "new_l2_to_l1_msgs",
                            "type": {
                                "kind": "array",
                                "length": 2,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "unencrypted_logs_hash",
                            "type": {
                                "kind": "array",
                                "length": 2,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "unencrypted_log_preimages_length",
                            "type": {
                                "kind": "field"
                            }
                        },
                        {
                            "name": "block_header",
                            "type": {
                                "kind": "struct",
                                "path": "aztec::abi::BlockHeader",
                                "fields": [
                                    {
                                        "name": "note_hash_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "nullifier_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "contract_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "l1_to_l2_messages_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "archive_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "public_data_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "global_variables_hash",
                                        "type": {
                                            "kind": "field"
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "name": "prover_address",
                            "type": {
                                "kind": "field"
                            }
                        }
                    ]
                }
            ],
            "bytecode": "",
            "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
        },
        {
            "name": "compute_note_hash_and_nullifier",
            "functionType": "unconstrained",
            "isInternal": false,
            "parameters": [
                {
                    "name": "_contract_address",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                },
                {
                    "name": "_nonce",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                },
                {
                    "name": "_storage_slot",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                },
                {
                    "name": "_preimage",
                    "type": {
                        "kind": "array",
                        "length": 4,
                        "type": {
                            "kind": "field"
                        }
                    },
                    "visibility": "private"
                }
            ],
            "returnTypes": [
                {
                    "kind": "array",
                    "length": 4,
                    "type": {
                        "kind": "field"
                    }
                }
            ],
            "bytecode": "H4sIAAAAAAAA/9VXbQ7CIAwt+2BDNryIP2biAbyKid7/CkJs4wtiNLHMrEkDlOz19dFA5onI0MPa6B29muyfeVx+s6PRw1pq8mw2wrNV5GkKPaDNt6ugqzbHfgMc7QY4Dsq9KRylR8foLvouuo9+4Lij1z5OsT6rM8UszxuIDTxvebScS/v8SBfzZPXPcHGgTQcaiTZ9QXNb0HwoaD4Cxh72KTuTwN84Zb3wrMVMtj7D3EF9Nfphp4u5JEyvi3lNGBNoIvoJdw/7HvSalPUykFNwZT3Vy3tLGPOH+ucCj3nF+ud6eS8JI3yoPxR4hBXrR37fcvV/5uoghnel7I8Qa7I68D4OgJHfZaoPO3GChp4/Dz0LiJfqu8da7A60MoS1hQwAAA==",
            "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
        },
        {
            "name": "constructor",
            "functionType": "secret",
            "isInternal": false,
            "parameters": [],
            "returnTypes": [],
            "bytecode": "H4sIAAAAAAAA/+XdZZOTZxSH8V0gSd27uLu1ySbZJFVK3alSL6Rk6y1V6qXU3XB390/IuWbCwAt4xb0z3HNl5j9590x+m+yj5z7nZE9Pz7aeM6/e7vuC7nv5wl6VQmyjcI7tVssDtVqn0d+pVCtLy/2tdrNertXbA81Ks1Jv1pf1N6vVTrPWbLTarUa5ValVO5XBeqs62N1wId1nLA+FuxjbKA6Bu3iRu0uxjdIQuEuJ3ef7vV/o5xw5RJ9zWOLvqTeheVQm5mEJzaMzMQ9PaB6TiXlEQvPYTMyFhOZxmZiLCc3jMzGXEponZGIemdA8UWieJDRPFpqnCM1TheZpQvN0oXmG0DxTaJ4lNM8WmucIzXOF5nlC83yh+Sah+WahuSw0V4TmfqG5KjTXhOa60DwgNDeE5qbQ3BKabxGabxWabxOabxea7xCa7xSaFwjNdwnNC4Xmu4Xme4Tme4Xm+4Tm+4XmB4TmB4Xmh4Tmh4XmR4TmR4Xmx4Tmx4XmRULzE0Lzk0LzU0Lz00LzM0Lzs0LzYqH5OaH5eaH5BaH5RaH5JaH5ZaH5FaH5VaF5idC8VGhuC82vCc3LhOaO0DwoNL8uNL8hNL8pNL8lNL8tNL8jNL8rNL8nNL8vNC8Xmj8Qmj8Umj8Smj8Wmj8Rmj8VmlcIzZ8JzZ8LzV8IzV8KzV8JzV8Lzd8Izd8KzSuF5u+E5lVC8/dC8w9C849C809C889C8y9C869C829C8+9C8x9C859C819C899C8z9C879C839C8/9C82qheY3QvFZoXic0rxeaNwjNG4XmTULzZqF5i9C8VWjeJjRvF5p3CM07heZdmZgvSWjenYn50oTmPZmYL0to3puJ+fKE5n2ZmK9IaN6fifnKhOYDmZivSmg+mIn56oTmQ5mYr0loPpyJ+dqE5iOZmK9LaD6aifn6hOZjmZhvSGg+non5xoTmE5mY+xKaTyY093W309s1D4+MiBQixUgpwjUh10hcM3AOzTkl51icc3AM5pjEPpp9Fv/D/Kb5jvvO+ntu6r6PioyOjImMjYyLjI9MiEyMTIpMjkyJTI1Mi0yPzIjMjMyKzI7MicyNzIvMjzDjnpnvfInMBGdGNjOjmaHMTGFm7DYizGBlJikzOplZyQxHZhoy4+/0zDtmoi2MMDOLGVLMVGLGEDN3mEHDTBZmlDCzgxkWzHRgxgE9/xdF6AlPj3R6htNDm57S9FheHKEHLz1p6dFKz1J6eNLTkh6P9DxcEqEnXjtCzzR6iNFTix5T9FyiBxE9eehRQ88WepjQ04MeF/R8WB6hJwBr5Fkzzhpq1hSzxnZFhDWYrElkjR5r1ljDxZom1viw5mVlhDURqyLUzFNDTk01NcbU3FKDSk0mNYrU7FHDRk0XNU7U/FADQ00INRLUDPAMnWfKPGPlmSPP4HgmxTMafhPcw+eeNvd4uee5PcI9Me4Rcc+EewhcU3ONyTUX1yCck3OOyjkb5zAc0znGsc9nH8g+gf+R069TXMw0LzyaAAA=",
            "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
        },
        {
            "name": "initialize",
            "functionType": "open",
            "isInternal": false,
            "parameters": [],
            "returnTypes": [
                {
                    "kind": "struct",
                    "path": "aztec::abi::PublicCircuitPublicInputs",
                    "fields": [
                        {
                            "name": "call_context",
                            "type": {
                                "kind": "struct",
                                "path": "aztec::abi::CallContext",
                                "fields": [
                                    {
                                        "name": "msg_sender",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "storage_contract_address",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "portal_contract_address",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "function_selector",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "is_delegate_call",
                                        "type": {
                                            "kind": "boolean"
                                        }
                                    },
                                    {
                                        "name": "is_static_call",
                                        "type": {
                                            "kind": "boolean"
                                        }
                                    },
                                    {
                                        "name": "is_contract_deployment",
                                        "type": {
                                            "kind": "boolean"
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "name": "args_hash",
                            "type": {
                                "kind": "field"
                            }
                        },
                        {
                            "name": "return_values",
                            "type": {
                                "kind": "array",
                                "length": 4,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "contract_storage_update_requests",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "struct",
                                    "path": "aztec::abi::ContractStorageUpdateRequest",
                                    "fields": [
                                        {
                                            "name": "storage_slot",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "old_value",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "new_value",
                                            "type": {
                                                "kind": "field"
                                            }
                                        }
                                    ]
                                }
                            }
                        },
                        {
                            "name": "contract_storage_read",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "struct",
                                    "path": "aztec::abi::ContractStorageRead",
                                    "fields": [
                                        {
                                            "name": "storage_slot",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "value",
                                            "type": {
                                                "kind": "field"
                                            }
                                        }
                                    ]
                                }
                            }
                        },
                        {
                            "name": "public_call_stack",
                            "type": {
                                "kind": "array",
                                "length": 4,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "new_commitments",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "new_nullifiers",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "new_l2_to_l1_msgs",
                            "type": {
                                "kind": "array",
                                "length": 2,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "unencrypted_logs_hash",
                            "type": {
                                "kind": "array",
                                "length": 2,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "unencrypted_log_preimages_length",
                            "type": {
                                "kind": "field"
                            }
                        },
                        {
                            "name": "block_header",
                            "type": {
                                "kind": "struct",
                                "path": "aztec::abi::BlockHeader",
                                "fields": [
                                    {
                                        "name": "note_hash_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "nullifier_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "contract_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "l1_to_l2_messages_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "archive_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "public_data_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "global_variables_hash",
                                        "type": {
                                            "kind": "field"
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "name": "prover_address",
                            "type": {
                                "kind": "field"
                            }
                        }
                    ]
                }
            ],
            "bytecode": "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",
            "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
        },
        {
            "name": "read_at",
            "functionType": "secret",
            "isInternal": false,
            "parameters": [
                {
                    "name": "index",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                }
            ],
            "returnTypes": [],
            "bytecode": "",
            "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
        },
        {
            "name": "read_at_pub",
            "functionType": "open",
            "isInternal": false,
            "parameters": [
                {
                    "name": "key",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                }
            ],
            "returnTypes": [
                {
                    "kind": "struct",
                    "path": "aztec::abi::PublicCircuitPublicInputs",
                    "fields": [
                        {
                            "name": "call_context",
                            "type": {
                                "kind": "struct",
                                "path": "aztec::abi::CallContext",
                                "fields": [
                                    {
                                        "name": "msg_sender",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "storage_contract_address",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "portal_contract_address",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "function_selector",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "is_delegate_call",
                                        "type": {
                                            "kind": "boolean"
                                        }
                                    },
                                    {
                                        "name": "is_static_call",
                                        "type": {
                                            "kind": "boolean"
                                        }
                                    },
                                    {
                                        "name": "is_contract_deployment",
                                        "type": {
                                            "kind": "boolean"
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "name": "args_hash",
                            "type": {
                                "kind": "field"
                            }
                        },
                        {
                            "name": "return_values",
                            "type": {
                                "kind": "array",
                                "length": 4,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "contract_storage_update_requests",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "struct",
                                    "path": "aztec::abi::ContractStorageUpdateRequest",
                                    "fields": [
                                        {
                                            "name": "storage_slot",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "old_value",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "new_value",
                                            "type": {
                                                "kind": "field"
                                            }
                                        }
                                    ]
                                }
                            }
                        },
                        {
                            "name": "contract_storage_read",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "struct",
                                    "path": "aztec::abi::ContractStorageRead",
                                    "fields": [
                                        {
                                            "name": "storage_slot",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "value",
                                            "type": {
                                                "kind": "field"
                                            }
                                        }
                                    ]
                                }
                            }
                        },
                        {
                            "name": "public_call_stack",
                            "type": {
                                "kind": "array",
                                "length": 4,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "new_commitments",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "new_nullifiers",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "new_l2_to_l1_msgs",
                            "type": {
                                "kind": "array",
                                "length": 2,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "unencrypted_logs_hash",
                            "type": {
                                "kind": "array",
                                "length": 2,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "unencrypted_log_preimages_length",
                            "type": {
                                "kind": "field"
                            }
                        },
                        {
                            "name": "block_header",
                            "type": {
                                "kind": "struct",
                                "path": "aztec::abi::BlockHeader",
                                "fields": [
                                    {
                                        "name": "note_hash_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "nullifier_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "contract_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "l1_to_l2_messages_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "archive_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "public_data_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "global_variables_hash",
                                        "type": {
                                            "kind": "field"
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "name": "prover_address",
                            "type": {
                                "kind": "field"
                            }
                        }
                    ]
                }
            ],
            "bytecode": "",
            "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
        },
        {
            "name": "read_leaf_at_pub",
            "functionType": "open",
            "isInternal": false,
            "parameters": [
                {
                    "name": "key",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                }
            ],
            "returnTypes": [
                {
                    "kind": "struct",
                    "path": "aztec::abi::PublicCircuitPublicInputs",
                    "fields": [
                        {
                            "name": "call_context",
                            "type": {
                                "kind": "struct",
                                "path": "aztec::abi::CallContext",
                                "fields": [
                                    {
                                        "name": "msg_sender",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "storage_contract_address",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "portal_contract_address",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "function_selector",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "is_delegate_call",
                                        "type": {
                                            "kind": "boolean"
                                        }
                                    },
                                    {
                                        "name": "is_static_call",
                                        "type": {
                                            "kind": "boolean"
                                        }
                                    },
                                    {
                                        "name": "is_contract_deployment",
                                        "type": {
                                            "kind": "boolean"
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "name": "args_hash",
                            "type": {
                                "kind": "field"
                            }
                        },
                        {
                            "name": "return_values",
                            "type": {
                                "kind": "array",
                                "length": 4,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "contract_storage_update_requests",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "struct",
                                    "path": "aztec::abi::ContractStorageUpdateRequest",
                                    "fields": [
                                        {
                                            "name": "storage_slot",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "old_value",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "new_value",
                                            "type": {
                                                "kind": "field"
                                            }
                                        }
                                    ]
                                }
                            }
                        },
                        {
                            "name": "contract_storage_read",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "struct",
                                    "path": "aztec::abi::ContractStorageRead",
                                    "fields": [
                                        {
                                            "name": "storage_slot",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "value",
                                            "type": {
                                                "kind": "field"
                                            }
                                        }
                                    ]
                                }
                            }
                        },
                        {
                            "name": "public_call_stack",
                            "type": {
                                "kind": "array",
                                "length": 4,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "new_commitments",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "new_nullifiers",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "new_l2_to_l1_msgs",
                            "type": {
                                "kind": "array",
                                "length": 2,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "unencrypted_logs_hash",
                            "type": {
                                "kind": "array",
                                "length": 2,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "unencrypted_log_preimages_length",
                            "type": {
                                "kind": "field"
                            }
                        },
                        {
                            "name": "block_header",
                            "type": {
                                "kind": "struct",
                                "path": "aztec::abi::BlockHeader",
                                "fields": [
                                    {
                                        "name": "note_hash_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "nullifier_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "contract_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "l1_to_l2_messages_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "archive_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "public_data_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "global_variables_hash",
                                        "type": {
                                            "kind": "field"
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "name": "prover_address",
                            "type": {
                                "kind": "field"
                            }
                        }
                    ]
                }
            ],
            "bytecode": "",
            "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
        },
        {
            "name": "un_read_leaf_at",
            "functionType": "unconstrained",
            "isInternal": false,
            "parameters": [
                {
                    "name": "address",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                },
                {
                    "name": "key",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                }
            ],
            "returnTypes": [
                {
                    "kind": "struct",
                    "path": "slow_updates_tree::slow_map::Leaf",
                    "fields": [
                        {
                            "name": "next_change",
                            "type": {
                                "kind": "field"
                            }
                        },
                        {
                            "name": "before",
                            "type": {
                                "kind": "field"
                            }
                        },
                        {
                            "name": "after",
                            "type": {
                                "kind": "field"
                            }
                        }
                    ]
                }
            ],
            "bytecode": "H4sIAAAAAAAA/82YzU7CQBSFp60FCoh/CP7bRNekwNYFz6BbNyQgG5CE1vj60nKPORlnQcKtMEnpdIbe891zy7QlNMZ4ZtOC9eabvw3zI9knu7W+pxcrKZPTV+QMiBP9I9mH620m/chRg4jOQY4Vmh8pMVb0PUw4H9+RT0AeNGjeOM7xrHM4NrxsiTcV3TwGEWkYqxZ2HQzpVyQ3RZZ+HrOqG7OofU2ZEzUyVo3A3qD5GvkVKXN4pIm4OGa+bVn9PbOWVf+6bsxB02zqCi/rlqecT1M5H9QMtYRWkzRbJdTuWGJ5skGjQbonJehCJxRdcEAroO88y/5YeM50eYq1ElqG/OA2ov4ZeXOq7E0e81w3ZnFtXRA/coVOg+b5Gr9Qzs0jTcTFMfNtyxrsmbUE3d81qGVpVR0+GGss52mX4IOxfEBrO1i8PbPwc5ehsbblFT+LYS5fi95pviN9fqbrSj9wxO7Q2KX0u45z2aOOlUuyWys8Yp0RHUOrTgzdA2A5/ycW1ARxLy2Wfepe6eoWa/416eIavSLfoX9NHDfK+ecxbh0cN8QB/VviuNPlGOQx7h0cd8QBfXwvoj7/th8s3/KxRysHXl84HtaNBxrD8yZiVMWDQNeDYQnvmcNDes/M75u4F6XZcjWeTV+n44lHWECFtT6hcZ+Xd9x6j2gMr38hjeF8fl1AnBrN2fao/v+DRF3JBJJESBAM8yT7F9m/bTyM0/kyi5P4c/05ns+X39NJL+a5NF58pVmcZuNVFn+slou43/sBc586qqgTAAA=",
            "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
        },
        {
            "name": "un_read_root",
            "functionType": "unconstrained",
            "isInternal": false,
            "parameters": [
                {
                    "name": "address",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                }
            ],
            "returnTypes": [
                {
                    "kind": "struct",
                    "path": "slow_updates_tree::slow_map::Leaf",
                    "fields": [
                        {
                            "name": "next_change",
                            "type": {
                                "kind": "field"
                            }
                        },
                        {
                            "name": "before",
                            "type": {
                                "kind": "field"
                            }
                        },
                        {
                            "name": "after",
                            "type": {
                                "kind": "field"
                            }
                        }
                    ]
                }
            ],
            "bytecode": "H4sIAAAAAAAA/81XTU+DQBBdCoXS72/rbfUHNNBePXD3pol3klYvrSQF49+3287E5xaNSQfrJO0OszDvzRtYFk8p5aijueCjcSyhMTrPYkcuV+QCzxrUYczb/57ID2GezQc/EeLjy+sVIXce61STghHnQ/W1r7YGHo1d0qEuy3kRAi6bfW8l4DO+D9yEuMS++uy1UM5DnwNhniZHAzRxQRNjLZgPYK4hzMNRp88GHyO/33KtXZhrVf0PZXMu2sQZn1f1TT0t4XpMjibl8gCrBZidCnrXplwO/RijCbjdCnAZp064zIOxXDjnlsYO6GH3owpt0BLwGQu5OBfmgu8bBbGOpRW+g7AH9zDfJx/fZQPy3ZLcfYj1yB+UXIsa9a1aovPsoBHiJHDMWE3gMPgHXBp/xIV7wnl7FpdL4g5lcQ/r6Ahw+R4dgu6MPwIeY+H6TY5JCY8x8GD8CfCYyvJYmBxXJTymwIPx+bwQfHy2Z5ZuJnZt1YDrC+bjdWMGMd5nco6ANHBlNVhWsP9YIn+2n9ZpH0bhvX5s1hF+F+VFtktf1g/rdOUALabK0uKnGPq4vPMW14MYL1l1iPH1AcQ4D26XTz5tE6H6sVBVUqhLRZSdd0PjHY2PR/10vskKHenX/X+62WTv69Vc41yut295ofMi3RX6eZdtdTz/AAelgqTMDwAA",
            "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
        },
        {
            "name": "update_at_private",
            "functionType": "secret",
            "isInternal": false,
            "parameters": [
                {
                    "name": "index",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                },
                {
                    "name": "new_value",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                }
            ],
            "returnTypes": [],
            "bytecode": "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",
            "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
        },
        {
            "name": "update_at_public",
            "functionType": "open",
            "isInternal": false,
            "parameters": [
                {
                    "name": "p",
                    "type": {
                        "kind": "struct",
                        "path": "slow_updates_tree::slow_map::SlowUpdateProof",
                        "fields": [
                            {
                                "name": "index",
                                "type": {
                                    "kind": "field"
                                }
                            },
                            {
                                "name": "new_value",
                                "type": {
                                    "kind": "field"
                                }
                            },
                            {
                                "name": "before",
                                "type": {
                                    "kind": "struct",
                                    "path": "slow_updates_tree::slow_map::SlowUpdateInner",
                                    "fields": [
                                        {
                                            "name": "value",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "sibling_path",
                                            "type": {
                                                "kind": "array",
                                                "length": 254,
                                                "type": {
                                                    "kind": "field"
                                                }
                                            }
                                        }
                                    ]
                                }
                            },
                            {
                                "name": "after",
                                "type": {
                                    "kind": "struct",
                                    "path": "slow_updates_tree::slow_map::SlowUpdateInner",
                                    "fields": [
                                        {
                                            "name": "value",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "sibling_path",
                                            "type": {
                                                "kind": "array",
                                                "length": 254,
                                                "type": {
                                                    "kind": "field"
                                                }
                                            }
                                        }
                                    ]
                                }
                            }
                        ]
                    },
                    "visibility": "private"
                }
            ],
            "returnTypes": [
                {
                    "kind": "struct",
                    "path": "aztec::abi::PublicCircuitPublicInputs",
                    "fields": [
                        {
                            "name": "call_context",
                            "type": {
                                "kind": "struct",
                                "path": "aztec::abi::CallContext",
                                "fields": [
                                    {
                                        "name": "msg_sender",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "storage_contract_address",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "portal_contract_address",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "function_selector",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "is_delegate_call",
                                        "type": {
                                            "kind": "boolean"
                                        }
                                    },
                                    {
                                        "name": "is_static_call",
                                        "type": {
                                            "kind": "boolean"
                                        }
                                    },
                                    {
                                        "name": "is_contract_deployment",
                                        "type": {
                                            "kind": "boolean"
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "name": "args_hash",
                            "type": {
                                "kind": "field"
                            }
                        },
                        {
                            "name": "return_values",
                            "type": {
                                "kind": "array",
                                "length": 4,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "contract_storage_update_requests",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "struct",
                                    "path": "aztec::abi::ContractStorageUpdateRequest",
                                    "fields": [
                                        {
                                            "name": "storage_slot",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "old_value",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "new_value",
                                            "type": {
                                                "kind": "field"
                                            }
                                        }
                                    ]
                                }
                            }
                        },
                        {
                            "name": "contract_storage_read",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "struct",
                                    "path": "aztec::abi::ContractStorageRead",
                                    "fields": [
                                        {
                                            "name": "storage_slot",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "value",
                                            "type": {
                                                "kind": "field"
                                            }
                                        }
                                    ]
                                }
                            }
                        },
                        {
                            "name": "public_call_stack",
                            "type": {
                                "kind": "array",
                                "length": 4,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "new_commitments",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "new_nullifiers",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "new_l2_to_l1_msgs",
                            "type": {
                                "kind": "array",
                                "length": 2,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "unencrypted_logs_hash",
                            "type": {
                                "kind": "array",
                                "length": 2,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "unencrypted_log_preimages_length",
                            "type": {
                                "kind": "field"
                            }
                        },
                        {
                            "name": "block_header",
                            "type": {
                                "kind": "struct",
                                "path": "aztec::abi::BlockHeader",
                                "fields": [
                                    {
                                        "name": "note_hash_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "nullifier_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "contract_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "l1_to_l2_messages_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "archive_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "public_data_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "global_variables_hash",
                                        "type": {
                                            "kind": "field"
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "name": "prover_address",
                            "type": {
                                "kind": "field"
                            }
                        }
                    ]
                }
            ],
            "bytecode": "",
            "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
        }
    ],
    "events": [],
    "debug": {
        "debugSymbols": [
            "",
            "",
            "eJyrVsrJT04syczPK1ayqq6tBQAz9wY7",
            "eJyrVsrJT04syczPK1ayqq6tBQAz9wY7",
            "",
            "",
            "",
            "eJzNncuuJDl2Zf8lxgnBSZ7DR/2KoEFBrQYECKVGV80K9e+yhNxvRCENbmdfGulrpIBAY26Jzm3uy7iu/f3Hf/33v//5b//533/5648//f3H419q+/Gnf/37j7/+vz//5ff/xV//9uf//7cff3r89uM//vJ/jv/5j99+/N///K//+PGn9I9/++334V0bPqTh7aENT9rwrA0v0eG//WFUspTbc+Txb/ev0cOes9vS2X3p7HXp7OFP5LdmD3+AvzV7+PP+ndl7eHt8a/bwbvrW7OHN963Zl+7VvnSv9qV7tS/dq33pXu1L92pfulfH0r06lu7VsXSvjqm9Wmr9mr30/uvsZ8NrenwNryn9MczU1r47zFQT3B1mqjjuDjPVM3eHmaqlu8NMtdjNYdJjqvVuTzPVkrenmWrV29OQWjg9SDWcHqQeTg9SEacHqYnTg1TF6YHq4oTq4oTq4oTq4oTq4oTq4oTq4oTq4oTq4oTq4oTq4ozq4ozq4ozq4ozq4ozq4ozq4ozq4ozq4ozq4ozq4oLq4oLq4oLq4oLq4oLq4oLq4oLq4oLq4oLq4oLqYkN1saG62FBdbKguNlQXG6qLDdXFhupiQ3WxobrYUV3sqC52VBc7qosd1cWO6mJHdbGjuthRXeyoLq6oLq6oLq6oLq6oLq6oLq6oLq6oLo57F1vSoLo4bo3sSBOXUrak2brD/edR3tr6SZqtO/wyzcZPsZefK3X8+2ylNn6Kr9PMuSO3p9n4jSKQZuM3ikCafd8oehn2HH38s34Nbu2VZV/bXGfZ2DVezL9WyR4+MfwZfuOXj/vDb/yuooUf7euW8Mi/jP36zGy9I9yafOvd487kcXvoOT7cd8/x4U56jg/3xnN8eKs+x2sGdYrrI8/xmkOd4w7Gc7xmUee4x/Acr61vfmjrm+On9Z/jtfXN8RPvz/Ha+ub4qfH/HR8/1/0cL65v/Gz0c7y4vvHzxc/x4vrGz+g+x4vrGz/n+hwvrm/8rOhzvLi+8fOWz/Hi+sbPLD7Hi+sbP/f3HC+ub/zs3HO8uL7x82fP8eL6xs9wPceL6xs/B/UcL65v/CzRc7y4vvHzOM/x4vrGz7Q8x4vrGz8X8hwvrm/8bMVzvLi+8fMJz/Hi+saf8T/Hi+sbf07+HC+ub/xZ83O8uL7x57XP8eL6xp95PseL6xt/bvgcL65v/Nnbc7y4vvHnV8/x4vrGnwE9x4vrG3+O8hwvrq/4J6ay+DemsvhHprL4V6ay+GemcvzvTD3Hi+sbZ/TP8eL6xv9e03O8uL5xjv6/4+Ok+zleXN84LX6OF9c3zlyf48X1jaPI53hxfePM7TleXN/4X9Z5jhfXV+RXWeRXWeRXWeRXWeRXWeRXWeRXWeRXReRXReRXReRXReRXReRXReRXReRXReRXReRXReRXReRXReRXReRXReRXReRXReRXReRXReRXReRXReRXReRXReRXReRXReRXReRXReRXReRXReRXReRXReRXReRXReRXReRXReRXReRXReRXReRXReRXReRXReRXReRXReRXReRXReRXReRXReRXReRXReRXReRXReRXReRXReRXReRXReRXReRXReRXReRXReRXReRXReRXReRXReRXReRXReRXReRXReRXReRXReRXReRXReRXReRXReRXReRXReRXReRXReRXReRXReRXReRXReRXReRXReRXReRXReRXReRXReRXReRXReRXReRXReRXReRXReRXReRXReRXReRXReRXReRXReRXReRXReRXJvIrE/mVifzKRH5lIr8ykV+ZyK9M5Fcm8isT+ZWJ/MpEfmUivzKRX5nIr0zkVybyKxP5lYn8ykR+ZSK/MpFfmcivTORXJvIrE/mVifzKRH5lIr8ykV+ZyK9M5Fcm8isT+ZWJ/MpEfmUivzKRX5nIr0zkVybyKxP5lYn8ykR+ZSK/MpFfmcivTORXJvIrE/mVifzKRH5lIr8ykV+ZyK9M5Fcm8isT+ZWJ/MpEfmUivzKRX5nIr0zkVybyKxP5lYn8ykR+ZSK/MpFfmcivTORXJvIrE/mVifzKRH5lIr8ykV+ZyK9M5Fcm8isT+ZWJ/MpEfmUivzKRX5nIr0zkVybyKxP5lYn8ykR+ZSK/MpFfmcivTORXJvIrE/mVifzKRH7lIr9ykV+5yK9c5Fcu8isX+ZWL/MpFfuUiv3KRX7nIr1zkVy7yKxf5lYv8ykV+5SK/cpFfucivXORXLvIrF/mVi/zKRX7lIr9ykV+5yK9c5Fcu8isX+ZWL/MpFfuUiv3KRX7nIr1zkVy7yKxf5lYv8ykV+5SK/cpFfucivXORXLvIrF/mVi/zKRX7lIr9ykV+5yK9c5Fcu8isX+ZWL/MpFfuUiv3KRX7nIr1zkVy7yKxf5lYv8ykV+5SK/cpFfucivXORXLvIrF/mVi/zKRX7lIr9ykV+5yK9c5Fcu8isX+ZWL/MpFfuUiv3KRX7nIr1zkVy7yKxf5lYv8ykV+5SK/cpFfucivXORXLvIrF/mVi/zKRX7lIr9ykV+5yK9c5FdV5FdV5FdV5FdV5FdV5FdV5FdV5FdV5FdV5FdV5FdV5FdV5FdV5FdV5FdV5FdV5FdV5FdV5FdV5FdV5FdV5FdV5FdV5FdV5FdV5FdV5FdV5FdV5FdV5FdV5FdV5FdV5FdV5FdV5FdV5FdV5FdV5FdV5FdV5FdV5FdV5FdV5FdV5FdV5FdV5FdV5FdV5FdV5FdV5FdV5FdV5FdV5FdV5FdV5FdV5FdV5FdV5FdV5FdV5FdV5FdV5FdV5FdV5FdV5FdV5FdV5FdV5FdV5FdV5FdV5FdV5FdV5FdV5FdV5FdV5FdV5FdV5FdV5FdV5FdV5FdV5FdV5FdV5FdV5FdV5FdV5FdV5FdV5FdV5FdV5FdV5FdV5FdV5FdV5FdV5FdV5FdV5FdV5FdV5FdV5FdN5FdN5FdN5FdN5FdN5FdN5FdN5FdN5FdN5FdN5FdN5FdN5FdN5FdN5FdN5FdN5FdN5FdN5FdN5FdN5FdN5FdN5FdN5FdN5FdN5FdN5FdN5FdN5FdN5FdN5FdN5FdN5FdN5FdN5FdN5FdN5FdN5FdN5FdN5FdN5FdN5FdN5FdN5FdN5FdN5FdN5FdN5FdN5FdN5FdN5FdN5FdN5FdN5FdN5FdN5FdN5FdN5FdN5FdN5FdN5FdN5FdN5FdN5FdN5FdN5FdN5FdN5FdN5FdN5FdN5FdN5FdN5FdN5FdN5FdN5FdN5FdN5FdN5FdN5FdN5FdN5FdN5FdN5FdN5FdN5FdN5FdN5FdN5FdN5FdN5FdN5FdN5FdN5FdN5FdN5FdN5FdN5FdN5FdN5FdN5Fdd5Fdd5Fdd5Fdd5Fdd5Fdd5Fdd5Fdd5Fdd5Fdd5Fdd5Fdd5Fdd5Fdd5Fdd5Fdd5Fdd5Fdd5Fdd5Fdd5Fdd5Fdd5Fdd5Fdd5Fdd5Fdd5Fdd5Fdd5Fdd5Fdd5Fdd5Fdd5Fdd5Fdd5Fdd5Fdd5Fdd5Fdd5Fdd5Fdd5Fdd5Fdd5Fdd5Fdd5Fdd5Fdd5Fdd5Fdd5Fdd5Fdd5Fdd5Fdd5Fdd5Fdd5Fdd5Fdd5Fdd5Fdd5Fdd5Fdd5Fdd5Fdd5Fdd5Fdd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",
            "",
            ""
        ],
        "fileMap": {
            "1": {
                "source": "mod capsule;\nmod types;\n\n// This contract allow us to \"read\" public storage in private through a delayed tree.\n// More documentation need to be outlined for this properly, but there is some in \n// https://github.com/AztecProtocol/aztec-packages/issues/1291\n// This is made as a separate contract for one thing mainly. Making it simpler to use.\ncontract SlowTree {\n    use dep::std::option::Option;\n    use dep::value_note::{\n        balance_utils,\n        utils::{increment, decrement},\n        value_note::{VALUE_NOTE_LEN, ValueNote, ValueNoteMethods},\n    };\n    use dep::aztec::{\n        context::{PrivateContext, PublicContext, Context},\n        note::{\n            note_header::NoteHeader,\n            utils as note_utils,\n        },\n        selector::compute_selector,\n        state_vars::{map::Map, public_state::PublicState, set::Set},\n        types::type_serialization::field_serialization::{\n            FieldSerializationMethods, FIELD_SERIALIZED_LEN,\n        },\n    };\n    use dep::slow_updates_tree::slow_map::{\n        SlowMap, Leaf, SlowUpdateProof, compute_merkle_root, deserialize_slow_update_proof\n    };\n\n    use crate::capsule::pop_capsule;\n    use crate::types::{MembershipProof, deserialize_membership_proof};\n\n    // docs:start:constants_and_storage\n    global TREE_HEIGHT: Field = 254;\n    global MEMBERSHIP_SIZE: Field = 256; // TREE_HEIGHT + 2\n    global UPDATE_SIZE: Field = 512; // TREE_HEIGHT * 2 + 4\n\n    global EMPTY_ROOT: Field = 5785871043333994658400733180052743689641713274194136017445890613179954325976;\n\n    struct Storage {\n        trees: Map<SlowMap<TREE_HEIGHT, UPDATE_SIZE>>,\n    }\n    // docs:end:constants_and_storage\n\n    impl Storage {\n        fn init(context: Context) -> pub Self {\n            Storage {\n                trees: Map::new(\n                    context,\n                    1,\n                    |context, slot| {\n                        SlowMap::new(\n                            context,\n                            slot,\n                        )\n                    }\n                ),\n            }\n        }\n    }\n\n    #[aztec(private)]\n    fn constructor() {}\n    // docs:start:initialize\n    #[aztec(public)]\n    fn initialize() {\n        storage.trees.at(context.msg_sender()).initialize(EMPTY_ROOT);\n    }\n    // docs:end:initialize\n    // docs:start:read_at_pub\n    #[aztec(public)]\n    fn read_at_pub(key: Field) -> Field {\n        storage.trees.at(context.msg_sender()).read_at(key)\n    }\n    // docs:end:read_at_pub\n    #[aztec(public)]\n    fn read_leaf_at_pub(key: Field) -> Leaf {\n        storage.trees.at(context.msg_sender()).read_leaf_at(key)\n    }\n    // docs:start:read_at_private\n    #[aztec(private)]\n    fn read_at(index: Field) -> Field {\n        let fields = pop_capsule();\n        let p: MembershipProof<TREE_HEIGHT, MEMBERSHIP_SIZE> = deserialize_membership_proof(fields);\n        assert(index == p.index, \"Index does not match expected\");\n\n        let expected_root = compute_merkle_root(p.value, p.index, p.sibling_path);\n        let selector = compute_selector(\"_assert_current_root(Field,Field)\");\n        context.call_public_function(context.this_address(),\n            selector,\n            [context.msg_sender(), expected_root]);\n\n        p.value\n    }\n    // docs:end:read_at_private\n    // docs:start:assert_current_root\n    #[aztec(public)]\n    internal fn _assert_current_root(caller: Field, expected: Field) {\n        let root = storage.trees.at(caller).current_root();\n        assert(root == expected, \"Root does not match expected\");\n    }\n    // docs:end:assert_current_root\n\n    // docs:start:update_at_pub\n    #[aztec(public)]\n    fn update_at_public(p: SlowUpdateProof<TREE_HEIGHT, UPDATE_SIZE>) {\n        storage.trees.at(context.msg_sender()).update_at(p);\n    }\n    // docs:end:update_at_pub\n    // docs:start:update_at_private\n    #[aztec(private)]\n    fn update_at_private(index: Field, new_value: Field) {\n        let fields = pop_capsule();\n        let p: SlowUpdateProof<TREE_HEIGHT, UPDATE_SIZE> = deserialize_slow_update_proof(fields);\n        assert(index == p.index, \"Index does not match expected\");\n        assert(new_value == p.new_value, \"New value does not match expected\");\n\n        // We compute the root before.\n        let before_root = compute_merkle_root(p.before.value, p.index, p.before.sibling_path);\n        let after_root = compute_merkle_root(p.after.value, p.index, p.after.sibling_path);\n        let new_after_root = compute_merkle_root(p.new_value, p.index, p.after.sibling_path);\n\n        let selector = compute_selector(\"_update(Field,Field,Field,Field,Field,Field)\");\n        context.call_public_function(context.this_address(),\n            selector,\n            [\n                context.msg_sender(),\n                p.index,\n                p.new_value,\n                before_root,\n                after_root,\n                new_after_root\n            ]);\n    }\n    // docs:end:update_at_private\n    // docs:start:_update\n    #[aztec(public)]\n    internal fn _update(caller: Field, index: Field, new_value: Field, before: Field, after: Field, new_root: Field) {\n        let current_root = storage.trees.at(caller).current_root();\n        let after_root = storage.trees.at(caller).read_root().after;\n\n        assert(current_root == before, \"Before root does not match expected\");\n        assert(after_root == after, \"After root does not match expected\");\n\n        storage.trees.at(caller).update_unsafe_at(index, new_value, new_root);\n    }\n    // docs:end:_update\n    unconstrained fn un_read_leaf_at(address: Field, key: Field) -> Leaf {\n        storage.trees.at(address).read_leaf_at(key)\n    }\n\n    unconstrained fn un_read_root(address: Field) -> Leaf {\n        storage.trees.at(address).read_root()\n    }\n\n    unconstrained fn compute_note_hash_and_nullifier(_contract_address: Field, _nonce: Field, _storage_slot: Field, _preimage: [Field; 4]) -> [Field; 4] {\n        [0x0d, 0x0e, 0x0a, 0x0d]\n    }\n}\n",
                "path": "/usr/src/yarn-project/noir-contracts/src/contracts/slow_tree_contract/src/main.nr"
            },
            "6": {
                "source": "mod poseidon;\nmod mimc;\n\n#[foreign(sha256)]\npub fn sha256<N>(_input: [u8; N]) -> [u8; 32] {}\n\n#[foreign(blake2s)]\npub fn blake2s<N>(_input: [u8; N]) -> [u8; 32] {}\n\nstruct PedersenPoint {\n   x : Field,\n   y : Field,\n}\n\npub fn pedersen_commitment<N>(input: [Field; N]) -> PedersenPoint {\n    pedersen_commitment_with_separator(input, 0)\n}\n\n#[foreign(pedersen)]\npub fn __pedersen_commitment_with_separator<N>(_input: [Field; N], _separator: u32) -> [Field; 2] {}\n\npub fn pedersen_commitment_with_separator<N>(input: [Field; N], separator: u32) -> PedersenPoint {\n    let values = __pedersen_commitment_with_separator(input, separator);\n    PedersenPoint { x: values[0], y: values[1] }\n}\n\npub fn pedersen_hash<N>(input: [Field; N]) -> Field {\n    pedersen_hash_with_separator(input, 0)\n}\n\n#[foreign(pedersen_hash)]\npub fn pedersen_hash_with_separator<N>(_input: [Field; N], _separator: u32) -> Field {}\n\npub fn hash_to_field<N>(_input: [Field; N]) -> Field {\n    let mut inputs_as_bytes = [];\n\n    for i in 0..N {\n        let input_bytes = _input[i].to_le_bytes(32);\n        for i in 0..32 {\n            inputs_as_bytes = inputs_as_bytes.push_back(input_bytes[i]);\n        }\n    }\n\n    let hashed_input = blake2s(inputs_as_bytes);\n    crate::field::bytes32_to_field(hashed_input)\n}\n\n#[foreign(keccak256)]\npub fn keccak256<N>(_input: [u8; N], _message_size: u32) -> [u8; 32] {}\n\n",
                "path": "std/hash.nr"
            },
            "14": {
                "source": "// Regular merkle tree means a append-only merkle tree (Explain why this is the only way to have privacy and alternatives if you don't want it)\n// Currently we assume that it is a binary tree, so depth k implies a width of 2^k\n// XXX: In the future we can add an arity parameter\n// Returns the merkle root of the tree from the provided leaf, its hashpath, using a pedersen hash function.\npub fn compute_merkle_root<N>(leaf: Field, index: Field, hash_path: [Field; N]) -> Field {\n    let n = hash_path.len();\n    let index_bits = index.to_le_bits(n as u32);\n    let mut current = leaf;\n    for i in 0..n {\n        let path_bit = index_bits[i] as bool;\n        let (hash_left, hash_right) = if path_bit {\n            (hash_path[i], current)\n        } else {\n            (current, hash_path[i])\n        };\n        current = crate::hash::pedersen_hash([hash_left, hash_right]);\n    }\n    current\n}\n",
                "path": "std/merkle.nr"
            },
            "24": {
                "source": "impl Field {\n    pub fn to_le_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_le_bits(bit_size)\n    }\n    \n    pub fn to_be_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_be_bits(bit_size)\n    }\n\n    #[builtin(to_le_bits)]\n    fn __to_le_bits(_self: Self, _bit_size: u32) -> [u1] {}\n    \n    #[builtin(to_be_bits)]\n    fn __to_be_bits(_self: Self, _bit_size: u32) -> [u1] {}\n\n    pub fn to_le_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_le_radix(256, byte_size)\n    }\n\n    pub fn to_be_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_be_radix(256, byte_size)\n    }\n\n\n    pub fn to_le_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_le_radix(radix, result_len)\n    }\n\n    pub fn to_be_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_be_radix(radix, result_len)\n    }\n\n\n\n    // decompose `_self` into a `_result_len` vector over the `_radix` basis\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix(_self: Self, _radix: u32, _result_len: u32) -> [u8] {}\n    \n    #[builtin(to_be_radix)]\n    fn __to_be_radix(_self: Self, _radix: u32, _result_len: u32) -> [u8] {}\n\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b = exponent.to_le_bits(32);\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32-i] as Field) * (r * self) + (1 - b[32-i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x ∈ {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub fn modulus_num_bits() -> Field {}\n\n#[builtin(modulus_be_bits)]\npub fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub fn modulus_le_bytes() -> [u8] {}\n// Convert a 32 byte array to a field element\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n",
                "path": "std/field.nr"
            },
            "35": {
                "source": "struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::unsafe::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default\n        }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            other\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<U, Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            default()\n        }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some {\n                Option::none()\n            } else {\n                self\n            }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n",
                "path": "std/option.nr"
            },
            "77": {
                "source": "global ARGS_LENGTH: Field = 16;\nglobal RETURN_VALUES_LENGTH: Field = 4;\n\n/**\n * Convention for constant array lengths are mainly divided in 2 classes:\n *  - FUNCTION CALL\n *  - TRANSACTION\n *\n * Agreed convention is to use MAX_XXX_PER_CALL resp. MAX_XXX_PER_TX, where XXX denotes a type of element such as\n * commitment, or nullifier, e.g.,:\n *  - MAX_NEW_NULLIFIERS_PER_CALL\n *  - MAX_NEW_COMMITMENTS_PER_TX\n *\n * In the kernel circuits, we accumulate elements such as commitments and the nullifiers from all functions calls in a\n * transaction. Therefore, we always must have:\n * MAX_XXX_PER_TX ≥ MAX_XXX_PER_CALL\n *\n * For instance:\n * MAX_NEW_COMMITMENTS_PER_TX ≥ MAX_NEW_COMMITMENTS_PER_CALL\n * MAX_NEW_NULLIFIERS_PER_TX ≥ MAX_NEW_NULLIFIERS_PER_CALL\n *\n */\n\n// docs:start:constants\n// \"PER CALL\" CONSTANTS\nglobal MAX_NEW_COMMITMENTS_PER_CALL: Field = 16;\nglobal MAX_NEW_NULLIFIERS_PER_CALL: Field = 16;\nglobal MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL: Field = 4;\nglobal MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL: Field = 4;\nglobal MAX_NEW_L2_TO_L1_MSGS_PER_CALL: Field = 2;\nglobal MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL: Field = 16;\nglobal MAX_PUBLIC_DATA_READS_PER_CALL: Field = 16;\nglobal MAX_READ_REQUESTS_PER_CALL: Field = 32;\nglobal MAX_PENDING_READ_REQUESTS_PER_CALL: Field = 32;\n\n// \"PER TRANSACTION\" CONSTANTS\nglobal MAX_NEW_COMMITMENTS_PER_TX: Field = 64;\nglobal MAX_NEW_NULLIFIERS_PER_TX: Field = 64;\nglobal MAX_PRIVATE_CALL_STACK_LENGTH_PER_TX: Field = 8;\nglobal MAX_PUBLIC_CALL_STACK_LENGTH_PER_TX: Field = 8;\nglobal MAX_NEW_L2_TO_L1_MSGS_PER_TX: Field = 2;\nglobal MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_TX: Field = 16;\nglobal MAX_PUBLIC_DATA_READS_PER_TX: Field = 16;\nglobal MAX_NEW_CONTRACTS_PER_TX: Field = 1;\nglobal MAX_OPTIONALLY_REVEALED_DATA_LENGTH_PER_TX: Field = 4;\nglobal MAX_READ_REQUESTS_PER_TX: Field = 128;\nglobal MAX_PENDING_READ_REQUESTS_PER_TX: Field = 128;\nglobal NUM_ENCRYPTED_LOGS_HASHES_PER_TX: Field = 1;\nglobal NUM_UNENCRYPTED_LOGS_HASHES_PER_TX: Field = 1;\n// docs:end:constants\n\n// ROLLUP CONTRACT CONSTANTS - constants used only in l1-contracts\nglobal NUMBER_OF_L1_L2_MESSAGES_PER_ROLLUP: Field = 16;\n// TODO(961): Use this constant everywhere instead of hard-coded \"2\".\nglobal KERNELS_PER_BASE_ROLLUP: Field = 2;\nglobal MAX_NEW_NULLIFIERS_PER_BASE_ROLLUP: Field = 128;\nglobal MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_BASE_ROLLUP: Field = 32;\nglobal MAX_PUBLIC_DATA_READS_PER_BASE_ROLLUP: Field = 32;\n\n// TREES RELATED CONSTANTS\nglobal VK_TREE_HEIGHT: Field = 3;\nglobal FUNCTION_TREE_HEIGHT: Field = 5;\nglobal CONTRACT_TREE_HEIGHT: Field = 16;\nglobal NOTE_HASH_TREE_HEIGHT: Field = 32;\nglobal PUBLIC_DATA_TREE_HEIGHT: Field = 254;\nglobal NULLIFIER_TREE_HEIGHT: Field = 20;\nglobal L1_TO_L2_MSG_TREE_HEIGHT: Field = 16;\nglobal ROLLUP_VK_TREE_HEIGHT: Field = 8;\n\n// SUB-TREES RELATED CONSTANTS\nglobal CONTRACT_SUBTREE_HEIGHT: Field = 1;\nglobal CONTRACT_SUBTREE_SIBLING_PATH_LENGTH: Field = 15;\nglobal NOTE_HASH_SUBTREE_HEIGHT: Field = 7;\nglobal NOTE_HASH_SUBTREE_SIBLING_PATH_LENGTH: Field = 25;\nglobal NULLIFIER_SUBTREE_HEIGHT: Field = 7;\nglobal ARCHIVE_HEIGHT: Field = 16;\nglobal NULLIFIER_SUBTREE_SIBLING_PATH_LENGTH: Field = 13;\nglobal L1_TO_L2_MSG_SUBTREE_HEIGHT: Field = 4;\nglobal L1_TO_L2_MSG_SUBTREE_SIBLING_PATH_LENGTH: Field = 12;\n\n// MISC CONSTANTS\nglobal FUNCTION_SELECTOR_NUM_BYTES: Field = 4;\nglobal MAPPING_SLOT_PEDERSEN_SEPARATOR: Field = 4;\nglobal NUM_FIELDS_PER_SHA256: Field = 2;\nglobal ARGS_HASH_CHUNK_LENGTH: u32 = 32;\nglobal ARGS_HASH_CHUNK_COUNT: u32 = 16;\n\n\n// NOIR CONSTANTS - constants used only in yarn-packages/noir-contracts\n// Some are defined here because Noir doesn't yet support globals referencing other globals yet.\n// Move these constants to a noir file once the issue bellow is resolved:\n// https://github.com/noir-lang/noir/issues/1734\nglobal L1_TO_L2_MESSAGE_LENGTH: Field = 8;\nglobal L1_TO_L2_MESSAGE_ORACLE_CALL_LENGTH: Field = 26;\nglobal MAX_NOTE_FIELDS_LENGTH: Field = 20;\n// GET_NOTE_ORACLE_RETURN_LENGT = MAX_NOTE_FIELDS_LENGTH + 1 + 2\n// The plus 1 is 1 extra field for nonce.\n// + 2 for EXTRA_DATA: [number_of_return_notes, contract_address]\nglobal GET_NOTE_ORACLE_RETURN_LENGTH: Field = 23;\nglobal MAX_NOTES_PER_PAGE: Field = 10;\n// VIEW_NOTE_ORACLE_RETURN_LENGTH = MAX_NOTES_PER_PAGE * (MAX_NOTE_FIELDS_LENGTH + 1) + 2;\nglobal VIEW_NOTE_ORACLE_RETURN_LENGTH: Field = 212;\nglobal CALL_CONTEXT_LENGTH: Field = 7;\nglobal BLOCK_HEADER_LENGTH: Field = 7;\nglobal FUNCTION_DATA_LENGTH: Field = 4;\nglobal CONTRACT_DEPLOYMENT_DATA_LENGTH: Field = 6;\n// Change this ONLY if you have changed the PrivateCircuitPublicInputs structure.\n// In other words, if the structure/size of the public inputs of a function call changes then we\n// should change this constant as well as the offsets in private_call_stack_item.nr\nglobal PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH: Field = 155;\nglobal CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH: Field = 3;\nglobal CONTRACT_STORAGE_READ_LENGTH: Field = 2;\n// Change this ONLY if you have changed the PublicCircuitPublicInputs structure.\nglobal PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH: Field = 142;\nglobal GET_NOTES_ORACLE_RETURN_LENGTH: Field = 674;\nglobal EMPTY_NULLIFIED_COMMITMENT: Field = 1000000;\nglobal CALL_PRIVATE_FUNCTION_RETURN_SIZE: Field = 161;\nglobal PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH: Field = 87;\nglobal PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH: Field = 144;\nglobal COMMITMENTS_NUM_BYTES_PER_BASE_ROLLUP: Field = 4096;\nglobal NULLIFIERS_NUM_BYTES_PER_BASE_ROLLUP: Field = 4096;\nglobal PUBLIC_DATA_WRITES_NUM_BYTES_PER_BASE_ROLLUP: Field = 2048;\nglobal CONTRACTS_NUM_BYTES_PER_BASE_ROLLUP: Field = 64;\nglobal CONTRACT_DATA_NUM_BYTES_PER_BASE_ROLLUP: Field = 128;\nglobal CONTRACT_DATA_NUM_BYTES_PER_BASE_ROLLUP_UNPADDED: Field = 104;\nglobal L2_TO_L1_MSGS_NUM_BYTES_PER_BASE_ROLLUP: Field = 128;\nglobal LOGS_HASHES_NUM_BYTES_PER_BASE_ROLLUP: Field = 128;\n\n/**\n * Enumerate the hash_indices which are used for pedersen hashing.\n * We start from 1 to avoid the default generators. The generator indices are listed\n * based on the number of elements each index hashes. The following conditions must be met:\n *\n * +-----------+-------------------------------+----------------------+\n * | Hash size | Number of elements hashed (n) | Condition to use     |\n * |-----------+-------------------------------+----------------------|\n * | LOW       | n ≤ 8                         | 0 < hash_index ≤ 32  |\n * | MID       | 8 < n ≤ 16                    | 32 < hash_index ≤ 40 |\n * | HIGH      | 16 < n ≤ 48                   | 40 < hash_index ≤ 48 |\n * +-----------+-------------------------------+----------------------+\n *\n * Note: When modifying, modify `GeneratorIndexPacker` in packer.hpp accordingly.\n */\n// Indices with size ≤ 8\nglobal GENERATOR_INDEX__COMMITMENT = 1;\nglobal GENERATOR_INDEX__COMMITMENT_NONCE = 2;\nglobal GENERATOR_INDEX__UNIQUE_COMMITMENT = 3;\nglobal GENERATOR_INDEX__SILOED_COMMITMENT = 4;\nglobal GENERATOR_INDEX__NULLIFIER = 5;\nglobal GENERATOR_INDEX__INITIALIZATION_NULLIFIER = 6;\nglobal GENERATOR_INDEX__OUTER_NULLIFIER = 7;\nglobal GENERATOR_INDEX__PUBLIC_DATA_READ = 8;\nglobal GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST = 9;\nglobal GENERATOR_INDEX__FUNCTION_DATA = 10;\nglobal GENERATOR_INDEX__FUNCTION_LEAF = 11;\nglobal GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA = 12;\nglobal GENERATOR_INDEX__CONSTRUCTOR = 13;\nglobal GENERATOR_INDEX__CONSTRUCTOR_ARGS = 14;\nglobal GENERATOR_INDEX__CONTRACT_ADDRESS = 15;\nglobal GENERATOR_INDEX__CONTRACT_LEAF = 16;\nglobal GENERATOR_INDEX__CALL_CONTEXT = 17;\nglobal GENERATOR_INDEX__CALL_STACK_ITEM = 18;\nglobal GENERATOR_INDEX__CALL_STACK_ITEM_2 = 19;\nglobal GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET = 20;\nglobal GENERATOR_INDEX__L2_TO_L1_MSG = 21;\nglobal GENERATOR_INDEX__TX_CONTEXT = 22;\nglobal GENERATOR_INDEX__PUBLIC_LEAF_INDEX = 23;\nglobal GENERATOR_INDEX__PUBLIC_DATA_LEAF = 24;\nglobal GENERATOR_INDEX__SIGNED_TX_REQUEST = 25;\nglobal GENERATOR_INDEX__GLOBAL_VARIABLES = 26;\nglobal GENERATOR_INDEX__PARTIAL_ADDRESS = 27;\nglobal GENERATOR_INDEX__BLOCK_HASH = 28;\n// Indices with size ≤ 16\nglobal GENERATOR_INDEX__TX_REQUEST = 33;\nglobal GENERATOR_INDEX__SIGNATURE_PAYLOAD = 34;\n// Indices with size ≤ 44\nglobal GENERATOR_INDEX__VK = 41;\nglobal GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS = 42;\nglobal GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS = 43;\nglobal GENERATOR_INDEX__FUNCTION_ARGS = 44;\n",
                "path": "/protocol_types/constants.nr"
            },
            "94": {
                "source": "use dep::protocol_types::constants::{\n    RETURN_VALUES_LENGTH,\n    MAX_READ_REQUESTS_PER_CALL,\n    MAX_PENDING_READ_REQUESTS_PER_CALL,\n    MAX_NEW_COMMITMENTS_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n    NUM_FIELDS_PER_SHA256,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL,\n    GENERATOR_INDEX__FUNCTION_ARGS,\n    BLOCK_HEADER_LENGTH,\n    CONTRACT_DEPLOYMENT_DATA_LENGTH,\n    CALL_CONTEXT_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n    CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH,\n    CONTRACT_STORAGE_READ_LENGTH,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n    GENERATOR_INDEX__BLOCK_HASH,\n    GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS,\n    GENERATOR_INDEX__FUNCTION_DATA,\n    GENERATOR_INDEX__PUBLIC_DATA_READ,\n    GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST,\n    GENERATOR_INDEX__CALL_CONTEXT,\n    GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS,\n    GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA,\n};\n\nuse crate::oracle::debug_log;\nuse crate::types::vec::BoundedVec;\nuse crate::types::point::Point;\nuse crate::hash::pedersen_hash;\n\n// docs:start:private-global-variables\nstruct PrivateGlobalVariables {\n    chain_id: Field,\n    version: Field,\n}\n// docs:end:private-global-variables\n\nimpl PrivateGlobalVariables {\n    fn serialize(self) -> [Field; 2] {\n        [self.chain_id, self.version]\n    }\n}\n\n// docs:start:public-global-variables\nstruct PublicGlobalVariables {\n    chain_id: Field,\n    version: Field,\n    block_number: Field,\n    timestamp: Field,\n}\n// docs:end:public-global-variables\n\nimpl PublicGlobalVariables {\n    fn serialize(self) -> [Field; 4] {\n        [self.chain_id, self.version, self.block_number, self.timestamp]\n    }\n}\n\n// docs:start:contract-deployment-data\nstruct ContractDeploymentData {\n    deployer_public_key: Point,\n    constructor_vk_hash : Field,\n    function_tree_root : Field,\n    contract_address_salt : Field,\n    portal_contract_address : Field,\n}\n// docs:end:contract-deployment-data\n\nimpl ContractDeploymentData {\n    fn serialize(self) -> [Field; CONTRACT_DEPLOYMENT_DATA_LENGTH] {\n        [\n            self.deployer_public_key.x,\n            self.deployer_public_key.y,\n            self.constructor_vk_hash,\n            self.function_tree_root,\n            self.contract_address_salt,\n            self.portal_contract_address,\n        ]\n    }\n\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA)\n    }\n}\n\n// PrivateContextInputs are expected to be provided to each private function\n// docs:start:private-context-inputs\nstruct PrivateContextInputs {\n    call_context : CallContext,\n    block_header: BlockHeader,\n    contract_deployment_data: ContractDeploymentData,\n    private_global_variables: PrivateGlobalVariables,\n}\n// docs:end:private-context-inputs\n\n// PublicContextInputs are expected to be provided to each public function\n// docs:start:public-context-inputs\nstruct PublicContextInputs {\n    call_context: CallContext,\n    block_header: BlockHeader,\n\n    public_global_variables: PublicGlobalVariables,\n}\n// docs:end:public-context-inputs\n\n// docs:start:call-context\nstruct CallContext {\n    msg_sender : Field,\n    storage_contract_address : Field,\n    portal_contract_address : Field,\n    function_selector: Field,\n\n    is_delegate_call : bool,\n    is_static_call : bool,\n    is_contract_deployment: bool,\n}\n// docs:end:call-context\n\nimpl CallContext {\n    fn serialize(self) -> [Field; CALL_CONTEXT_LENGTH] {\n        [\n            self.msg_sender,\n            self.storage_contract_address,\n            self.portal_contract_address,\n            self.function_selector,\n            self.is_delegate_call as Field,\n            self.is_static_call as Field,\n            self.is_contract_deployment as Field,\n        ]\n    }\n\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CALL_CONTEXT)\n    }\n}\n\n// docs:start:block-header\nstruct BlockHeader {\n    note_hash_tree_root : Field,\n    nullifier_tree_root : Field,\n    contract_tree_root : Field,\n    l1_to_l2_messages_tree_root : Field,\n    archive_root: Field,\n    public_data_tree_root: Field,\n    global_variables_hash: Field,\n}\n// docs:end:block-header\n\nimpl BlockHeader {\n    // NOTE: this order must match the order in `private_circuit_public_inputs.hpp`\n    pub fn serialize(self) -> [Field; BLOCK_HEADER_LENGTH] {\n        [\n            self.note_hash_tree_root,\n            self.nullifier_tree_root,\n            self.contract_tree_root,\n            self.l1_to_l2_messages_tree_root,\n            self.archive_root,\n            self.public_data_tree_root,\n            self.global_variables_hash,\n        ]\n    }\n\n    pub fn deserialize(deserialized: [Field; BLOCK_HEADER_LENGTH]) -> Self {\n        BlockHeader {\n            note_hash_tree_root: deserialized[0],\n            nullifier_tree_root: deserialized[1],\n            contract_tree_root: deserialized[2],\n            l1_to_l2_messages_tree_root: deserialized[3],\n            archive_root: deserialized[4],\n            public_data_tree_root: deserialized[5],\n            global_variables_hash: deserialized[6],\n        }\n    }\n\n    pub fn empty() -> Self {\n        Self { note_hash_tree_root: 0, nullifier_tree_root: 0, contract_tree_root: 0, l1_to_l2_messages_tree_root: 0, archive_root: 0, public_data_tree_root: 0, global_variables_hash: 0 }\n    }\n\n    pub fn block_hash(self) -> Field {\n        // TODO(#3442): Unify the ordering in `BlockHeader::serialize` function and the ordering\n        // in the block hash preimage --> This requires changes in the circuits.\n        let inputs = [\n            self.global_variables_hash,\n            self.note_hash_tree_root,\n            self.nullifier_tree_root,\n            self.contract_tree_root,\n            self.l1_to_l2_messages_tree_root,\n            self.public_data_tree_root\n        ];\n        pedersen_hash(inputs, GENERATOR_INDEX__BLOCK_HASH)\n    }\n}\n\nstruct FunctionData {\n    function_selector: Field,\n    is_internal: bool,\n    is_private: bool,\n    is_constructor: bool,\n}\n\nimpl FunctionData {\n    fn hash(self) -> Field {\n        pedersen_hash([\n            self.function_selector,\n            self.is_internal as Field,\n            self.is_private as Field,\n            self.is_constructor as Field,\n        ], GENERATOR_INDEX__FUNCTION_DATA)\n    }\n}\n\nstruct PrivateCircuitPublicInputs {\n    call_context: CallContext,\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n    read_requests: [Field; crate::abi::MAX_READ_REQUESTS_PER_CALL],\n    pending_read_requests: [Field; crate::abi::MAX_PENDING_READ_REQUESTS_PER_CALL],\n    new_commitments: [Field; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [Field; MAX_NEW_NULLIFIERS_PER_CALL],\n    nullified_commitments: [Field; MAX_NEW_NULLIFIERS_PER_CALL],\n    private_call_stack: [Field; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL],\n    public_call_stack: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_l2_to_l1_msgs: [Field; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    // Explore introducing a new type like uint256 (similar to Point), so it's more explicit that\n    // we're talking about a single number backed by two field elements.\n    encrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    encrypted_log_preimages_length: Field,\n    unencrypted_log_preimages_length: Field,\n    block_header: BlockHeader,\n    contract_deployment_data: ContractDeploymentData,\n    chain_id: Field,\n    version: Field,\n}\n\nimpl PrivateCircuitPublicInputs {\n    fn hash(self) -> Field {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0); \n        fields.push(self.call_context.hash());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.push_array(self.read_requests);\n        fields.push_array(self.pending_read_requests);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.nullified_commitments);\n        fields.push_array(self.private_call_stack);\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_header.serialize());\n        fields.push(self.contract_deployment_data.hash());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n\n        pedersen_hash(fields.storage, GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS)\n    }\n\n    fn serialize(self) -> [Field; PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.push_array(self.read_requests);\n        fields.push_array(self.pending_read_requests);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.private_call_stack);\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_header.serialize());\n        fields.push_array(self.contract_deployment_data.serialize());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n        fields.storage\n    }\n}\n\nstruct ContractStorageRead {\n    storage_slot: Field,\n    value: Field,\n}\n\nimpl ContractStorageRead {\n    pub fn serialize(self) -> [Field; CONTRACT_STORAGE_READ_LENGTH] {\n        [self.storage_slot, self.value]\n    }\n\n    pub fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_READ)\n    }\n\n    pub fn empty() -> Self {\n        Self { storage_slot: 0, value: 0 }\n    }\n}\n\nstruct ContractStorageUpdateRequest {\n    storage_slot: Field,\n    old_value: Field,\n    new_value: Field,\n}\n\nimpl ContractStorageUpdateRequest {\n    pub fn serialize(self) -> [Field; CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH] {\n        [self.storage_slot, self.old_value, self.new_value]\n    }\n\n    pub fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST)\n    }\n\n    pub fn empty() -> Self {\n        Self { storage_slot: 0, old_value: 0, new_value: 0 }\n    }\n}\n\nstruct PublicCircuitPublicInputs {\n    call_context: CallContext,\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n    contract_storage_update_requests: [ContractStorageUpdateRequest; MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n    contract_storage_read: [ContractStorageRead; MAX_PUBLIC_DATA_READS_PER_CALL],\n    public_call_stack: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_commitments: [Field; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [Field; crate::abi::MAX_NEW_NULLIFIERS_PER_CALL],\n    new_l2_to_l1_msgs: [Field; crate::abi::MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_log_preimages_length: Field,\n    block_header: BlockHeader,\n    prover_address: Field,\n}\n\nimpl PublicCircuitPublicInputs {\n    \n    pub fn hash(self) -> Field {\n        let mut inputs: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0);\n        inputs.push(self.call_context.hash());\n        inputs.push(self.args_hash);\n        inputs.push_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            inputs.push(self.contract_storage_update_requests[i].hash());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            inputs.push(self.contract_storage_read[i].hash());\n        }\n        inputs.push_array(self.public_call_stack);\n        inputs.push_array(self.new_commitments);\n        inputs.push_array(self.new_nullifiers);\n        inputs.push_array(self.new_l2_to_l1_msgs);\n\n        inputs.push_array(self.unencrypted_logs_hash);\n        inputs.push(self.unencrypted_log_preimages_length);\n        inputs.push_array(self.block_header.serialize());\n        inputs.push(self.prover_address);\n\n        pedersen_hash(inputs.storage, GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS)\n    }\n\n    pub fn serialize(self) -> [Field; PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());   \n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            fields.push_array(self.contract_storage_update_requests[i].serialize());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            fields.push_array(self.contract_storage_read[i].serialize());\n        }\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_header.serialize());\n        fields.push(self.prover_address);\n        fields.storage\n    }\n}\n\nstruct Hasher {\n    fields: [Field],\n}\n\nimpl Hasher {\n    pub fn new()-> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<N>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n\n    pub fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nglobal ARGS_HASH_CHUNK_LENGTH: u32 = 32;\nglobal ARGS_HASH_CHUNK_COUNT: u32 = 16;\n\npub fn hash_args<N>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        let mut chunks_hashes = [0; ARGS_HASH_CHUNK_COUNT];\n        for i in 0..ARGS_HASH_CHUNK_COUNT {\n            let mut chunk_hash = 0;\n            let start_chunk_index = i * ARGS_HASH_CHUNK_LENGTH;\n            if start_chunk_index < (args.len() as u32) {\n                let mut chunk_args = [0; ARGS_HASH_CHUNK_LENGTH];\n                for j in 0..ARGS_HASH_CHUNK_LENGTH {\n                    let item_index = i * ARGS_HASH_CHUNK_LENGTH + j;\n                    if item_index < (args.len() as u32) {\n                        chunk_args[j] = args[item_index];\n                    }\n                }\n                chunk_hash = pedersen_hash(chunk_args, GENERATOR_INDEX__FUNCTION_ARGS);\n            }\n            chunks_hashes[i] = chunk_hash;\n        }\n        pedersen_hash(chunks_hashes, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n",
                "path": "/aztec/abi.nr"
            },
            "96": {
                "source": "use dep::protocol_types::constants::{\n    EMPTY_NULLIFIED_COMMITMENT,\n    MAX_NEW_COMMITMENTS_PER_CALL,\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_READ_REQUESTS_PER_CALL,\n    MAX_PENDING_READ_REQUESTS_PER_CALL,\n    NUM_FIELDS_PER_SHA256,\n    RETURN_VALUES_LENGTH,\n};\n\nuse crate::abi;\n\nuse crate::abi::{\n    hash_args,\n    CallContext,\n    ContractDeploymentData,\n    BlockHeader,\n    FunctionData,\n    PrivateCircuitPublicInputs,\n    PublicCircuitPublicInputs,\n};\n\n// TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n// use dep::std::collections::vec::Vec;\n\n// l1 to l2 messaging\nuse crate::messaging::process_l1_to_l2_message;\nuse crate::private_call_stack_item::PrivateCallStackItem;\nuse crate::public_call_stack_item::PublicCallStackItem;\n\nuse crate::types::{\n    vec::BoundedVec,\n    point::Point,\n};\n\nuse crate::utils::arr_copy_slice;\n\nuse crate::oracle::{\n    arguments,\n    call_private_function::call_private_function_internal,\n    public_call::call_public_function_internal,\n    enqueue_public_function_call::enqueue_public_function_call_internal,\n    context::get_portal_address,\n    get_block_header::get_block_header,\n};\n\nuse dep::std::option::Option;\n\n// When finished, one can call .finish() to convert back to the abi\nstruct PrivateContext {\n    // docs:start:private-context\n    inputs: abi::PrivateContextInputs,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    read_requests: BoundedVec<Field, MAX_READ_REQUESTS_PER_CALL>,\n    pending_read_requests: BoundedVec<Field, MAX_PENDING_READ_REQUESTS_PER_CALL>,\n\n    new_commitments: BoundedVec<Field, MAX_NEW_COMMITMENTS_PER_CALL>,\n    new_nullifiers: BoundedVec<Field, MAX_NEW_NULLIFIERS_PER_CALL>,\n    nullified_commitments: BoundedVec<Field, MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    private_call_stack : BoundedVec<Field, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_stack : BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    new_l2_to_l1_msgs : BoundedVec<Field, MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    block_header: BlockHeader,\n\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    // encrypted_logs_preimages: Vec<Field>,\n    // unencrypted_logs_preimages: Vec<Field>,\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: abi::PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs: inputs,\n\n            args_hash: args_hash,\n            return_values: BoundedVec::new(0),\n\n            read_requests: BoundedVec::new(0),\n            pending_read_requests: BoundedVec::new(0),\n\n            new_commitments: BoundedVec::new(0),\n            new_nullifiers: BoundedVec::new(0),\n            nullified_commitments: BoundedVec::new(0),\n\n            block_header: inputs.block_header,\n\n            private_call_stack: BoundedVec::new(0),\n            public_call_stack: BoundedVec::new(0),\n            new_l2_to_l1_msgs: BoundedVec::new(0),\n\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    pub fn msg_sender(self) -> Field {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> Field {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    pub fn this_portal_address(self) -> Field {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.private_global_variables.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.private_global_variables.version\n    }\n\n    pub fn selector(self) -> Field {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn get_block_header(self, block_number: u32) -> BlockHeader {\n        get_block_header(block_number, self)\n    }\n\n    pub fn finish(self) -> abi::PrivateCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let encrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let encrypted_log_preimages_length = 0;\n        let unencrypted_log_preimages_length = 0;\n\n        let priv_circuit_pub_inputs = abi::PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            return_values: self.return_values.storage,\n            read_requests: self.read_requests.storage,\n            pending_read_requests: self.pending_read_requests.storage,\n            new_commitments: self.new_commitments.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            nullified_commitments: self.nullified_commitments.storage,\n            private_call_stack: self.private_call_stack.storage,\n            public_call_stack: self.public_call_stack.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            encrypted_logs_hash: encrypted_logs_hash,\n            unencrypted_logs_hash: unencrypted_logs_hash,\n            encrypted_log_preimages_length: encrypted_log_preimages_length,\n            unencrypted_log_preimages_length: unencrypted_log_preimages_length,\n            block_header: self.block_header,\n            contract_deployment_data: self.inputs.contract_deployment_data,\n            chain_id: self.inputs.private_global_variables.chain_id,\n            version: self.inputs.private_global_variables.version,\n        };\n        priv_circuit_pub_inputs\n    }\n\n    pub fn push_read_request(&mut self, read_request: Field) {\n        self.read_requests.push(read_request);\n    }\n\n    pub fn push_pending_read_request(&mut self, pending_read_request: Field) {\n        self.pending_read_requests.push(pending_read_request);\n    }\n\n    pub fn push_new_note_hash(&mut self, note_hash: Field) {\n        self.new_commitments.push(note_hash);\n    }\n\n    // We never push a zero nullified_commitment as zero is used to indicate the end\n    // of a field array in private kernel. This routine transparently replaces a\n    // zero value into the special placeholder: EMPTY_NULLIFIED_COMMITMENT.\n    pub fn push_new_nullifier(&mut self, nullifier: Field, nullified_commitment: Field) {\n        self.new_nullifiers.push(nullifier);\n        let mut non_zero_nullified = nullified_commitment;\n        if (non_zero_nullified == 0) {\n            non_zero_nullified = EMPTY_NULLIFIED_COMMITMENT;\n        }\n        self.nullified_commitments.push(non_zero_nullified);\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, content: Field) \n    // docs:end:context_message_portal\n    {\n        self.new_l2_to_l1_msgs.push(content);\n    }\n\n    // PrivateContextInputs must be temporarily passed in to prevent too many unknowns\n    // Note this returns self to get around an issue where mutable structs do not maintain mutations unless reassigned\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        msg_key: Field,\n        content: Field,\n        secret: Field\n    ) \n    // docs:end:context_consume_l1_to_l2_message\n    {\n        let nullifier = process_l1_to_l2_message(self.block_header.l1_to_l2_messages_tree_root, self.this_address(), self.this_portal_address(), self.chain_id(), self.version(), msg_key, content, secret);\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash)\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0)\n    }\n\n    pub fn call_private_function_with_packed_args(\n        &mut self,\n        contract_address: Field,\n        function_selector: Field,\n        args_hash: Field\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let fields = call_private_function_internal(\n            contract_address, \n            function_selector, \n            args_hash\n        );\n        let item = PrivateCallStackItem {\n            contract_address: fields[0],\n            function_data: FunctionData {\n                function_selector: fields[1],\n                is_internal: fields[2] as bool,\n                is_private: fields[3] as bool,\n                is_constructor: fields[4] as bool,\n            },\n            public_inputs: PrivateCircuitPublicInputs {\n                call_context: CallContext {\n                    msg_sender : fields[5],\n                    storage_contract_address : fields[6],\n                    portal_contract_address : fields[7],\n                    function_selector: fields[8], // practically same as fields[1]\n                    is_delegate_call : fields[9] as bool,\n                    is_static_call : fields[10] as bool,\n                    is_contract_deployment: fields[11] as bool,\n                },\n                // TODO handle the offsets as a variable incremented during extraction?\n                args_hash: fields[12],\n                return_values: arr_copy_slice(fields, [0; RETURN_VALUES_LENGTH], 13),\n                read_requests: arr_copy_slice(fields, [0; MAX_READ_REQUESTS_PER_CALL], 17),\n                pending_read_requests: arr_copy_slice(fields, [0; MAX_READ_REQUESTS_PER_CALL], 49),\n                new_commitments: arr_copy_slice(fields, [0; MAX_NEW_COMMITMENTS_PER_CALL], 81),\n                new_nullifiers: arr_copy_slice(fields, [0; MAX_NEW_NULLIFIERS_PER_CALL], 97),\n                nullified_commitments: arr_copy_slice(fields, [0; MAX_NEW_NULLIFIERS_PER_CALL], 113),\n                private_call_stack: arr_copy_slice(fields, [0; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL], 129),\n                public_call_stack: arr_copy_slice(fields, [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL], 133),\n                new_l2_to_l1_msgs: arr_copy_slice(fields, [0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL], 137),\n                encrypted_logs_hash: arr_copy_slice(fields, [0; NUM_FIELDS_PER_SHA256], 139),\n                unencrypted_logs_hash: arr_copy_slice(fields, [0; NUM_FIELDS_PER_SHA256], 141),\n                encrypted_log_preimages_length: fields[143],\n                unencrypted_log_preimages_length: fields[144],\n                block_header: BlockHeader {\n                    // Must match order in `private_circuit_public_inputs.hpp`\n                    note_hash_tree_root : fields[145],\n                    nullifier_tree_root : fields[146],\n                    contract_tree_root : fields[147],\n                    l1_to_l2_messages_tree_root : fields[148],\n                    archive_root : fields[149],\n                    public_data_tree_root: fields[150],\n                    global_variables_hash: fields[151],\n                },\n                contract_deployment_data: ContractDeploymentData {\n                    deployer_public_key: Point::new(fields[152], fields[153]),\n                    constructor_vk_hash : fields[154],\n                    function_tree_root : fields[155],\n                    contract_address_salt : fields[156],\n                    portal_contract_address : fields[157],\n                },\n                chain_id: fields[158],\n                version: fields[159],\n            },\n            is_execution_request: fields[160] as bool,\n        };\n        assert(contract_address == item.contract_address);\n        assert(function_selector == item.function_data.function_selector);\n\n        assert(args_hash == item.public_inputs.args_hash);\n\n        assert(item.is_execution_request == false);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        // We are issuing a regular call which is not delegate, static, or deployment. We also constrain\n        // the msg_sender in the nested call to be equal to our address, and the execution context address\n        // for the nested call to be equal to the address we actually called.\n        assert(item.public_inputs.call_context.is_delegate_call == false);\n        assert(item.public_inputs.call_context.is_static_call == false);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n        assert(item.public_inputs.call_context.msg_sender == self.inputs.call_context.storage_contract_address);\n        assert(item.public_inputs.call_context.storage_contract_address == contract_address);\n\n        self.private_call_stack.push(item.hash());\n\n        item.public_inputs.return_values\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field,\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: Field,\n        function_selector: Field,\n        args_hash: Field\n    ) {\n        let fields = enqueue_public_function_call_internal(\n            contract_address, \n            function_selector, \n            args_hash\n        );\n        let item = PublicCallStackItem {\n            contract_address: fields[0],\n            function_data: FunctionData {\n                function_selector: fields[1],\n                is_internal: fields[2] as bool,\n                is_private: fields[3] as bool,\n                is_constructor: fields[4] as bool,\n            },\n            public_inputs: PublicCircuitPublicInputs {\n                call_context: CallContext {\n                    msg_sender : fields[5],\n                    storage_contract_address : fields[6],\n                    portal_contract_address : fields[7],\n                    function_selector: fields[8], // practically same as fields[1]\n                    is_delegate_call : fields[9] as bool,\n                    is_static_call : fields[10] as bool,\n                    is_contract_deployment: fields[11] as bool,\n                },\n                args_hash: fields[12],\n                return_values: [0; RETURN_VALUES_LENGTH],\n                contract_storage_update_requests: [ContractStorageUpdateRequest::empty(); MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n                contract_storage_read: [ContractStorageRead::empty(); MAX_PUBLIC_DATA_READS_PER_CALL],\n                public_call_stack: [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n                new_commitments: [0; MAX_NEW_COMMITMENTS_PER_CALL],\n                new_nullifiers: [0; MAX_NEW_NULLIFIERS_PER_CALL],\n                new_l2_to_l1_msgs:[0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n                unencrypted_logs_hash:[0; NUM_FIELDS_PER_SHA256],\n                unencrypted_log_preimages_length: 0,\n                block_header: BlockHeader::empty(),\n                prover_address: 0,\n            },\n            is_execution_request: true,\n        };\n\n        assert(contract_address == item.contract_address);\n        assert(function_selector == item.function_data.function_selector);\n        \n        assert(args_hash == item.public_inputs.args_hash);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        // We are issuing a regular call which is not delegate, static, or deployment. We also constrain\n        // the msg_sender in the nested call to be equal to our address, and the execution context address\n        // for the nested call to be equal to the address we actually called.\n        assert(item.public_inputs.call_context.is_delegate_call == false);\n        assert(item.public_inputs.call_context.is_static_call == false);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n        assert(item.public_inputs.call_context.msg_sender == self.inputs.call_context.storage_contract_address);\n        assert(item.public_inputs.call_context.storage_contract_address == contract_address);\n\n        self.public_call_stack.push(item.hash());\n    }\n}\n\nuse crate::abi::{\n    ContractStorageRead,\n    ContractStorageUpdateRequest\n};\n\nstruct PublicContext {\n    inputs: abi::PublicContextInputs,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    contract_storage_update_requests: BoundedVec<ContractStorageUpdateRequest, MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL>,\n    contract_storage_read: BoundedVec<ContractStorageRead, MAX_PUBLIC_DATA_READS_PER_CALL>,\n    public_call_stack: BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n\n    new_commitments: BoundedVec<Field, MAX_NEW_COMMITMENTS_PER_CALL>,\n    new_nullifiers: BoundedVec<Field, crate::abi::MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    new_l2_to_l1_msgs: BoundedVec<Field, crate::abi::MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n\n    unencrypted_logs_hash: BoundedVec<Field, NUM_FIELDS_PER_SHA256>,\n    unencrypted_logs_preimages_length: Field,\n\n    block_header: BlockHeader,\n    prover_address: Field,\n}\n\nimpl PublicContext {\n    pub fn new(inputs: abi::PublicContextInputs, args_hash: Field) -> PublicContext {\n        let empty_storage_read = ContractStorageRead::empty();\n        let empty_storage_update = ContractStorageUpdateRequest::empty();\n        PublicContext {\n            inputs: inputs,\n\n            args_hash: args_hash,\n            return_values: BoundedVec::new(0),\n\n            contract_storage_update_requests: BoundedVec::new(empty_storage_update),\n            contract_storage_read: BoundedVec::new(empty_storage_read),\n            public_call_stack: BoundedVec::new(0),\n\n            new_commitments: BoundedVec::new(0),\n            new_nullifiers: BoundedVec::new(0),\n\n            new_l2_to_l1_msgs: BoundedVec::new(0),\n\n            \n            unencrypted_logs_hash: BoundedVec::new(0),\n            unencrypted_logs_preimages_length: 0,\n\n            block_header: inputs.block_header,\n            prover_address: 0,\n\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    pub fn msg_sender(self) -> Field {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> Field {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    pub fn this_portal_address(self) -> Field {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.public_global_variables.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.public_global_variables.version\n    }\n\n    pub fn selector(self) -> Field {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn block_number(self) -> Field {\n        self.inputs.public_global_variables.block_number\n    }\n\n    pub fn timestamp(self) -> Field {\n        self.inputs.public_global_variables.timestamp\n    }\n\n    pub fn finish(self) -> abi::PublicCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_log_preimages_length = 0;\n\n\n        // Compute the public call stack hashes\n        let pub_circuit_pub_inputs = abi::PublicCircuitPublicInputs {\n            call_context: self.inputs.call_context, // Done\n            args_hash: self.args_hash, // Done\n            contract_storage_update_requests: self.contract_storage_update_requests.storage,\n            contract_storage_read: self.contract_storage_read.storage,\n            return_values: self.return_values.storage,\n            new_commitments: self.new_commitments.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            public_call_stack: self.public_call_stack.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            unencrypted_logs_hash: unencrypted_logs_hash,\n            unencrypted_log_preimages_length: unencrypted_log_preimages_length,\n            block_header: self.inputs.block_header,\n            prover_address: self.prover_address,\n        };\n        pub_circuit_pub_inputs\n    }\n\n    pub fn push_new_note_hash(&mut self, note_hash: Field) {\n        self.new_commitments.push(note_hash);\n    }\n\n    pub fn push_new_nullifier(&mut self, nullifier: Field, _nullified_commitment: Field) {\n        self.new_nullifiers.push(nullifier);\n    }\n\n    pub fn message_portal(&mut self, content: Field) {\n        self.new_l2_to_l1_msgs.push(content);\n    }\n\n    // PrivateContextInputs must be temporarily passed in to prevent too many unknowns\n    // Note this returns self to get around an issue where mutable structs do not maintain mutations unless reassigned\n    pub fn consume_l1_to_l2_message(&mut self, msg_key: Field, content: Field, secret: Field) {\n        let this = (*self).this_address();\n        let nullifier = process_l1_to_l2_message(self.block_header.l1_to_l2_messages_tree_root, this, self.this_portal_address(), self.chain_id(), self.version(), msg_key, content, secret);\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT)\n    }\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        _self: Self,\n        contract_address: Field, \n        function_selector: Field,\n        args: [Field; ARGS_COUNT],\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = abi::hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        call_public_function_internal(\n            contract_address, \n            function_selector, \n            args_hash,\n        )\n    }\n\n    pub fn call_public_function_no_args(\n        _self: Self,\n        contract_address: Field, \n        function_selector: Field,\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        call_public_function_internal(\n            contract_address, \n            function_selector, \n            0,\n        )\n    }\n\n}\n\nstruct Context {\n    private: Option<&mut PrivateContext>,\n    public: Option<&mut PublicContext>,\n}\n\nimpl Context {\n    pub fn private(context: &mut PrivateContext) -> Context {\n        Context {\n            private: Option::some(context),\n            public: Option::none()\n        }\n    }\n\n    pub fn public(context: &mut PublicContext) -> Context {\n        Context {\n            public: Option::some(context),\n            private: Option::none()\n        }\n    }\n\n    pub fn none() -> Context {\n        Context {\n            public: Option::none(),\n            private: Option::none()\n        }\n    }\n}\n",
                "path": "/aztec/context.nr"
            },
            "97": {
                "source": "use dep::std::hash::{pedersen_hash_with_separator, sha256};\nuse dep::protocol_types::constants::{\n  GENERATOR_INDEX__SIGNATURE_PAYLOAD,\n  GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET,\n};\n\npub fn sha256_to_field<N>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = sha256(bytes_to_hash);\n\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (sha256_hashed[15 - i] as Field) * v;\n        low = low + (sha256_hashed[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    let hash_in_a_field = low + high * v;\n\n    hash_in_a_field\n}\n\npub fn compute_secret_hash(secret: Field) -> Field {\n    // TODO(#1205) This is probably not the right index to use\n    pedersen_hash([secret], GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET)\n}\n\npub fn pedersen_hash<N>(inputs: [Field; N], hash_index: u32) -> Field {\n    pedersen_hash_with_separator(inputs, hash_index)\n}\n",
                "path": "/aztec/hash.nr"
            },
            "118": {
                "source": "#[oracle(packArguments)]\nfn pack_arguments_oracle<N>(_args: [Field; N]) -> Field {}\n\n// TODO: explain what this does.\nunconstrained pub fn pack_arguments<N>(args: [Field; N]) -> Field {\n    pack_arguments_oracle(args)\n}\n",
                "path": "/aztec/oracle/arguments.nr"
            },
            "129": {
                "source": "\n// contract_address + \n// args_hash +\n// crate::abi::FUNCTION_DATA_SIZE +\n// crate::abi::CALL_CONTEXT_SIZE +\n// = 2 + 4 + 7\nglobal ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE: Field = 13;\n\n#[oracle(enqueuePublicFunctionCall)]\nfn enqueue_public_function_call_oracle(_contract_address: Field, _function_selector: Field, _args_hash: Field) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE] {}\n\nunconstrained pub fn enqueue_public_function_call_internal(contract_address: Field, function_selector: Field, args_hash: Field) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE] {\n    enqueue_public_function_call_oracle(contract_address, function_selector, args_hash)\n}\n",
                "path": "/aztec/oracle/enqueue_public_function_call.nr"
            },
            "133": {
                "source": "#[oracle(storageRead)]\nfn storage_read_oracle<N>(_storage_slot: Field, _number_of_elements: Field) -> [Field; N] {}\n\nunconstrained fn storage_read_oracle_wrapper<N>(_storage_slot: Field) -> [Field; N] {\n    storage_read_oracle(_storage_slot, N)\n}\n\npub fn storage_read<T, N>(storage_slot: Field, deserialize: fn ([Field; N]) -> T) -> T {\n    let fields = storage_read_oracle_wrapper(storage_slot);\n    deserialize(fields)\n}\n\n#[oracle(storageWrite)]\nfn storage_write_oracle<N>(_storage_slot: Field, _values: [Field; N]) -> [Field; N] {}\n\n// TODO: Remove return value.\nunconstrained pub fn storage_write<N>(storage_slot: Field, fields: [Field; N]) {\n    let _hash = storage_write_oracle(storage_slot, fields);\n}\n",
                "path": "/aztec/oracle/storage.nr"
            },
            "136": {
                "source": "use crate::{\n    abi,\n    hash::pedersen_hash,\n    abi::{\n        PublicCircuitPublicInputs,\n        FunctionData,\n    },\n};\nuse dep::protocol_types::constants::{\n    RETURN_VALUES_LENGTH,\n    GENERATOR_INDEX__CALL_STACK_ITEM,\n};\n\n// oracles\nuse crate::oracle::{\n    enqueue_public_function_call::enqueue_public_function_call_internal,\n};\n\nstruct PublicCallStackItem {\n    contract_address: Field,\n    function_data: FunctionData,\n    public_inputs: PublicCircuitPublicInputs,\n    is_execution_request: bool,\n}\n\nimpl PublicCallStackItem {\n    pub fn hash(self) -> Field {\n        pedersen_hash([\n            self.contract_address,\n            self.function_data.hash(),\n            self.public_inputs.hash(),\n        ], GENERATOR_INDEX__CALL_STACK_ITEM)\n    }\n}\n\n",
                "path": "/aztec/public_call_stack_item.nr"
            },
            "140": {
                "source": "use crate::context::{PrivateContext, PublicContext, Context};\nuse dep::std::option::Option;\nuse crate::hash::pedersen_hash;\n\n// docs:start:map\nstruct Map<V> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\nimpl<V> Map<V> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V,\n    ) -> Map<V> {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map {\n            context,\n            storage_slot,\n            state_var_constructor,\n        }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: Field) -> V {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = pedersen_hash([self.storage_slot, key],0);\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n",
                "path": "/aztec/state_vars/map.nr"
            },
            "147": {
                "source": "struct BoundedVec<T, MaxLen> {\n    storage: [T; MaxLen],\n    len: Field,\n}\n\nimpl<T, MaxLen> BoundedVec<T, MaxLen> {\n    pub fn new(initial_value: T) -> Self {\n        BoundedVec { storage: [initial_value; MaxLen], len: 0 }\n    }\n\n    pub fn get(mut self: Self, index: Field) -> T {\n        assert(index as u64 < self.len as u64);\n        self.storage[index]\n    }\n\n    pub fn get_unchecked(mut self: Self, index: Field) -> T {\n        self.storage[index]\n    }\n\n    pub fn push(&mut self, elem: T) {\n        assert(self.len as u64 < MaxLen as u64);\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    pub fn push_array<Len>(&mut self, array: [T; Len]) {\n        let newLen = self.len + array.len();\n        assert(newLen as u64 <= MaxLen as u64);\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = newLen;\n    }\n\n    pub fn pop(&mut self) -> T {\n        assert(self.len as u64 > 0);\n\n        let elem = self.storage[self.len - 1];\n        self.len -= 1;\n        elem\n    }\n\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        let mut exceeded_len = false;\n        for i in 0..MaxLen {\n            exceeded_len |= i == self.len;\n            if (!exceeded_len) {\n                ret |= predicate(self.storage[i]);\n            }\n        }\n        ret\n    }\n}\n\n#[test]\nfn test_vec_push_pop() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    assert(vec.len == 0);\n    vec.push(2);\n    assert(vec.len == 1);\n    vec.push(4);\n    assert(vec.len == 2);\n    vec.push(6);\n    assert(vec.len == 3);\n    let x = vec.pop();\n    assert(x == 6);\n    assert(vec.len == 2);\n    assert(vec.get(0) == 2);\n    assert(vec.get(1) == 4);\n}\n\n#[test]\nfn test_vec_push_array() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    vec.push_array([2, 4]);\n    assert(vec.len == 2);\n    assert(vec.get(0) == 2);\n    assert(vec.get(1) == 4);\n}\n\n#[test(should_fail)]\nfn test_vec_get_out_of_bound() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    vec.push_array([2, 4]);\n    let _x = vec.get(2);\n}\n\n#[test(should_fail)]\nfn test_vec_get_not_declared() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    vec.push_array([2]);\n    let _x = vec.get(1);\n}\n\n#[test(should_fail)]\nfn test_vec_get_uninitialized() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    let _x = vec.get(0);\n}\n\n#[test(should_fail)]\nfn test_vec_push_overflow() {\n    let mut vec: BoundedVec<Field, 1> = BoundedVec::new(0);\n    vec.push(1);\n    vec.push(2);\n}\n\n#[test]\nfn test_vec_any() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    vec.push_array([2, 4, 6]);\n    assert(vec.any(|v| v == 2) == true);\n    assert(vec.any(|v| v == 4) == true);\n    assert(vec.any(|v| v == 6) == true);\n    assert(vec.any(|v| v == 3) == false);\n}\n\n#[test]\nfn test_vec_any_not_default() {\n    let default_value = 1;\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(default_value);\n    vec.push_array([2, 4]);\n    assert(vec.any(|v| v == default_value) == false);\n}\n",
                "path": "/aztec/types/vec.nr"
            },
            "158": {
                "source": "use dep::aztec::context::{PrivateContext, PublicContext, Context};\nuse dep::aztec::types::type_serialization::TypeSerializationInterface;\nuse dep::aztec::oracle::storage::{storage_read, storage_write};\n\nuse dep::std::hash::pedersen_hash;\nuse dep::std::merkle::compute_merkle_root;\nuse dep::std::option::Option;\n\n// The epoch length is just a random number for now.\nglobal EPOCH_LENGTH: u120 = 100;\n\nfn compute_next_change(time: Field) -> Field {\n    ((time as u120 / EPOCH_LENGTH + 1) * EPOCH_LENGTH) as Field\n}\n\n// A leaf in the tree.\nstruct Leaf {\n  next_change: Field,\n  before: Field,\n  after: Field,\n}\n\nfn serialize_leaf(leaf: Leaf) -> [Field; 3] {\n    [leaf.next_change, leaf.before, leaf.after]\n}\n\nfn deserialize_leaf(serialized: [Field; 3]) -> Leaf {\n    Leaf { next_change: serialized[0], before: serialized[1], after: serialized[2] }\n}\n\nimpl Leaf {\n  fn serialize(self: Self) -> [Field; 3] {\n    serialize_leaf(self)\n  }\n   fn deserialize(serialized: [Field; 3]) -> Self {\n    deserialize_leaf(serialized)\n  }\n}\n\n// Subset of the MembershipProof that is needed for the slow update.\nstruct SlowUpdateInner<N> {\n  value: Field, // Value only really used for the private flow though :thinking:\n  sibling_path: [Field; N],\n}\n\n// docs:start:slow_update_proof\n// The slow update proof. Containing two merkle paths\n// One for the before and one for the after trees.\n// M = 2 * N + 4\nstruct SlowUpdateProof<N, M> {\n  index: Field,\n  new_value: Field,\n  before: SlowUpdateInner<N>,\n  after: SlowUpdateInner<N>,\n}\n// docs:end:slow_update_proof\n\npub fn deserialize_slow_update_proof<N, M>(serialized: [Field; M]) -> SlowUpdateProof<N, M> {\n    SlowUpdateProof::deserialize(serialized)\n}\n\nimpl<N, M> SlowUpdateProof<N, M> {\n  pub fn serialize(self: Self) -> [Field; M] {\n    let mut serialized = [0; M];\n    serialized[0] = self.index;\n    serialized[1] = self.new_value;\n    serialized[2] = self.before.value;\n    serialized[3 + N] = self.after.value;\n\n    for i in 0..N {\n      serialized[3 + i] = self.before.sibling_path[i];\n      serialized[4 + N + i] = self.after.sibling_path[i];\n    }\n    serialized\n  }\n\n  pub fn deserialize(serialized: [Field; M]) -> Self {\n    let mut before_sibling_path = [0; N];\n    let mut after_sibling_path = [0; N];\n\n    for i in 0..N {\n      before_sibling_path[i] = serialized[3 + i];\n      after_sibling_path[i] = serialized[4 + N + i];\n    }\n\n    Self {\n      index: serialized[0],\n      new_value: serialized[1],\n      before: SlowUpdateInner {\n        value: serialized[2],\n        sibling_path: before_sibling_path,\n      },\n      after: SlowUpdateInner {\n        value: serialized[3 + N],\n        sibling_path: after_sibling_path,\n      },\n    }\n  }\n}\n\n// The simple slow map which stores a sparse tree\nstruct SlowMap<N,M> {\n  context: Context,\n  storage_slot: Field\n}\n\nimpl<N,M> SlowMap<N,M> {\n  pub fn new(\n    context: Context,\n    storage_slot: Field\n  ) -> Self {\n    assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n    Self {\n      context,\n      storage_slot,\n    }\n  }\n\n  pub fn read_root(self: Self) -> Leaf {\n    storage_read(self.storage_slot, deserialize_leaf)\n  }\n\n  // Beware that the initial root could include much state that is not shown by the public storage!\n  pub fn initialize(self: Self, initial_root: Field) {\n    let mut root_object = self.read_root();\n    assert(root_object.next_change == 0, \"cannot initialize twice\");\n    root_object = Leaf {\n      next_change: 0xffffffffffffffffffffffffffffff,\n      before: initial_root,\n      after: initial_root,\n    };\n    let fields = root_object.serialize();\n    storage_write(self.storage_slot, fields);\n  }\n\n  // Reads the \"CURRENT\" value of the root\n  pub fn current_root(self: Self) -> Field {\n    let time = self.context.public.unwrap().timestamp() as u120;\n    let root_object = self.read_root();\n    if time <= root_object.next_change as u120 {\n      root_object.before\n    } else {\n      root_object.after\n    }\n  }\n\n  // docs:start:read_leaf_at\n  pub fn read_leaf_at(self: Self, key: Field) -> Leaf {\n    let derived_storage_slot = pedersen_hash([self.storage_slot, key]);\n    storage_read(derived_storage_slot, deserialize_leaf)\n  }\n  // docs:end:read_leaf_at\n\n  // docs:start:read_at\n  // Reads the \"CURRENT\" value of the leaf\n  pub fn read_at(self: Self, key: Field) -> Field {\n    let time = self.context.public.unwrap().timestamp() as u120;\n    let leaf = self.read_leaf_at(key);\n    if time <= leaf.next_change as u120 {\n      leaf.before\n    } else {\n      leaf.after\n    }\n  }\n  // docs:end:read_at\n\n  // Will update values in the \"AFTER\" tree\n  // - updates the leaf and root to follow current values, moving from after to before if \n  //  needed.\n  // - checks that the provided merkle paths match state values\n  // - update the leaf and compute the net root\n  // Should only be used when updates from public are desired, since the hashing will be\n  // costly since done by sequencer.\n  pub fn update_at(self: Self, p: SlowUpdateProof<N, M>) {\n    // The calling function should ensure that the index is within the tree.\n    // This must be done separately to ensure we are not constraining too tight here.\n\n    let time = self.context.public.unwrap().timestamp() as u120;\n    let next_change = compute_next_change(time as Field);\n\n    let mut root = self.read_root();\n    let mut leaf = self.read_leaf_at(p.index);\n\n    // Move leaf if needed\n    if time > leaf.next_change as u120 {\n      leaf.before = leaf.after; \n    }\n    \n    // Move root if needed\n    if time > root.next_change as u120 {\n      root.before = root.after;\n    }\n\n    // Ensures that when before is active, it is not altered by this update\n    assert(\n      root.before == compute_merkle_root(leaf.before, p.index, p.before.sibling_path), \n      \"Before root don't match\"\n    );\n\n    // Ensures that the provided sibling path is valid for the CURRENT \"after\" tree.\n    // Without this check, someone could provide a sibling path for a different tree\n    // and update the entire \"after\" tree at once, causing it to be out of sync with leaf storage.\n    assert(\n      root.after == compute_merkle_root(leaf.after, p.index, p.after.sibling_path), \n      \"After root don't match\"\n    );\n\n    // Update the leaf \n    leaf.after = p.new_value;\n    leaf.next_change = next_change;\n\n    // Update the after root\n    root.after = compute_merkle_root(leaf.after, p.index, p.after.sibling_path);\n    root.next_change = next_change;\n\n    self.update_unsafe(p.index, leaf, root);\n  }\n\n  // A variation of `update_at` that skips the merkle-membership checks.\n  // To be used by a contract which has already checked the merkle-membership.\n  // This allows us to check the merkle-memberships in private and then update\n  // in public, limiting the cost of the update.\n  pub fn update_unsafe_at(self: Self, index: Field, leaf_value: Field, new_root: Field) {\n    // User must ensure that the checks from update_at is performed for safety\n    let time = self.context.public.unwrap().timestamp() as u120;\n    let next_change = compute_next_change(time as Field);\n\n    let mut root = self.read_root();\n    let mut leaf = self.read_leaf_at(index);\n\n    // Move leaf if needed\n    if time > leaf.next_change as u120 {\n      leaf.before = leaf.after; \n    }\n    \n    // Move root if needed\n    if time > root.next_change as u120 {\n      root.before = root.after;\n    }\n\n    // Update the leaf \n    leaf.after = leaf_value;\n    leaf.next_change = next_change;\n    \n    // Update the root\n    root.after = new_root;\n    root.next_change = next_change;\n\n    self.update_unsafe(index, leaf, root);\n  }\n\n  // Updates the value in the in storage with no checks.\n  fn update_unsafe(self: Self, index: Field, leaf: Leaf, root: Leaf) {\n    let derived_storage_slot = pedersen_hash([self.storage_slot, index]);\n    let fields = leaf.serialize();\n    storage_write(derived_storage_slot, fields);\n    \n    let fields = root.serialize();\n    storage_write(self.storage_slot, fields);\n  }\n}\n\n/*pub fn compute_merkle_root<N>(leaf: Field, index: Field, hash_path: [Field; N]) -> Field {\n    let n = hash_path.len();\n    let index_bits = index.to_le_bits(n as u32);\n    let mut current = leaf;\n    for i in 0..n {\n        let path_bit = index_bits[i] as bool;\n        let (hash_left, hash_right) = if path_bit {\n            (hash_path[i], current)\n        } else {\n            (current, hash_path[i])\n        };\n    current = pedersen_hash([hash_left, hash_right]);\n    };\n    current\n}\n*/\n",
                "path": "/slow_updates_tree/slow_map.nr"
            },
            "159": {
                "source": "#[oracle(popCapsule)]\nfn pop_capsule_oracle<N>() -> [Field; N] {}\n\n// A capsule is a \"blob\" of data that is passed to the contract through an oracle.\nunconstrained pub fn pop_capsule<N>() -> [Field; N] {\n    pop_capsule_oracle()\n}\n",
                "path": "/usr/src/yarn-project/noir-contracts/src/contracts/slow_tree_contract/src/capsule.nr"
            },
            "160": {
                "source": "// docs:start:membership_proof\n// A single inclusion proof.\n// M = N + 2\nstruct MembershipProof<N, M> {\n    index: Field,\n    value: Field,\n    sibling_path: [Field; N],\n}\n// docs:end:membership_proof\n\nfn deserialize_membership_proof<N, M>(serialized: [Field; M]) -> MembershipProof<N, M> {\n    let mut sibling_path = [0; N];\n    for i in 0..N {\n        sibling_path[i] = serialized[2 + i];\n    }\n    MembershipProof { index: serialized[0], value: serialized[1], sibling_path }\n}\n\nimpl<N, M> MembershipProof<N, M> {\n    fn serialize(self: Self) -> [Field; M] {\n      let mut serialized = [0; M];\n      serialized[0] = self.index;\n      serialized[1] = self.value;\n      for i in 0..N {\n          serialized[2 + i] = self.sibling_path[i];\n      }\n      serialized\n    }\n\n    fn deserialize(serialized: [Field; M]) -> Self {\n      deserialize_membership_proof(serialized)\n    }\n}\n",
                "path": "/usr/src/yarn-project/noir-contracts/src/contracts/slow_tree_contract/src/types.nr"
            }
        }
    }
}
