{
    "name": "Child",
    "functions": [
        {
            "name": "check_sender",
            "functionType": "secret",
            "isInternal": false,
            "parameters": [],
            "returnTypes": [],
            "bytecode": "H4sIAAAAAAAA/82TQQ6CMBBFW7D0Ei56hJa2MN15B09AYYguxATq/SVxjCa6syT+zZ/Vy7xkRjLGduwVTn2g1r/FiJUhvnCtbpzDtkZjTafrEMFr52MDBowHP9RgLYKDNsTQ6mCcRTP6YEcCi3w76i28q5VRbeBd/bm3XBlyA2+Z2fuZIrM/z+hcZHSWxOHkXLLH3wu6U8k+w9/mknpPfcRpwFldbktSEVU6nRfVX6c0d326A1E0KppUBAAA",
            "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
        },
        {
            "name": "compute_note_hash_and_nullifier",
            "functionType": "unconstrained",
            "isInternal": false,
            "parameters": [
                {
                    "name": "contract_address",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                },
                {
                    "name": "nonce",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                },
                {
                    "name": "storage_slot",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                },
                {
                    "name": "serialized_note",
                    "type": {
                        "kind": "array",
                        "length": 0,
                        "type": {
                            "kind": "field"
                        }
                    },
                    "visibility": "private"
                }
            ],
            "returnTypes": [
                {
                    "kind": "array",
                    "length": 4,
                    "type": {
                        "kind": "field"
                    }
                }
            ],
            "bytecode": "H4sIAAAAAAAA/+1VQQ4CIQws7C5sheg/PGHiA/b/rxK0TSYsnuwejDZpgBaGYWggEpGjl03VZ9qb5jdpy2d2c3ZY5Uie/kt4ToY83YCng7po7VI9VI/VrxJn2tcOy1zEYlnbzEMsSn+Sts1ZjXUKwM0IswT7+ywM2sygkWqzDDQPA83jQPMVMC6Qp+5OzrKGbc92x7tWc914gz7D+Y6oh5Mt5rMekjFmw8igieqn3BPkE+iVjfVysKfi6hj5/bn+NleGGL5Bml8h5rtz4DuXAaN/I0w/T5INPGze7N2np/YAao7Tjj0JAAA=",
            "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
        },
        {
            "name": "constructor",
            "functionType": "secret",
            "isInternal": false,
            "parameters": [],
            "returnTypes": [],
            "bytecode": "H4sIAAAAAAAA/+XdZZOTZxSH8V0gSd27uLu1ySbZJFVK3alSL6Rk6y1V6qXU3XB390/IuWbCwAt4xb0z3HNl5j9590x+m+yj5z7nZE9Pz7aeM6/e7vuC7nv5wl6VQmyjcI7tVssDtVqn0d+pVCtLy/2tdrNertXbA81Ks1Jv1pf1N6vVTrPWbLTarUa5ValVO5XBeqs62N1wId1nLA+FuxjbKA6Bu3iRu0uxjdIQuEuJ3ef7vV/o5xw5RJ9zWOLvqTeheVQm5mEJzaMzMQ9PaB6TiXlEQvPYTMyFhOZxmZiLCc3jMzGXEponZGIemdA8UWieJDRPFpqnCM1TheZpQvN0oXmG0DxTaJ4lNM8WmucIzXOF5nlC83yh+Sah+WahuSw0V4TmfqG5KjTXhOa60DwgNDeE5qbQ3BKabxGabxWabxOabxea7xCa7xSaFwjNdwnNC4Xmu4Xme4Tme4Xm+4Tm+4XmB4TmB4Xmh4Tmh4XmR4TmR4Xmx4Tmx4XmRULzE0Lzk0LzU0Lz00LzM0Lzs0LzYqH5OaH5eaH5BaH5RaH5JaH5ZaH5FaH5VaF5idC8VGhuC82vCc3LhOaO0DwoNL8uNL8hNL8pNL8lNL8tNL8jNL8rNL8nNL8vNC8Xmj8Qmj8Umj8Smj8Wmj8Rmj8VmlcIzZ8JzZ8LzV8IzV8KzV8JzV8Lzd8Izd8KzSuF5u+E5lVC8/dC8w9C849C809C889C8y9C869C829C8+9C8x9C859C819C899C8z9C879C839C8/9C82qheY3QvFZoXic0rxeaNwjNG4XmTULzZqF5i9C8VWjeJjRvF5p3CM07heZdmZgvSWjenYn50oTmPZmYL0to3puJ+fKE5n2ZmK9IaN6fifnKhOYDmZivSmg+mIn56oTmQ5mYr0loPpyJ+dqE5iOZmK9LaD6aifn6hOZjmZhvSGg+non5xoTmE5mY+xKaTyY093W309s1D4+MiBQixUgpwjUh10hcM3AOzTkl51icc3AM5pjEPpp9Fv/D/Kb5jvvO+ntu6r6PioyOjImMjYyLjI9MiEyMTIpMjkyJTI1Mi0yPzIjMjMyKzI7MicyNzIvMjzDjnpnvfInMBGdGNjOjmaHMTGFm7DYizGBlJikzOplZyQxHZhoy4+/0zDtmoi2MMDOLGVLMVGLGEDN3mEHDTBZmlDCzgxkWzHRgxgE9/xdF6AlPj3R6htNDm57S9FheHKEHLz1p6dFKz1J6eNLTkh6P9DxcEqEnXjtCzzR6iNFTix5T9FyiBxE9eehRQ88WepjQ04MeF/R8WB6hJwBr5Fkzzhpq1hSzxnZFhDWYrElkjR5r1ljDxZom1viw5mVlhDURqyLUzFNDTk01NcbU3FKDSk0mNYrU7FHDRk0XNU7U/FADQ00INRLUDPAMnWfKPGPlmSPP4HgmxTMafhPcw+eeNvd4uee5PcI9Me4Rcc+EewhcU3ONyTUX1yCck3OOyjkb5zAc0znGsc9nH8g+gf+R069TXMw0LzyaAAA=",
            "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
        },
        {
            "name": "pubGetValue",
            "functionType": "open",
            "isInternal": false,
            "parameters": [
                {
                    "name": "base_value",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                }
            ],
            "returnTypes": [
                {
                    "kind": "struct",
                    "path": "aztec::abi::PublicCircuitPublicInputs",
                    "fields": [
                        {
                            "name": "call_context",
                            "type": {
                                "kind": "struct",
                                "path": "aztec::abi::CallContext",
                                "fields": [
                                    {
                                        "name": "msg_sender",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "storage_contract_address",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "portal_contract_address",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "function_selector",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "is_delegate_call",
                                        "type": {
                                            "kind": "boolean"
                                        }
                                    },
                                    {
                                        "name": "is_static_call",
                                        "type": {
                                            "kind": "boolean"
                                        }
                                    },
                                    {
                                        "name": "is_contract_deployment",
                                        "type": {
                                            "kind": "boolean"
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "name": "args_hash",
                            "type": {
                                "kind": "field"
                            }
                        },
                        {
                            "name": "return_values",
                            "type": {
                                "kind": "array",
                                "length": 4,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "contract_storage_update_requests",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "struct",
                                    "path": "aztec::abi::ContractStorageUpdateRequest",
                                    "fields": [
                                        {
                                            "name": "storage_slot",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "old_value",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "new_value",
                                            "type": {
                                                "kind": "field"
                                            }
                                        }
                                    ]
                                }
                            }
                        },
                        {
                            "name": "contract_storage_read",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "struct",
                                    "path": "aztec::abi::ContractStorageRead",
                                    "fields": [
                                        {
                                            "name": "storage_slot",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "value",
                                            "type": {
                                                "kind": "field"
                                            }
                                        }
                                    ]
                                }
                            }
                        },
                        {
                            "name": "public_call_stack",
                            "type": {
                                "kind": "array",
                                "length": 4,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "new_commitments",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "new_nullifiers",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "new_l2_to_l1_msgs",
                            "type": {
                                "kind": "array",
                                "length": 2,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "unencrypted_logs_hash",
                            "type": {
                                "kind": "array",
                                "length": 2,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "unencrypted_log_preimages_length",
                            "type": {
                                "kind": "field"
                            }
                        },
                        {
                            "name": "block_header",
                            "type": {
                                "kind": "struct",
                                "path": "aztec::abi::BlockHeader",
                                "fields": [
                                    {
                                        "name": "note_hash_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "nullifier_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "contract_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "l1_to_l2_messages_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "archive_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "public_data_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "global_variables_hash",
                                        "type": {
                                            "kind": "field"
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "name": "prover_address",
                            "type": {
                                "kind": "field"
                            }
                        }
                    ]
                }
            ],
            "bytecode": "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",
            "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
        },
        {
            "name": "pubIncValue",
            "functionType": "open",
            "isInternal": false,
            "parameters": [
                {
                    "name": "new_value",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                }
            ],
            "returnTypes": [
                {
                    "kind": "struct",
                    "path": "aztec::abi::PublicCircuitPublicInputs",
                    "fields": [
                        {
                            "name": "call_context",
                            "type": {
                                "kind": "struct",
                                "path": "aztec::abi::CallContext",
                                "fields": [
                                    {
                                        "name": "msg_sender",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "storage_contract_address",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "portal_contract_address",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "function_selector",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "is_delegate_call",
                                        "type": {
                                            "kind": "boolean"
                                        }
                                    },
                                    {
                                        "name": "is_static_call",
                                        "type": {
                                            "kind": "boolean"
                                        }
                                    },
                                    {
                                        "name": "is_contract_deployment",
                                        "type": {
                                            "kind": "boolean"
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "name": "args_hash",
                            "type": {
                                "kind": "field"
                            }
                        },
                        {
                            "name": "return_values",
                            "type": {
                                "kind": "array",
                                "length": 4,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "contract_storage_update_requests",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "struct",
                                    "path": "aztec::abi::ContractStorageUpdateRequest",
                                    "fields": [
                                        {
                                            "name": "storage_slot",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "old_value",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "new_value",
                                            "type": {
                                                "kind": "field"
                                            }
                                        }
                                    ]
                                }
                            }
                        },
                        {
                            "name": "contract_storage_read",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "struct",
                                    "path": "aztec::abi::ContractStorageRead",
                                    "fields": [
                                        {
                                            "name": "storage_slot",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "value",
                                            "type": {
                                                "kind": "field"
                                            }
                                        }
                                    ]
                                }
                            }
                        },
                        {
                            "name": "public_call_stack",
                            "type": {
                                "kind": "array",
                                "length": 4,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "new_commitments",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "new_nullifiers",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "new_l2_to_l1_msgs",
                            "type": {
                                "kind": "array",
                                "length": 2,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "unencrypted_logs_hash",
                            "type": {
                                "kind": "array",
                                "length": 2,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "unencrypted_log_preimages_length",
                            "type": {
                                "kind": "field"
                            }
                        },
                        {
                            "name": "block_header",
                            "type": {
                                "kind": "struct",
                                "path": "aztec::abi::BlockHeader",
                                "fields": [
                                    {
                                        "name": "note_hash_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "nullifier_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "contract_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "l1_to_l2_messages_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "archive_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "public_data_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "global_variables_hash",
                                        "type": {
                                            "kind": "field"
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "name": "prover_address",
                            "type": {
                                "kind": "field"
                            }
                        }
                    ]
                }
            ],
            "bytecode": "",
            "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
        },
        {
            "name": "pubIncValueInternal",
            "functionType": "open",
            "isInternal": false,
            "parameters": [
                {
                    "name": "new_value",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                }
            ],
            "returnTypes": [
                {
                    "kind": "struct",
                    "path": "aztec::abi::PublicCircuitPublicInputs",
                    "fields": [
                        {
                            "name": "call_context",
                            "type": {
                                "kind": "struct",
                                "path": "aztec::abi::CallContext",
                                "fields": [
                                    {
                                        "name": "msg_sender",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "storage_contract_address",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "portal_contract_address",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "function_selector",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "is_delegate_call",
                                        "type": {
                                            "kind": "boolean"
                                        }
                                    },
                                    {
                                        "name": "is_static_call",
                                        "type": {
                                            "kind": "boolean"
                                        }
                                    },
                                    {
                                        "name": "is_contract_deployment",
                                        "type": {
                                            "kind": "boolean"
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "name": "args_hash",
                            "type": {
                                "kind": "field"
                            }
                        },
                        {
                            "name": "return_values",
                            "type": {
                                "kind": "array",
                                "length": 4,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "contract_storage_update_requests",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "struct",
                                    "path": "aztec::abi::ContractStorageUpdateRequest",
                                    "fields": [
                                        {
                                            "name": "storage_slot",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "old_value",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "new_value",
                                            "type": {
                                                "kind": "field"
                                            }
                                        }
                                    ]
                                }
                            }
                        },
                        {
                            "name": "contract_storage_read",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "struct",
                                    "path": "aztec::abi::ContractStorageRead",
                                    "fields": [
                                        {
                                            "name": "storage_slot",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "value",
                                            "type": {
                                                "kind": "field"
                                            }
                                        }
                                    ]
                                }
                            }
                        },
                        {
                            "name": "public_call_stack",
                            "type": {
                                "kind": "array",
                                "length": 4,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "new_commitments",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "new_nullifiers",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "new_l2_to_l1_msgs",
                            "type": {
                                "kind": "array",
                                "length": 2,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "unencrypted_logs_hash",
                            "type": {
                                "kind": "array",
                                "length": 2,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "unencrypted_log_preimages_length",
                            "type": {
                                "kind": "field"
                            }
                        },
                        {
                            "name": "block_header",
                            "type": {
                                "kind": "struct",
                                "path": "aztec::abi::BlockHeader",
                                "fields": [
                                    {
                                        "name": "note_hash_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "nullifier_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "contract_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "l1_to_l2_messages_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "archive_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "public_data_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "global_variables_hash",
                                        "type": {
                                            "kind": "field"
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "name": "prover_address",
                            "type": {
                                "kind": "field"
                            }
                        }
                    ]
                }
            ],
            "bytecode": "",
            "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
        },
        {
            "name": "pubSetValue",
            "functionType": "open",
            "isInternal": false,
            "parameters": [
                {
                    "name": "new_value",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                }
            ],
            "returnTypes": [
                {
                    "kind": "struct",
                    "path": "aztec::abi::PublicCircuitPublicInputs",
                    "fields": [
                        {
                            "name": "call_context",
                            "type": {
                                "kind": "struct",
                                "path": "aztec::abi::CallContext",
                                "fields": [
                                    {
                                        "name": "msg_sender",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "storage_contract_address",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "portal_contract_address",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "function_selector",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "is_delegate_call",
                                        "type": {
                                            "kind": "boolean"
                                        }
                                    },
                                    {
                                        "name": "is_static_call",
                                        "type": {
                                            "kind": "boolean"
                                        }
                                    },
                                    {
                                        "name": "is_contract_deployment",
                                        "type": {
                                            "kind": "boolean"
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "name": "args_hash",
                            "type": {
                                "kind": "field"
                            }
                        },
                        {
                            "name": "return_values",
                            "type": {
                                "kind": "array",
                                "length": 4,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "contract_storage_update_requests",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "struct",
                                    "path": "aztec::abi::ContractStorageUpdateRequest",
                                    "fields": [
                                        {
                                            "name": "storage_slot",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "old_value",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "new_value",
                                            "type": {
                                                "kind": "field"
                                            }
                                        }
                                    ]
                                }
                            }
                        },
                        {
                            "name": "contract_storage_read",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "struct",
                                    "path": "aztec::abi::ContractStorageRead",
                                    "fields": [
                                        {
                                            "name": "storage_slot",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "value",
                                            "type": {
                                                "kind": "field"
                                            }
                                        }
                                    ]
                                }
                            }
                        },
                        {
                            "name": "public_call_stack",
                            "type": {
                                "kind": "array",
                                "length": 4,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "new_commitments",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "new_nullifiers",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "new_l2_to_l1_msgs",
                            "type": {
                                "kind": "array",
                                "length": 2,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "unencrypted_logs_hash",
                            "type": {
                                "kind": "array",
                                "length": 2,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "unencrypted_log_preimages_length",
                            "type": {
                                "kind": "field"
                            }
                        },
                        {
                            "name": "block_header",
                            "type": {
                                "kind": "struct",
                                "path": "aztec::abi::BlockHeader",
                                "fields": [
                                    {
                                        "name": "note_hash_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "nullifier_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "contract_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "l1_to_l2_messages_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "archive_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "public_data_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "global_variables_hash",
                                        "type": {
                                            "kind": "field"
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "name": "prover_address",
                            "type": {
                                "kind": "field"
                            }
                        }
                    ]
                }
            ],
            "bytecode": "",
            "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
        },
        {
            "name": "setValueTwiceWithNestedFirst",
            "functionType": "open",
            "isInternal": false,
            "parameters": [],
            "returnTypes": [
                {
                    "kind": "struct",
                    "path": "aztec::abi::PublicCircuitPublicInputs",
                    "fields": [
                        {
                            "name": "call_context",
                            "type": {
                                "kind": "struct",
                                "path": "aztec::abi::CallContext",
                                "fields": [
                                    {
                                        "name": "msg_sender",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "storage_contract_address",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "portal_contract_address",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "function_selector",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "is_delegate_call",
                                        "type": {
                                            "kind": "boolean"
                                        }
                                    },
                                    {
                                        "name": "is_static_call",
                                        "type": {
                                            "kind": "boolean"
                                        }
                                    },
                                    {
                                        "name": "is_contract_deployment",
                                        "type": {
                                            "kind": "boolean"
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "name": "args_hash",
                            "type": {
                                "kind": "field"
                            }
                        },
                        {
                            "name": "return_values",
                            "type": {
                                "kind": "array",
                                "length": 4,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "contract_storage_update_requests",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "struct",
                                    "path": "aztec::abi::ContractStorageUpdateRequest",
                                    "fields": [
                                        {
                                            "name": "storage_slot",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "old_value",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "new_value",
                                            "type": {
                                                "kind": "field"
                                            }
                                        }
                                    ]
                                }
                            }
                        },
                        {
                            "name": "contract_storage_read",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "struct",
                                    "path": "aztec::abi::ContractStorageRead",
                                    "fields": [
                                        {
                                            "name": "storage_slot",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "value",
                                            "type": {
                                                "kind": "field"
                                            }
                                        }
                                    ]
                                }
                            }
                        },
                        {
                            "name": "public_call_stack",
                            "type": {
                                "kind": "array",
                                "length": 4,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "new_commitments",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "new_nullifiers",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "new_l2_to_l1_msgs",
                            "type": {
                                "kind": "array",
                                "length": 2,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "unencrypted_logs_hash",
                            "type": {
                                "kind": "array",
                                "length": 2,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "unencrypted_log_preimages_length",
                            "type": {
                                "kind": "field"
                            }
                        },
                        {
                            "name": "block_header",
                            "type": {
                                "kind": "struct",
                                "path": "aztec::abi::BlockHeader",
                                "fields": [
                                    {
                                        "name": "note_hash_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "nullifier_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "contract_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "l1_to_l2_messages_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "archive_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "public_data_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "global_variables_hash",
                                        "type": {
                                            "kind": "field"
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "name": "prover_address",
                            "type": {
                                "kind": "field"
                            }
                        }
                    ]
                }
            ],
            "bytecode": "",
            "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
        },
        {
            "name": "setValueTwiceWithNestedLast",
            "functionType": "open",
            "isInternal": false,
            "parameters": [],
            "returnTypes": [
                {
                    "kind": "struct",
                    "path": "aztec::abi::PublicCircuitPublicInputs",
                    "fields": [
                        {
                            "name": "call_context",
                            "type": {
                                "kind": "struct",
                                "path": "aztec::abi::CallContext",
                                "fields": [
                                    {
                                        "name": "msg_sender",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "storage_contract_address",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "portal_contract_address",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "function_selector",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "is_delegate_call",
                                        "type": {
                                            "kind": "boolean"
                                        }
                                    },
                                    {
                                        "name": "is_static_call",
                                        "type": {
                                            "kind": "boolean"
                                        }
                                    },
                                    {
                                        "name": "is_contract_deployment",
                                        "type": {
                                            "kind": "boolean"
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "name": "args_hash",
                            "type": {
                                "kind": "field"
                            }
                        },
                        {
                            "name": "return_values",
                            "type": {
                                "kind": "array",
                                "length": 4,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "contract_storage_update_requests",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "struct",
                                    "path": "aztec::abi::ContractStorageUpdateRequest",
                                    "fields": [
                                        {
                                            "name": "storage_slot",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "old_value",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "new_value",
                                            "type": {
                                                "kind": "field"
                                            }
                                        }
                                    ]
                                }
                            }
                        },
                        {
                            "name": "contract_storage_read",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "struct",
                                    "path": "aztec::abi::ContractStorageRead",
                                    "fields": [
                                        {
                                            "name": "storage_slot",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "value",
                                            "type": {
                                                "kind": "field"
                                            }
                                        }
                                    ]
                                }
                            }
                        },
                        {
                            "name": "public_call_stack",
                            "type": {
                                "kind": "array",
                                "length": 4,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "new_commitments",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "new_nullifiers",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "new_l2_to_l1_msgs",
                            "type": {
                                "kind": "array",
                                "length": 2,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "unencrypted_logs_hash",
                            "type": {
                                "kind": "array",
                                "length": 2,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "unencrypted_log_preimages_length",
                            "type": {
                                "kind": "field"
                            }
                        },
                        {
                            "name": "block_header",
                            "type": {
                                "kind": "struct",
                                "path": "aztec::abi::BlockHeader",
                                "fields": [
                                    {
                                        "name": "note_hash_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "nullifier_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "contract_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "l1_to_l2_messages_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "archive_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "public_data_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "global_variables_hash",
                                        "type": {
                                            "kind": "field"
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "name": "prover_address",
                            "type": {
                                "kind": "field"
                            }
                        }
                    ]
                }
            ],
            "bytecode": "",
            "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
        },
        {
            "name": "value",
            "functionType": "secret",
            "isInternal": false,
            "parameters": [
                {
                    "name": "input",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                }
            ],
            "returnTypes": [],
            "bytecode": "H4sIAAAAAAAA/+XdZ28TWRTGcYdge/uyBRJ66C2AJ7aT8dYs2zvb2Q5enG303nvvvffee/t0iPOXBgESvMqxxNUz0qN5N5rf2B5PufecO6lU6njqwVKTrFuTda59S5S2baQfs918rrlQqLQ0VaJ8NC7XVCrHxVyhWG6OozgqxsXxTXE+X4kLcUupXGrJlaJCvhK1FUv5tmTDab99zFXDnbFtZKrgzjzl7qxtI1sFd9bZ/aTve3v3s95xP2uSY9mQbK/OctdSL7putHRNPjOOS6fkuHR9CvarW+rRpTZZtybrXPuWqLPjtrqk/L7vt1PV+V16H786R3N3x/2q1vHr4Hz8ahyPX49AzB0czT0DMdc6mnsFYu7oaO4diDntaG4IxJxxNPcJxJx1NPcNxNzN0dwvEHN3R3P/QMz1juYBguaBguZBgubBguYhguahguZhguZGQfNwQfMIQfNIQXNO0BwJmpsEzXlBc0HQXBQ0NwuaWwTNsaC5JGh+Q9D8pqD5LUHz24LmdwTN7wqaWwXN7wmaRwma3xc0fyBo/lDQ/JGg+WNB8yeC5k8FzZ8Jmj8XNH8haP5S0PyVoPlrQfNoQfM3guZvBc3fCZq/FzT/IGj+UdD8k6B5jKD5Z0HzL4LmXwXNvwmafxc0/yFo/lPQPFbQPE7QXBY0/yVoHi9orgia2wTNfwua/xE0/yto/k/Q/L+geYKgeaKgeZKgebKgeYqgeaqgeZqgebqgeYageaageZagebageY6gea6geZ6geb6geYGgeaGgeZGgebGgeYmgeamgeZmgebmgeYWgeaWgeZWgebWgeY2gea2geZ2geb2geYOgeaOgeZOgebOgeYugeaugeZugebugeYegeaegeZegebegeY+gea+geZ+geb+g+YCg+aCg+ZCg+bCg+Yig+aig+Zig+big+YSg+aSg+ZSg+XQg5mcczWcCMT/raD4biPk5R/O5QMzPO5rPB2J+wdF8IRDzi47mi4GYX3I0XwrE/LKj+XIg5k6O5iuBmF9xNF8NxPyqo/laIObXHM3XAzG/7mi+EYi5s6P5ZiDmLo7mW47mumQ7NYm51tLRkrZkLFkL94TcI3HPwDU015RcY3HNwX8w/0mcozln8RvmO81njLnuoWO6P1n3sPS09LL0tjRY+lj6WvpZ+lsGWAZaBlkGW4ZYhlqGWRotwy0jLCM5BpbIQp97+r7TB52+4PTJpm90bKGvMH126TtLH1b6ktKn837fSvoajrLQ944+cPRFo08YfbPoI0VfJfoM0XeHPjT0ZaFPCX07Rlvo60CfA+r+UwefuvDUSadu+BgLdaWps0zdYerwUpeWOq3ULR1roa5l2ULdQ+oAUhePOnHUTaOOGHW1qDNF3SXqEFGXhzo11G2ZYqGuB3UuqPtAHQTqAjBPnnnjcyzMK2aeLfNOmYfJvETm6TFvbYmFeU3LLMx7YR4I8yKYJ8C4ecaRM66accaMu2UcKuMyGafIuL0tFsZ1Mc6JcT+Mg2FcCOMkGDfAe3TeK/Oele8A7+F4L8V7Gt5bHLHwXPuYheeePAfkuRjPiXhuwnME7qu5z+S+i/sQrsu5TuW6jesY/tf5n+O8z3mQ8wK/k/vLPbfi0jNwngAA",
            "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
        },
        {
            "name": "valueInternal",
            "functionType": "secret",
            "isInternal": false,
            "parameters": [
                {
                    "name": "input",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                }
            ],
            "returnTypes": [],
            "bytecode": "H4sIAAAAAAAA/+XdZ3MTVxTGcRkjKT2kgA0YEL0Z0FqSvUp1SO8kpJCOZcuBJBhii4R0Qnonjd577+3TMZz/zDLADLzy0YzvPJp5Zt/t7G+1Wm2595wLqVRqT+rKpyFZdibL/OA+UdrWkb7Oegv59mKx2tFWjQpRV76tXIlL+WKp0h5HcVSKSz1tcaFQjYtxR7lS7siXo2KhGvWWyoXeZMVpv23M18OdsXVk6uDODHF31taRrYM76+y+0fE+2O1sdtzOhmRf5pL1NVkuWppFl62W0cl3xn4ZkeyX0UNgu8akrv0MS5adyTI/uE/UkPI7Roel6vNbanQ2j3Rc1yjH/Xc+kP3X5Gge67hd9dp/Q/k31yJoHheIudHRPD4Q83BH84RAzGlHcy4Qc8bRPDEQc9bRPCkQ8xhH8+RAzGMdzVMCMTc7mqcKmqcJmqcLmmcImmcKmmcJmmcLmlsFzXMEzXMFzfMEzXlBcyRobhM0FwTNRUFzSdDcLmjuEDTHguayoPk+QfP9guYHBM0PCpofEjQ/LGjuFDQ/ImieL2h+VND8mKD5cUHzE4LmJwXNTwmanxY0PyNoflbQ/Jyg+XlB8wuC5hcFzQsEzS8Jml8WNC8UNL8iaH5V0PyaoPl1QfMiQfMbguY3Bc1vCZrfFjS/I2h+V9D8nqB5saC5S9BcETR3C5p7BM1VQXOvoPl9QfMSQfNSQfMHguYPBc0fCZqXCZr7BM3LBc0rBM0fC5r7Bc0DguaaoHmloPkTQfOnguZVgubPBM2fC5q/EDR/KWj+StD8taD5G0HzakHzt4LmNYLm7wTN3wuafxA0/yho/knQ/LOg+RdB86+C5t8Ezb8Lmv8QNP8paP5L0LxW0Py3oPkfQfO/gub/BM3/C5rXCZrXC5o3CJo3Cpo3CZo3C5q3CJq3Cpq3CZq3C5p3CJp3Cpp3CZp3C5r3CJr3Cpr3CZr3B2K+ydF8IBDzzY7mg4GYb3E0HwrEfKuj+XAg5tsczUcCMd/uaD4aiPkOR/OxQMx3OpqPB2Ie4Wg+EYj5LkfzyUDMdzuaTwVivsfRfDoQ872O5jOBmEc6ms8GYh7laD7naG5K1tOQmBstwy1pS8aStXBPyD0S9wxcQ3NNyTUW1xz8B/OfxDmacxa/YY5pvmPMTVft083JssUyzjLeMsGSs0y0TLJMtkyxTLVMs0y3zLDMtMyyzLa0WuZY5lrmsQ8skYU+9/R9pw86fcHpk03f6NhCX2H67NJ3lj6s9CWlT+flvpX0NZxvoe8dfeDoi0afMPpm0UeKvkr0GaLvDn1o6MtCnxL6diyw0NeBPgfU/acOPnXhqZNO3fBFFupKU2eZusPU4aUuLXVaqVu62EJdy4qFuofUAaQuHnXiqJtGHTHqalFnirpL1CGiLg91aqjbssJCXQ/qXFD3gToI1AVgnjzzxldZmFfMPFvmnTIPk3mJzNNj3tpqC/Oa1liY98I8EOZFME+AcfOMI2dcNeOMGXfLOFTGZTJOkXF7ay2M62KcE+N+GAfDuBDGSTBugPfovFfmPSvHAO/heC/FexreW+yw8Fx7l4XnnjwH5LkYz4l4bsJzBO6ruc/kvov7EK7LuU7luo3rGP7X+Z/jvM95kPMCvxOO68ufTLJsSZYLq3091f7cspUDtVylmqstWTqQ617eV+vv6q5dAiTDfdCUnwAA",
            "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
        }
    ],
    "events": [],
    "debug": {
        "debugSymbols": [
            "eJyrVsrJT04syczPK1ayqlYyVrKKrlYqLkjMA/GKSxKLSpSsDA0tzXSUUvNSgExjA8NaHaW0zJxUIKc2trYWALOOFGI=",
            "eJyrVsrJT04syczPK1ayqq6tBQAz9wY7",
            "eJyrVsrJT04syczPK1ayqq6tBQAz9wY7",
            "",
            "",
            "",
            "",
            "",
            "",
            "eJyrVsrJT04syczPK1ayqlYyVrKKrlYqLkjMA/GKSxKLSpSsDHSUUvNSgHStjlJaZk6qkpVhrQ6GKkMTYzMzqEog28ICrtrSCJtyUyNDQ5hyUyMzAsotzc1hig2MTBFqTWtjdZRMhqSrTenoamMTU7irTQxMyXZ1bS0AVYGl4g==",
            "eJzV0MEKwjAMgOF3ybmHpm26ta8iOxSdMBid2N5K3t0Jrhts6EEQPCWB7/CTAuN0DnmYYgJfQIM/FUi3EJ9XyuGewUsBfbzMkwVch7EHjyx2Co229iXnvW2rduqIk0JcOCn7gbumWbBUtFriToD5y2r6YbU2VKuNpC+q7VE1kl2/4sz7dnQ1XUvc2I75ASlPwSw="
        ],
        "fileMap": {
            "1": {
                "source": "// A contract used along with `Parent` contract to test nested calls.\ncontract Child {\n    use dep::std::option::Option;\n\n    use dep::aztec::{\n        abi::CallContext,\n        context::{PrivateContext, PublicContext, Context},\n        selector::compute_selector,\n        log::emit_unencrypted_log,\n        state_vars::public_state::PublicState,\n        types::type_serialization::field_serialization::{FieldSerializationMethods, FIELD_SERIALIZED_LEN},\n    };\n\n    struct Storage {\n        current_value: PublicState<Field, FIELD_SERIALIZED_LEN>,\n    }\n\n    impl Storage {\n        fn init(context: Context) -> pub Self {\n            Storage {\n                current_value: PublicState::new(\n                    context,\n                    1,\n                    FieldSerializationMethods,\n                ),\n            }\n        }\n    }\n\n    #[aztec(private)]\n    fn constructor() {}\n\n    // Returns a sum of the input and the chain id and version of the contract in private circuit public input's return_values.\n    #[aztec(private)]\n    fn value(input: Field) -> Field {\n        input + context.chain_id() + context.version()\n    }\n\n    fn check_sender(call_context: CallContext) {\n        assert_eq(call_context.msg_sender, call_context.storage_contract_address, \"Sender must be this contract\");\n    }\n\n    // Returns a sum of the input and the chain id and version of the contract in private circuit public input's return_values. \n    // Can only be called from this contract.\n    #[aztec(private)]\n    fn valueInternal(input: Field) -> Field {\n        check_sender(inputs.call_context);\n        input + context.chain_id() + context.version()\n    }\n\n    // Returns base_value + chain_id + version + block_number + timestamp\n    #[aztec(public)]\n    fn pubGetValue(base_value: Field) -> Field {\n        let returnValue = base_value\n            + context.chain_id()\n            + context.version()\n            + context.block_number()\n            + context.timestamp();\n\n        returnValue\n    }\n\n    // Sets `current_value` to `new_value`\n    #[aztec(public)]\n    fn pubSetValue(new_value: Field) -> Field {\n        storage.current_value.write(new_value);\n        emit_unencrypted_log(&mut context, new_value);\n\n        new_value\n    }\n\n    // Increments `current_value` by `new_value`\n    #[aztec(public)]\n    fn pubIncValue(new_value: Field) -> Field {\n        let old_value = storage.current_value.read();\n        storage.current_value.write(old_value + new_value);\n        emit_unencrypted_log(&mut context, new_value);\n\n        new_value\n    }\n\n    // Increments `current_value` by `new_value`. Can only be called from this contract.\n    #[aztec(public)] \n    fn pubIncValueInternal(new_value: Field) -> Field {\n        check_sender(inputs.call_context);\n        let old_value = storage.current_value.read();\n        storage.current_value.write(old_value + new_value);\n        emit_unencrypted_log(&mut context, new_value);\n\n        new_value\n    }\n\n    #[aztec(public)]\n    fn setValueTwiceWithNestedFirst() {\n        let pubSetValueSelector = compute_selector(\"pubSetValue(Field)\");\n        let _ret = context.call_public_function(context.this_address(), pubSetValueSelector, [10]);\n\n        storage.current_value.write(20);\n        emit_unencrypted_log(&mut context, 20);\n    }\n\n    #[aztec(public)]\n    fn setValueTwiceWithNestedLast() {\n        storage.current_value.write(20);\n        emit_unencrypted_log(&mut context, 20);\n\n        let pubSetValueSelector = compute_selector(\"pubSetValue(Field)\");\n        let _ret = context.call_public_function(context.this_address(), pubSetValueSelector, [10]);\n    }\n\n    // TODO: remove this placeholder once https://github.com/AztecProtocol/aztec-packages/issues/2918 is implemented\n    unconstrained fn compute_note_hash_and_nullifier(contract_address: Field, nonce: Field, storage_slot: Field, serialized_note: [Field; 0]) -> [Field; 4] {\n        [0, 0, 0, 0]\n    }\n}\n",
                "path": "/usr/src/yarn-project/noir-contracts/src/contracts/child_contract/src/main.nr"
            },
            "33": {
                "source": "struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::unsafe::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default\n        }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            other\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<U, Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            default()\n        }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some {\n                Option::none()\n            } else {\n                self\n            }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n",
                "path": "std/option.nr"
            },
            "75": {
                "source": "global ARGS_LENGTH: Field = 16;\nglobal RETURN_VALUES_LENGTH: Field = 4;\n\n/**\n * Convention for constant array lengths are mainly divided in 2 classes:\n *  - FUNCTION CALL\n *  - TRANSACTION\n *\n * Agreed convention is to use MAX_XXX_PER_CALL resp. MAX_XXX_PER_TX, where XXX denotes a type of element such as\n * commitment, or nullifier, e.g.,:\n *  - MAX_NEW_NULLIFIERS_PER_CALL\n *  - MAX_NEW_COMMITMENTS_PER_TX\n *\n * In the kernel circuits, we accumulate elements such as commitments and the nullifiers from all functions calls in a\n * transaction. Therefore, we always must have:\n * MAX_XXX_PER_TX ≥ MAX_XXX_PER_CALL\n *\n * For instance:\n * MAX_NEW_COMMITMENTS_PER_TX ≥ MAX_NEW_COMMITMENTS_PER_CALL\n * MAX_NEW_NULLIFIERS_PER_TX ≥ MAX_NEW_NULLIFIERS_PER_CALL\n *\n */\n\n// docs:start:constants\n// \"PER CALL\" CONSTANTS\nglobal MAX_NEW_COMMITMENTS_PER_CALL: Field = 16;\nglobal MAX_NEW_NULLIFIERS_PER_CALL: Field = 16;\nglobal MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL: Field = 4;\nglobal MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL: Field = 4;\nglobal MAX_NEW_L2_TO_L1_MSGS_PER_CALL: Field = 2;\nglobal MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL: Field = 16;\nglobal MAX_PUBLIC_DATA_READS_PER_CALL: Field = 16;\nglobal MAX_READ_REQUESTS_PER_CALL: Field = 32;\nglobal MAX_PENDING_READ_REQUESTS_PER_CALL: Field = 32;\n\n// \"PER TRANSACTION\" CONSTANTS\nglobal MAX_NEW_COMMITMENTS_PER_TX: Field = 64;\nglobal MAX_NEW_NULLIFIERS_PER_TX: Field = 64;\nglobal MAX_PRIVATE_CALL_STACK_LENGTH_PER_TX: Field = 8;\nglobal MAX_PUBLIC_CALL_STACK_LENGTH_PER_TX: Field = 8;\nglobal MAX_NEW_L2_TO_L1_MSGS_PER_TX: Field = 2;\nglobal MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_TX: Field = 16;\nglobal MAX_PUBLIC_DATA_READS_PER_TX: Field = 16;\nglobal MAX_NEW_CONTRACTS_PER_TX: Field = 1;\nglobal MAX_OPTIONALLY_REVEALED_DATA_LENGTH_PER_TX: Field = 4;\nglobal MAX_READ_REQUESTS_PER_TX: Field = 128;\nglobal MAX_PENDING_READ_REQUESTS_PER_TX: Field = 128;\nglobal NUM_ENCRYPTED_LOGS_HASHES_PER_TX: Field = 1;\nglobal NUM_UNENCRYPTED_LOGS_HASHES_PER_TX: Field = 1;\n// docs:end:constants\n\n// ROLLUP CONTRACT CONSTANTS - constants used only in l1-contracts\nglobal NUMBER_OF_L1_L2_MESSAGES_PER_ROLLUP: Field = 16;\n// TODO(961): Use this constant everywhere instead of hard-coded \"2\".\nglobal KERNELS_PER_BASE_ROLLUP: Field = 2;\nglobal MAX_NEW_NULLIFIERS_PER_BASE_ROLLUP: Field = 128;\nglobal MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_BASE_ROLLUP: Field = 32;\nglobal MAX_PUBLIC_DATA_READS_PER_BASE_ROLLUP: Field = 32;\n\n// TREES RELATED CONSTANTS\nglobal VK_TREE_HEIGHT: Field = 3;\nglobal FUNCTION_TREE_HEIGHT: Field = 5;\nglobal CONTRACT_TREE_HEIGHT: Field = 16;\nglobal NOTE_HASH_TREE_HEIGHT: Field = 32;\nglobal PUBLIC_DATA_TREE_HEIGHT: Field = 254;\nglobal NULLIFIER_TREE_HEIGHT: Field = 20;\nglobal L1_TO_L2_MSG_TREE_HEIGHT: Field = 16;\nglobal ROLLUP_VK_TREE_HEIGHT: Field = 8;\n\n// SUB-TREES RELATED CONSTANTS\nglobal CONTRACT_SUBTREE_HEIGHT: Field = 1;\nglobal CONTRACT_SUBTREE_SIBLING_PATH_LENGTH: Field = 15;\nglobal NOTE_HASH_SUBTREE_HEIGHT: Field = 7;\nglobal NOTE_HASH_SUBTREE_SIBLING_PATH_LENGTH: Field = 25;\nglobal NULLIFIER_SUBTREE_HEIGHT: Field = 7;\nglobal ARCHIVE_HEIGHT: Field = 16;\nglobal NULLIFIER_SUBTREE_SIBLING_PATH_LENGTH: Field = 13;\nglobal L1_TO_L2_MSG_SUBTREE_HEIGHT: Field = 4;\nglobal L1_TO_L2_MSG_SUBTREE_SIBLING_PATH_LENGTH: Field = 12;\n\n// MISC CONSTANTS\nglobal FUNCTION_SELECTOR_NUM_BYTES: Field = 4;\nglobal MAPPING_SLOT_PEDERSEN_SEPARATOR: Field = 4;\nglobal NUM_FIELDS_PER_SHA256: Field = 2;\nglobal ARGS_HASH_CHUNK_LENGTH: u32 = 32;\nglobal ARGS_HASH_CHUNK_COUNT: u32 = 16;\n\n\n// NOIR CONSTANTS - constants used only in yarn-packages/noir-contracts\n// Some are defined here because Noir doesn't yet support globals referencing other globals yet.\n// Move these constants to a noir file once the issue bellow is resolved:\n// https://github.com/noir-lang/noir/issues/1734\nglobal L1_TO_L2_MESSAGE_LENGTH: Field = 8;\nglobal L1_TO_L2_MESSAGE_ORACLE_CALL_LENGTH: Field = 26;\nglobal MAX_NOTE_FIELDS_LENGTH: Field = 20;\n// GET_NOTE_ORACLE_RETURN_LENGT = MAX_NOTE_FIELDS_LENGTH + 1 + 2\n// The plus 1 is 1 extra field for nonce.\n// + 2 for EXTRA_DATA: [number_of_return_notes, contract_address]\nglobal GET_NOTE_ORACLE_RETURN_LENGTH: Field = 23;\nglobal MAX_NOTES_PER_PAGE: Field = 10;\n// VIEW_NOTE_ORACLE_RETURN_LENGTH = MAX_NOTES_PER_PAGE * (MAX_NOTE_FIELDS_LENGTH + 1) + 2;\nglobal VIEW_NOTE_ORACLE_RETURN_LENGTH: Field = 212;\nglobal CALL_CONTEXT_LENGTH: Field = 7;\nglobal BLOCK_HEADER_LENGTH: Field = 7;\nglobal FUNCTION_DATA_LENGTH: Field = 4;\nglobal CONTRACT_DEPLOYMENT_DATA_LENGTH: Field = 6;\n// Change this ONLY if you have changed the PrivateCircuitPublicInputs structure.\n// In other words, if the structure/size of the public inputs of a function call changes then we\n// should change this constant as well as the offsets in private_call_stack_item.nr\nglobal PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH: Field = 155;\nglobal CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH: Field = 3;\nglobal CONTRACT_STORAGE_READ_LENGTH: Field = 2;\n// Change this ONLY if you have changed the PublicCircuitPublicInputs structure.\nglobal PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH: Field = 142;\nglobal GET_NOTES_ORACLE_RETURN_LENGTH: Field = 674;\nglobal EMPTY_NULLIFIED_COMMITMENT: Field = 1000000;\nglobal CALL_PRIVATE_FUNCTION_RETURN_SIZE: Field = 161;\nglobal PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH: Field = 87;\nglobal PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH: Field = 144;\nglobal COMMITMENTS_NUM_BYTES_PER_BASE_ROLLUP: Field = 4096;\nglobal NULLIFIERS_NUM_BYTES_PER_BASE_ROLLUP: Field = 4096;\nglobal PUBLIC_DATA_WRITES_NUM_BYTES_PER_BASE_ROLLUP: Field = 2048;\nglobal CONTRACTS_NUM_BYTES_PER_BASE_ROLLUP: Field = 64;\nglobal CONTRACT_DATA_NUM_BYTES_PER_BASE_ROLLUP: Field = 128;\nglobal CONTRACT_DATA_NUM_BYTES_PER_BASE_ROLLUP_UNPADDED: Field = 104;\nglobal L2_TO_L1_MSGS_NUM_BYTES_PER_BASE_ROLLUP: Field = 128;\nglobal LOGS_HASHES_NUM_BYTES_PER_BASE_ROLLUP: Field = 128;\n\n/**\n * Enumerate the hash_indices which are used for pedersen hashing.\n * We start from 1 to avoid the default generators. The generator indices are listed\n * based on the number of elements each index hashes. The following conditions must be met:\n *\n * +-----------+-------------------------------+----------------------+\n * | Hash size | Number of elements hashed (n) | Condition to use     |\n * |-----------+-------------------------------+----------------------|\n * | LOW       | n ≤ 8                         | 0 < hash_index ≤ 32  |\n * | MID       | 8 < n ≤ 16                    | 32 < hash_index ≤ 40 |\n * | HIGH      | 16 < n ≤ 48                   | 40 < hash_index ≤ 48 |\n * +-----------+-------------------------------+----------------------+\n *\n * Note: When modifying, modify `GeneratorIndexPacker` in packer.hpp accordingly.\n */\n// Indices with size ≤ 8\nglobal GENERATOR_INDEX__COMMITMENT = 1;\nglobal GENERATOR_INDEX__COMMITMENT_NONCE = 2;\nglobal GENERATOR_INDEX__UNIQUE_COMMITMENT = 3;\nglobal GENERATOR_INDEX__SILOED_COMMITMENT = 4;\nglobal GENERATOR_INDEX__NULLIFIER = 5;\nglobal GENERATOR_INDEX__INITIALIZATION_NULLIFIER = 6;\nglobal GENERATOR_INDEX__OUTER_NULLIFIER = 7;\nglobal GENERATOR_INDEX__PUBLIC_DATA_READ = 8;\nglobal GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST = 9;\nglobal GENERATOR_INDEX__FUNCTION_DATA = 10;\nglobal GENERATOR_INDEX__FUNCTION_LEAF = 11;\nglobal GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA = 12;\nglobal GENERATOR_INDEX__CONSTRUCTOR = 13;\nglobal GENERATOR_INDEX__CONSTRUCTOR_ARGS = 14;\nglobal GENERATOR_INDEX__CONTRACT_ADDRESS = 15;\nglobal GENERATOR_INDEX__CONTRACT_LEAF = 16;\nglobal GENERATOR_INDEX__CALL_CONTEXT = 17;\nglobal GENERATOR_INDEX__CALL_STACK_ITEM = 18;\nglobal GENERATOR_INDEX__CALL_STACK_ITEM_2 = 19;\nglobal GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET = 20;\nglobal GENERATOR_INDEX__L2_TO_L1_MSG = 21;\nglobal GENERATOR_INDEX__TX_CONTEXT = 22;\nglobal GENERATOR_INDEX__PUBLIC_LEAF_INDEX = 23;\nglobal GENERATOR_INDEX__PUBLIC_DATA_LEAF = 24;\nglobal GENERATOR_INDEX__SIGNED_TX_REQUEST = 25;\nglobal GENERATOR_INDEX__GLOBAL_VARIABLES = 26;\nglobal GENERATOR_INDEX__PARTIAL_ADDRESS = 27;\nglobal GENERATOR_INDEX__BLOCK_HASH = 28;\n// Indices with size ≤ 16\nglobal GENERATOR_INDEX__TX_REQUEST = 33;\nglobal GENERATOR_INDEX__SIGNATURE_PAYLOAD = 34;\n// Indices with size ≤ 44\nglobal GENERATOR_INDEX__VK = 41;\nglobal GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS = 42;\nglobal GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS = 43;\nglobal GENERATOR_INDEX__FUNCTION_ARGS = 44;\n",
                "path": "/protocol_types/constants.nr"
            },
            "92": {
                "source": "use dep::protocol_types::constants::{\n    RETURN_VALUES_LENGTH,\n    MAX_READ_REQUESTS_PER_CALL,\n    MAX_PENDING_READ_REQUESTS_PER_CALL,\n    MAX_NEW_COMMITMENTS_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n    NUM_FIELDS_PER_SHA256,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL,\n    GENERATOR_INDEX__FUNCTION_ARGS,\n    BLOCK_HEADER_LENGTH,\n    CONTRACT_DEPLOYMENT_DATA_LENGTH,\n    CALL_CONTEXT_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n    CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH,\n    CONTRACT_STORAGE_READ_LENGTH,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n    GENERATOR_INDEX__BLOCK_HASH,\n    GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS,\n    GENERATOR_INDEX__FUNCTION_DATA,\n    GENERATOR_INDEX__PUBLIC_DATA_READ,\n    GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST,\n    GENERATOR_INDEX__CALL_CONTEXT,\n    GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS,\n    GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA,\n};\n\nuse crate::oracle::debug_log;\nuse crate::types::vec::BoundedVec;\nuse crate::types::point::Point;\nuse crate::hash::pedersen_hash;\n\n// docs:start:private-global-variables\nstruct PrivateGlobalVariables {\n    chain_id: Field,\n    version: Field,\n}\n// docs:end:private-global-variables\n\nimpl PrivateGlobalVariables {\n    fn serialize(self) -> [Field; 2] {\n        [self.chain_id, self.version]\n    }\n}\n\n// docs:start:public-global-variables\nstruct PublicGlobalVariables {\n    chain_id: Field,\n    version: Field,\n    block_number: Field,\n    timestamp: Field,\n}\n// docs:end:public-global-variables\n\nimpl PublicGlobalVariables {\n    fn serialize(self) -> [Field; 4] {\n        [self.chain_id, self.version, self.block_number, self.timestamp]\n    }\n}\n\n// docs:start:contract-deployment-data\nstruct ContractDeploymentData {\n    deployer_public_key: Point,\n    constructor_vk_hash : Field,\n    function_tree_root : Field,\n    contract_address_salt : Field,\n    portal_contract_address : Field,\n}\n// docs:end:contract-deployment-data\n\nimpl ContractDeploymentData {\n    fn serialize(self) -> [Field; CONTRACT_DEPLOYMENT_DATA_LENGTH] {\n        [\n            self.deployer_public_key.x,\n            self.deployer_public_key.y,\n            self.constructor_vk_hash,\n            self.function_tree_root,\n            self.contract_address_salt,\n            self.portal_contract_address,\n        ]\n    }\n\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA)\n    }\n}\n\n// PrivateContextInputs are expected to be provided to each private function\n// docs:start:private-context-inputs\nstruct PrivateContextInputs {\n    call_context : CallContext,\n    block_header: BlockHeader,\n    contract_deployment_data: ContractDeploymentData,\n    private_global_variables: PrivateGlobalVariables,\n}\n// docs:end:private-context-inputs\n\n// PublicContextInputs are expected to be provided to each public function\n// docs:start:public-context-inputs\nstruct PublicContextInputs {\n    call_context: CallContext,\n    block_header: BlockHeader,\n\n    public_global_variables: PublicGlobalVariables,\n}\n// docs:end:public-context-inputs\n\n// docs:start:call-context\nstruct CallContext {\n    msg_sender : Field,\n    storage_contract_address : Field,\n    portal_contract_address : Field,\n    function_selector: Field,\n\n    is_delegate_call : bool,\n    is_static_call : bool,\n    is_contract_deployment: bool,\n}\n// docs:end:call-context\n\nimpl CallContext {\n    fn serialize(self) -> [Field; CALL_CONTEXT_LENGTH] {\n        [\n            self.msg_sender,\n            self.storage_contract_address,\n            self.portal_contract_address,\n            self.function_selector,\n            self.is_delegate_call as Field,\n            self.is_static_call as Field,\n            self.is_contract_deployment as Field,\n        ]\n    }\n\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CALL_CONTEXT)\n    }\n}\n\n// docs:start:block-header\nstruct BlockHeader {\n    note_hash_tree_root : Field,\n    nullifier_tree_root : Field,\n    contract_tree_root : Field,\n    l1_to_l2_messages_tree_root : Field,\n    archive_root: Field,\n    public_data_tree_root: Field,\n    global_variables_hash: Field,\n}\n// docs:end:block-header\n\nimpl BlockHeader {\n    // NOTE: this order must match the order in `private_circuit_public_inputs.hpp`\n    pub fn serialize(self) -> [Field; BLOCK_HEADER_LENGTH] {\n        [\n            self.note_hash_tree_root,\n            self.nullifier_tree_root,\n            self.contract_tree_root,\n            self.l1_to_l2_messages_tree_root,\n            self.archive_root,\n            self.public_data_tree_root,\n            self.global_variables_hash,\n        ]\n    }\n\n    pub fn deserialize(deserialized: [Field; BLOCK_HEADER_LENGTH]) -> Self {\n        BlockHeader {\n            note_hash_tree_root: deserialized[0],\n            nullifier_tree_root: deserialized[1],\n            contract_tree_root: deserialized[2],\n            l1_to_l2_messages_tree_root: deserialized[3],\n            archive_root: deserialized[4],\n            public_data_tree_root: deserialized[5],\n            global_variables_hash: deserialized[6],\n        }\n    }\n\n    pub fn empty() -> Self {\n        Self { note_hash_tree_root: 0, nullifier_tree_root: 0, contract_tree_root: 0, l1_to_l2_messages_tree_root: 0, archive_root: 0, public_data_tree_root: 0, global_variables_hash: 0 }\n    }\n\n    pub fn block_hash(self) -> Field {\n        // TODO(#3442): Unify the ordering in `BlockHeader::serialize` function and the ordering\n        // in the block hash preimage --> This requires changes in the circuits.\n        let inputs = [\n            self.global_variables_hash,\n            self.note_hash_tree_root,\n            self.nullifier_tree_root,\n            self.contract_tree_root,\n            self.l1_to_l2_messages_tree_root,\n            self.public_data_tree_root\n        ];\n        pedersen_hash(inputs, GENERATOR_INDEX__BLOCK_HASH)\n    }\n}\n\nstruct FunctionData {\n    function_selector: Field,\n    is_internal: bool,\n    is_private: bool,\n    is_constructor: bool,\n}\n\nimpl FunctionData {\n    fn hash(self) -> Field {\n        pedersen_hash([\n            self.function_selector,\n            self.is_internal as Field,\n            self.is_private as Field,\n            self.is_constructor as Field,\n        ], GENERATOR_INDEX__FUNCTION_DATA)\n    }\n}\n\nstruct PrivateCircuitPublicInputs {\n    call_context: CallContext,\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n    read_requests: [Field; crate::abi::MAX_READ_REQUESTS_PER_CALL],\n    pending_read_requests: [Field; crate::abi::MAX_PENDING_READ_REQUESTS_PER_CALL],\n    new_commitments: [Field; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [Field; MAX_NEW_NULLIFIERS_PER_CALL],\n    nullified_commitments: [Field; MAX_NEW_NULLIFIERS_PER_CALL],\n    private_call_stack: [Field; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL],\n    public_call_stack: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_l2_to_l1_msgs: [Field; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    // Explore introducing a new type like uint256 (similar to Point), so it's more explicit that\n    // we're talking about a single number backed by two field elements.\n    encrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    encrypted_log_preimages_length: Field,\n    unencrypted_log_preimages_length: Field,\n    block_header: BlockHeader,\n    contract_deployment_data: ContractDeploymentData,\n    chain_id: Field,\n    version: Field,\n}\n\nimpl PrivateCircuitPublicInputs {\n    fn hash(self) -> Field {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0); \n        fields.push(self.call_context.hash());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.push_array(self.read_requests);\n        fields.push_array(self.pending_read_requests);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.nullified_commitments);\n        fields.push_array(self.private_call_stack);\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_header.serialize());\n        fields.push(self.contract_deployment_data.hash());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n\n        pedersen_hash(fields.storage, GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS)\n    }\n\n    fn serialize(self) -> [Field; PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.push_array(self.read_requests);\n        fields.push_array(self.pending_read_requests);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.private_call_stack);\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_header.serialize());\n        fields.push_array(self.contract_deployment_data.serialize());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n        fields.storage\n    }\n}\n\nstruct ContractStorageRead {\n    storage_slot: Field,\n    value: Field,\n}\n\nimpl ContractStorageRead {\n    pub fn serialize(self) -> [Field; CONTRACT_STORAGE_READ_LENGTH] {\n        [self.storage_slot, self.value]\n    }\n\n    pub fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_READ)\n    }\n\n    pub fn empty() -> Self {\n        Self { storage_slot: 0, value: 0 }\n    }\n}\n\nstruct ContractStorageUpdateRequest {\n    storage_slot: Field,\n    old_value: Field,\n    new_value: Field,\n}\n\nimpl ContractStorageUpdateRequest {\n    pub fn serialize(self) -> [Field; CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH] {\n        [self.storage_slot, self.old_value, self.new_value]\n    }\n\n    pub fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST)\n    }\n\n    pub fn empty() -> Self {\n        Self { storage_slot: 0, old_value: 0, new_value: 0 }\n    }\n}\n\nstruct PublicCircuitPublicInputs {\n    call_context: CallContext,\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n    contract_storage_update_requests: [ContractStorageUpdateRequest; MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n    contract_storage_read: [ContractStorageRead; MAX_PUBLIC_DATA_READS_PER_CALL],\n    public_call_stack: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_commitments: [Field; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [Field; crate::abi::MAX_NEW_NULLIFIERS_PER_CALL],\n    new_l2_to_l1_msgs: [Field; crate::abi::MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_log_preimages_length: Field,\n    block_header: BlockHeader,\n    prover_address: Field,\n}\n\nimpl PublicCircuitPublicInputs {\n    \n    pub fn hash(self) -> Field {\n        let mut inputs: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0);\n        inputs.push(self.call_context.hash());\n        inputs.push(self.args_hash);\n        inputs.push_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            inputs.push(self.contract_storage_update_requests[i].hash());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            inputs.push(self.contract_storage_read[i].hash());\n        }\n        inputs.push_array(self.public_call_stack);\n        inputs.push_array(self.new_commitments);\n        inputs.push_array(self.new_nullifiers);\n        inputs.push_array(self.new_l2_to_l1_msgs);\n\n        inputs.push_array(self.unencrypted_logs_hash);\n        inputs.push(self.unencrypted_log_preimages_length);\n        inputs.push_array(self.block_header.serialize());\n        inputs.push(self.prover_address);\n\n        pedersen_hash(inputs.storage, GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS)\n    }\n\n    pub fn serialize(self) -> [Field; PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());   \n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            fields.push_array(self.contract_storage_update_requests[i].serialize());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            fields.push_array(self.contract_storage_read[i].serialize());\n        }\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_header.serialize());\n        fields.push(self.prover_address);\n        fields.storage\n    }\n}\n\nstruct Hasher {\n    fields: [Field],\n}\n\nimpl Hasher {\n    pub fn new()-> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<N>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n\n    pub fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nglobal ARGS_HASH_CHUNK_LENGTH: u32 = 32;\nglobal ARGS_HASH_CHUNK_COUNT: u32 = 16;\n\npub fn hash_args<N>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        let mut chunks_hashes = [0; ARGS_HASH_CHUNK_COUNT];\n        for i in 0..ARGS_HASH_CHUNK_COUNT {\n            let mut chunk_hash = 0;\n            let start_chunk_index = i * ARGS_HASH_CHUNK_LENGTH;\n            if start_chunk_index < (args.len() as u32) {\n                let mut chunk_args = [0; ARGS_HASH_CHUNK_LENGTH];\n                for j in 0..ARGS_HASH_CHUNK_LENGTH {\n                    let item_index = i * ARGS_HASH_CHUNK_LENGTH + j;\n                    if item_index < (args.len() as u32) {\n                        chunk_args[j] = args[item_index];\n                    }\n                }\n                chunk_hash = pedersen_hash(chunk_args, GENERATOR_INDEX__FUNCTION_ARGS);\n            }\n            chunks_hashes[i] = chunk_hash;\n        }\n        pedersen_hash(chunks_hashes, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n",
                "path": "/aztec/abi.nr"
            },
            "94": {
                "source": "use dep::protocol_types::constants::{\n    EMPTY_NULLIFIED_COMMITMENT,\n    MAX_NEW_COMMITMENTS_PER_CALL,\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_READ_REQUESTS_PER_CALL,\n    MAX_PENDING_READ_REQUESTS_PER_CALL,\n    NUM_FIELDS_PER_SHA256,\n    RETURN_VALUES_LENGTH,\n};\n\nuse crate::abi;\n\nuse crate::abi::{\n    hash_args,\n    CallContext,\n    ContractDeploymentData,\n    BlockHeader,\n    FunctionData,\n    PrivateCircuitPublicInputs,\n    PublicCircuitPublicInputs,\n};\n\n// TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n// use dep::std::collections::vec::Vec;\n\n// l1 to l2 messaging\nuse crate::messaging::process_l1_to_l2_message;\nuse crate::private_call_stack_item::PrivateCallStackItem;\nuse crate::public_call_stack_item::PublicCallStackItem;\n\nuse crate::types::{\n    vec::BoundedVec,\n    point::Point,\n};\n\nuse crate::utils::arr_copy_slice;\n\nuse crate::oracle::{\n    arguments,\n    call_private_function::call_private_function_internal,\n    public_call::call_public_function_internal,\n    enqueue_public_function_call::enqueue_public_function_call_internal,\n    context::get_portal_address,\n    get_block_header::get_block_header,\n};\n\nuse dep::std::option::Option;\n\n// When finished, one can call .finish() to convert back to the abi\nstruct PrivateContext {\n    // docs:start:private-context\n    inputs: abi::PrivateContextInputs,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    read_requests: BoundedVec<Field, MAX_READ_REQUESTS_PER_CALL>,\n    pending_read_requests: BoundedVec<Field, MAX_PENDING_READ_REQUESTS_PER_CALL>,\n\n    new_commitments: BoundedVec<Field, MAX_NEW_COMMITMENTS_PER_CALL>,\n    new_nullifiers: BoundedVec<Field, MAX_NEW_NULLIFIERS_PER_CALL>,\n    nullified_commitments: BoundedVec<Field, MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    private_call_stack : BoundedVec<Field, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_stack : BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    new_l2_to_l1_msgs : BoundedVec<Field, MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    block_header: BlockHeader,\n\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    // encrypted_logs_preimages: Vec<Field>,\n    // unencrypted_logs_preimages: Vec<Field>,\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: abi::PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs: inputs,\n\n            args_hash: args_hash,\n            return_values: BoundedVec::new(0),\n\n            read_requests: BoundedVec::new(0),\n            pending_read_requests: BoundedVec::new(0),\n\n            new_commitments: BoundedVec::new(0),\n            new_nullifiers: BoundedVec::new(0),\n            nullified_commitments: BoundedVec::new(0),\n\n            block_header: inputs.block_header,\n\n            private_call_stack: BoundedVec::new(0),\n            public_call_stack: BoundedVec::new(0),\n            new_l2_to_l1_msgs: BoundedVec::new(0),\n\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    pub fn msg_sender(self) -> Field {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> Field {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    pub fn this_portal_address(self) -> Field {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.private_global_variables.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.private_global_variables.version\n    }\n\n    pub fn selector(self) -> Field {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn get_block_header(self, block_number: u32) -> BlockHeader {\n        get_block_header(block_number, self)\n    }\n\n    pub fn finish(self) -> abi::PrivateCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let encrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let encrypted_log_preimages_length = 0;\n        let unencrypted_log_preimages_length = 0;\n\n        let priv_circuit_pub_inputs = abi::PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            return_values: self.return_values.storage,\n            read_requests: self.read_requests.storage,\n            pending_read_requests: self.pending_read_requests.storage,\n            new_commitments: self.new_commitments.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            nullified_commitments: self.nullified_commitments.storage,\n            private_call_stack: self.private_call_stack.storage,\n            public_call_stack: self.public_call_stack.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            encrypted_logs_hash: encrypted_logs_hash,\n            unencrypted_logs_hash: unencrypted_logs_hash,\n            encrypted_log_preimages_length: encrypted_log_preimages_length,\n            unencrypted_log_preimages_length: unencrypted_log_preimages_length,\n            block_header: self.block_header,\n            contract_deployment_data: self.inputs.contract_deployment_data,\n            chain_id: self.inputs.private_global_variables.chain_id,\n            version: self.inputs.private_global_variables.version,\n        };\n        priv_circuit_pub_inputs\n    }\n\n    pub fn push_read_request(&mut self, read_request: Field) {\n        self.read_requests.push(read_request);\n    }\n\n    pub fn push_pending_read_request(&mut self, pending_read_request: Field) {\n        self.pending_read_requests.push(pending_read_request);\n    }\n\n    pub fn push_new_note_hash(&mut self, note_hash: Field) {\n        self.new_commitments.push(note_hash);\n    }\n\n    // We never push a zero nullified_commitment as zero is used to indicate the end\n    // of a field array in private kernel. This routine transparently replaces a\n    // zero value into the special placeholder: EMPTY_NULLIFIED_COMMITMENT.\n    pub fn push_new_nullifier(&mut self, nullifier: Field, nullified_commitment: Field) {\n        self.new_nullifiers.push(nullifier);\n        let mut non_zero_nullified = nullified_commitment;\n        if (non_zero_nullified == 0) {\n            non_zero_nullified = EMPTY_NULLIFIED_COMMITMENT;\n        }\n        self.nullified_commitments.push(non_zero_nullified);\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, content: Field) \n    // docs:end:context_message_portal\n    {\n        self.new_l2_to_l1_msgs.push(content);\n    }\n\n    // PrivateContextInputs must be temporarily passed in to prevent too many unknowns\n    // Note this returns self to get around an issue where mutable structs do not maintain mutations unless reassigned\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        msg_key: Field,\n        content: Field,\n        secret: Field\n    ) \n    // docs:end:context_consume_l1_to_l2_message\n    {\n        let nullifier = process_l1_to_l2_message(self.block_header.l1_to_l2_messages_tree_root, self.this_address(), self.this_portal_address(), self.chain_id(), self.version(), msg_key, content, secret);\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash)\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0)\n    }\n\n    pub fn call_private_function_with_packed_args(\n        &mut self,\n        contract_address: Field,\n        function_selector: Field,\n        args_hash: Field\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let fields = call_private_function_internal(\n            contract_address, \n            function_selector, \n            args_hash\n        );\n        let item = PrivateCallStackItem {\n            contract_address: fields[0],\n            function_data: FunctionData {\n                function_selector: fields[1],\n                is_internal: fields[2] as bool,\n                is_private: fields[3] as bool,\n                is_constructor: fields[4] as bool,\n            },\n            public_inputs: PrivateCircuitPublicInputs {\n                call_context: CallContext {\n                    msg_sender : fields[5],\n                    storage_contract_address : fields[6],\n                    portal_contract_address : fields[7],\n                    function_selector: fields[8], // practically same as fields[1]\n                    is_delegate_call : fields[9] as bool,\n                    is_static_call : fields[10] as bool,\n                    is_contract_deployment: fields[11] as bool,\n                },\n                // TODO handle the offsets as a variable incremented during extraction?\n                args_hash: fields[12],\n                return_values: arr_copy_slice(fields, [0; RETURN_VALUES_LENGTH], 13),\n                read_requests: arr_copy_slice(fields, [0; MAX_READ_REQUESTS_PER_CALL], 17),\n                pending_read_requests: arr_copy_slice(fields, [0; MAX_READ_REQUESTS_PER_CALL], 49),\n                new_commitments: arr_copy_slice(fields, [0; MAX_NEW_COMMITMENTS_PER_CALL], 81),\n                new_nullifiers: arr_copy_slice(fields, [0; MAX_NEW_NULLIFIERS_PER_CALL], 97),\n                nullified_commitments: arr_copy_slice(fields, [0; MAX_NEW_NULLIFIERS_PER_CALL], 113),\n                private_call_stack: arr_copy_slice(fields, [0; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL], 129),\n                public_call_stack: arr_copy_slice(fields, [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL], 133),\n                new_l2_to_l1_msgs: arr_copy_slice(fields, [0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL], 137),\n                encrypted_logs_hash: arr_copy_slice(fields, [0; NUM_FIELDS_PER_SHA256], 139),\n                unencrypted_logs_hash: arr_copy_slice(fields, [0; NUM_FIELDS_PER_SHA256], 141),\n                encrypted_log_preimages_length: fields[143],\n                unencrypted_log_preimages_length: fields[144],\n                block_header: BlockHeader {\n                    // Must match order in `private_circuit_public_inputs.hpp`\n                    note_hash_tree_root : fields[145],\n                    nullifier_tree_root : fields[146],\n                    contract_tree_root : fields[147],\n                    l1_to_l2_messages_tree_root : fields[148],\n                    archive_root : fields[149],\n                    public_data_tree_root: fields[150],\n                    global_variables_hash: fields[151],\n                },\n                contract_deployment_data: ContractDeploymentData {\n                    deployer_public_key: Point::new(fields[152], fields[153]),\n                    constructor_vk_hash : fields[154],\n                    function_tree_root : fields[155],\n                    contract_address_salt : fields[156],\n                    portal_contract_address : fields[157],\n                },\n                chain_id: fields[158],\n                version: fields[159],\n            },\n            is_execution_request: fields[160] as bool,\n        };\n        assert(contract_address == item.contract_address);\n        assert(function_selector == item.function_data.function_selector);\n\n        assert(args_hash == item.public_inputs.args_hash);\n\n        assert(item.is_execution_request == false);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        // We are issuing a regular call which is not delegate, static, or deployment. We also constrain\n        // the msg_sender in the nested call to be equal to our address, and the execution context address\n        // for the nested call to be equal to the address we actually called.\n        assert(item.public_inputs.call_context.is_delegate_call == false);\n        assert(item.public_inputs.call_context.is_static_call == false);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n        assert(item.public_inputs.call_context.msg_sender == self.inputs.call_context.storage_contract_address);\n        assert(item.public_inputs.call_context.storage_contract_address == contract_address);\n\n        self.private_call_stack.push(item.hash());\n\n        item.public_inputs.return_values\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field,\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: Field,\n        function_selector: Field,\n        args_hash: Field\n    ) {\n        let fields = enqueue_public_function_call_internal(\n            contract_address, \n            function_selector, \n            args_hash\n        );\n        let item = PublicCallStackItem {\n            contract_address: fields[0],\n            function_data: FunctionData {\n                function_selector: fields[1],\n                is_internal: fields[2] as bool,\n                is_private: fields[3] as bool,\n                is_constructor: fields[4] as bool,\n            },\n            public_inputs: PublicCircuitPublicInputs {\n                call_context: CallContext {\n                    msg_sender : fields[5],\n                    storage_contract_address : fields[6],\n                    portal_contract_address : fields[7],\n                    function_selector: fields[8], // practically same as fields[1]\n                    is_delegate_call : fields[9] as bool,\n                    is_static_call : fields[10] as bool,\n                    is_contract_deployment: fields[11] as bool,\n                },\n                args_hash: fields[12],\n                return_values: [0; RETURN_VALUES_LENGTH],\n                contract_storage_update_requests: [ContractStorageUpdateRequest::empty(); MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n                contract_storage_read: [ContractStorageRead::empty(); MAX_PUBLIC_DATA_READS_PER_CALL],\n                public_call_stack: [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n                new_commitments: [0; MAX_NEW_COMMITMENTS_PER_CALL],\n                new_nullifiers: [0; MAX_NEW_NULLIFIERS_PER_CALL],\n                new_l2_to_l1_msgs:[0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n                unencrypted_logs_hash:[0; NUM_FIELDS_PER_SHA256],\n                unencrypted_log_preimages_length: 0,\n                block_header: BlockHeader::empty(),\n                prover_address: 0,\n            },\n            is_execution_request: true,\n        };\n\n        assert(contract_address == item.contract_address);\n        assert(function_selector == item.function_data.function_selector);\n        \n        assert(args_hash == item.public_inputs.args_hash);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        // We are issuing a regular call which is not delegate, static, or deployment. We also constrain\n        // the msg_sender in the nested call to be equal to our address, and the execution context address\n        // for the nested call to be equal to the address we actually called.\n        assert(item.public_inputs.call_context.is_delegate_call == false);\n        assert(item.public_inputs.call_context.is_static_call == false);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n        assert(item.public_inputs.call_context.msg_sender == self.inputs.call_context.storage_contract_address);\n        assert(item.public_inputs.call_context.storage_contract_address == contract_address);\n\n        self.public_call_stack.push(item.hash());\n    }\n}\n\nuse crate::abi::{\n    ContractStorageRead,\n    ContractStorageUpdateRequest\n};\n\nstruct PublicContext {\n    inputs: abi::PublicContextInputs,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    contract_storage_update_requests: BoundedVec<ContractStorageUpdateRequest, MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL>,\n    contract_storage_read: BoundedVec<ContractStorageRead, MAX_PUBLIC_DATA_READS_PER_CALL>,\n    public_call_stack: BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n\n    new_commitments: BoundedVec<Field, MAX_NEW_COMMITMENTS_PER_CALL>,\n    new_nullifiers: BoundedVec<Field, crate::abi::MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    new_l2_to_l1_msgs: BoundedVec<Field, crate::abi::MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n\n    unencrypted_logs_hash: BoundedVec<Field, NUM_FIELDS_PER_SHA256>,\n    unencrypted_logs_preimages_length: Field,\n\n    block_header: BlockHeader,\n    prover_address: Field,\n}\n\nimpl PublicContext {\n    pub fn new(inputs: abi::PublicContextInputs, args_hash: Field) -> PublicContext {\n        let empty_storage_read = ContractStorageRead::empty();\n        let empty_storage_update = ContractStorageUpdateRequest::empty();\n        PublicContext {\n            inputs: inputs,\n\n            args_hash: args_hash,\n            return_values: BoundedVec::new(0),\n\n            contract_storage_update_requests: BoundedVec::new(empty_storage_update),\n            contract_storage_read: BoundedVec::new(empty_storage_read),\n            public_call_stack: BoundedVec::new(0),\n\n            new_commitments: BoundedVec::new(0),\n            new_nullifiers: BoundedVec::new(0),\n\n            new_l2_to_l1_msgs: BoundedVec::new(0),\n\n            \n            unencrypted_logs_hash: BoundedVec::new(0),\n            unencrypted_logs_preimages_length: 0,\n\n            block_header: inputs.block_header,\n            prover_address: 0,\n\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    pub fn msg_sender(self) -> Field {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> Field {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    pub fn this_portal_address(self) -> Field {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.public_global_variables.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.public_global_variables.version\n    }\n\n    pub fn selector(self) -> Field {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn block_number(self) -> Field {\n        self.inputs.public_global_variables.block_number\n    }\n\n    pub fn timestamp(self) -> Field {\n        self.inputs.public_global_variables.timestamp\n    }\n\n    pub fn finish(self) -> abi::PublicCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_log_preimages_length = 0;\n\n\n        // Compute the public call stack hashes\n        let pub_circuit_pub_inputs = abi::PublicCircuitPublicInputs {\n            call_context: self.inputs.call_context, // Done\n            args_hash: self.args_hash, // Done\n            contract_storage_update_requests: self.contract_storage_update_requests.storage,\n            contract_storage_read: self.contract_storage_read.storage,\n            return_values: self.return_values.storage,\n            new_commitments: self.new_commitments.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            public_call_stack: self.public_call_stack.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            unencrypted_logs_hash: unencrypted_logs_hash,\n            unencrypted_log_preimages_length: unencrypted_log_preimages_length,\n            block_header: self.inputs.block_header,\n            prover_address: self.prover_address,\n        };\n        pub_circuit_pub_inputs\n    }\n\n    pub fn push_new_note_hash(&mut self, note_hash: Field) {\n        self.new_commitments.push(note_hash);\n    }\n\n    pub fn push_new_nullifier(&mut self, nullifier: Field, _nullified_commitment: Field) {\n        self.new_nullifiers.push(nullifier);\n    }\n\n    pub fn message_portal(&mut self, content: Field) {\n        self.new_l2_to_l1_msgs.push(content);\n    }\n\n    // PrivateContextInputs must be temporarily passed in to prevent too many unknowns\n    // Note this returns self to get around an issue where mutable structs do not maintain mutations unless reassigned\n    pub fn consume_l1_to_l2_message(&mut self, msg_key: Field, content: Field, secret: Field) {\n        let this = (*self).this_address();\n        let nullifier = process_l1_to_l2_message(self.block_header.l1_to_l2_messages_tree_root, this, self.this_portal_address(), self.chain_id(), self.version(), msg_key, content, secret);\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT)\n    }\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        _self: Self,\n        contract_address: Field, \n        function_selector: Field,\n        args: [Field; ARGS_COUNT],\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = abi::hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        call_public_function_internal(\n            contract_address, \n            function_selector, \n            args_hash,\n        )\n    }\n\n    pub fn call_public_function_no_args(\n        _self: Self,\n        contract_address: Field, \n        function_selector: Field,\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        call_public_function_internal(\n            contract_address, \n            function_selector, \n            0,\n        )\n    }\n\n}\n\nstruct Context {\n    private: Option<&mut PrivateContext>,\n    public: Option<&mut PublicContext>,\n}\n\nimpl Context {\n    pub fn private(context: &mut PrivateContext) -> Context {\n        Context {\n            private: Option::some(context),\n            public: Option::none()\n        }\n    }\n\n    pub fn public(context: &mut PublicContext) -> Context {\n        Context {\n            public: Option::some(context),\n            private: Option::none()\n        }\n    }\n\n    pub fn none() -> Context {\n        Context {\n            public: Option::none(),\n            private: Option::none()\n        }\n    }\n}\n",
                "path": "/aztec/context.nr"
            },
            "95": {
                "source": "use dep::std::hash::{pedersen_hash_with_separator, sha256};\nuse dep::protocol_types::constants::{\n  GENERATOR_INDEX__SIGNATURE_PAYLOAD,\n  GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET,\n};\n\npub fn sha256_to_field<N>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = sha256(bytes_to_hash);\n\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (sha256_hashed[15 - i] as Field) * v;\n        low = low + (sha256_hashed[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    let hash_in_a_field = low + high * v;\n\n    hash_in_a_field\n}\n\npub fn compute_secret_hash(secret: Field) -> Field {\n    // TODO(#1205) This is probably not the right index to use\n    pedersen_hash([secret], GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET)\n}\n\npub fn pedersen_hash<N>(inputs: [Field; N], hash_index: u32) -> Field {\n    pedersen_hash_with_separator(inputs, hash_index)\n}\n",
                "path": "/aztec/hash.nr"
            },
            "102": {
                "source": "use crate::context::{PrivateContext, PublicContext};\nuse crate::oracle;\nuse crate::types::point::Point;\n\npub fn emit_encrypted_log<N>(\n    context: &mut PrivateContext,\n    contract_address: Field,\n    storage_slot: Field,\n    encryption_pub_key: Point,\n    log: [Field; N]\n) {\n    let _ = oracle::logs::emit_encrypted_log(contract_address, storage_slot, encryption_pub_key, log);\n    context.accumulate_encrypted_logs(log);\n}\n\npub fn emit_unencrypted_log<T>(context: &mut PublicContext, log: T) {\n    let contract_address = context.this_address();\n    let event_selector = 5; // TODO: compute actual event selector.\n    let _ = oracle::logs::emit_unencrypted_log(contract_address, event_selector, log);\n    // context.accumulate_unencrypted_logs(log);\n}\n\n// TODO: We might want to remove this since emitting unencrypted logs from private functions is violating privacy.\n// --> might be a better approach to force devs to make a public function call that emits the log if needed then\n// it would be less easy to accidentally leak information.\n// If we decide to keep this function around would make sense to wait for traits and then merge it with emit_unencrypted_log.\npub fn emit_unencrypted_log_from_private<T>(context: &mut PrivateContext, log: T) {\n    let contract_address = context.this_address();\n    let event_selector = 5; // TODO: compute actual event selector.\n    let _ = oracle::logs::emit_unencrypted_log(contract_address, event_selector, log);\n    // context.accumulate_unencrypted_logs(log);\n}\n",
                "path": "/aztec/log.nr"
            },
            "116": {
                "source": "#[oracle(packArguments)]\nfn pack_arguments_oracle<N>(_args: [Field; N]) -> Field {}\n\n// TODO: explain what this does.\nunconstrained pub fn pack_arguments<N>(args: [Field; N]) -> Field {\n    pack_arguments_oracle(args)\n}\n",
                "path": "/aztec/oracle/arguments.nr"
            },
            "129": {
                "source": "use dep::protocol_types::constants::RETURN_VALUES_LENGTH;\n\n#[oracle(callPublicFunction)]\nfn call_public_function_oracle(_contract_address: Field, _function_selector: Field, _args_hash: Field) -> [Field; RETURN_VALUES_LENGTH] {}\n\nunconstrained pub fn call_public_function_internal(contract_address: Field, function_selector: Field, args_hash: Field) -> [Field; RETURN_VALUES_LENGTH] {\n    call_public_function_oracle(contract_address, function_selector, args_hash)\n}\n",
                "path": "/aztec/oracle/public_call.nr"
            },
            "131": {
                "source": "#[oracle(storageRead)]\nfn storage_read_oracle<N>(_storage_slot: Field, _number_of_elements: Field) -> [Field; N] {}\n\nunconstrained fn storage_read_oracle_wrapper<N>(_storage_slot: Field) -> [Field; N] {\n    storage_read_oracle(_storage_slot, N)\n}\n\npub fn storage_read<T, N>(storage_slot: Field, deserialize: fn ([Field; N]) -> T) -> T {\n    let fields = storage_read_oracle_wrapper(storage_slot);\n    deserialize(fields)\n}\n\n#[oracle(storageWrite)]\nfn storage_write_oracle<N>(_storage_slot: Field, _values: [Field; N]) -> [Field; N] {}\n\n// TODO: Remove return value.\nunconstrained pub fn storage_write<N>(storage_slot: Field, fields: [Field; N]) {\n    let _hash = storage_write_oracle(storage_slot, fields);\n}\n",
                "path": "/aztec/oracle/storage.nr"
            },
            "132": {
                "source": "use crate::types::point::Point;\nuse dep::protocol_types::constants::NUM_FIELDS_PER_SHA256;\n\n// TODO: Should take encrypted data.\n#[oracle(emitEncryptedLog)]\nfn emit_encrypted_log_oracle<N>(_contract_address: Field, _storage_slot: Field, _encryption_pub_key: Point, _preimage: [Field; N]) -> Field {}\n\nunconstrained pub fn emit_encrypted_log<N>(contract_address: Field, storage_slot: Field, encryption_pub_key: Point, preimage: [Field; N]) -> [Field; NUM_FIELDS_PER_SHA256] {\n    [emit_encrypted_log_oracle(contract_address, storage_slot, encryption_pub_key, preimage), 0]\n}\n\n#[oracle(emitUnencryptedLog)]\nfn emit_unencrypted_log_oracle<T>(_contract_address: Field, _event_selector: Field, _message: T) -> Field {}\n\nunconstrained pub fn emit_unencrypted_log<T>(contract_address: Field, event_selector: Field, message: T) -> [Field; NUM_FIELDS_PER_SHA256] {\n    // https://github.com/AztecProtocol/aztec-packages/issues/885\n    [emit_unencrypted_log_oracle(contract_address, event_selector, message), 0]\n}\n",
                "path": "/aztec/oracle/logs.nr"
            },
            "135": {
                "source": "use crate::utils::field_from_bytes;\n\nglobal SELECTOR_SIZE = 4;\n\npub fn compute_selector<N>(signature: str<N>) -> Field {\n    let bytes = signature.as_bytes();\n    let hash = dep::std::hash::keccak256(bytes, bytes.len() as u32);\n\n    let mut selector_be_bytes = [0; SELECTOR_SIZE];\n    for i in 0..SELECTOR_SIZE {\n        selector_be_bytes[i] = hash[i];\n    }\n\n    field_from_bytes(selector_be_bytes, true)\n}\n",
                "path": "/aztec/selector.nr"
            },
            "139": {
                "source": "use crate::context::{Context};\nuse crate::oracle::storage::storage_read;\nuse crate::oracle::storage::storage_write;\nuse crate::types::type_serialization::TypeSerializationInterface;\nuse dep::std::option::Option;\n\n// docs:start:public_state_struct\nstruct PublicState<T, T_SERIALIZED_LEN> {\n    context: Context,\n    storage_slot: Field,\n    serialization_methods: TypeSerializationInterface<T, T_SERIALIZED_LEN>,\n}\n// docs:end:public_state_struct\n\nimpl<T, T_SERIALIZED_LEN> PublicState<T, T_SERIALIZED_LEN> {\n    // docs:start:public_state_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field,\n        serialization_methods: TypeSerializationInterface<T, T_SERIALIZED_LEN>,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicState {\n            context,\n            storage_slot,\n            serialization_methods,\n        }\n    }\n    // docs:end:public_state_struct_new\n\n    // docs:start:public_state_struct_read\n    pub fn read(self) -> T {\n        assert(self.context.private.is_none(), \"Public state writes only supported in public functions\");\n        storage_read(self.storage_slot, self.serialization_methods.deserialize)\n    }\n    // docs:end:public_state_struct_read\n\n    // docs:start:public_state_struct_write\n    pub fn write(self, value: T) {\n        assert(self.context.private.is_none(), \"Public state writes only supported in public functions\");\n        let serialize = self.serialization_methods.serialize;\n        let fields = serialize(value);\n        storage_write(self.storage_slot, fields);\n    }\n    // docs:end:public_state_struct_write\n}\n",
                "path": "/aztec/state_vars/public_state.nr"
            },
            "145": {
                "source": "struct BoundedVec<T, MaxLen> {\n    storage: [T; MaxLen],\n    len: Field,\n}\n\nimpl<T, MaxLen> BoundedVec<T, MaxLen> {\n    pub fn new(initial_value: T) -> Self {\n        BoundedVec { storage: [initial_value; MaxLen], len: 0 }\n    }\n\n    pub fn get(mut self: Self, index: Field) -> T {\n        assert(index as u64 < self.len as u64);\n        self.storage[index]\n    }\n\n    pub fn get_unchecked(mut self: Self, index: Field) -> T {\n        self.storage[index]\n    }\n\n    pub fn push(&mut self, elem: T) {\n        assert(self.len as u64 < MaxLen as u64);\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    pub fn push_array<Len>(&mut self, array: [T; Len]) {\n        let newLen = self.len + array.len();\n        assert(newLen as u64 <= MaxLen as u64);\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = newLen;\n    }\n\n    pub fn pop(&mut self) -> T {\n        assert(self.len as u64 > 0);\n\n        let elem = self.storage[self.len - 1];\n        self.len -= 1;\n        elem\n    }\n\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        let mut exceeded_len = false;\n        for i in 0..MaxLen {\n            exceeded_len |= i == self.len;\n            if (!exceeded_len) {\n                ret |= predicate(self.storage[i]);\n            }\n        }\n        ret\n    }\n}\n\n#[test]\nfn test_vec_push_pop() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    assert(vec.len == 0);\n    vec.push(2);\n    assert(vec.len == 1);\n    vec.push(4);\n    assert(vec.len == 2);\n    vec.push(6);\n    assert(vec.len == 3);\n    let x = vec.pop();\n    assert(x == 6);\n    assert(vec.len == 2);\n    assert(vec.get(0) == 2);\n    assert(vec.get(1) == 4);\n}\n\n#[test]\nfn test_vec_push_array() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    vec.push_array([2, 4]);\n    assert(vec.len == 2);\n    assert(vec.get(0) == 2);\n    assert(vec.get(1) == 4);\n}\n\n#[test(should_fail)]\nfn test_vec_get_out_of_bound() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    vec.push_array([2, 4]);\n    let _x = vec.get(2);\n}\n\n#[test(should_fail)]\nfn test_vec_get_not_declared() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    vec.push_array([2]);\n    let _x = vec.get(1);\n}\n\n#[test(should_fail)]\nfn test_vec_get_uninitialized() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    let _x = vec.get(0);\n}\n\n#[test(should_fail)]\nfn test_vec_push_overflow() {\n    let mut vec: BoundedVec<Field, 1> = BoundedVec::new(0);\n    vec.push(1);\n    vec.push(2);\n}\n\n#[test]\nfn test_vec_any() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    vec.push_array([2, 4, 6]);\n    assert(vec.any(|v| v == 2) == true);\n    assert(vec.any(|v| v == 4) == true);\n    assert(vec.any(|v| v == 6) == true);\n    assert(vec.any(|v| v == 3) == false);\n}\n\n#[test]\nfn test_vec_any_not_default() {\n    let default_value = 1;\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(default_value);\n    vec.push_array([2, 4]);\n    assert(vec.any(|v| v == default_value) == false);\n}\n",
                "path": "/aztec/types/vec.nr"
            },
            "148": {
                "source": "use crate::types::type_serialization::TypeSerializationInterface;\n\n// docs:start:field_serialization\nglobal FIELD_SERIALIZED_LEN: Field = 1;\n\nfn deserializeField(fields: [Field; FIELD_SERIALIZED_LEN]) -> Field {\n    fields[0]\n}\n\nfn serializeField(value: Field) -> [Field; FIELD_SERIALIZED_LEN] {\n    [value]\n}\n\nglobal FieldSerializationMethods = TypeSerializationInterface {\n    deserialize: deserializeField,\n    serialize: serializeField,\n};\n// docs:end:field_serialization",
                "path": "/aztec/types/type_serialization/field_serialization.nr"
            },
            "151": {
                "source": "pub fn arr_copy_slice<T, N, M>(src: [T; N], mut dst: [T; M], offset: Field) -> [T; M] {\n    for i in 0..dst.len() {\n        dst[i] = src[i + offset];\n    }\n    dst\n}\n\npub fn field_from_bytes<N>(bytes: [u8; N], big_endian: bool) -> Field {\n    assert(bytes.len() as u32 < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        let mut index = i;\n        if big_endian {\n            index = N - i - 1;\n        }\n        as_field += (bytes[index] as Field) * offset;\n        offset *= 256;\n    }\n\n    as_field\n}\n\n// TODO(#3470): Copied over from https://github.com/AztecProtocol/aztec-packages/blob/a07c4bd47313be6aa604a63f37857eb0136b41ba/yarn-project/noir-protocol-circuits/src/crates/rollup-lib/src/base/base_rollup_inputs.nr#L599\n// move to a shared place?\n\n// TODO to radix returns u8, so we cannot use bigger radixes. It'd be ideal to use a radix of the maximum range-constrained integer noir supports\npub fn full_field_less_than(lhs: Field, rhs: Field) -> bool {\n    dep::std::eddsa::lt_bytes32(lhs, rhs)\n}\n\npub fn full_field_greater_than(lhs: Field, rhs: Field) -> bool {\n    dep::std::eddsa::lt_bytes32(rhs, lhs)\n}",
                "path": "/aztec/utils.nr"
            }
        }
    }
}
