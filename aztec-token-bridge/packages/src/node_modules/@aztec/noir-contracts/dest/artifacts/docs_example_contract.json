{
    "name": "DocsExample",
    "functions": [
        {
            "name": "add_common_cards",
            "functionType": "secret",
            "isInternal": false,
            "parameters": [
                {
                    "name": "secrets",
                    "type": {
                        "kind": "array",
                        "length": 4,
                        "type": {
                            "kind": "field"
                        }
                    },
                    "visibility": "private"
                }
            ],
            "returnTypes": [],
            "bytecode": "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",
            "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
        },
        {
            "name": "become_queen",
            "functionType": "secret",
            "isInternal": false,
            "parameters": [],
            "returnTypes": [],
            "bytecode": "",
            "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
        },
        {
            "name": "compute_note_hash_and_nullifier",
            "functionType": "unconstrained",
            "isInternal": false,
            "parameters": [
                {
                    "name": "contract_address",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                },
                {
                    "name": "nonce",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                },
                {
                    "name": "storage_slot",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                },
                {
                    "name": "serialized_note",
                    "type": {
                        "kind": "array",
                        "length": 0,
                        "type": {
                            "kind": "field"
                        }
                    },
                    "visibility": "private"
                }
            ],
            "returnTypes": [
                {
                    "kind": "array",
                    "length": 4,
                    "type": {
                        "kind": "field"
                    }
                }
            ],
            "bytecode": "H4sIAAAAAAAA/+1VQQ4CIQws7C5sheg/PGHiA/b/rxK0TSYsnuwejDZpgBaGYWggEpGjl03VZ9qb5jdpy2d2c3ZY5Uie/kt4ToY83YCng7po7VI9VI/VrxJn2tcOy1zEYlnbzEMsSn+Sts1ZjXUKwM0IswT7+ywM2sygkWqzDDQPA83jQPMVMC6Qp+5OzrKGbc92x7tWc914gz7D+Y6oh5Mt5rMekjFmw8igieqn3BPkE+iVjfVysKfi6hj5/bn+NleGGL5Bml8h5rtz4DuXAaN/I0w/T5INPGze7N2np/YAao7Tjj0JAAA=",
            "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
        },
        {
            "name": "constructor",
            "functionType": "secret",
            "isInternal": false,
            "parameters": [
                {
                    "name": "min_points",
                    "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                    },
                    "visibility": "private"
                },
                {
                    "name": "max_points",
                    "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                    },
                    "visibility": "private"
                },
                {
                    "name": "legendary_card_secret",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                }
            ],
            "returnTypes": [],
            "bytecode": "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",
            "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
        },
        {
            "name": "get_points_of_common_cards",
            "functionType": "secret",
            "isInternal": false,
            "parameters": [
                {
                    "name": "account",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                },
                {
                    "name": "offset",
                    "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 32
                    },
                    "visibility": "private"
                }
            ],
            "returnTypes": [],
            "bytecode": "",
            "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
        },
        {
            "name": "get_total_points",
            "functionType": "unconstrained",
            "isInternal": false,
            "parameters": [
                {
                    "name": "account",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                }
            ],
            "returnTypes": [
                {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 8
                }
            ],
            "bytecode": "",
            "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
        },
        {
            "name": "lock",
            "functionType": "open",
            "isInternal": false,
            "parameters": [],
            "returnTypes": [
                {
                    "kind": "struct",
                    "path": "aztec::abi::PublicCircuitPublicInputs",
                    "fields": [
                        {
                            "name": "call_context",
                            "type": {
                                "kind": "struct",
                                "path": "aztec::abi::CallContext",
                                "fields": [
                                    {
                                        "name": "msg_sender",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "storage_contract_address",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "portal_contract_address",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "function_selector",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "is_delegate_call",
                                        "type": {
                                            "kind": "boolean"
                                        }
                                    },
                                    {
                                        "name": "is_static_call",
                                        "type": {
                                            "kind": "boolean"
                                        }
                                    },
                                    {
                                        "name": "is_contract_deployment",
                                        "type": {
                                            "kind": "boolean"
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "name": "args_hash",
                            "type": {
                                "kind": "field"
                            }
                        },
                        {
                            "name": "return_values",
                            "type": {
                                "kind": "array",
                                "length": 4,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "contract_storage_update_requests",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "struct",
                                    "path": "aztec::abi::ContractStorageUpdateRequest",
                                    "fields": [
                                        {
                                            "name": "storage_slot",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "old_value",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "new_value",
                                            "type": {
                                                "kind": "field"
                                            }
                                        }
                                    ]
                                }
                            }
                        },
                        {
                            "name": "contract_storage_read",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "struct",
                                    "path": "aztec::abi::ContractStorageRead",
                                    "fields": [
                                        {
                                            "name": "storage_slot",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "value",
                                            "type": {
                                                "kind": "field"
                                            }
                                        }
                                    ]
                                }
                            }
                        },
                        {
                            "name": "public_call_stack",
                            "type": {
                                "kind": "array",
                                "length": 4,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "new_commitments",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "new_nullifiers",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "new_l2_to_l1_msgs",
                            "type": {
                                "kind": "array",
                                "length": 2,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "unencrypted_logs_hash",
                            "type": {
                                "kind": "array",
                                "length": 2,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "unencrypted_log_preimages_length",
                            "type": {
                                "kind": "field"
                            }
                        },
                        {
                            "name": "block_header",
                            "type": {
                                "kind": "struct",
                                "path": "aztec::abi::BlockHeader",
                                "fields": [
                                    {
                                        "name": "note_hash_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "nullifier_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "contract_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "l1_to_l2_messages_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "archive_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "public_data_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "global_variables_hash",
                                        "type": {
                                            "kind": "field"
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "name": "prover_address",
                            "type": {
                                "kind": "field"
                            }
                        }
                    ]
                }
            ],
            "bytecode": "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",
            "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
        },
        {
            "name": "replace_queen",
            "functionType": "open",
            "isInternal": false,
            "parameters": [
                {
                    "name": "account",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                },
                {
                    "name": "points",
                    "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                    },
                    "visibility": "private"
                }
            ],
            "returnTypes": [
                {
                    "kind": "struct",
                    "path": "aztec::abi::PublicCircuitPublicInputs",
                    "fields": [
                        {
                            "name": "call_context",
                            "type": {
                                "kind": "struct",
                                "path": "aztec::abi::CallContext",
                                "fields": [
                                    {
                                        "name": "msg_sender",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "storage_contract_address",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "portal_contract_address",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "function_selector",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "is_delegate_call",
                                        "type": {
                                            "kind": "boolean"
                                        }
                                    },
                                    {
                                        "name": "is_static_call",
                                        "type": {
                                            "kind": "boolean"
                                        }
                                    },
                                    {
                                        "name": "is_contract_deployment",
                                        "type": {
                                            "kind": "boolean"
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "name": "args_hash",
                            "type": {
                                "kind": "field"
                            }
                        },
                        {
                            "name": "return_values",
                            "type": {
                                "kind": "array",
                                "length": 4,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "contract_storage_update_requests",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "struct",
                                    "path": "aztec::abi::ContractStorageUpdateRequest",
                                    "fields": [
                                        {
                                            "name": "storage_slot",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "old_value",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "new_value",
                                            "type": {
                                                "kind": "field"
                                            }
                                        }
                                    ]
                                }
                            }
                        },
                        {
                            "name": "contract_storage_read",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "struct",
                                    "path": "aztec::abi::ContractStorageRead",
                                    "fields": [
                                        {
                                            "name": "storage_slot",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "value",
                                            "type": {
                                                "kind": "field"
                                            }
                                        }
                                    ]
                                }
                            }
                        },
                        {
                            "name": "public_call_stack",
                            "type": {
                                "kind": "array",
                                "length": 4,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "new_commitments",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "new_nullifiers",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "new_l2_to_l1_msgs",
                            "type": {
                                "kind": "array",
                                "length": 2,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "unencrypted_logs_hash",
                            "type": {
                                "kind": "array",
                                "length": 2,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "unencrypted_log_preimages_length",
                            "type": {
                                "kind": "field"
                            }
                        },
                        {
                            "name": "block_header",
                            "type": {
                                "kind": "struct",
                                "path": "aztec::abi::BlockHeader",
                                "fields": [
                                    {
                                        "name": "note_hash_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "nullifier_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "contract_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "l1_to_l2_messages_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "archive_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "public_data_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "global_variables_hash",
                                        "type": {
                                            "kind": "field"
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "name": "prover_address",
                            "type": {
                                "kind": "field"
                            }
                        }
                    ]
                }
            ],
            "bytecode": "",
            "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
        },
        {
            "name": "replace_queen_unsafe",
            "functionType": "open",
            "isInternal": false,
            "parameters": [],
            "returnTypes": [
                {
                    "kind": "struct",
                    "path": "aztec::abi::PublicCircuitPublicInputs",
                    "fields": [
                        {
                            "name": "call_context",
                            "type": {
                                "kind": "struct",
                                "path": "aztec::abi::CallContext",
                                "fields": [
                                    {
                                        "name": "msg_sender",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "storage_contract_address",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "portal_contract_address",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "function_selector",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "is_delegate_call",
                                        "type": {
                                            "kind": "boolean"
                                        }
                                    },
                                    {
                                        "name": "is_static_call",
                                        "type": {
                                            "kind": "boolean"
                                        }
                                    },
                                    {
                                        "name": "is_contract_deployment",
                                        "type": {
                                            "kind": "boolean"
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "name": "args_hash",
                            "type": {
                                "kind": "field"
                            }
                        },
                        {
                            "name": "return_values",
                            "type": {
                                "kind": "array",
                                "length": 4,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "contract_storage_update_requests",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "struct",
                                    "path": "aztec::abi::ContractStorageUpdateRequest",
                                    "fields": [
                                        {
                                            "name": "storage_slot",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "old_value",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "new_value",
                                            "type": {
                                                "kind": "field"
                                            }
                                        }
                                    ]
                                }
                            }
                        },
                        {
                            "name": "contract_storage_read",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "struct",
                                    "path": "aztec::abi::ContractStorageRead",
                                    "fields": [
                                        {
                                            "name": "storage_slot",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "value",
                                            "type": {
                                                "kind": "field"
                                            }
                                        }
                                    ]
                                }
                            }
                        },
                        {
                            "name": "public_call_stack",
                            "type": {
                                "kind": "array",
                                "length": 4,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "new_commitments",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "new_nullifiers",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "new_l2_to_l1_msgs",
                            "type": {
                                "kind": "array",
                                "length": 2,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "unencrypted_logs_hash",
                            "type": {
                                "kind": "array",
                                "length": 2,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "unencrypted_log_preimages_length",
                            "type": {
                                "kind": "field"
                            }
                        },
                        {
                            "name": "block_header",
                            "type": {
                                "kind": "struct",
                                "path": "aztec::abi::BlockHeader",
                                "fields": [
                                    {
                                        "name": "note_hash_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "nullifier_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "contract_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "l1_to_l2_messages_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "archive_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "public_data_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "global_variables_hash",
                                        "type": {
                                            "kind": "field"
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "name": "prover_address",
                            "type": {
                                "kind": "field"
                            }
                        }
                    ]
                }
            ],
            "bytecode": "",
            "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
        },
        {
            "name": "send_to_l1",
            "functionType": "secret",
            "isInternal": false,
            "parameters": [],
            "returnTypes": [],
            "bytecode": "H4sIAAAAAAAA/+XdZZOTZxSH8V0gSd27uLu1ySbZJFVK3alSL6Rk6y1V6qXU3XB390/IuWbCwAt4xb0z3HNl5j9590x+m+yj5z7nZE9Pz7aeM6/e7vuC7nv5wl6VQmyjcI7tVssDtVqn0d+pVCtLy/2tdrNertXbA81Ks1Jv1pf1N6vVTrPWbLTarUa5ValVO5XBeqs62N1wId1nLA+FuxjbKA6Bu3iRu0uxjdIQuEuJ3ef7vV/o5xw5RJ9zWOLvqTeheVQm5mEJzaMzMQ9PaB6TiXlEQvPYTMyFhOZxmZiLCc3jMzGXEponZGIemdA8UWieJDRPFpqnCM1TheZpQvN0oXmG0DxTaJ4lNM8WmucIzXOF5nlC83yh+Sah+WahuSw0V4TmfqG5KjTXhOa60DwgNDeE5qbQ3BKabxGabxWabxOabxea7xCa7xSaFwjNdwnNC4Xmu4Xme4Tme4Xm+4Tm+4XmB4TmB4Xmh4Tmh4XmR4TmR4Xmx4Tmx4XmRULzE0Lzk0LzU0Lz00LzM0Lzs0LzYqH5OaH5eaH5BaH5RaH5JaH5ZaH5FaH5VaF5idC8VGhuC82vCc3LhOaO0DwoNL8uNL8hNL8pNL8lNL8tNL8jNL8rNL8nNL8vNC8Xmj8Qmj8Umj8Smj8Wmj8Rmj8VmlcIzZ8JzZ8LzV8IzV8KzV8JzV8Lzd8Izd8KzSuF5u+E5lVC8/dC8w9C849C809C889C8y9C869C829C8+9C8x9C859C819C899C8z9C879C839C8/9C82qheY3QvFZoXic0rxeaNwjNG4XmTULzZqF5i9C8VWjeJjRvF5p3CM07heZdmZgvSWjenYn50oTmPZmYL0to3puJ+fKE5n2ZmK9IaN6fifnKhOYDmZivSmg+mIn56oTmQ5mYr0loPpyJ+dqE5iOZmK9LaD6aifn6hOZjmZhvSGg+non5xoTmE5mY+xKaTyY093W309s1D4+MiBQixUgpwjUh10hcM3AOzTkl51icc3AM5pjEPpp9Fv/D/Kb5jvvO+ntu6r6PioyOjImMjYyLjI9MiEyMTIpMjkyJTI1Mi0yPzIjMjMyKzI7MicyNzIvMjzDjnpnvfInMBGdGNjOjmaHMTGFm7DYizGBlJikzOplZyQxHZhoy4+/0zDtmoi2MMDOLGVLMVGLGEDN3mEHDTBZmlDCzgxkWzHRgxgE9/xdF6AlPj3R6htNDm57S9FheHKEHLz1p6dFKz1J6eNLTkh6P9DxcEqEnXjtCzzR6iNFTix5T9FyiBxE9eehRQ88WepjQ04MeF/R8WB6hJwBr5Fkzzhpq1hSzxnZFhDWYrElkjR5r1ljDxZom1viw5mVlhDURqyLUzFNDTk01NcbU3FKDSk0mNYrU7FHDRk0XNU7U/FADQ00INRLUDPAMnWfKPGPlmSPP4HgmxTMafhPcw+eeNvd4uee5PcI9Me4Rcc+EewhcU3ONyTUX1yCck3OOyjkb5zAc0znGsc9nH8g+gf+R069TXMw0LzyaAAA=",
            "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
        },
        {
            "name": "simple_macro_example",
            "functionType": "secret",
            "isInternal": false,
            "parameters": [
                {
                    "name": "a",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                },
                {
                    "name": "b",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                }
            ],
            "returnTypes": [],
            "bytecode": "H4sIAAAAAAAA/+XdZXMTXRjG8ZSS5PGHR9uixa1ANtImaHF3dwikuLu7u7sVd4dvx3D/Z5YBZuBVT2c4c+3MNftuJ79NsnrOfb+PRCK1kc9LUbiuDteJui1B1LYR/cZ2U4nKdLpQlSwEqWBuIpnLZzOJdCZfmQ2yQSabmZ/MplKFbDpblcvnqhK5IJ0qBDWZXKom3HDU3WdM1Ic7ZtuI1YM79oO747aNeD24447d3/u91/Vzljn8nEXhviwPt1di+WApDddlYusKS+PwO2O/NAr3S+Mf4HM1iXy9FIfr6nCdqNsSlDjcVmnE3e+9aaR+/pcNHO+/IofmZp6YGzg0N/fEXOzQ3MITc0OH5nJPzFGH5paemGMOza08Mccdmlt7Ym7i0NzGE3NTh+a2npjLHJrbCZrbC5o7CJo7Cpo7CZo7C5orBM1dBM1dBc3dBM0JQXMgaE4KmlOC5rSgOSNorhQ0Vwmas4LmnKC5u6C5h6C5p6C5l6C5t6C5j6C5WtDcV9DcT9DcX9A8QNA8UNA8SNA8WNA8RNA8VNA8TNA8XNA8QtA8UtA8StA8WtA8RtA8VtA8TtA8XtA8QdA8UdA8SdA8WdA8RdA8VdA8TdA8XdA8Q9A8U9A8S9A8W9A8R9A8V9CcFzTPEzTPFzQXBM01guYFguaFguZFgubFguYlgualguZlgublguYVguaVguZVgubVguY1gua1guZ1gub1guYNguaNguZNgubNguYtguatguZtgubtguYdguadguZdgubdguY9gua9guZ9gub9guYDguaDguZDgubDguYjguajguZjgubjguYTguaTguZTgubTguYzguazguZzgubzguYLguaLguZLgubLguYrguarguZrgubrguYbguabguZbguZaQfNtQfMdQfNdQfM9QfN9QfMDT8w/OTQ/9MT8s0PzI0/Mvzg0P/bE/KtD8xNPzL85ND/1xPy7Q/MzT8x/ODQ/98T8p0PzC0/MjRyaX3pi/suh+ZUn5r8dml97Yv7HofmNJ+Z/HZrfemL+z6H5nSfm/x2a3zs0l4bbKQrNxZaGlqglZolbuCfkHol7Bq6huabkGotrDs7BnJM4RnPM4j/Mb5rvGHOJpfSL/XolXDezNLe0sJRbWlpaWVpb2ljaWtpZ2ls6WDpaOlk6WyosXSxdLd3YB5bAkmTfWuj9Ti90eoPTK5ve0TkLvYXptUvvWXqx0pv0U69Oejn2s9Drj9539IKjNxq9wuidRS8peivRa4jeO/SioTcLvUrGWOhlQW8Heh1Q+59a+NSGp1Y6tcOnWqgtTa1lag9Ti5fatNRqnWOhlmfeQq1Hah9SC5DaeNSKo3YatcSorUWtKWovUYuI2jzUqllpoZYJtT2odUHtB2ohUBuAufLMHd9kYW4xc22Ze8pcTOYmMldvp4W5XLstzPVh7gtzQZgbwVwBxs4zlpyx1Yw1ZuwtY1EZm8lYxZMWxrIxtouxToz9YSwMY0MYK8HYAd6l826Z7593j7yL490U72puWniWX2vhWS/PPnkWyLMxnhXx7IRnCdxbc6/JvRf3Ilybc63KtRvXMpzbOddx7OdYyLGB/8qn5SNuYNBhNJ0AAA==",
            "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
        },
        {
            "name": "simple_macro_example_expanded",
            "functionType": "secret",
            "isInternal": false,
            "parameters": [
                {
                    "name": "a",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                },
                {
                    "name": "b",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                }
            ],
            "returnTypes": [],
            "bytecode": "H4sIAAAAAAAA/+XdZXMTXRjG8ZSS5PGHR9uixa1ANtImaHF3dwikuLu7u7sVd4dvx3D/Z5YBZuBVT2c4c+3MNftuJ79NsnrOfb+PRCK1kc9LUbiuDteJui1B1LYR/cZ2U4nKdLpQlSwEqWBuIpnLZzOJdCZfmQ2yQSabmZ/MplKFbDpblcvnqhK5IJ0qBDWZXKom3HDU3WdM1Ic7ZtuI1YM79oO747aNeD24447d3/u91/Vzljn8nEXhviwPt1di+WApDddlYusKS+PwO2O/NAr3S+Mf4HM1iXy9FIfr6nCdqNsSlDjcVmnE3e+9aaR+/pcNHO+/IofmZp6YGzg0N/fEXOzQ3MITc0OH5nJPzFGH5paemGMOza08Mccdmlt7Ym7i0NzGE3NTh+a2npjLHJrbCZrbC5o7CJo7Cpo7CZo7C5orBM1dBM1dBc3dBM0JQXMgaE4KmlOC5rSgOSNorhQ0Vwmas4LmnKC5u6C5h6C5p6C5l6C5t6C5j6C5WtDcV9DcT9DcX9A8QNA8UNA8SNA8WNA8RNA8VNA8TNA8XNA8QtA8UtA8StA8WtA8RtA8VtA8TtA8XtA8QdA8UdA8SdA8WdA8RdA8VdA8TdA8XdA8Q9A8U9A8S9A8W9A8R9A8V9CcFzTPEzTPFzQXBM01guYFguaFguZFgubFguYlgualguZlgublguYVguaVguZVgubVguY1gua1guZ1gub1guYNguaNguZNgubNguYtguatguZtgubtguYdguadguZdgubdguY9gua9guZ9gub9guYDguaDguZDgubDguYjguajguZjgubjguYTguaTguZTgubTguYzguazguZzgubzguYLguaLguZLgubLguYrguarguZrgubrguYbguabguZbguZaQfNtQfMdQfNdQfM9QfN9QfMDT8w/OTQ/9MT8s0PzI0/Mvzg0P/bE/KtD8xNPzL85ND/1xPy7Q/MzT8x/ODQ/98T8p0PzC0/MjRyaX3pi/suh+ZUn5r8dml97Yv7HofmNJ+Z/HZrfemL+z6H5nSfm/x2a3zs0l4bbKQrNxZaGlqglZolbuCfkHol7Bq6huabkGotrDs7BnJM4RnPM4j/Mb5rvGHOJpfSL/XolXDezNLe0sJRbWlpaWVpb2ljaWtpZ2ls6WDpaOlk6WyosXSxdLd3YB5bAkmTfWuj9Ti90eoPTK5ve0TkLvYXptUvvWXqx0pv0U69Oejn2s9Drj9539IKjNxq9wuidRS8peivRa4jeO/SioTcLvUrGWOhlQW8Heh1Q+59a+NSGp1Y6tcOnWqgtTa1lag9Ti5fatNRqnWOhlmfeQq1Hah9SC5DaeNSKo3YatcSorUWtKWovUYuI2jzUqllpoZYJtT2odUHtB2ohUBuAufLMHd9kYW4xc22Ze8pcTOYmMldvp4W5XLstzPVh7gtzQZgbwVwBxs4zlpyx1Yw1ZuwtY1EZm8lYxZMWxrIxtouxToz9YSwMY0MYK8HYAd6l826Z7593j7yL490U72puWniWX2vhWS/PPnkWyLMxnhXx7IRnCdxbc6/JvRf3Ilybc63KtRvXMpzbOddx7OdYyLGB/8qn5SNuYNBhNJ0AAA==",
            "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
        },
        {
            "name": "unlock",
            "functionType": "open",
            "isInternal": false,
            "parameters": [],
            "returnTypes": [
                {
                    "kind": "struct",
                    "path": "aztec::abi::PublicCircuitPublicInputs",
                    "fields": [
                        {
                            "name": "call_context",
                            "type": {
                                "kind": "struct",
                                "path": "aztec::abi::CallContext",
                                "fields": [
                                    {
                                        "name": "msg_sender",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "storage_contract_address",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "portal_contract_address",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "function_selector",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "is_delegate_call",
                                        "type": {
                                            "kind": "boolean"
                                        }
                                    },
                                    {
                                        "name": "is_static_call",
                                        "type": {
                                            "kind": "boolean"
                                        }
                                    },
                                    {
                                        "name": "is_contract_deployment",
                                        "type": {
                                            "kind": "boolean"
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "name": "args_hash",
                            "type": {
                                "kind": "field"
                            }
                        },
                        {
                            "name": "return_values",
                            "type": {
                                "kind": "array",
                                "length": 4,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "contract_storage_update_requests",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "struct",
                                    "path": "aztec::abi::ContractStorageUpdateRequest",
                                    "fields": [
                                        {
                                            "name": "storage_slot",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "old_value",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "new_value",
                                            "type": {
                                                "kind": "field"
                                            }
                                        }
                                    ]
                                }
                            }
                        },
                        {
                            "name": "contract_storage_read",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "struct",
                                    "path": "aztec::abi::ContractStorageRead",
                                    "fields": [
                                        {
                                            "name": "storage_slot",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "value",
                                            "type": {
                                                "kind": "field"
                                            }
                                        }
                                    ]
                                }
                            }
                        },
                        {
                            "name": "public_call_stack",
                            "type": {
                                "kind": "array",
                                "length": 4,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "new_commitments",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "new_nullifiers",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "new_l2_to_l1_msgs",
                            "type": {
                                "kind": "array",
                                "length": 2,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "unencrypted_logs_hash",
                            "type": {
                                "kind": "array",
                                "length": 2,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "unencrypted_log_preimages_length",
                            "type": {
                                "kind": "field"
                            }
                        },
                        {
                            "name": "block_header",
                            "type": {
                                "kind": "struct",
                                "path": "aztec::abi::BlockHeader",
                                "fields": [
                                    {
                                        "name": "note_hash_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "nullifier_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "contract_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "l1_to_l2_messages_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "archive_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "public_data_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "global_variables_hash",
                                        "type": {
                                            "kind": "field"
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "name": "prover_address",
                            "type": {
                                "kind": "field"
                            }
                        }
                    ]
                }
            ],
            "bytecode": "H4sIAAAAAAAA/+3dCXQV1RkH8LwkJExeSCAEEhKysO8QwiprEFdcUREQZBUQZF9EQEREdhAUZF/qvu9LtWq1arVqtWq1arVqtWq1arXue7877376Z5iTwz3ce5x38s05//Nmvnlz7+/OnRnykmj2pqSkxFISSxolL2X/hfdX6deKg1s6x+y1VeHSmZokzrQkcaYnibNWkjgzksSZmSTO2kni9JLEmZUkzniSOLOTxFknSZw5SeLMTRJn3SRx1ksSZ55FZyNw1tev+fq1gX5tqF8L9GuhfuVji/QY0/V2MaUxpYRSqvfxCSmjlFOaUJpSmlGaU1pQWlJaUVpT2lDaUtpR2lM6UDpSOum2OlMqKV0oXSndKN0pPSg9KYdQelF6U/pQ+lL6UfrrczeAcihlIOUwyuGUIyhHUo6iHE0ZRDmGcizlOMrxeizleiwnUE6kDKacRDmZcgplCOVUylDKMMpwymmUEZSRlNMpoyijKWMoYynjKOMpZ1AmUCZSJlHOpEymTKGcRZlKmUaZHjjnMygzKbMos/W+unrfHMpcyjzK2ZT5lHMoCygLKYso51IWU86jLKGcT1lKuSDQ1jLKhZTllBWUlZRVlNWUNZS1lHWU9ZSLKBsoGykXUy7RbaXqtjZRNgdql1K26PWt+nWbft2uX3fo1536dZd+3a1f9+jXvZRmXmJdvQQ/w6oaX/MxqPH1nwo1vhfSoMb3RTrU+B6pBTW+XzKgxvdOJtSK9HptqBXDOr821utZUCvR63Goler1bKiV6fU6UCvX6zlQa6LXc6HWVK/XhVozvV4vZd8xqqVKv1Yc5KLatPwMrVB2nt88GA/Pb32o8fzmQ43ntwHUeOwNocbzWwA1nt9CqPH8NoIaz28R1Hh+8brg+W0MNZ7fEqjx/JZCjee3DGo8v+VQ4/ltAjU+b02hxueNrwt1ngbAfl7w3sLvM3GN9+O9lQZtco33473F+/He4v14b+F+fuX9eG/xfryPeD/eMzw3eH/wMXiN8dzg9cTt4LXDc4PXCbeN1wTPDV4T3B9eEzw3eE2wAa8JvqbxmmBXOdT4msZrgq18TahxZcDxVfq14uCWzujkJRbYroJ17j8D3JYsFXGwFEA/jez20wXP74GMuRFYii2PGf+9OhBLMVga27X43+8qsdumP6d8rvFe437w3/RSy+OJQT/cLm9zX3Go4X1fGuIrs+urjEE/3C5vl4GPa/gM4ucN3yfq+T0crFF5TuA9nQq+Qge+AgNfIfj4uDTwFTnwNTLwFYGPj8N/o23f+/g18oH4GoOPj6sFPtv3Mj4zDsQXdn9nwGu5A1+Zga8cfHxcJviaOvA1MfA1BR8fVxt8zR34mhn4moOPj/PA19KBr4WBryX4+Lgs8LV24Gtl4GsNvlawzr62DnxtDHxtwcTHZYOvvQNfOwNfe/DxcXXA19GBr4OBryP4+Lgc8FU48HUy8FWAj4/LBV+lA19nA18l+Pi4uuDr6sDXxcDXFXx8HH7vqLsDXzcDX3fw8XF54OvpwNfDwNcTfHxcffD1cuA7xMDXC3x8XD74+tj1VSpfbwNfH7D0t2vpqix9DSz9wdLPrmWf3wGx1Kb/fdgBlttUbRwK56RvoP047B8A5+tQy+cLf/eM2+Vt9Im1ZluVpXfAib930zsCPq71c2jxAha1VPesC/PhXB5m1+f/uzDQwHcYWI60aunif6/0cAPLkWA5wqol8e/CUXbb9J/hR4Ofx8r9xGE/zvnRlscWgz65Xd5Gn1jFKlaxilWsYhWrWMUqVrGKVaxiFatYxSpWsYpVrGIVq1jFKlaxilWsYrVvVZaBAacH7xsYAR/XjnBo8QIWtcQC21WwHubDuTzGrs//nZpBBr5jwHK8VUul/zs1xxpYjgfLcVYtid+pOcFum/7v1JwIfh4r9xOH/TjnJ1oeWwz65HZ5G31iFatYxSpWsYpVrGIVq1jFKlaxilWsYhWrWMWaLFZlGRRwevC+QRHwce04hxYvYFFLdd9nD/PhXJ5k1+f/TGKwge8ksAyxa/H//w8nG1iGgOUUuxb/ZxKn2m2zQrUxFPw8Vu4nDvtxzodaHlsM+uR2eRt9Yq3ZVmUZHHB68L7BEfBx7RSHFi9gUUt1z6UwH87lcLs+/xk+zMCH/7/QkVYtnf2fK59mYBkJlhFWLYln+Ol22/Sf4aPAz2PlfuKwH+d8lOWxxaBPbpe30SdWsYpVrGIVq1jFKtaabVWWYQGnB+8bFgEf10Y4tHgBi1qq+5wS5sO5HGPX53+mG23gGwOW8VYtic90Yw0s48Eyzqol8ZnuDLtt+p/pJoCfx8r9xGE/zvkEy2OLQZ/cLm+jT6xiFatYxSpWsYpVrDXbqiyjA04P3jc6Aj6ujXNo8QIWtVT3OSXMh3M5ya7P/0w30cA3CSxTHFjONLBMActkuxb/M91Zdtv0P9NNBT+PlfuJw36c86mWxxaDPrld3kZfsliVZWLA6cH7JkbAx7XJDi1ewKKW6u6fMB/O5XS7Pv/+nmbgmw6WWQ4sMwwss8Ay067Ff9bMttum/6yZA34eK/cTh/0453Msjy0GfXK7vI2+ZLEqy7SA04P3TYuAj2szHVq8gEUt1d0/YT6cy3kOfHMNfPPANzfEN9+B72wD33zw8XEe+BY48J1j4FsAPj4O/8boIge+hQa+ReBbCOvsW+zAd66BbzGY+Lhs8C1x4DvPwLcEfHwc/o3RpQ585xv4loKPj8O/MbrMge8CA98y8PFxueBb7sB3oYFvOfj4OHz+rXTgW2HgWwm+FSG+1Q58qwx8q8G3KsS31oFvjYFvLfjWhPjWO/CtM/CtB9+6EN8GB76LDHwbwLLRrqUiDpaN0M8lDsZ8ccqBj5n7j8Nx6NvswLfJwLcZfJtCfFsc+C418G0BHx+H1/Q2B76tBr5t4Nsa4tvhwLfdwLcDfNtDfLsc+HYa+HaBb2eIb48D324D3x7w7Q7x/caBb6+B7zfg2xviu9yB7zID3+XguyzEd6UD3xUGvivBd0WI72oHvqsMfFeD76oQ37UOfNcY+K4F3zUhvusd+K4z8F0PvutCfDc68N1g4LsRfDeE+G524LvJwHcz+G4K8d3qwHeLge9W8N0S4rvdge82A9/t4LstxHenA98dBr47wXdHiO9uuz7/ZwZ3GfjuBsu9di3+f5f+WwPLvWC5x67F//nF7+y26f/84j7w81i5nzjsxzm/z/LYYtAnt8vb6BNrzbYqy10BpwfvuysCPq7d49DiBSxqqe65FObDuXzArs9/ht9v4HsALA9ZtST+f+e/N7A8BJYHrVoSz/A/2G3Tf4Y/DH4eK/cTh/045w9bHlsM+uR2eRt9YhWrWMUqVrGKVaxiFatYxSpWsYpVrGIVq1jFmixWZbk/4PTgffdHwMe1Bx1avIBFLbHAdhWsh/lwLh+16/N/JvGIge9RsDxu1ZL4mcQfDSyPg+Uxq5bEzyT+ZLdN/2cST4Cfx8r9xGE/zvkTlscWgz65Xd5Gn1jFKlaxilWsYhWrWMUqVrGKVaxiFatYxSpWsSaLVVkeCTg9eN8jEfBx7TGHFi9gUUt132cP8+FcPmXX5/9M4kkD31NgecaqJfG3Hv5sYHkGLE9btSR+JvEXu236P5N4Fvw8Vu4nDvtxzp+1PLYY9Mnt8jb6xCpWsYpVrGIVq1jFWrOtyvJkwOnB+56MgI9rTzu0eAGLWqr7nBLmw7l83q7P/0z3nIHvebC8aNWS+Ez3VwPLi2B5waol8Znub3bbrFBtvAR+Hiv3E4f9OOcvWR5bDPrkdnkbfWIVq1jFKlaxilWsYq3ZVmV5LuD04H3PRcDHtRccWryARS3VfU4J8+FcvmLX53+me9nA9wpYXrNqSXym+7uB5TWwvGrVkvhM9w+7bfqf6V4HP4+V+4nDfpzz1y2PLQZ9cru8jT6xilWsYhWrWMUqVrHWbKuyvBxwevC+lyPg49qrDi1ewKKW6j6nhPlwLt+06/M/071h4HsTLG/btfh/Z+CfBpa3wfKWXYv/me5fdtv0P9O9A34eK/cTh/045+9YHlsM+uR2eRt9Yq3ZVmV5I+D04H1vRMDHtbccWryARS3VPZfCfDiX79n1+c/wdw1874HlA7sW/xn+bwPLB2B5367Ff4b/x26b/jP8Q/DzWLmfOOzHOf/Q8thi0Ce3y9voE2vNtirLuwGnB+97NwI+rr3v0OIFLGqp7rkU5sO5/Niuz3+Gf2Tg+xgsnzqw/NfA8ilYPrFr8Z/h/7Pbpv8M/wz8PFbuJw77cc4/szy2GPTJ7fI2+pLFqiwfBZwevO+jCPi49olDixewqKW6+yfMh3P5hQPf5wa+L8D3eYjvKwe+Lw18X4HvyxDfNw58Xxv4vgHf1yG+7xz4vjXwfQe+b0N8PzjwfW/g+wF834f4fnLg+9HA9xP4fgzxxWL2fUFQdT7uPw5vRF+qZZ9qs5aDMacZjJn7V5Z0B+PLsNum/zVJJgyIx5oBc5cZMneZlscWgz65Xd7OxOtIL6lgyXBgwaUK1jNCLLkRsmRHyOJFyJIRIUtahCx1ImTJipAlM0KW9AhZ8iNkyYmQJR4hS+0IWWpFyBL7lS1eyv5fO3qwPxXex1/zpEGttl5Ph1pqSB/870sm1PgZwm2oeSn29m8bz5GLr/GwnyrY5r6ywFA79utbakXIUjtClniELDkRsuRHyJIeIUtmhCxZEbLUiZAlLUKWjAhZvAhZsiNkyY2QJTXE4tm1dMWvy3gJbO7zdZ8HFttfb6o2s+y2WaHajFtuU7WRDSfp5znTr3HYH4fzle3gOsqK7TtPvI0+sdZsq+q3jtV+u/j/zWiWwXOjjsNzoNrMcXCP58KAeKw5ML+5IfOb62B+cwLzy9voE6tYxSpWsYpVrGIVq1jFKlaxilWsYhWrWMUqVrGKVaxiFatYxSpWsYpVrPatqt+6Vvut9H/nAvtVS2Dz575SoH8X50C1Wc9um/7vXOTBgHis9WB+80LmN8/B/NYLzC9vo0+sYhWrWMUqVrGKVaxiFatYxSpWsYpVrGIVq1iTxar6rW+3X/+/L8Z+1RLY3Od71vUdngPVZr7dNv3vWTeAAfFY82F+G4TMbwMH85sfmF/eRp9Ya7ZV9dvQar+Jvx+bb3CPN3R4DlSbBQ7u8UIYEI+1AOa3MGR+Cx3Mb0FgfnkbfWIVq1jFKlaxilWsYq3ZVtVvI6v9Jr7mx37VEtjc52v+Rg7PgWqzyG6b/tf8xTAgHmsRzG9xyPwWO5jfosD88jb6xCpWsYpVrGIVq1jFWrOtqt/Gdvv1/5Yp9quWwOY+X/M3dngOVJsldtv0v+YvhQHxWEtgfktD5rfUwfyWBOaXt9GXLFbVb5mDa7HE4Fosc3gOVJvlDq7FJjAgHms5zG+TkPlt4mB+ywPzy9voSxarB7XUlF9qvD8Nak11LR1qzXStFtSaw5i41kLXMqHWUtdqQ62VruVDrTUfC+Y23AfU2ur1LKi10+vZUGuv13Og1kGv50Kto16vB7VOej0PahVshlpnvd4AapV6vQBqXfR6IdS6Bv4dVbVugX/PVK174Bmnaj0CzxpV6xm41lTtEFjn1158/qDWG65ZrvXhcwq1vrpWB2r9+DxDrT+fZ6hVhfj4WiyHGl+LeO3ytdgUanwtNoMaX4vNocbXYguo8bXYEmp8jlpBjc9Ra6jxOWoDNT5HbaHG56gd1PgctYcan6MOUKurax2hVk/XOkEtT9cqoFZf1zpDje+zSqg10LUuUGuoa12hVqBr3aBWqGvdodZI13pArUjXekKtWNfw2mysa72gVqJrvaFWqmt9oFama33xWadr/aDWRNf6Q62prlXBc0tdQ3xtVenXioNb/Knga5jb5W38u2qZlvvF+4SXWGC7Ctb3+VuJli3qnuP7ZM7cGbPHTpowdPbkuRNi4KoVMKaCLRX2pQXel5my/7iswfOgs1TdebrG8qSpwfEDw/8jCCmJB4C64dUNrm5odQPngW+9flU3rLpB1Q2pbkB1w6kbTN1Q6gZSN4y6QdQNoW4AdcGXpyQuaHUBN6M0p7SgtKS0orSmtKG0pbSjtKd0oHSkdFLnhNKZUknpQulK6UbpTulB6Uk5hNKL0pvSh9KX0o/SX5/bAZRDKQMph1EOpxxBOZJyFOVoyiDKMZRjKcdRjqecQDmRMphyEuVkyimUIZRTKUMpwyjDKadRRlBGUk6njKKMpoyhjKWMo4ynnEGZQJlImUQ5kzKZMoVyFmUqZRplOmUGZSZlFmU2ZQ5lLmUe5WzKfMo5lAWUhZRFlHMpiynnUZZQzqcspVxAWUa5kLKcsoKykrKKspqyhrKWsi4lMd8XUTZQNlIuplxC2UTZTLmUsoWylbKNsp2yg7KTsouym7KHsjfll+X/58ufUiWVAQA=",
            "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
        },
        {
            "name": "update_legendary_card",
            "functionType": "secret",
            "isInternal": false,
            "parameters": [
                {
                    "name": "new_points",
                    "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                    },
                    "visibility": "private"
                },
                {
                    "name": "new_secret",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                }
            ],
            "returnTypes": [],
            "bytecode": "",
            "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
        }
    ],
    "events": [],
    "debug": {
        "debugSymbols": [
            "eJztmt1u4jAQhd8l1wjZM/7lVVZ7gbatVKmiq4U7xLvXbrGTlll7bdAyhVy1SOdEk5MvyRnBfnh5/bXePb9utsNqP+Cw+rEftr/Xm/hpu1v/2Q0rsRgeNw/h72ExPD2/PA4reVicqKRCY47K8L9zWe2BkmuQMsk1mIrcW5vEAvSo1Yefi0F9y6n1f5walc5TK6HPmNpQU2uDaRxtHBZnRyVSgqjAj1qN1OiALp+oGM8zfCDU1qf8HJpRKyyh1Q6OWjMJREpFaAFtEgP6yZG1IWeWOW0EW1EX07a3kraROW0DtbRzIgiT+0BSMxTTc3N6Z6TnOafnlciTC/spvjC6FN9ldgkns0vOswfmMKmlgwq3YE2aBALvteemFxlHj1hRh1mPYmUmRwZ8DxHmEP8lRO3ToY3Sn0Ik5hD5HejHPDwlLT5XJFky52tz8tDXaWzj7AngZOe9jxDzsUMXh4oa8lsW7eQcBbyHSFZwLiHeXJmVN7M7XKWPSdbLQKWQsa7ilULGugjzeV8VCxmwbuR8QrxGIYN54zi/kMEdbxwXK2TAejW4uUIGrJcI9oUMWK8P5UIGrLt4uZAB6yLM531VLmSsGzmfEK9SyOaN4/xChne8cVyskCHr1eDmChmyXiLYFzJkvT6UCxmy7uLlQoasizCf91WxkCHrRs4nxGsUMpw3jgsUsjveOC5WyPzyL1+f+3SZjJyMo/TRRL9dKibysa7G6zU1ofj48cqSvFXApUuB6L6CEUwkGjUTuSXVTPRPg6ousgeXXWpJf2OHLtVFBfj1+kYXGUbVRaahnMg31+SGxA+X7YEputppiq4OnHwPTr4HJ9+Dk+/CyffgBNCDU3S14xRd7TiB7sEputpxiq52nMB24BRM7TgFUztOwdSBU3S144SiB6foascputpxQuzBKbracYqudpxQd+AUTO04BVM7TsHUgVN0deDkunByXTi5dpwOhzcHYLmk",
            "",
            "eJyrVsrJT04syczPK1ayqq6tBQAz9wY7",
            "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",
            "",
            "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ms5r13Reu6bz2jWd167pvHZN57VrOq9d03ntms5r13Reu6bz2jWd167pvHZN57VrOq9d03ntms5r13Reu6bz2jWd167pvHZN57VrOq9d03ntms5r13Reu6bz2jWd167pvHZN57VrOq9d03ntms5r13Reu6bz2jWd167pvHZN57VrOq9d03ntms5r13Reu6bz2jWd167pvHZN57VrOq9d03ntms5r13Reu6bz2jWd167pvMZHE3odo1i27DGKZc0eo1j27DGKZdEeo1g27TGKZdUeo1h27TGKZdkeo3i2rSb5OkbxbFtN9HWM4tm2muzrGMWzbTXh1zGKZ9tq0q9jFM+21cRfxyiebavJv45RPNtWE4Ado3i2rSYBO0bxbFtNBHaM4tm2mgzsGMWzbTUh2DGKZ9tqUrBjFM+21cRgxyiebavJwY5RPNtWE4Qdo3i2rSYJO0bxbFtNFHaM4tm2mizsGMWzbTVh2DGKZ9tq0rBjFM+21cRhxyiebavJw45RPNtWE4gdo3i2rSYRO0bxbFtNJHaM4tm2mkzsGMWzbTWh2DGKZ9tqUrFjFM+21cRixyiebavJxY5RPNtWE4wdo3i2rSYZO0bxbFtNNHaM4tm2mmzsGMWzbTXh2DGKZ9tq0rFjFM+21cRjxyiebavJx45RPNtWE5Ado3i2rSYhO0bxbFtNRHaM4tm2mozsGMWzbTUh2TGKZ9tqUrJjFM22HZ6WbHhasuFpyYanJRsfzbYdnpZseFqy4WnJhqclG56WbHhasuFpyYanJRuelmx4WrLhacmGpyUbnpZseFqy4WnJhqclG56WbHhasuFpyYanJRuelmx4WrLhacmGpyUbnpZseFqy4WnJhqclG56WbHhasuFpyYanJRuelmx4WrLhacmGpyUbnpZseFqy4WnJhqclG56WbHhasuFpyYanJRuelmx4WrLhacmGpyUbnpZseFqy4WnJhqclG56WbHhasuFpyYanJRuelmx4WrLhacmGpyUbnpZseFqy4WnJhqclG56WbHhasuFpyYanJRuelmx4WrLhacmGpyUbnpZseFqy4WnJhqclG56WbHhasuFpyYanJRuelmx4WrLhacmGpyUbnpZseFqy4WnJhqclG56WbHhasuFpyYanJRuelmx4WrLhacnC05KFpyULT0sWnpYsPpptG56WLDwtWXhasvC0ZOFpycLTkoWnJQtPSxaeliw8LVl4WrLwtGThacnC05KFpyULT0sWnpYsPC1ZeFqy8LRk4WnJwtOShaclC09LFp6WLDwtWXhasvC0ZOFpycLTkoWnJQtPSxaeliw8LVl4WrLwtGThacnC05KFpyULT0sWnpYsPC1ZeFqy8LRk4WnJwtOShaclC09LFp6WLDwtWXhasvC0ZOFpycLTkoWnJQtPSxaeliw8LVl4WrLwtGThacnC05KFpyULT0sWnpYsPC1ZeFqy8LRk4WnJwtOShaclC09LFp6WLDwtWXhasvC0ZOFpycLTkoWnJQtPSxaeliw8LVl4WrLwtGThacnC05KFpyULT0sWnpYsPC1ZeFqy8LRk4WnJwtOShaclS09Llp6WLD0tWXpasvxotm16WrL0tGTpacnS05KlpyVLT0uWnpYsPS1Zelqy9LRk6WnJ0tOSpaclS09Llp6WLD0tWXpasvS0ZOlpydLTkqWnJUtPS5aeliw9LVl6WrL0tGTpacnS05KlpyVLT0uWnpYsPS1Zelqy9LRk6WnJ0tOSpaclS09Llp6WLD0tWXpasvS0ZOlpydLTkqWnJUtPS5aeliw9LVl6WrL0tGTpacnS05KlpyVLT0uWnpYsPS1Zelqy9LRk6WnJ0tOSpaclS09Llp6WLD0tWXpasvS0ZOlpydLTkqWnJUtPS5aeliw9LVl6WrL0tGTpacnS05KlpyVLT0uWnpYsPS1Zelqy9LRk6WnJ0tOSpaclS09Llp6WLD0tWXpasvS0ZOlpydLTkqWnJUtPS5aelqw8LVl5WrLytGTlacnqo9m25WnJytOSlaclK09LVp6WrDwtWXlasvK0ZOVpycrTkpWnJStPS1aelqw8LVl5WrLytGTlacnK05KVpyUrT0tWnpasPC1ZeVqy8rRk5WnJytOSlaclK09LVp6WrDwtWXlasvK0ZOVpycrTkpWnJStPS1aelqw8LVl5WrLytGTlacnK05KVpyUrT0tWnpasPC1ZeVqy8rRk5WnJytOSlaclK09LVp6WrDwtWXlasvK0ZOVpycrTkpWnJStPS1aelqw8LVl5WrLytGTlacnK05KVpyUrT0tWnpasPC1ZeVqy8rRk5WnJytOSlaclK09LVp6WrDwtWXlasvK0ZOVpycrTkpWnJStPS1aelqw8LVl5WrLytGTlacnK05KVpyUrT0tWnpasPC1ZeVqy9rRk7WnJ2tOStacl649m27anJWtPS9aelqw9LVl7WrL2tGTtacna05K1pyVrT0vWnpasPS1Ze1qy9rRk7WnJ2tOStacla09L1p6WrD0tWXtasva0ZO1pydrTkrWnJWtPS9aelqw9LVl7WrL2tGTtacna05K1pyVrT0vWnpasPS1Ze1qy9rRk7WnJ2tOStacla09L1p6WrD0tWXtasva0ZO1pydrTkrWnJWtPS9aelqw9LVl7WrL2tGTtacna05K1pyVrT0vWnpasPS1Ze1qy9rRk7WnJ2tOStacla09L1p6WrD0tWXtasva0ZO1pydrTkrWnJWtPS9aelqw9LVl7WrL2tGTtacna05K1pyVrT0vWnpasPS1Ze1qy9rRk7WnJ2tOStacla09L1p6WrD0tWXtasva0ZO1pyaanJZuelmx6WrLpacnmR7Ntp6clm56WbHpasulpyaanJZuelmx6WrJ53pJVfn79scrjw7830Jhr/vOzY435r8/m/ttDTvfo3Q853ZB3P+R09939kNOtdvdDTvfV3Q853UR3P+R0x9z8kPM26u6HnO6Fux/yxht/Xird/ZA33vjzuujuh7zxxp8XQXc/5I03/rziufkh533O3Q95440/b2rufsgbb/x5B3P3Q95448/blbsf8sYbf96b3P2QN97480bk7oe88cafdx13P+SNN/68xbj7IW+88ef9xN0PeeONP28e7n7IG2/8eadw90PeeOPP24K7H/LGG3/eA9z9kDfe+PM7/Hc/5I03/vze/d0PeeONP78rf/dD3njjz++33/2QN9748zvpdz/kjTf+/B753Q95440/v/t990PeeOPP72vf/ZA33vjzO9Z3P+SNN/78XvTdD3njjT+/y3z3Q95448/vH9/9kDfe+PM7w3c/5I03/vye790PeeONP7+be/dD3njjz+/T3v2QN9748zuwdz/kjTf+/N7q3Q95440/v2t690PeeOPP74fe/ZA33vjzO513P+SNN/78HubdD3nhjV/ndyfvfsgLb/w6v+9490NeeOPX54U3fp3fPrz7IS+88ev8xuDdD3nhjV/nt/xufsj5/b27H/LGG//Gnbv1xp279cadu/XGnbv1xp279cadu/XGnbv1xp279cadu/XGnbv1xp279cadu/XGnbv1xp279cKdu8jz+11XfvD0T8yVHzz9UzBn/vPnjv+A+rcfG7/92Om5/vGPnZ7UH//Y6e/+j3/sdH/+zo/98svfAU6zk/c=",
            "",
            "",
            "eJyrVsrJT04syczPK1ayqq6tBQAz9wY7",
            "eJyrVsrJT04syczPK1ayqlYyVrKKrlYqLkjMA/GKSxKLSpSsDHSUUvNSgHStjlJaZk6qkpVhrQ6GKkMTYzMzqEog28ICrtrSCJtyUyNDQ5hyUyMzAsotzc1hig2MTBFqTWtjdZRMhqSrTenoamMTU7irTQxMyXZ1bS0AVYGl4g==",
            "eJzVzrEKwjAUheF3OXOG3JvctMmriEPQCoWSiskW8u62YOugIDgIbufAN/wV03yKZZxTRqgwCIeKfI1pfbnEW0HwrLXCkM7rJNMULuM0IFBTL5asce6Bl933u/b8jgsTbVzYfeC+6zasWZ5W2lHB/nG7/LzdWNnbrZav21u7AwQOqZA=",
            "eJzN3c2qLceRQOF3OWPR7IyfzEq9StMD0XaDwchNSzOhd3cZfCVDF1atQVFrZGFq28GJc8N47fq4v3z99W///cPPf/nbjz99ff/L1+c/Zn99/5+/fP30vz/8+I9/46eff/i/n7++/3z39ecf/3T+66/fff3PX/7656/vx6//9d0/Hp/s8cUeP9jjGz2+PuzxwR4P9niyx4s9zra62FYX2+piW11sqwfb6sG2erCtHmyrB9vqwbZ6sK0e7Oe+2c99s5/7Zj/3zX7um/3cN/u5b/Zz3+xP02Z/mjbb6viwtY4P2+v4sMWOD9vs+LDVjg/b7fiw5Y4P2+74sPWOD9zvgPsdcL8D7nfA/Q643wH3O+B+B9zvgPsdcL8B9xtwvwH3G3C/AfcbcL8B9xtwvwH3G3C/CfebcL8J95twvwn3m3C/CfebcL8J95twvwX3W3C/BfdbcL8F91twvwX3W3C/BfdbcL8N99twvw3323C/DffbcL8N99twvw3323C/E+53wv1OuN8J9zvhfmE/GjAgDViQBkxIAzakASPSgBVpwIw0YEcaMCQNWJIGTEkDtqQBY9KANWnAnDRgTxowKA1YlAZMSgM2pQGj0jjgfg+4X1itBsxWA3arAcPVgOVqwHQ1YLsaMF4NWK8GzFcD9quA/SpgvwrYrwL2q4D9KmC/CtivAvargP0qYL8K2K8C9quA/SpgvwrYrwL2q4D9KmC/CtivAvargP0qYL8K2K8C9quA/SpgvwrYrwL2q4D9KmC/CtivAvargP0qYL8K2K8C9quA/SpgvwrYrwL2q4D9KmC/CtivAvargP0qYL8K2K8C9quA/SpgvwrYrwL2q4D9KmC/CtivAvargP0qYL8K2K8C9quA/SpgvwrYrwL2q4D9KmC/CtivAvargP0qYL8K2K8C9quA/SpgvwrYrwL2q4D9KmC/CtivAvargP0qYL8K2K8C9quA/SpgvwrYrwL2q4D9KmC/CtivAvargP0qYL8K2K8C9quA/SpgvwrYrwL2q4T9KmG/StivEvarhP0qYb9K2K8S9quE/Sphv0rYrxL2q4T9KmG/StivEvarhP0qYb9K2K8S9quE/Sphv0rYrxL2q4T9KmG/StivEvarhP0qYb9K2K8S9quE/Sphv0rYrxL2q4T9KmG/StivEvarhP0qYb9K2K8S9quE/Sphv0rYrxL2q4T9KmG/StivEvarhP0qYb9K2K8S9quE/Sphv0rYrxL2q4T9KmG/StivEvarhP0qYb9K2K8S9quE/Sphv0rYrxL2q4T9KmG/StivEvarhP0qYb9K2K8S9quE/Sphv0rYrxL2q4T9KmG/StivEvarhP0qYb9K2K8S9quE/Sphv0rYrxL2q4T9KmG/StivEvargv2qYL8q2K8K9quC/apgvyrYrwr2q4L9qmC/KtivCvargv2qYL8q2K8K9quC/apgvyrYrwr2q4L9qmC/KtivCvargv2qYL8q2K8K9quC/apgvyrYrwr2q4L9qmC/KtivCvargv2qYL8q2K8K9quC/apgvyrYrwr2q4L9qmC/KtivCvargv2qYL8q2K8K9quC/apgvyrYrwr2q4L9qmC/KtivCvargv2qYL8q2K8K9quC/apgvyrYrwr2q4L9qmC/KtivCvargv2qYL8q2K8K9quC/apgvyrYrwr2q4L9qmC/KtivCvargv2qYL8q2K8K9quC/apgvyrYrwr2q4L9qmC/KtivCvargv2qYL8q2K8K9quG/aphv2rYrxr2q4b9qmG/ativGvarhv2qYb9q2K8a9quG/aphv2rYrxr2q4b9qmG/ativGvarhv2qYb9q2K8a9quG/aphv2rYrxr2q4b9qmG/ativGvarhv2qYb9q2K8a9quG/aphv2rYrxr2q4b9qmG/ativGvarhv2qYb9q2K8a9quG/aphv2rYrxr2q4b9qmG/ativGvarhv2qYb9q2K8a9quG/aphv2rYrxr2q4b9qmG/ativGvarhv2qYb9q2K8a9quG/aphv2rYrxr2q4b9qmG/ativGvarhv2qYb9q2K8a9quG/aphv2rYrxr2q4b9qmG/ativGvarhv2qYb9q2K8a9quG/aphv2rYrxr2qwn71YT9asJ+NWG/mrBfTdivJuxXE/arCfvVhP1qwn41Yb+asF9N2K8m7FcT9qsJ+9WE/WrCfjVhv5qwX03YrybsVxP2qwn71YT9asJ+NWG/mrBfTdivJuxXE/arCfvVhP1qwn41Yb+asF9N2K8m7FcT9qsJ+9WE/WrCfjVhv5qwX03YrybsVxP2qwn71YT9asJ+NWG/mrBfTdivJuxXE/arCfvVhP1qwn41Yb+asF9N2K8m7FcT9qsJ+9XEf/8f3C/9GwDpXwEI+9WE/WrC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JRseSzY8liw8liw8liw8liw8liw+mmsbHksWHksWHksWHksWHksWHksWHksWHksWHksWHksWHksWHksWHksWHksWHksWHksWHksWHksWHksWHksWHksWHksWHksWHksWHksWHksWHksWHksWHksWHksWHksWHksWHksWHksWHksWHksWHksWHksWHksWHksWHksWHksWHksWHksWHksWHksWHksWHksWHksWHksWHksWHksWHksWHksWHksWHksWHksWHksWHksWHksWHksWHksWHksWHksWHksWHksWHksWHksWHksWHksWHksWHksWHksWHksWHksWHksWHksWHksWHksWHksWHksWHksWHksWHksWHksWHksWHksWHksWHksWHksWHksWHksWHksWHksWHkuWHkuWHkuWHkuWHkuWH821TY8lS48lS48lS48lS48lS48lS48lS48lS48lS48lS48lS48lS48lS48lS48lS48lS48lS48lS48lS48lS48lS48lS48lS48lS48lS48lS48lS48lS48lS48lS48lS48lS48lS48lS48lS48lS48lS48lS48lS48lS48lS48lS48lS48lS48lS48lS48lS48lS48lS48lS48lS48lS48lS48lS48lS48lS48lS48lS48lS48lS48lS48lS48lS48lS48lS48lS48lS48lS48lS48lS48lS48lS48lS48lS48lS48lS48lS48lS48lS48lS48lS48lS48lS48lS48lS48lS48lS48lS48lS48lS48lS48lS48lS48lS48lK48lK48lK48lK48lq4/m2pbHkpXHkpXHkpXHkpXHkpXHkpXHkpXHkpXHkpXHkpXHkpXHkpXHkpXHkpXHkpXHkpXHkpXHkpXHkpXHkpXHkpXHkpXHkpXHkpXHkpXHkpXHkpXHkpXHkpXHkpXHkpXHkpXHkpXHkpXHkpXHkpXHkpXHkpXHkpXHkpXHkpXHkpXHkpXHkpXHkpXHkpXHkpXHkpXHkpXHkpXHkpXHkpXHkpXHkpXHkpXHkpXHkpXHkpXHkpXHkpXHkpXHkpXHkpXHkpXHkpXHkpXHkpXHkpXHkpXHkpXHkpXHkpXHkpXHkpXHkpXHkpXHkpXHkpXHkpXHkpXHkpXHkpXHkpXHkpXHkpXHkpXHkpXHkpXHkpXHkpXHkpXHkpXHkpXHkpXHkrXHkrXHkrXHkrXHkvVHc23bY8naY8naY8naY8naY8naY8naY8naY8naY8naY8naY8naY8naY8naY8naY8naY8naY8naY8naY8naY8naY8naY8naY8naY8naY8naY8naY8naY8naY8naY8naY8naY8naY8naY8naY8naY8naY8naY8naY8naY8naY8naY8naY8naY8naY8naY8naY8naY8naY8naY8naY8naY8naY8naY8naY8naY8naY8naY8naY8naY8naY8naY8naY8naY8naY8naY8naY8naY8naY8naY8naY8naY8naY8naY8naY8naY8naY8naY8naY8naY8naY8naY8naY8naY8naY8naY8naY8naY8naY8naY8naY8naY8naY8naY8naY8mmx5JNjyWbHks2PZZsfjTXdnos2fRYsumxZNNjyabHkk2PJZseSzavLVlV739+rGr/+4HGZ3/7rxhj7N+f7bx6eq757ek15u9P5/5tpMur++5Il9f33ZEur/C7I11e43dHurzK7450eZ3fHenySr860rVFe3eky6v97ki+631t1N4dyXe9r83auyP5rve1YXt3JN/1vjZtr450bdveHcl3va+t27sj+a73tX17dyTf9b62cO+O5Lve1zbu3ZF81/vayr07ku96X9u5d0fyXe9rS/fuSL7rfW3r3h3Jd72vrd27I/mu97W9e3ck3/W+tnjvjuS73tc2792RfNf72uq9O5Lvel/bvXdH8l3va8v37ki+631t+94dyXe9r63fuyP5rve1/Xt3JN/1vraA747ku97XNvDdkXzX+9oKvjuS73pf28F3R/Jd72tL+O5Ivut9bQvfHcl3va+t4bsj+a73tT18dyTf9b62iO+O5Lve1zbx3ZF81/vaKr47ku96X9vFd0fyXe9ry/juSL7rfW0b3x3Jd72vreO7I/mu97V9fHck3fVe1xby3ZF013td28h3R9Jd7/XRXe91bSbfHUl3vde1oXx3JN31Xtem8tWRrm3luyP5rrfPWi6ftVw+a7l81nL5rOXyWcvls5bLZy2Xz1oun7VcPmu5fNZy+azl8lnLpbOWkdc+7s4HL/9c3Png5W/vnPnPz53/p+lfPjZ++9jlb9gff+zyt+CPP3a5qT/+2OX/Fv6bj/36698B8i6YsA==",
            ""
        ],
        "fileMap": {
            "1": {
                "source": "mod account_contract_interface;\nmod actions;\nmod options;\nmod types;\n\ncontract DocsExample {\n    use dep::std::option::Option;\n    use dep::aztec::{\n        context::{PrivateContext, PublicContext, Context},\n        state_vars::{\n            immutable_singleton::ImmutableSingleton, map::Map, public_state::PublicState, set::Set,\n            singleton::Singleton,\n        },\n    };\n    // docs:start:state_vars-PublicStateBoolImport\n    use dep::aztec::types::type_serialization::bool_serialization::{\n        BoolSerializationMethods, BOOL_SERIALIZED_LEN,\n    };\n    // docs:end:state_vars-PublicStateBoolImport\n    use crate::account_contract_interface::AccountContractInterface;\n    use crate::actions;\n    use crate::options::create_account_card_getter_options;\n    use crate::types::{\n        card_note::{CardNote, CardNoteMethods, CARD_NOTE_LEN},\n        profile_note::{ProfileNote, ProfileNoteMethods, PROFILE_NOTE_LEN},\n        queen::{Queen, QueenSerializationMethods, QUEEN_SERIALIZED_LEN},\n        rules_note::{RulesNote, RulesNoteMethods, RULES_NOTE_LEN},\n    };\n\n    // docs:start:storage-struct-declaration\n    struct Storage {\n        locked: PublicState<bool, BOOL_SERIALIZED_LEN>,\n        queen: PublicState<Queen, QUEEN_SERIALIZED_LEN>,\n        game_rules: ImmutableSingleton<RulesNote, RULES_NOTE_LEN>,\n        // docs:start:storage-singleton-declaration\n        legendary_card: Singleton<CardNote, CARD_NOTE_LEN>,\n        // docs:end:storage-singleton-declaration\n        cards: Set<CardNote, CARD_NOTE_LEN>,\n        // docs:start:storage-map-singleton-declaration\n        profiles: Map<Singleton<ProfileNote, PROFILE_NOTE_LEN>>,\n        // docs:end:storage-map-singleton-declaration\n    }\n    // docs:end:storage-struct-declaration\n\n    // docs:start:storage-declaration\n    // docs:start:state_vars-PublicState\n    // docs:start:state_vars-PublicStateCustomStruct\n    // docs:start:state_vars-Singleton\n    // docs:start:state_vars-ImmutableSingleton\n    // docs:start:state_vars-Set\n    // docs:start:state_vars-MapSingleton\n    impl Storage {\n        fn init(context: Context) -> pub Self {\n            Storage {\n                // highlight-next-line:state_vars-PublicState\n                locked: PublicState::new(context, 1, BoolSerializationMethods),\n                // highlight-next-line:state_vars-PublicStateCustomStruct\n                queen: PublicState::new(\n                    context,\n                    2,\n                    QueenSerializationMethods,\n                ),\n                // highlight-next-line:state_vars-ImmutableSingleton\n                game_rules: ImmutableSingleton::new(context, 3, RulesNoteMethods),\n                // highlight-next-line:state_vars-Singleton\n                // docs:start:start_vars_singleton\n                legendary_card: Singleton::new(context, 4, CardNoteMethods),\n                // docs:end:start_vars_singleton\n                // highlight-next-line:state_vars-Set\n                cards: Set::new(context, 5, CardNoteMethods),\n                // highlight-next-line:state_vars-MapSingleton\n                profiles: Map::new(\n                    context,\n                    6,\n                    |context, slot| {\n                        Singleton::new(context, slot, ProfileNoteMethods)\n                    },\n                ),\n            }\n        }\n    }\n    // docs:end:state_vars-PublicState\n    // docs:end:state_vars-PublicStateCustomStruct\n    // docs:end:state_vars-Singleton\n    // docs:end:state_vars-ImmutableSingleton\n    // docs:end:state_vars-Set\n    // docs:end:state_vars-MapSingleton\n    // docs:end:storage-declaration\n\n    global REPLACE_QUEEN_FUNCTION_SELECTOR = 11111111;\n    global GET_POINTS_OF_COMMON_CARD_FUNCTION_SELECTOR = 11111111;\n\n    #[aztec(private)]\n    fn constructor(min_points: u8, max_points: u8, legendary_card_secret: Field) {\n        let mut game_rules = RulesNote::new(min_points, max_points, Option::some(0));\n        actions::init_game_rules(storage.game_rules, &mut game_rules);\n\n        let mut legendary_card = CardNote::new(0, legendary_card_secret, 0);\n        actions::init_legendary_card(storage.legendary_card, &mut legendary_card);\n    }\n\n    // docs:start:storage-init\n    #[aztec(public)]\n    fn lock() {\n        // highlight-next-line:storage-init\n\n        storage.locked.write(true);\n    }\n    // docs:end:storage-init\n\n    // docs:start:functions-OpenFunction\n    #[aztec(public)]\n    fn unlock() {\n        actions::unlock(storage.locked);\n    }\n    // docs:end:functions-OpenFunction\n\n    #[aztec(public)]\n    fn replace_queen(account: Field, points: u8) {\n        let new_queen = Queen { account, points };\n\n        assert(actions::can_replace_queen(storage.queen, new_queen));\n\n        actions::replace_queen(storage.queen, new_queen);\n    }\n\n    // docs:start:state_vars-PublicStateWriteBeforeCall\n    #[aztec(public)]\n    fn replace_queen_unsafe() {\n        let account = context.msg_sender();\n        let points = actions::get_total_points(storage.cards, account, 0);\n\n        let current_queen = storage.queen.read();\n        assert(account != current_queen.account);\n        assert(points > current_queen.points);\n\n        AccountContractInterface::at(account).send_rewards(current_queen.points);\n\n        let new_queen = Queen { account, points };\n        storage.queen.write(new_queen);\n    }\n    // docs:end:state_vars-PublicStateWriteBeforeCall\n\n    // docs:start:functions-SecretFunction\n    #[aztec(private)]\n    fn add_common_cards(secrets: [Field; 4]) {\n        for i in 0..secrets.len() as u8 {\n            let mut card = CardNote::new(0, secrets[i], 0);\n            actions::add_new_card(storage.cards, &mut card);\n        }\n    }\n    // docs:end:functions-SecretFunction\n\n    #[aztec(private)]\n    fn update_legendary_card(new_points: u8, new_secret: Field) {\n        let owner = inputs.call_context.msg_sender;\n        let mut updated_card = CardNote::new(new_points, new_secret, owner);\n\n        assert(actions::is_valid_card(storage.game_rules, updated_card));\n\n        actions::update_legendary_card(storage.legendary_card, &mut updated_card);\n    }\n\n    #[aztec(private)]\n    fn become_queen() {\n        let legendary_card = actions::get_legendary_card(storage.legendary_card);\n\n        let owner = legendary_card.owner;\n        let result = context.call_private_function(inputs.call_context.storage_contract_address,\n            GET_POINTS_OF_COMMON_CARD_FUNCTION_SELECTOR,\n            [owner, 0]);\n        let total_points = legendary_card.points + result[0] as u8;\n\n        context.call_public_function(inputs.call_context.storage_contract_address,\n            REPLACE_QUEEN_FUNCTION_SELECTOR,\n            [owner, total_points as Field]);\n    }\n\n    #[aztec(private)]\n    fn get_points_of_common_cards(account: Field, offset: u32) {\n        let mut total_points = 0;\n        let options = create_account_card_getter_options(account, offset);\n        let cards = actions::get_cards(storage.cards, options);\n        for i in 0..cards.len() {\n            if (cards[i].is_some()) {\n                let card = cards[i].unwrap_unchecked();\n                assert(card.owner == account);\n                total_points += card.points;\n            }\n        }\n\n        context.return_values.push(total_points as Field);\n    }\n\n    // docs:start:functions-UnconstrainedFunction\n    unconstrained fn get_total_points(account: Field) -> u8 {\n        actions::get_total_points(storage.cards, account, 0)\n    }\n    // docs:end:functions-UnconstrainedFunction\n\n    /// Macro equivalence section\n    use dep::aztec::abi;\n    use dep::aztec::abi::Hasher;\n    use dep::aztec::abi::PrivateContextInputs;\n    use dep::aztec::abi::PrivateCircuitPublicInputs;\n\n    // docs:start:simple_macro_example\n    #[aztec(private)]\n    fn simple_macro_example(a: Field, b: Field) -> Field {\n        a + b\n    }\n    // docs:end:simple_macro_example\n\n    // docs:start:simple_macro_example_expanded\n    fn simple_macro_example_expanded(\n        // ************************************************************\n        // The private context inputs are made available to the circuit by the kernel\n        // docs:start:context-example-inputs\n        inputs: PrivateContextInputs,\n        // docs:end:context-example-inputs\n        // ************************************************************\n\n        // Our original inputs!\n        a: Field,\n        b: Field // The actual return type of our circuit is the PrivateCircuitPublicInputs struct, this will be the \n        // input to our kernel! \n        // docs:start:context-example-return\n    ) -> distinct pub abi::PrivateCircuitPublicInputs {\n        // docs:end:context-example-return\n        // ************************************************************\n        // The hasher is a structure used to generate a hash of the circuits inputs. \n        // docs:start:context-example-hasher\n        let mut hasher = Hasher::new();\n        hasher.add(a);\n        hasher.add(b);\n        // docs:end:context-example-hasher\n\n        // The context object is created with the inputs and the hash of the inputs\n        // docs:start:context-example-context\n        let mut context = PrivateContext::new(inputs, hasher.hash());\n        // docs:end:context-example-context\n\n        // docs:start:storage-example-context\n        let mut storage = Storage::init(Context::private(&mut context));\n        // docs:end:storage-example-context\n        // ************************************************************\n\n        // Our actual program\n        let result = a + b;\n\n        // ************************************************************\n        // Return values are pushed into the context\n        // docs:start:context-example-context-return\n        context.return_values.push(result);\n        // docs:end:context-example-context-return\n\n        // The context is returned to be consumed by the kernel circuit!\n        // docs:start:context-example-finish\n        context.finish()\n        // docs:end:context-example-finish\n        // ************************************************************\n    }\n    // docs:end:simple_macro_example_expanded\n\n    // Cross chain messaging section\n    // Demonstrates a cross chain message \n    // docs:start:l1_to_l2_cross_chain_message \n    #[aztec(private)]\n    fn send_to_l1() {}\n    // docs:end:l1_to_l2_cross_chain_message  \n\n    // TODO: remove this placeholder once https://github.com/AztecProtocol/aztec-packages/issues/2918 is implemented\n    unconstrained fn compute_note_hash_and_nullifier(contract_address: Field, nonce: Field, storage_slot: Field, serialized_note: [Field; 0]) -> [Field; 4] {\n        [0, 0, 0, 0]\n    }\n}\n",
                "path": "/usr/src/yarn-project/noir-contracts/src/contracts/docs_example_contract/src/main.nr"
            },
            "17": {
                "source": "struct GrumpkinScalar {\n    low: Field,\n    high: Field,\n}\n\nimpl GrumpkinScalar {\n    pub fn new(low: Field, high: Field) -> Self {\n        // TODO: check that the low and high value fit within the grumpkin modulus\n        GrumpkinScalar { low, high }\n    }\n}\n\nglobal GRUMPKIN_SCALAR_SERIALIZED_LEN: Field = 2;\n\npub fn deserialize_grumpkin_scalar(fields: [Field; GRUMPKIN_SCALAR_SERIALIZED_LEN]) -> GrumpkinScalar {\n    GrumpkinScalar { low: fields[0], high: fields[1] }\n}\n\npub fn serialize_grumpkin_scalar(scalar: GrumpkinScalar) -> [Field; GRUMPKIN_SCALAR_SERIALIZED_LEN] {\n    [scalar.low, scalar.high]\n}\n",
                "path": "std/grumpkin_scalar.nr"
            },
            "18": {
                "source": "use crate::grumpkin_scalar::GrumpkinScalar;\nuse crate::scalar_mul::fixed_base_embedded_curve;\n\npub fn grumpkin_fixed_base(scalar: GrumpkinScalar) -> [Field; 2] {\n    // TODO: this should use both the low and high limbs to do the scalar multiplication\n    fixed_base_embedded_curve(scalar.low, scalar.high)\n}\n",
                "path": "std/grumpkin_scalar_mul.nr"
            },
            "33": {
                "source": "struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::unsafe::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default\n        }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            other\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<U, Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            default()\n        }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some {\n                Option::none()\n            } else {\n                self\n            }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n",
                "path": "std/option.nr"
            },
            "75": {
                "source": "global ARGS_LENGTH: Field = 16;\nglobal RETURN_VALUES_LENGTH: Field = 4;\n\n/**\n * Convention for constant array lengths are mainly divided in 2 classes:\n *  - FUNCTION CALL\n *  - TRANSACTION\n *\n * Agreed convention is to use MAX_XXX_PER_CALL resp. MAX_XXX_PER_TX, where XXX denotes a type of element such as\n * commitment, or nullifier, e.g.,:\n *  - MAX_NEW_NULLIFIERS_PER_CALL\n *  - MAX_NEW_COMMITMENTS_PER_TX\n *\n * In the kernel circuits, we accumulate elements such as commitments and the nullifiers from all functions calls in a\n * transaction. Therefore, we always must have:\n * MAX_XXX_PER_TX ≥ MAX_XXX_PER_CALL\n *\n * For instance:\n * MAX_NEW_COMMITMENTS_PER_TX ≥ MAX_NEW_COMMITMENTS_PER_CALL\n * MAX_NEW_NULLIFIERS_PER_TX ≥ MAX_NEW_NULLIFIERS_PER_CALL\n *\n */\n\n// docs:start:constants\n// \"PER CALL\" CONSTANTS\nglobal MAX_NEW_COMMITMENTS_PER_CALL: Field = 16;\nglobal MAX_NEW_NULLIFIERS_PER_CALL: Field = 16;\nglobal MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL: Field = 4;\nglobal MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL: Field = 4;\nglobal MAX_NEW_L2_TO_L1_MSGS_PER_CALL: Field = 2;\nglobal MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL: Field = 16;\nglobal MAX_PUBLIC_DATA_READS_PER_CALL: Field = 16;\nglobal MAX_READ_REQUESTS_PER_CALL: Field = 32;\nglobal MAX_PENDING_READ_REQUESTS_PER_CALL: Field = 32;\n\n// \"PER TRANSACTION\" CONSTANTS\nglobal MAX_NEW_COMMITMENTS_PER_TX: Field = 64;\nglobal MAX_NEW_NULLIFIERS_PER_TX: Field = 64;\nglobal MAX_PRIVATE_CALL_STACK_LENGTH_PER_TX: Field = 8;\nglobal MAX_PUBLIC_CALL_STACK_LENGTH_PER_TX: Field = 8;\nglobal MAX_NEW_L2_TO_L1_MSGS_PER_TX: Field = 2;\nglobal MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_TX: Field = 16;\nglobal MAX_PUBLIC_DATA_READS_PER_TX: Field = 16;\nglobal MAX_NEW_CONTRACTS_PER_TX: Field = 1;\nglobal MAX_OPTIONALLY_REVEALED_DATA_LENGTH_PER_TX: Field = 4;\nglobal MAX_READ_REQUESTS_PER_TX: Field = 128;\nglobal MAX_PENDING_READ_REQUESTS_PER_TX: Field = 128;\nglobal NUM_ENCRYPTED_LOGS_HASHES_PER_TX: Field = 1;\nglobal NUM_UNENCRYPTED_LOGS_HASHES_PER_TX: Field = 1;\n// docs:end:constants\n\n// ROLLUP CONTRACT CONSTANTS - constants used only in l1-contracts\nglobal NUMBER_OF_L1_L2_MESSAGES_PER_ROLLUP: Field = 16;\n// TODO(961): Use this constant everywhere instead of hard-coded \"2\".\nglobal KERNELS_PER_BASE_ROLLUP: Field = 2;\nglobal MAX_NEW_NULLIFIERS_PER_BASE_ROLLUP: Field = 128;\nglobal MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_BASE_ROLLUP: Field = 32;\nglobal MAX_PUBLIC_DATA_READS_PER_BASE_ROLLUP: Field = 32;\n\n// TREES RELATED CONSTANTS\nglobal VK_TREE_HEIGHT: Field = 3;\nglobal FUNCTION_TREE_HEIGHT: Field = 5;\nglobal CONTRACT_TREE_HEIGHT: Field = 16;\nglobal NOTE_HASH_TREE_HEIGHT: Field = 32;\nglobal PUBLIC_DATA_TREE_HEIGHT: Field = 254;\nglobal NULLIFIER_TREE_HEIGHT: Field = 20;\nglobal L1_TO_L2_MSG_TREE_HEIGHT: Field = 16;\nglobal ROLLUP_VK_TREE_HEIGHT: Field = 8;\n\n// SUB-TREES RELATED CONSTANTS\nglobal CONTRACT_SUBTREE_HEIGHT: Field = 1;\nglobal CONTRACT_SUBTREE_SIBLING_PATH_LENGTH: Field = 15;\nglobal NOTE_HASH_SUBTREE_HEIGHT: Field = 7;\nglobal NOTE_HASH_SUBTREE_SIBLING_PATH_LENGTH: Field = 25;\nglobal NULLIFIER_SUBTREE_HEIGHT: Field = 7;\nglobal ARCHIVE_HEIGHT: Field = 16;\nglobal NULLIFIER_SUBTREE_SIBLING_PATH_LENGTH: Field = 13;\nglobal L1_TO_L2_MSG_SUBTREE_HEIGHT: Field = 4;\nglobal L1_TO_L2_MSG_SUBTREE_SIBLING_PATH_LENGTH: Field = 12;\n\n// MISC CONSTANTS\nglobal FUNCTION_SELECTOR_NUM_BYTES: Field = 4;\nglobal MAPPING_SLOT_PEDERSEN_SEPARATOR: Field = 4;\nglobal NUM_FIELDS_PER_SHA256: Field = 2;\nglobal ARGS_HASH_CHUNK_LENGTH: u32 = 32;\nglobal ARGS_HASH_CHUNK_COUNT: u32 = 16;\n\n\n// NOIR CONSTANTS - constants used only in yarn-packages/noir-contracts\n// Some are defined here because Noir doesn't yet support globals referencing other globals yet.\n// Move these constants to a noir file once the issue bellow is resolved:\n// https://github.com/noir-lang/noir/issues/1734\nglobal L1_TO_L2_MESSAGE_LENGTH: Field = 8;\nglobal L1_TO_L2_MESSAGE_ORACLE_CALL_LENGTH: Field = 26;\nglobal MAX_NOTE_FIELDS_LENGTH: Field = 20;\n// GET_NOTE_ORACLE_RETURN_LENGT = MAX_NOTE_FIELDS_LENGTH + 1 + 2\n// The plus 1 is 1 extra field for nonce.\n// + 2 for EXTRA_DATA: [number_of_return_notes, contract_address]\nglobal GET_NOTE_ORACLE_RETURN_LENGTH: Field = 23;\nglobal MAX_NOTES_PER_PAGE: Field = 10;\n// VIEW_NOTE_ORACLE_RETURN_LENGTH = MAX_NOTES_PER_PAGE * (MAX_NOTE_FIELDS_LENGTH + 1) + 2;\nglobal VIEW_NOTE_ORACLE_RETURN_LENGTH: Field = 212;\nglobal CALL_CONTEXT_LENGTH: Field = 7;\nglobal BLOCK_HEADER_LENGTH: Field = 7;\nglobal FUNCTION_DATA_LENGTH: Field = 4;\nglobal CONTRACT_DEPLOYMENT_DATA_LENGTH: Field = 6;\n// Change this ONLY if you have changed the PrivateCircuitPublicInputs structure.\n// In other words, if the structure/size of the public inputs of a function call changes then we\n// should change this constant as well as the offsets in private_call_stack_item.nr\nglobal PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH: Field = 155;\nglobal CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH: Field = 3;\nglobal CONTRACT_STORAGE_READ_LENGTH: Field = 2;\n// Change this ONLY if you have changed the PublicCircuitPublicInputs structure.\nglobal PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH: Field = 142;\nglobal GET_NOTES_ORACLE_RETURN_LENGTH: Field = 674;\nglobal EMPTY_NULLIFIED_COMMITMENT: Field = 1000000;\nglobal CALL_PRIVATE_FUNCTION_RETURN_SIZE: Field = 161;\nglobal PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH: Field = 87;\nglobal PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH: Field = 144;\nglobal COMMITMENTS_NUM_BYTES_PER_BASE_ROLLUP: Field = 4096;\nglobal NULLIFIERS_NUM_BYTES_PER_BASE_ROLLUP: Field = 4096;\nglobal PUBLIC_DATA_WRITES_NUM_BYTES_PER_BASE_ROLLUP: Field = 2048;\nglobal CONTRACTS_NUM_BYTES_PER_BASE_ROLLUP: Field = 64;\nglobal CONTRACT_DATA_NUM_BYTES_PER_BASE_ROLLUP: Field = 128;\nglobal CONTRACT_DATA_NUM_BYTES_PER_BASE_ROLLUP_UNPADDED: Field = 104;\nglobal L2_TO_L1_MSGS_NUM_BYTES_PER_BASE_ROLLUP: Field = 128;\nglobal LOGS_HASHES_NUM_BYTES_PER_BASE_ROLLUP: Field = 128;\n\n/**\n * Enumerate the hash_indices which are used for pedersen hashing.\n * We start from 1 to avoid the default generators. The generator indices are listed\n * based on the number of elements each index hashes. The following conditions must be met:\n *\n * +-----------+-------------------------------+----------------------+\n * | Hash size | Number of elements hashed (n) | Condition to use     |\n * |-----------+-------------------------------+----------------------|\n * | LOW       | n ≤ 8                         | 0 < hash_index ≤ 32  |\n * | MID       | 8 < n ≤ 16                    | 32 < hash_index ≤ 40 |\n * | HIGH      | 16 < n ≤ 48                   | 40 < hash_index ≤ 48 |\n * +-----------+-------------------------------+----------------------+\n *\n * Note: When modifying, modify `GeneratorIndexPacker` in packer.hpp accordingly.\n */\n// Indices with size ≤ 8\nglobal GENERATOR_INDEX__COMMITMENT = 1;\nglobal GENERATOR_INDEX__COMMITMENT_NONCE = 2;\nglobal GENERATOR_INDEX__UNIQUE_COMMITMENT = 3;\nglobal GENERATOR_INDEX__SILOED_COMMITMENT = 4;\nglobal GENERATOR_INDEX__NULLIFIER = 5;\nglobal GENERATOR_INDEX__INITIALIZATION_NULLIFIER = 6;\nglobal GENERATOR_INDEX__OUTER_NULLIFIER = 7;\nglobal GENERATOR_INDEX__PUBLIC_DATA_READ = 8;\nglobal GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST = 9;\nglobal GENERATOR_INDEX__FUNCTION_DATA = 10;\nglobal GENERATOR_INDEX__FUNCTION_LEAF = 11;\nglobal GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA = 12;\nglobal GENERATOR_INDEX__CONSTRUCTOR = 13;\nglobal GENERATOR_INDEX__CONSTRUCTOR_ARGS = 14;\nglobal GENERATOR_INDEX__CONTRACT_ADDRESS = 15;\nglobal GENERATOR_INDEX__CONTRACT_LEAF = 16;\nglobal GENERATOR_INDEX__CALL_CONTEXT = 17;\nglobal GENERATOR_INDEX__CALL_STACK_ITEM = 18;\nglobal GENERATOR_INDEX__CALL_STACK_ITEM_2 = 19;\nglobal GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET = 20;\nglobal GENERATOR_INDEX__L2_TO_L1_MSG = 21;\nglobal GENERATOR_INDEX__TX_CONTEXT = 22;\nglobal GENERATOR_INDEX__PUBLIC_LEAF_INDEX = 23;\nglobal GENERATOR_INDEX__PUBLIC_DATA_LEAF = 24;\nglobal GENERATOR_INDEX__SIGNED_TX_REQUEST = 25;\nglobal GENERATOR_INDEX__GLOBAL_VARIABLES = 26;\nglobal GENERATOR_INDEX__PARTIAL_ADDRESS = 27;\nglobal GENERATOR_INDEX__BLOCK_HASH = 28;\n// Indices with size ≤ 16\nglobal GENERATOR_INDEX__TX_REQUEST = 33;\nglobal GENERATOR_INDEX__SIGNATURE_PAYLOAD = 34;\n// Indices with size ≤ 44\nglobal GENERATOR_INDEX__VK = 41;\nglobal GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS = 42;\nglobal GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS = 43;\nglobal GENERATOR_INDEX__FUNCTION_ARGS = 44;\n",
                "path": "/protocol_types/constants.nr"
            },
            "92": {
                "source": "use dep::protocol_types::constants::{\n    RETURN_VALUES_LENGTH,\n    MAX_READ_REQUESTS_PER_CALL,\n    MAX_PENDING_READ_REQUESTS_PER_CALL,\n    MAX_NEW_COMMITMENTS_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n    NUM_FIELDS_PER_SHA256,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL,\n    GENERATOR_INDEX__FUNCTION_ARGS,\n    BLOCK_HEADER_LENGTH,\n    CONTRACT_DEPLOYMENT_DATA_LENGTH,\n    CALL_CONTEXT_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n    CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH,\n    CONTRACT_STORAGE_READ_LENGTH,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n    GENERATOR_INDEX__BLOCK_HASH,\n    GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS,\n    GENERATOR_INDEX__FUNCTION_DATA,\n    GENERATOR_INDEX__PUBLIC_DATA_READ,\n    GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST,\n    GENERATOR_INDEX__CALL_CONTEXT,\n    GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS,\n    GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA,\n};\n\nuse crate::oracle::debug_log;\nuse crate::types::vec::BoundedVec;\nuse crate::types::point::Point;\nuse crate::hash::pedersen_hash;\n\n// docs:start:private-global-variables\nstruct PrivateGlobalVariables {\n    chain_id: Field,\n    version: Field,\n}\n// docs:end:private-global-variables\n\nimpl PrivateGlobalVariables {\n    fn serialize(self) -> [Field; 2] {\n        [self.chain_id, self.version]\n    }\n}\n\n// docs:start:public-global-variables\nstruct PublicGlobalVariables {\n    chain_id: Field,\n    version: Field,\n    block_number: Field,\n    timestamp: Field,\n}\n// docs:end:public-global-variables\n\nimpl PublicGlobalVariables {\n    fn serialize(self) -> [Field; 4] {\n        [self.chain_id, self.version, self.block_number, self.timestamp]\n    }\n}\n\n// docs:start:contract-deployment-data\nstruct ContractDeploymentData {\n    deployer_public_key: Point,\n    constructor_vk_hash : Field,\n    function_tree_root : Field,\n    contract_address_salt : Field,\n    portal_contract_address : Field,\n}\n// docs:end:contract-deployment-data\n\nimpl ContractDeploymentData {\n    fn serialize(self) -> [Field; CONTRACT_DEPLOYMENT_DATA_LENGTH] {\n        [\n            self.deployer_public_key.x,\n            self.deployer_public_key.y,\n            self.constructor_vk_hash,\n            self.function_tree_root,\n            self.contract_address_salt,\n            self.portal_contract_address,\n        ]\n    }\n\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA)\n    }\n}\n\n// PrivateContextInputs are expected to be provided to each private function\n// docs:start:private-context-inputs\nstruct PrivateContextInputs {\n    call_context : CallContext,\n    block_header: BlockHeader,\n    contract_deployment_data: ContractDeploymentData,\n    private_global_variables: PrivateGlobalVariables,\n}\n// docs:end:private-context-inputs\n\n// PublicContextInputs are expected to be provided to each public function\n// docs:start:public-context-inputs\nstruct PublicContextInputs {\n    call_context: CallContext,\n    block_header: BlockHeader,\n\n    public_global_variables: PublicGlobalVariables,\n}\n// docs:end:public-context-inputs\n\n// docs:start:call-context\nstruct CallContext {\n    msg_sender : Field,\n    storage_contract_address : Field,\n    portal_contract_address : Field,\n    function_selector: Field,\n\n    is_delegate_call : bool,\n    is_static_call : bool,\n    is_contract_deployment: bool,\n}\n// docs:end:call-context\n\nimpl CallContext {\n    fn serialize(self) -> [Field; CALL_CONTEXT_LENGTH] {\n        [\n            self.msg_sender,\n            self.storage_contract_address,\n            self.portal_contract_address,\n            self.function_selector,\n            self.is_delegate_call as Field,\n            self.is_static_call as Field,\n            self.is_contract_deployment as Field,\n        ]\n    }\n\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CALL_CONTEXT)\n    }\n}\n\n// docs:start:block-header\nstruct BlockHeader {\n    note_hash_tree_root : Field,\n    nullifier_tree_root : Field,\n    contract_tree_root : Field,\n    l1_to_l2_messages_tree_root : Field,\n    archive_root: Field,\n    public_data_tree_root: Field,\n    global_variables_hash: Field,\n}\n// docs:end:block-header\n\nimpl BlockHeader {\n    // NOTE: this order must match the order in `private_circuit_public_inputs.hpp`\n    pub fn serialize(self) -> [Field; BLOCK_HEADER_LENGTH] {\n        [\n            self.note_hash_tree_root,\n            self.nullifier_tree_root,\n            self.contract_tree_root,\n            self.l1_to_l2_messages_tree_root,\n            self.archive_root,\n            self.public_data_tree_root,\n            self.global_variables_hash,\n        ]\n    }\n\n    pub fn deserialize(deserialized: [Field; BLOCK_HEADER_LENGTH]) -> Self {\n        BlockHeader {\n            note_hash_tree_root: deserialized[0],\n            nullifier_tree_root: deserialized[1],\n            contract_tree_root: deserialized[2],\n            l1_to_l2_messages_tree_root: deserialized[3],\n            archive_root: deserialized[4],\n            public_data_tree_root: deserialized[5],\n            global_variables_hash: deserialized[6],\n        }\n    }\n\n    pub fn empty() -> Self {\n        Self { note_hash_tree_root: 0, nullifier_tree_root: 0, contract_tree_root: 0, l1_to_l2_messages_tree_root: 0, archive_root: 0, public_data_tree_root: 0, global_variables_hash: 0 }\n    }\n\n    pub fn block_hash(self) -> Field {\n        // TODO(#3442): Unify the ordering in `BlockHeader::serialize` function and the ordering\n        // in the block hash preimage --> This requires changes in the circuits.\n        let inputs = [\n            self.global_variables_hash,\n            self.note_hash_tree_root,\n            self.nullifier_tree_root,\n            self.contract_tree_root,\n            self.l1_to_l2_messages_tree_root,\n            self.public_data_tree_root\n        ];\n        pedersen_hash(inputs, GENERATOR_INDEX__BLOCK_HASH)\n    }\n}\n\nstruct FunctionData {\n    function_selector: Field,\n    is_internal: bool,\n    is_private: bool,\n    is_constructor: bool,\n}\n\nimpl FunctionData {\n    fn hash(self) -> Field {\n        pedersen_hash([\n            self.function_selector,\n            self.is_internal as Field,\n            self.is_private as Field,\n            self.is_constructor as Field,\n        ], GENERATOR_INDEX__FUNCTION_DATA)\n    }\n}\n\nstruct PrivateCircuitPublicInputs {\n    call_context: CallContext,\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n    read_requests: [Field; crate::abi::MAX_READ_REQUESTS_PER_CALL],\n    pending_read_requests: [Field; crate::abi::MAX_PENDING_READ_REQUESTS_PER_CALL],\n    new_commitments: [Field; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [Field; MAX_NEW_NULLIFIERS_PER_CALL],\n    nullified_commitments: [Field; MAX_NEW_NULLIFIERS_PER_CALL],\n    private_call_stack: [Field; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL],\n    public_call_stack: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_l2_to_l1_msgs: [Field; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    // Explore introducing a new type like uint256 (similar to Point), so it's more explicit that\n    // we're talking about a single number backed by two field elements.\n    encrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    encrypted_log_preimages_length: Field,\n    unencrypted_log_preimages_length: Field,\n    block_header: BlockHeader,\n    contract_deployment_data: ContractDeploymentData,\n    chain_id: Field,\n    version: Field,\n}\n\nimpl PrivateCircuitPublicInputs {\n    fn hash(self) -> Field {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0); \n        fields.push(self.call_context.hash());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.push_array(self.read_requests);\n        fields.push_array(self.pending_read_requests);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.nullified_commitments);\n        fields.push_array(self.private_call_stack);\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_header.serialize());\n        fields.push(self.contract_deployment_data.hash());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n\n        pedersen_hash(fields.storage, GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS)\n    }\n\n    fn serialize(self) -> [Field; PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.push_array(self.read_requests);\n        fields.push_array(self.pending_read_requests);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.private_call_stack);\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_header.serialize());\n        fields.push_array(self.contract_deployment_data.serialize());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n        fields.storage\n    }\n}\n\nstruct ContractStorageRead {\n    storage_slot: Field,\n    value: Field,\n}\n\nimpl ContractStorageRead {\n    pub fn serialize(self) -> [Field; CONTRACT_STORAGE_READ_LENGTH] {\n        [self.storage_slot, self.value]\n    }\n\n    pub fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_READ)\n    }\n\n    pub fn empty() -> Self {\n        Self { storage_slot: 0, value: 0 }\n    }\n}\n\nstruct ContractStorageUpdateRequest {\n    storage_slot: Field,\n    old_value: Field,\n    new_value: Field,\n}\n\nimpl ContractStorageUpdateRequest {\n    pub fn serialize(self) -> [Field; CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH] {\n        [self.storage_slot, self.old_value, self.new_value]\n    }\n\n    pub fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST)\n    }\n\n    pub fn empty() -> Self {\n        Self { storage_slot: 0, old_value: 0, new_value: 0 }\n    }\n}\n\nstruct PublicCircuitPublicInputs {\n    call_context: CallContext,\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n    contract_storage_update_requests: [ContractStorageUpdateRequest; MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n    contract_storage_read: [ContractStorageRead; MAX_PUBLIC_DATA_READS_PER_CALL],\n    public_call_stack: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_commitments: [Field; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [Field; crate::abi::MAX_NEW_NULLIFIERS_PER_CALL],\n    new_l2_to_l1_msgs: [Field; crate::abi::MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_log_preimages_length: Field,\n    block_header: BlockHeader,\n    prover_address: Field,\n}\n\nimpl PublicCircuitPublicInputs {\n    \n    pub fn hash(self) -> Field {\n        let mut inputs: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0);\n        inputs.push(self.call_context.hash());\n        inputs.push(self.args_hash);\n        inputs.push_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            inputs.push(self.contract_storage_update_requests[i].hash());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            inputs.push(self.contract_storage_read[i].hash());\n        }\n        inputs.push_array(self.public_call_stack);\n        inputs.push_array(self.new_commitments);\n        inputs.push_array(self.new_nullifiers);\n        inputs.push_array(self.new_l2_to_l1_msgs);\n\n        inputs.push_array(self.unencrypted_logs_hash);\n        inputs.push(self.unencrypted_log_preimages_length);\n        inputs.push_array(self.block_header.serialize());\n        inputs.push(self.prover_address);\n\n        pedersen_hash(inputs.storage, GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS)\n    }\n\n    pub fn serialize(self) -> [Field; PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());   \n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            fields.push_array(self.contract_storage_update_requests[i].serialize());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            fields.push_array(self.contract_storage_read[i].serialize());\n        }\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_header.serialize());\n        fields.push(self.prover_address);\n        fields.storage\n    }\n}\n\nstruct Hasher {\n    fields: [Field],\n}\n\nimpl Hasher {\n    pub fn new()-> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<N>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n\n    pub fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nglobal ARGS_HASH_CHUNK_LENGTH: u32 = 32;\nglobal ARGS_HASH_CHUNK_COUNT: u32 = 16;\n\npub fn hash_args<N>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        let mut chunks_hashes = [0; ARGS_HASH_CHUNK_COUNT];\n        for i in 0..ARGS_HASH_CHUNK_COUNT {\n            let mut chunk_hash = 0;\n            let start_chunk_index = i * ARGS_HASH_CHUNK_LENGTH;\n            if start_chunk_index < (args.len() as u32) {\n                let mut chunk_args = [0; ARGS_HASH_CHUNK_LENGTH];\n                for j in 0..ARGS_HASH_CHUNK_LENGTH {\n                    let item_index = i * ARGS_HASH_CHUNK_LENGTH + j;\n                    if item_index < (args.len() as u32) {\n                        chunk_args[j] = args[item_index];\n                    }\n                }\n                chunk_hash = pedersen_hash(chunk_args, GENERATOR_INDEX__FUNCTION_ARGS);\n            }\n            chunks_hashes[i] = chunk_hash;\n        }\n        pedersen_hash(chunks_hashes, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n",
                "path": "/aztec/abi.nr"
            },
            "93": {
                "source": "use dep::protocol_types::constants::GENERATOR_INDEX__CONTRACT_ADDRESS;\nuse crate::hash::pedersen_hash;\n\npub fn compute_address(pub_key_x: Field, pub_key_y: Field, partial_address: Field) -> Field {\n    pedersen_hash([pub_key_x, pub_key_y, partial_address],\n        GENERATOR_INDEX__CONTRACT_ADDRESS)\n}\n",
                "path": "/aztec/address.nr"
            },
            "94": {
                "source": "use dep::protocol_types::constants::{\n    EMPTY_NULLIFIED_COMMITMENT,\n    MAX_NEW_COMMITMENTS_PER_CALL,\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_READ_REQUESTS_PER_CALL,\n    MAX_PENDING_READ_REQUESTS_PER_CALL,\n    NUM_FIELDS_PER_SHA256,\n    RETURN_VALUES_LENGTH,\n};\n\nuse crate::abi;\n\nuse crate::abi::{\n    hash_args,\n    CallContext,\n    ContractDeploymentData,\n    BlockHeader,\n    FunctionData,\n    PrivateCircuitPublicInputs,\n    PublicCircuitPublicInputs,\n};\n\n// TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n// use dep::std::collections::vec::Vec;\n\n// l1 to l2 messaging\nuse crate::messaging::process_l1_to_l2_message;\nuse crate::private_call_stack_item::PrivateCallStackItem;\nuse crate::public_call_stack_item::PublicCallStackItem;\n\nuse crate::types::{\n    vec::BoundedVec,\n    point::Point,\n};\n\nuse crate::utils::arr_copy_slice;\n\nuse crate::oracle::{\n    arguments,\n    call_private_function::call_private_function_internal,\n    public_call::call_public_function_internal,\n    enqueue_public_function_call::enqueue_public_function_call_internal,\n    context::get_portal_address,\n    get_block_header::get_block_header,\n};\n\nuse dep::std::option::Option;\n\n// When finished, one can call .finish() to convert back to the abi\nstruct PrivateContext {\n    // docs:start:private-context\n    inputs: abi::PrivateContextInputs,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    read_requests: BoundedVec<Field, MAX_READ_REQUESTS_PER_CALL>,\n    pending_read_requests: BoundedVec<Field, MAX_PENDING_READ_REQUESTS_PER_CALL>,\n\n    new_commitments: BoundedVec<Field, MAX_NEW_COMMITMENTS_PER_CALL>,\n    new_nullifiers: BoundedVec<Field, MAX_NEW_NULLIFIERS_PER_CALL>,\n    nullified_commitments: BoundedVec<Field, MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    private_call_stack : BoundedVec<Field, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_stack : BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    new_l2_to_l1_msgs : BoundedVec<Field, MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    block_header: BlockHeader,\n\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    // encrypted_logs_preimages: Vec<Field>,\n    // unencrypted_logs_preimages: Vec<Field>,\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: abi::PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs: inputs,\n\n            args_hash: args_hash,\n            return_values: BoundedVec::new(0),\n\n            read_requests: BoundedVec::new(0),\n            pending_read_requests: BoundedVec::new(0),\n\n            new_commitments: BoundedVec::new(0),\n            new_nullifiers: BoundedVec::new(0),\n            nullified_commitments: BoundedVec::new(0),\n\n            block_header: inputs.block_header,\n\n            private_call_stack: BoundedVec::new(0),\n            public_call_stack: BoundedVec::new(0),\n            new_l2_to_l1_msgs: BoundedVec::new(0),\n\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    pub fn msg_sender(self) -> Field {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> Field {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    pub fn this_portal_address(self) -> Field {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.private_global_variables.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.private_global_variables.version\n    }\n\n    pub fn selector(self) -> Field {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn get_block_header(self, block_number: u32) -> BlockHeader {\n        get_block_header(block_number, self)\n    }\n\n    pub fn finish(self) -> abi::PrivateCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let encrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let encrypted_log_preimages_length = 0;\n        let unencrypted_log_preimages_length = 0;\n\n        let priv_circuit_pub_inputs = abi::PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            return_values: self.return_values.storage,\n            read_requests: self.read_requests.storage,\n            pending_read_requests: self.pending_read_requests.storage,\n            new_commitments: self.new_commitments.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            nullified_commitments: self.nullified_commitments.storage,\n            private_call_stack: self.private_call_stack.storage,\n            public_call_stack: self.public_call_stack.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            encrypted_logs_hash: encrypted_logs_hash,\n            unencrypted_logs_hash: unencrypted_logs_hash,\n            encrypted_log_preimages_length: encrypted_log_preimages_length,\n            unencrypted_log_preimages_length: unencrypted_log_preimages_length,\n            block_header: self.block_header,\n            contract_deployment_data: self.inputs.contract_deployment_data,\n            chain_id: self.inputs.private_global_variables.chain_id,\n            version: self.inputs.private_global_variables.version,\n        };\n        priv_circuit_pub_inputs\n    }\n\n    pub fn push_read_request(&mut self, read_request: Field) {\n        self.read_requests.push(read_request);\n    }\n\n    pub fn push_pending_read_request(&mut self, pending_read_request: Field) {\n        self.pending_read_requests.push(pending_read_request);\n    }\n\n    pub fn push_new_note_hash(&mut self, note_hash: Field) {\n        self.new_commitments.push(note_hash);\n    }\n\n    // We never push a zero nullified_commitment as zero is used to indicate the end\n    // of a field array in private kernel. This routine transparently replaces a\n    // zero value into the special placeholder: EMPTY_NULLIFIED_COMMITMENT.\n    pub fn push_new_nullifier(&mut self, nullifier: Field, nullified_commitment: Field) {\n        self.new_nullifiers.push(nullifier);\n        let mut non_zero_nullified = nullified_commitment;\n        if (non_zero_nullified == 0) {\n            non_zero_nullified = EMPTY_NULLIFIED_COMMITMENT;\n        }\n        self.nullified_commitments.push(non_zero_nullified);\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, content: Field) \n    // docs:end:context_message_portal\n    {\n        self.new_l2_to_l1_msgs.push(content);\n    }\n\n    // PrivateContextInputs must be temporarily passed in to prevent too many unknowns\n    // Note this returns self to get around an issue where mutable structs do not maintain mutations unless reassigned\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        msg_key: Field,\n        content: Field,\n        secret: Field\n    ) \n    // docs:end:context_consume_l1_to_l2_message\n    {\n        let nullifier = process_l1_to_l2_message(self.block_header.l1_to_l2_messages_tree_root, self.this_address(), self.this_portal_address(), self.chain_id(), self.version(), msg_key, content, secret);\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash)\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0)\n    }\n\n    pub fn call_private_function_with_packed_args(\n        &mut self,\n        contract_address: Field,\n        function_selector: Field,\n        args_hash: Field\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let fields = call_private_function_internal(\n            contract_address, \n            function_selector, \n            args_hash\n        );\n        let item = PrivateCallStackItem {\n            contract_address: fields[0],\n            function_data: FunctionData {\n                function_selector: fields[1],\n                is_internal: fields[2] as bool,\n                is_private: fields[3] as bool,\n                is_constructor: fields[4] as bool,\n            },\n            public_inputs: PrivateCircuitPublicInputs {\n                call_context: CallContext {\n                    msg_sender : fields[5],\n                    storage_contract_address : fields[6],\n                    portal_contract_address : fields[7],\n                    function_selector: fields[8], // practically same as fields[1]\n                    is_delegate_call : fields[9] as bool,\n                    is_static_call : fields[10] as bool,\n                    is_contract_deployment: fields[11] as bool,\n                },\n                // TODO handle the offsets as a variable incremented during extraction?\n                args_hash: fields[12],\n                return_values: arr_copy_slice(fields, [0; RETURN_VALUES_LENGTH], 13),\n                read_requests: arr_copy_slice(fields, [0; MAX_READ_REQUESTS_PER_CALL], 17),\n                pending_read_requests: arr_copy_slice(fields, [0; MAX_READ_REQUESTS_PER_CALL], 49),\n                new_commitments: arr_copy_slice(fields, [0; MAX_NEW_COMMITMENTS_PER_CALL], 81),\n                new_nullifiers: arr_copy_slice(fields, [0; MAX_NEW_NULLIFIERS_PER_CALL], 97),\n                nullified_commitments: arr_copy_slice(fields, [0; MAX_NEW_NULLIFIERS_PER_CALL], 113),\n                private_call_stack: arr_copy_slice(fields, [0; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL], 129),\n                public_call_stack: arr_copy_slice(fields, [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL], 133),\n                new_l2_to_l1_msgs: arr_copy_slice(fields, [0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL], 137),\n                encrypted_logs_hash: arr_copy_slice(fields, [0; NUM_FIELDS_PER_SHA256], 139),\n                unencrypted_logs_hash: arr_copy_slice(fields, [0; NUM_FIELDS_PER_SHA256], 141),\n                encrypted_log_preimages_length: fields[143],\n                unencrypted_log_preimages_length: fields[144],\n                block_header: BlockHeader {\n                    // Must match order in `private_circuit_public_inputs.hpp`\n                    note_hash_tree_root : fields[145],\n                    nullifier_tree_root : fields[146],\n                    contract_tree_root : fields[147],\n                    l1_to_l2_messages_tree_root : fields[148],\n                    archive_root : fields[149],\n                    public_data_tree_root: fields[150],\n                    global_variables_hash: fields[151],\n                },\n                contract_deployment_data: ContractDeploymentData {\n                    deployer_public_key: Point::new(fields[152], fields[153]),\n                    constructor_vk_hash : fields[154],\n                    function_tree_root : fields[155],\n                    contract_address_salt : fields[156],\n                    portal_contract_address : fields[157],\n                },\n                chain_id: fields[158],\n                version: fields[159],\n            },\n            is_execution_request: fields[160] as bool,\n        };\n        assert(contract_address == item.contract_address);\n        assert(function_selector == item.function_data.function_selector);\n\n        assert(args_hash == item.public_inputs.args_hash);\n\n        assert(item.is_execution_request == false);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        // We are issuing a regular call which is not delegate, static, or deployment. We also constrain\n        // the msg_sender in the nested call to be equal to our address, and the execution context address\n        // for the nested call to be equal to the address we actually called.\n        assert(item.public_inputs.call_context.is_delegate_call == false);\n        assert(item.public_inputs.call_context.is_static_call == false);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n        assert(item.public_inputs.call_context.msg_sender == self.inputs.call_context.storage_contract_address);\n        assert(item.public_inputs.call_context.storage_contract_address == contract_address);\n\n        self.private_call_stack.push(item.hash());\n\n        item.public_inputs.return_values\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field,\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: Field,\n        function_selector: Field,\n        args_hash: Field\n    ) {\n        let fields = enqueue_public_function_call_internal(\n            contract_address, \n            function_selector, \n            args_hash\n        );\n        let item = PublicCallStackItem {\n            contract_address: fields[0],\n            function_data: FunctionData {\n                function_selector: fields[1],\n                is_internal: fields[2] as bool,\n                is_private: fields[3] as bool,\n                is_constructor: fields[4] as bool,\n            },\n            public_inputs: PublicCircuitPublicInputs {\n                call_context: CallContext {\n                    msg_sender : fields[5],\n                    storage_contract_address : fields[6],\n                    portal_contract_address : fields[7],\n                    function_selector: fields[8], // practically same as fields[1]\n                    is_delegate_call : fields[9] as bool,\n                    is_static_call : fields[10] as bool,\n                    is_contract_deployment: fields[11] as bool,\n                },\n                args_hash: fields[12],\n                return_values: [0; RETURN_VALUES_LENGTH],\n                contract_storage_update_requests: [ContractStorageUpdateRequest::empty(); MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n                contract_storage_read: [ContractStorageRead::empty(); MAX_PUBLIC_DATA_READS_PER_CALL],\n                public_call_stack: [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n                new_commitments: [0; MAX_NEW_COMMITMENTS_PER_CALL],\n                new_nullifiers: [0; MAX_NEW_NULLIFIERS_PER_CALL],\n                new_l2_to_l1_msgs:[0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n                unencrypted_logs_hash:[0; NUM_FIELDS_PER_SHA256],\n                unencrypted_log_preimages_length: 0,\n                block_header: BlockHeader::empty(),\n                prover_address: 0,\n            },\n            is_execution_request: true,\n        };\n\n        assert(contract_address == item.contract_address);\n        assert(function_selector == item.function_data.function_selector);\n        \n        assert(args_hash == item.public_inputs.args_hash);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        // We are issuing a regular call which is not delegate, static, or deployment. We also constrain\n        // the msg_sender in the nested call to be equal to our address, and the execution context address\n        // for the nested call to be equal to the address we actually called.\n        assert(item.public_inputs.call_context.is_delegate_call == false);\n        assert(item.public_inputs.call_context.is_static_call == false);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n        assert(item.public_inputs.call_context.msg_sender == self.inputs.call_context.storage_contract_address);\n        assert(item.public_inputs.call_context.storage_contract_address == contract_address);\n\n        self.public_call_stack.push(item.hash());\n    }\n}\n\nuse crate::abi::{\n    ContractStorageRead,\n    ContractStorageUpdateRequest\n};\n\nstruct PublicContext {\n    inputs: abi::PublicContextInputs,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    contract_storage_update_requests: BoundedVec<ContractStorageUpdateRequest, MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL>,\n    contract_storage_read: BoundedVec<ContractStorageRead, MAX_PUBLIC_DATA_READS_PER_CALL>,\n    public_call_stack: BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n\n    new_commitments: BoundedVec<Field, MAX_NEW_COMMITMENTS_PER_CALL>,\n    new_nullifiers: BoundedVec<Field, crate::abi::MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    new_l2_to_l1_msgs: BoundedVec<Field, crate::abi::MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n\n    unencrypted_logs_hash: BoundedVec<Field, NUM_FIELDS_PER_SHA256>,\n    unencrypted_logs_preimages_length: Field,\n\n    block_header: BlockHeader,\n    prover_address: Field,\n}\n\nimpl PublicContext {\n    pub fn new(inputs: abi::PublicContextInputs, args_hash: Field) -> PublicContext {\n        let empty_storage_read = ContractStorageRead::empty();\n        let empty_storage_update = ContractStorageUpdateRequest::empty();\n        PublicContext {\n            inputs: inputs,\n\n            args_hash: args_hash,\n            return_values: BoundedVec::new(0),\n\n            contract_storage_update_requests: BoundedVec::new(empty_storage_update),\n            contract_storage_read: BoundedVec::new(empty_storage_read),\n            public_call_stack: BoundedVec::new(0),\n\n            new_commitments: BoundedVec::new(0),\n            new_nullifiers: BoundedVec::new(0),\n\n            new_l2_to_l1_msgs: BoundedVec::new(0),\n\n            \n            unencrypted_logs_hash: BoundedVec::new(0),\n            unencrypted_logs_preimages_length: 0,\n\n            block_header: inputs.block_header,\n            prover_address: 0,\n\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    pub fn msg_sender(self) -> Field {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> Field {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    pub fn this_portal_address(self) -> Field {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.public_global_variables.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.public_global_variables.version\n    }\n\n    pub fn selector(self) -> Field {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn block_number(self) -> Field {\n        self.inputs.public_global_variables.block_number\n    }\n\n    pub fn timestamp(self) -> Field {\n        self.inputs.public_global_variables.timestamp\n    }\n\n    pub fn finish(self) -> abi::PublicCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_log_preimages_length = 0;\n\n\n        // Compute the public call stack hashes\n        let pub_circuit_pub_inputs = abi::PublicCircuitPublicInputs {\n            call_context: self.inputs.call_context, // Done\n            args_hash: self.args_hash, // Done\n            contract_storage_update_requests: self.contract_storage_update_requests.storage,\n            contract_storage_read: self.contract_storage_read.storage,\n            return_values: self.return_values.storage,\n            new_commitments: self.new_commitments.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            public_call_stack: self.public_call_stack.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            unencrypted_logs_hash: unencrypted_logs_hash,\n            unencrypted_log_preimages_length: unencrypted_log_preimages_length,\n            block_header: self.inputs.block_header,\n            prover_address: self.prover_address,\n        };\n        pub_circuit_pub_inputs\n    }\n\n    pub fn push_new_note_hash(&mut self, note_hash: Field) {\n        self.new_commitments.push(note_hash);\n    }\n\n    pub fn push_new_nullifier(&mut self, nullifier: Field, _nullified_commitment: Field) {\n        self.new_nullifiers.push(nullifier);\n    }\n\n    pub fn message_portal(&mut self, content: Field) {\n        self.new_l2_to_l1_msgs.push(content);\n    }\n\n    // PrivateContextInputs must be temporarily passed in to prevent too many unknowns\n    // Note this returns self to get around an issue where mutable structs do not maintain mutations unless reassigned\n    pub fn consume_l1_to_l2_message(&mut self, msg_key: Field, content: Field, secret: Field) {\n        let this = (*self).this_address();\n        let nullifier = process_l1_to_l2_message(self.block_header.l1_to_l2_messages_tree_root, this, self.this_portal_address(), self.chain_id(), self.version(), msg_key, content, secret);\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT)\n    }\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        _self: Self,\n        contract_address: Field, \n        function_selector: Field,\n        args: [Field; ARGS_COUNT],\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = abi::hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        call_public_function_internal(\n            contract_address, \n            function_selector, \n            args_hash,\n        )\n    }\n\n    pub fn call_public_function_no_args(\n        _self: Self,\n        contract_address: Field, \n        function_selector: Field,\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        call_public_function_internal(\n            contract_address, \n            function_selector, \n            0,\n        )\n    }\n\n}\n\nstruct Context {\n    private: Option<&mut PrivateContext>,\n    public: Option<&mut PublicContext>,\n}\n\nimpl Context {\n    pub fn private(context: &mut PrivateContext) -> Context {\n        Context {\n            private: Option::some(context),\n            public: Option::none()\n        }\n    }\n\n    pub fn public(context: &mut PublicContext) -> Context {\n        Context {\n            public: Option::some(context),\n            private: Option::none()\n        }\n    }\n\n    pub fn none() -> Context {\n        Context {\n            public: Option::none(),\n            private: Option::none()\n        }\n    }\n}\n",
                "path": "/aztec/context.nr"
            },
            "95": {
                "source": "use dep::std::hash::{pedersen_hash_with_separator, sha256};\nuse dep::protocol_types::constants::{\n  GENERATOR_INDEX__SIGNATURE_PAYLOAD,\n  GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET,\n};\n\npub fn sha256_to_field<N>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = sha256(bytes_to_hash);\n\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (sha256_hashed[15 - i] as Field) * v;\n        low = low + (sha256_hashed[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    let hash_in_a_field = low + high * v;\n\n    hash_in_a_field\n}\n\npub fn compute_secret_hash(secret: Field) -> Field {\n    // TODO(#1205) This is probably not the right index to use\n    pedersen_hash([secret], GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET)\n}\n\npub fn pedersen_hash<N>(inputs: [Field; N], hash_index: u32) -> Field {\n    pedersen_hash_with_separator(inputs, hash_index)\n}\n",
                "path": "/aztec/hash.nr"
            },
            "102": {
                "source": "use crate::context::{PrivateContext, PublicContext};\nuse crate::oracle;\nuse crate::types::point::Point;\n\npub fn emit_encrypted_log<N>(\n    context: &mut PrivateContext,\n    contract_address: Field,\n    storage_slot: Field,\n    encryption_pub_key: Point,\n    log: [Field; N]\n) {\n    let _ = oracle::logs::emit_encrypted_log(contract_address, storage_slot, encryption_pub_key, log);\n    context.accumulate_encrypted_logs(log);\n}\n\npub fn emit_unencrypted_log<T>(context: &mut PublicContext, log: T) {\n    let contract_address = context.this_address();\n    let event_selector = 5; // TODO: compute actual event selector.\n    let _ = oracle::logs::emit_unencrypted_log(contract_address, event_selector, log);\n    // context.accumulate_unencrypted_logs(log);\n}\n\n// TODO: We might want to remove this since emitting unencrypted logs from private functions is violating privacy.\n// --> might be a better approach to force devs to make a public function call that emits the log if needed then\n// it would be less easy to accidentally leak information.\n// If we decide to keep this function around would make sense to wait for traits and then merge it with emit_unencrypted_log.\npub fn emit_unencrypted_log_from_private<T>(context: &mut PrivateContext, log: T) {\n    let contract_address = context.this_address();\n    let event_selector = 5; // TODO: compute actual event selector.\n    let _ = oracle::logs::emit_unencrypted_log(contract_address, event_selector, log);\n    // context.accumulate_unencrypted_logs(log);\n}\n",
                "path": "/aztec/log.nr"
            },
            "107": {
                "source": "use crate::abi::PublicContextInputs;\nuse crate::context::{\n    PrivateContext,\n    PublicContext,\n};\nuse crate::note::{\n    note_header::NoteHeader,\n    note_interface::NoteInterface,\n    utils::compute_inner_note_hash,\n};\nuse crate::oracle::notes::{notify_created_note, notify_nullified_note};\nuse dep::protocol_types::constants::EMPTY_NULLIFIED_COMMITMENT;\n\npub fn create_note<Note, N>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note: &mut Note,\n    note_interface: NoteInterface<Note, N>,\n    broadcast: bool\n) {\n    let contract_address = (*context).this_address();\n\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, is_transient: true };\n    let set_header = note_interface.set_header;\n    set_header(note, header);\n    let inner_note_hash = compute_inner_note_hash(note_interface, *note);\n\n    let serialize = note_interface.serialize;\n    let serialized_note = serialize(*note);\n    assert(notify_created_note(storage_slot, serialized_note, inner_note_hash) == 0);\n\n    context.push_new_note_hash(inner_note_hash);\n\n    if broadcast {\n        let broadcast = note_interface.broadcast;\n        broadcast(context, storage_slot, *note);\n    }\n}\n\npub fn create_note_hash_from_public<Note, N>(\n    context: &mut PublicContext,\n    storage_slot: Field,\n    note: &mut Note,\n    note_interface: NoteInterface<Note, N>\n) {\n    let contract_address = (*context).this_address();\n\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, is_transient: true };\n    let set_header = note_interface.set_header;\n    set_header(note, header);\n    let inner_note_hash = compute_inner_note_hash(note_interface, *note);\n\n    context.push_new_note_hash(inner_note_hash);\n}\n\npub fn destroy_note<Note, N>(context: &mut PrivateContext, note: Note, note_interface: NoteInterface<Note, N>) {\n    let mut nullifier = 0;\n    let mut nullified_commitment: Field = EMPTY_NULLIFIED_COMMITMENT;\n    let compute_nullifier = note_interface.compute_nullifier;\n    nullifier = compute_nullifier(note);\n\n    // We also need the note commitment corresponding to the \"nullifier\"\n    let get_header = note_interface.get_header;\n    let header = get_header(note);\n    // `nullified_commitment` is used to inform the kernel which pending commitment\n    // the nullifier corresponds to so they can be matched and both squashed/deleted.\n    // nonzero nonce implies \"persistable\" nullifier (nullifies a persistent/in-tree\n    // commitment) in which case `nullified_commitment` is not used since the kernel\n    // just siloes and forwards the nullifier to its output.\n    if (header.is_transient) {\n        // TODO(1718): Can we reuse the note commitment computed in `compute_nullifier`?\n        nullified_commitment = compute_inner_note_hash(note_interface, note);\n    }\n    assert(notify_nullified_note(nullifier, nullified_commitment) == 0);\n\n    context.push_new_nullifier(nullifier, nullified_commitment)\n}\n",
                "path": "/aztec/note/lifecycle.nr"
            },
            "108": {
                "source": "use dep::std::option::Option;\nuse dep::protocol_types::constants::{\n    MAX_READ_REQUESTS_PER_CALL,\n    GET_NOTE_ORACLE_RETURN_LENGTH,\n    GET_NOTES_ORACLE_RETURN_LENGTH,\n    MAX_NOTES_PER_PAGE,\n    VIEW_NOTE_ORACLE_RETURN_LENGTH,\n};\nuse crate::context::PrivateContext;\nuse crate::note::{\n    note_getter_options::{NoteGetterOptions, Select, Sort, SortOrder},\n    note_interface::NoteInterface,\n    note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_read_or_nullify,\n};\nuse crate::oracle;\nuse crate::types::vec::BoundedVec;\n\nfn check_note_header<Note, N>(context: PrivateContext, storage_slot: Field, note_interface: NoteInterface<Note, N>, note: Note) {\n    let get_header = note_interface.get_header;\n    let header = get_header(note);\n    let contract_address = context.this_address();\n    assert(header.contract_address == contract_address);\n    assert(header.storage_slot == storage_slot);\n}\n\nfn check_note_fields<N>(fields: [Field; N], selects: BoundedVec<Option<Select>, N>) {\n    for i in 0..selects.len {\n        let select = selects.get_unchecked(i).unwrap_unchecked();\n        assert(fields[select.field_index] == select.value, \"Mismatch return note field.\");\n    }\n}\n\nfn check_notes_order<N>(fields_0: [Field; N], fields_1: [Field; N], sorts: BoundedVec<Option<Sort>, N>) {\n    for i in 0..sorts.len {\n        let sort = sorts.get_unchecked(i).unwrap_unchecked();\n        let eq = fields_0[sort.field_index] == fields_1[sort.field_index];\n        let lt = fields_0[sort.field_index] as u120 < fields_1[sort.field_index] as u120;\n        if sort.order == SortOrder.ASC {\n            assert(eq | lt, \"Return notes not sorted in ascending order.\");\n        } else if !eq {\n            assert(!lt, \"Return notes not sorted in descending order.\");\n        }\n    }\n}\n\npub fn get_note<Note, N>(context: &mut PrivateContext, storage_slot: Field, note_interface: NoteInterface<Note, N>) -> Note {\n    let note = get_note_internal(storage_slot, note_interface);\n\n    check_note_header(*context, storage_slot, note_interface, note);\n\n    let note_hash_for_read_request = compute_note_hash_for_read_or_nullify(note_interface, note);\n\n    context.push_read_request(note_hash_for_read_request);\n    note\n}\n\npub fn get_notes<Note, N, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    options: NoteGetterOptions<Note, N, FILTER_ARGS>\n) -> [Option<Note>; MAX_READ_REQUESTS_PER_CALL] {\n    let opt_notes = get_notes_internal(storage_slot, note_interface, options);\n    let mut num_notes = 0;\n    let mut prev_fields = [0; N];\n    for i in 0..opt_notes.len() {\n        let opt_note = opt_notes[i];\n        if opt_note.is_some() {\n            let note = opt_note.unwrap_unchecked();\n            let serialize = note_interface.serialize;\n            let fields = serialize(note);\n            check_note_header(*context, storage_slot, note_interface, note);\n            check_note_fields(fields, options.selects);\n            if i != 0 {\n                check_notes_order(prev_fields, fields, options.sorts);\n            }\n            prev_fields = fields;\n\n            let note_hash_for_read_request = compute_note_hash_for_read_or_nullify(note_interface, note);\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1410): test to ensure\n            // failure if malicious oracle injects 0 nonce here for a \"pre-existing\" note.\n            context.push_read_request(note_hash_for_read_request);\n\n            num_notes += 1;\n        };\n    }\n    if options.limit != 0 {\n        assert(num_notes <= options.limit, \"Invalid number of return notes.\");\n    }\n    opt_notes\n}\n\nunconstrained fn get_note_internal<Note, N>(storage_slot: Field, note_interface: NoteInterface<Note, N>) -> Note {\n    let placeholder_note = [Option::none()];\n    let placeholder_fields = [0; GET_NOTE_ORACLE_RETURN_LENGTH];\n    oracle::notes::get_notes(storage_slot,\n        note_interface,\n        0,\n        [],\n        [],\n        [],\n        [],\n        1, // limit\n        0, // offset\n        placeholder_note,\n        placeholder_fields)[0].unwrap() // Notice: we don't allow dummies to be returned from get_note (singular).\n}\n\nunconstrained fn get_notes_internal<Note, N, FILTER_ARGS>(\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    options: NoteGetterOptions<Note, N, FILTER_ARGS>\n) -> [Option<Note>; MAX_READ_REQUESTS_PER_CALL] {\n    let (num_selects, select_by, select_values, sort_by, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_READ_REQUESTS_PER_CALL];\n    let placeholder_fields = [0; GET_NOTES_ORACLE_RETURN_LENGTH];\n    let opt_notes = oracle::notes::get_notes(storage_slot,\n        note_interface,\n        num_selects,\n        select_by,\n        select_values,\n        sort_by,\n        sort_order,\n        options.limit,\n        options.offset,\n        placeholder_opt_notes,\n        placeholder_fields);\n\n    let filter = options.filter;\n    let filter_args = options.filter_args;\n    filter(opt_notes, filter_args)\n}\n\nunconstrained pub fn view_notes<Note, N>(storage_slot: Field, note_interface: NoteInterface<Note, N>, options: NoteViewerOptions<Note, N>) -> [Option<Note>; MAX_NOTES_PER_PAGE] {\n    let (num_selects, select_by, select_values, sort_by, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_NOTES_PER_PAGE];\n    let placeholder_fields = [0; VIEW_NOTE_ORACLE_RETURN_LENGTH];\n    oracle::notes::get_notes(storage_slot,\n        note_interface,\n        num_selects,\n        select_by,\n        select_values,\n        sort_by,\n        sort_order,\n        options.limit,\n        options.offset,\n        placeholder_opt_notes,\n        placeholder_fields)\n}\n\nunconstrained fn flatten_options<Note, N>(selects: BoundedVec<Option<Select>, N>, sorts: BoundedVec<Option<Sort>, N>) -> (u8, [u8; N], [Field; N], [u8; N], [u2; N]) {\n    let mut num_selects = 0;\n    let mut select_by = [0; N];\n    let mut select_values = [0; N];\n    for i in 0..selects.len {\n        let select = selects.get(i);\n        if select.is_some() {\n            select_by[num_selects] = select.unwrap_unchecked().field_index;\n            select_values[num_selects] = select.unwrap_unchecked().value;\n            num_selects += 1;\n        };\n    }\n\n    let mut sort_by = [0; N];\n    let mut sort_order = [0; N];\n    for i in 0..sorts.len {\n        let sort = sorts.get(i);\n        if sort.is_some() {\n            sort_by[i] = sort.unwrap_unchecked().field_index;\n            sort_order[i] = sort.unwrap_unchecked().order;\n        };\n    }\n\n    (num_selects, select_by, select_values, sort_by, sort_order)\n}\n",
                "path": "/aztec/note/note_getter.nr"
            },
            "110": {
                "source": "use crate::hash::pedersen_hash;\nuse dep::protocol_types::constants::{GENERATOR_INDEX__UNIQUE_COMMITMENT, GENERATOR_INDEX__SILOED_COMMITMENT};\n\npub fn compute_inner_hash(storage_slot: Field, note_hash: Field) -> Field {\n    // TODO(#1205) Do we need a generator index here?\n    pedersen_hash([storage_slot, note_hash], 0)\n}\n\npub fn compute_siloed_hash(contract_address: Field, inner_note_hash: Field) -> Field {\n    let inputs = [contract_address, inner_note_hash];\n    pedersen_hash(inputs, GENERATOR_INDEX__SILOED_COMMITMENT)\n}\n\npub fn compute_unique_hash(nonce: Field, siloed_note_hash: Field) -> Field {\n    let inputs = [nonce, siloed_note_hash];\n    pedersen_hash(inputs, GENERATOR_INDEX__UNIQUE_COMMITMENT)\n}\n",
                "path": "/aztec/note/note_hash.nr"
            },
            "113": {
                "source": "use dep::std::option::Option;\nuse dep::protocol_types::constants::MAX_NOTES_PER_PAGE;\nuse crate::note::note_getter_options::{Select, Sort};\nuse crate::types::vec::BoundedVec;\n\n// docs:start:NoteViewerOptions\nstruct NoteViewerOptions<Note, N> {\n    selects: BoundedVec<Option<Select>, N>,\n    sorts: BoundedVec<Option<Sort>, N>,\n    limit: u32,\n    offset: u32,\n}\n// docs:end:NoteViewerOptions\n\nimpl<Note, N> NoteViewerOptions<Note, N> {\n    pub fn new() -> NoteViewerOptions<Note, N> {\n        NoteViewerOptions {\n            selects: BoundedVec::new(Option::none()),\n            sorts: BoundedVec::new(Option::none()),\n            limit: MAX_NOTES_PER_PAGE as u32,\n            offset: 0,\n        }\n    }\n\n    pub fn select(&mut self, field_index: u8, value: Field) -> Self {\n        self.selects.push(Option::some(Select::new(field_index, value)));\n        *self\n    }\n\n    pub fn sort(&mut self, field_index: u8, order: u2) -> Self {\n        self.sorts.push(Option::some(Sort::new(field_index, order)));\n        *self\n    }\n\n    pub fn set_limit(&mut self, limit: u32) -> Self {\n        assert(limit <= MAX_NOTES_PER_PAGE as u32);\n        self.limit = limit;\n        *self\n    }\n\n    pub fn set_offset(&mut self, offset: u32) -> Self {\n        self.offset = offset;\n        *self\n    }\n}\n",
                "path": "/aztec/note/note_viewer_options.nr"
            },
            "114": {
                "source": "use dep::protocol_types::constants::GENERATOR_INDEX__OUTER_NULLIFIER;\nuse crate::{\n    note::{\n        note_hash::{compute_inner_hash, compute_siloed_hash, compute_unique_hash},\n        note_header::NoteHeader,\n        note_interface::NoteInterface,\n    },\n    utils::arr_copy_slice,\n    hash::pedersen_hash,\n};\n\npub fn compute_inner_note_hash<Note, N>(note_interface: NoteInterface<Note, N>, note: Note) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note);\n\n    let compute_note_hash = note_interface.compute_note_hash;\n    let note_hash = compute_note_hash(note);\n\n    compute_inner_hash(header.storage_slot, note_hash)\n}\n\npub fn compute_siloed_note_hash<Note, N>(note_interface: NoteInterface<Note, N>, note_with_header: Note) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note_with_header);\n\n    let inner_note_hash = compute_inner_note_hash(note_interface, note_with_header);\n\n    compute_siloed_hash(header.contract_address, inner_note_hash)\n}\n\npub fn compute_unique_siloed_note_hash<Note, N>(note_interface: NoteInterface<Note, N>, note_with_header: Note) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note_with_header);\n\n    let siloed_note_hash = compute_siloed_note_hash(note_interface, note_with_header);\n\n    compute_unique_hash(header.nonce, siloed_note_hash)\n}\n\npub fn compute_siloed_nullifier<Note, N>(note_interface: NoteInterface<Note, N>, note_with_header: Note) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note_with_header);\n\n    let compute_nullifier = note_interface.compute_nullifier;\n    let inner_nullifier = compute_nullifier(note_with_header);\n\n    let input = [header.contract_address, inner_nullifier];\n    pedersen_hash(input, GENERATOR_INDEX__OUTER_NULLIFIER)\n}\n\npub fn compute_note_hash_for_read_or_nullify<Note, N>(note_interface: NoteInterface<Note, N>, note_with_header: Note) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note_with_header);\n\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1386)\n    if (header.is_transient) {\n        // If a note is transient, we just read the inner_note_hash (kernel will silo by contract address).\n        compute_inner_note_hash(note_interface, note_with_header)\n    } else if (header.nonce == 0) {\n        // If not transient and nonce is zero, that means we are reading a public note.\n        compute_siloed_note_hash(note_interface, note_with_header)\n    } else {\n        // When nonce is nonzero, that means we are reading a settled note (from tree) created in a\n        // previous TX. So we need the unique_siloed_note_hash which has already been hashed with\n        // contract address and then nonce. This hash will match the existing leaf in the private\n        // data tree, so the kernel can just perform a membership check directly on this hash/leaf.\n        compute_unique_siloed_note_hash(note_interface, note_with_header)\n    }\n}\n\npub fn compute_note_hash_and_nullifier<Note, N, S>(note_interface: NoteInterface<Note, N>, note_header: NoteHeader, serialized_note: [Field; S]) -> [Field; 4] {\n    let deserialize = note_interface.deserialize;\n    let set_header = note_interface.set_header;\n    let mut note = deserialize(arr_copy_slice(serialized_note, [0; N], 0));\n    set_header(&mut note, note_header);\n\n    let compute_note_hash = note_interface.compute_note_hash;\n    let note_hash = compute_note_hash(note);\n    let inner_note_hash = compute_inner_hash(note_header.storage_slot, note_hash);\n\n    let siloed_note_hash = compute_siloed_hash(note_header.contract_address, inner_note_hash);\n\n    let unique_siloed_note_hash = compute_unique_hash(note_header.nonce, siloed_note_hash);\n\n    let compute_nullifier = note_interface.compute_nullifier;\n    let inner_nullifier = compute_nullifier(note);\n\n    [inner_note_hash, siloed_note_hash, unique_siloed_note_hash, inner_nullifier]\n}\n",
                "path": "/aztec/note/utils.nr"
            },
            "116": {
                "source": "#[oracle(packArguments)]\nfn pack_arguments_oracle<N>(_args: [Field; N]) -> Field {}\n\n// TODO: explain what this does.\nunconstrained pub fn pack_arguments<N>(args: [Field; N]) -> Field {\n    pack_arguments_oracle(args)\n}\n",
                "path": "/aztec/oracle/arguments.nr"
            },
            "117": {
                "source": "use dep::protocol_types::constants::CALL_PRIVATE_FUNCTION_RETURN_SIZE;\n\n#[oracle(callPrivateFunction)]\nfn call_private_function_oracle(_contract_address: Field, _function_selector: Field, _args_hash: Field) -> [Field; CALL_PRIVATE_FUNCTION_RETURN_SIZE] {}\n\nunconstrained pub fn call_private_function_internal(contract_address: Field, function_selector: Field, args_hash: Field) -> [Field; CALL_PRIVATE_FUNCTION_RETURN_SIZE] {\n    call_private_function_oracle(contract_address, function_selector, args_hash)\n}\n",
                "path": "/aztec/oracle/call_private_function.nr"
            },
            "123": {
                "source": "use crate::types::point::Point;\nuse crate::address::compute_address;\n\n#[oracle(getPublicKeyAndPartialAddress)]\nfn get_public_key_and_partial_address_oracle(_address: Field) -> [Field; 3] {}\n\nunconstrained fn get_public_key_and_partial_address_internal(address: Field) -> [Field; 3] {\n    get_public_key_and_partial_address_oracle(address)\n}\n\npub fn get_public_key(address: Field) -> Point {\n    let result = get_public_key_and_partial_address_internal(address);\n    let pub_key_x = result[0];\n    let pub_key_y = result[1];\n    let partial_address = result[2];\n\n    let calculated_address = compute_address(pub_key_x, pub_key_y, partial_address);\n    assert(calculated_address == address);\n\n    Point::new(pub_key_x, pub_key_y)\n}\n",
                "path": "/aztec/oracle/get_public_key.nr"
            },
            "124": {
                "source": "use crate::oracle::get_public_key::get_public_key;\nuse crate::types::point::Point;\n\n#[oracle(getSecretKey)]\nfn get_secret_key_oracle(_owner: Point) -> [Field; dep::std::grumpkin_scalar::GRUMPKIN_SCALAR_SERIALIZED_LEN] {}\n\nunconstrained fn get_secret_key_internal(owner_public_key: Point) -> dep::std::grumpkin_scalar::GrumpkinScalar {\n    dep::std::grumpkin_scalar::deserialize_grumpkin_scalar(get_secret_key_oracle(owner_public_key))\n}\n\npub fn get_secret_key(owner: Field) -> dep::std::grumpkin_scalar::GrumpkinScalar {\n    let owner_public_key = get_public_key(owner);\n    let secret = get_secret_key_internal(owner_public_key);\n\n    // Constrain the owner - Nullifier secret key is currently just the encryption private key so we can constrain\n    // the owner by deriving the public key from the secret key and checking the result.\n    let computed_public_key = dep::std::grumpkin_scalar_mul::grumpkin_fixed_base(secret);\n    assert(owner_public_key.x == computed_public_key[0]);\n    assert(owner_public_key.y == computed_public_key[1]);\n\n    secret\n}\n",
                "path": "/aztec/oracle/get_secret_key.nr"
            },
            "127": {
                "source": "\n// contract_address + \n// args_hash +\n// crate::abi::FUNCTION_DATA_SIZE +\n// crate::abi::CALL_CONTEXT_SIZE +\n// = 2 + 4 + 7\nglobal ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE: Field = 13;\n\n#[oracle(enqueuePublicFunctionCall)]\nfn enqueue_public_function_call_oracle(_contract_address: Field, _function_selector: Field, _args_hash: Field) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE] {}\n\nunconstrained pub fn enqueue_public_function_call_internal(contract_address: Field, function_selector: Field, args_hash: Field) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE] {\n    enqueue_public_function_call_oracle(contract_address, function_selector, args_hash)\n}\n",
                "path": "/aztec/oracle/enqueue_public_function_call.nr"
            },
            "130": {
                "source": "use dep::std::option::Option;\nuse crate::note::{\n    note_header::NoteHeader,\n    note_interface::NoteInterface,\n};\nuse crate::utils::arr_copy_slice;\n\n#[oracle(notifyCreatedNote)]\nfn notify_created_note_oracle<N>(_storage_slot: Field, _serialized_note: [Field; N], _inner_note_hash: Field) -> Field {}\n\nunconstrained pub fn notify_created_note<N>(storage_slot: Field, serialized_note: [Field; N], inner_note_hash: Field) -> Field {\n    notify_created_note_oracle(storage_slot, serialized_note, inner_note_hash)\n}\n\n#[oracle(notifyNullifiedNote)]\nfn notify_nullified_note_oracle<N>(_nullifier: Field, _inner_note_hash: Field) -> Field {}\n\nunconstrained pub fn notify_nullified_note<N>(nullifier: Field, inner_note_hash: Field) -> Field {\n    notify_nullified_note_oracle(nullifier, inner_note_hash)\n}\n\n#[oracle(getNotes)]\nfn get_notes_oracle<N, S>(\n    _storage_slot: Field,\n    _num_selects: u8,\n    _select_by: [u8; N],\n    _select_values: [Field; N],\n    _sort_by: [u8; N],\n    _sort_order: [u2; N],\n    _limit: u32,\n    _offset: u32,\n    _return_size: u32,\n    _placeholder_fields: [Field; S]\n) -> [Field; S] {}\n\nunconstrained fn get_notes_oracle_wrapper<N, S>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by: [u8; N],\n    select_values: [Field; N],\n    sort_by: [u8; N],\n    sort_order: [u2; N],\n    limit: u32,\n    offset: u32,\n    mut placeholder_fields: [Field; S]\n) -> [Field; S] {\n    let return_size = placeholder_fields.len() as u32;\n    get_notes_oracle(storage_slot,\n        num_selects,\n        select_by,\n        select_values,\n        sort_by,\n        sort_order,\n        limit,\n        offset,\n        return_size,\n        placeholder_fields)\n}\n\nunconstrained pub fn get_notes<Note, N, M, S, NS>(\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    num_selects: u8,\n    select_by: [u8; M],\n    select_values: [Field; M],\n    sort_by: [u8; M],\n    sort_order: [u2; M],\n    limit: u32,\n    offset: u32,\n    mut placeholder_opt_notes: [Option<Note>; S], // TODO: Remove it and use `limit` to initialize the note array.\n    placeholder_fields: [Field; NS] // TODO: Remove it and use `limit` to initialize the note array.\n) -> [Option<Note>; S] {\n    let fields = get_notes_oracle_wrapper(storage_slot,\n        num_selects,\n        select_by,\n        select_values,\n        sort_by,\n        sort_order,\n        limit,\n        offset,\n        placeholder_fields);\n    let num_notes = fields[0] as u32;\n    let contract_address = fields[1];\n    let deserialize = note_interface.deserialize;\n    let set_header = note_interface.set_header;\n    for i in 0..placeholder_opt_notes.len() {\n        if i as u32 < num_notes {\n            // lengths named as per typescript.\n            let return_header_length: Field = 2; // num_notes & contract_address.\n            let extra_preimage_length: Field = 2; // nonce & is_transient.\n            let read_offset: Field = return_header_length + i * (N + extra_preimage_length);\n            let nonce = fields[read_offset];\n            let is_transient = fields[read_offset + 1] as bool;\n            let header = NoteHeader { contract_address, nonce, storage_slot, is_transient };\n            let serialized_note = arr_copy_slice(fields, [0; N], read_offset + 2);\n            let mut note = deserialize(serialized_note);\n            set_header(&mut note, header);\n            placeholder_opt_notes[i] = Option::some(note);\n        };\n    }\n    placeholder_opt_notes\n}\n\n#[oracle(checkNullifierExists)]\nfn check_nullifier_exists_oracle(_inner_nullifier: Field) -> Field {}\n\nunconstrained pub fn check_nullifier_exists(inner_nullifier: Field) -> bool {\n    check_nullifier_exists_oracle(inner_nullifier) == 1\n}\n",
                "path": "/aztec/oracle/notes.nr"
            },
            "131": {
                "source": "#[oracle(storageRead)]\nfn storage_read_oracle<N>(_storage_slot: Field, _number_of_elements: Field) -> [Field; N] {}\n\nunconstrained fn storage_read_oracle_wrapper<N>(_storage_slot: Field) -> [Field; N] {\n    storage_read_oracle(_storage_slot, N)\n}\n\npub fn storage_read<T, N>(storage_slot: Field, deserialize: fn ([Field; N]) -> T) -> T {\n    let fields = storage_read_oracle_wrapper(storage_slot);\n    deserialize(fields)\n}\n\n#[oracle(storageWrite)]\nfn storage_write_oracle<N>(_storage_slot: Field, _values: [Field; N]) -> [Field; N] {}\n\n// TODO: Remove return value.\nunconstrained pub fn storage_write<N>(storage_slot: Field, fields: [Field; N]) {\n    let _hash = storage_write_oracle(storage_slot, fields);\n}\n",
                "path": "/aztec/oracle/storage.nr"
            },
            "132": {
                "source": "use crate::types::point::Point;\nuse dep::protocol_types::constants::NUM_FIELDS_PER_SHA256;\n\n// TODO: Should take encrypted data.\n#[oracle(emitEncryptedLog)]\nfn emit_encrypted_log_oracle<N>(_contract_address: Field, _storage_slot: Field, _encryption_pub_key: Point, _preimage: [Field; N]) -> Field {}\n\nunconstrained pub fn emit_encrypted_log<N>(contract_address: Field, storage_slot: Field, encryption_pub_key: Point, preimage: [Field; N]) -> [Field; NUM_FIELDS_PER_SHA256] {\n    [emit_encrypted_log_oracle(contract_address, storage_slot, encryption_pub_key, preimage), 0]\n}\n\n#[oracle(emitUnencryptedLog)]\nfn emit_unencrypted_log_oracle<T>(_contract_address: Field, _event_selector: Field, _message: T) -> Field {}\n\nunconstrained pub fn emit_unencrypted_log<T>(contract_address: Field, event_selector: Field, message: T) -> [Field; NUM_FIELDS_PER_SHA256] {\n    // https://github.com/AztecProtocol/aztec-packages/issues/885\n    [emit_unencrypted_log_oracle(contract_address, event_selector, message), 0]\n}\n",
                "path": "/aztec/oracle/logs.nr"
            },
            "133": {
                "source": "use crate::abi::FunctionData;\nuse crate::abi::PrivateCircuitPublicInputs;\nuse dep::protocol_types::constants::GENERATOR_INDEX__CALL_STACK_ITEM;\nuse crate::hash::pedersen_hash;\n\nstruct PrivateCallStackItem {\n    contract_address: Field,\n    function_data: FunctionData,\n    public_inputs: PrivateCircuitPublicInputs,\n    is_execution_request: bool,\n}\n\nimpl PrivateCallStackItem {\n    pub fn hash(self) -> Field {\n        pedersen_hash([\n            self.contract_address,\n            self.function_data.hash(),\n            self.public_inputs.hash(),\n        ], GENERATOR_INDEX__CALL_STACK_ITEM)\n    }\n}\n",
                "path": "/aztec/private_call_stack_item.nr"
            },
            "134": {
                "source": "use crate::{\n    abi,\n    hash::pedersen_hash,\n    abi::{\n        PublicCircuitPublicInputs,\n        FunctionData,\n    },\n};\nuse dep::protocol_types::constants::{\n    RETURN_VALUES_LENGTH,\n    GENERATOR_INDEX__CALL_STACK_ITEM,\n};\n\n// oracles\nuse crate::oracle::{\n    enqueue_public_function_call::enqueue_public_function_call_internal,\n};\n\nstruct PublicCallStackItem {\n    contract_address: Field,\n    function_data: FunctionData,\n    public_inputs: PublicCircuitPublicInputs,\n    is_execution_request: bool,\n}\n\nimpl PublicCallStackItem {\n    pub fn hash(self) -> Field {\n        pedersen_hash([\n            self.contract_address,\n            self.function_data.hash(),\n            self.public_inputs.hash(),\n        ], GENERATOR_INDEX__CALL_STACK_ITEM)\n    }\n}\n\n",
                "path": "/aztec/public_call_stack_item.nr"
            },
            "137": {
                "source": "use dep::std::option::Option;\nuse dep::protocol_types::constants::EMPTY_NULLIFIED_COMMITMENT;\nuse crate::context::{PrivateContext, Context};\nuse crate::note::{\n    lifecycle::create_note,\n    note_getter::{get_note, view_notes},\n    note_interface::NoteInterface,\n    note_viewer_options::NoteViewerOptions,\n};\nuse crate::oracle::notes::check_nullifier_exists;\nuse crate::state_vars::singleton::compute_singleton_initialization_nullifier;\n\n// docs:start:struct\nstruct ImmutableSingleton<Note, N> {\n    context: Option<&mut PrivateContext>,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    compute_initialization_nullifier: fn (Field, Option<Field>) -> Field,\n}\n// docs:end:struct\n\nimpl<Note, N> ImmutableSingleton<Note, N> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        note_interface: NoteInterface<Note, N>,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        ImmutableSingleton {\n            context: context.private,\n            storage_slot,\n            note_interface,\n            compute_initialization_nullifier: compute_singleton_initialization_nullifier,\n        }\n    }\n    // docs:end:new\n\n    // docs:start:is_initialized\n    unconstrained pub fn is_initialized(self, owner: Option<Field>) -> bool {\n        let compute_initialization_nullifier = self.compute_initialization_nullifier;\n        let nullifier = compute_initialization_nullifier(self.storage_slot, owner);\n        check_nullifier_exists(nullifier)\n    }\n    // docs:end:is_initialized\n\n    // docs:start:initialize\n    pub fn initialize(\n        self,\n        note: &mut Note, \n        owner: Option<Field>,\n        broadcast: bool,\n    ) {\n        let context = self.context.unwrap();\n\n        // Nullify the storage slot.\n        let compute_initialization_nullifier = self.compute_initialization_nullifier;\n        let nullifier = compute_initialization_nullifier(self.storage_slot, owner);\n        context.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT);\n\n        create_note(\n            context,\n            self.storage_slot,\n            note,\n            self.note_interface,\n            broadcast,\n        );\n    }\n    // docs:end:initialize\n\n    // docs:start:get_note\n    pub fn get_note(self) -> Note {\n        let context = self.context.unwrap();\n        let storage_slot = self.storage_slot;\n        get_note(context, storage_slot, self.note_interface)\n    }\n    // docs:end:get_note\n\n    // docs:start:view_note\n    unconstrained pub fn view_note(self) -> Note {\n        let options = NoteViewerOptions::new().set_limit(1);\n        view_notes(self.storage_slot, self.note_interface, options)[0].unwrap()\n    }\n    // docs:end:view_note\n}\n",
                "path": "/aztec/state_vars/immutable_singleton.nr"
            },
            "139": {
                "source": "use crate::context::{Context};\nuse crate::oracle::storage::storage_read;\nuse crate::oracle::storage::storage_write;\nuse crate::types::type_serialization::TypeSerializationInterface;\nuse dep::std::option::Option;\n\n// docs:start:public_state_struct\nstruct PublicState<T, T_SERIALIZED_LEN> {\n    context: Context,\n    storage_slot: Field,\n    serialization_methods: TypeSerializationInterface<T, T_SERIALIZED_LEN>,\n}\n// docs:end:public_state_struct\n\nimpl<T, T_SERIALIZED_LEN> PublicState<T, T_SERIALIZED_LEN> {\n    // docs:start:public_state_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field,\n        serialization_methods: TypeSerializationInterface<T, T_SERIALIZED_LEN>,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicState {\n            context,\n            storage_slot,\n            serialization_methods,\n        }\n    }\n    // docs:end:public_state_struct_new\n\n    // docs:start:public_state_struct_read\n    pub fn read(self) -> T {\n        assert(self.context.private.is_none(), \"Public state writes only supported in public functions\");\n        storage_read(self.storage_slot, self.serialization_methods.deserialize)\n    }\n    // docs:end:public_state_struct_read\n\n    // docs:start:public_state_struct_write\n    pub fn write(self, value: T) {\n        assert(self.context.private.is_none(), \"Public state writes only supported in public functions\");\n        let serialize = self.serialization_methods.serialize;\n        let fields = serialize(value);\n        storage_write(self.storage_slot, fields);\n    }\n    // docs:end:public_state_struct_write\n}\n",
                "path": "/aztec/state_vars/public_state.nr"
            },
            "140": {
                "source": "use dep::std::option::Option;\nuse crate::abi::PublicContextInputs;\nuse dep::protocol_types::constants::{MAX_NOTES_PER_PAGE, MAX_READ_REQUESTS_PER_CALL};\nuse crate::context::{PrivateContext, PublicContext, Context};\nuse crate::note::{\n    lifecycle::{create_note, create_note_hash_from_public, destroy_note},\n    note_getter::{get_notes, view_notes},\n    note_getter_options::NoteGetterOptions,\n    note_header::NoteHeader,\n    note_interface::NoteInterface,\n    note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_read_or_nullify,\n};\n\n// docs:start:struct\nstruct Set<Note, N> {\n    context: Context,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n}\n// docs:end:struct\n\nimpl<Note, N> Set<Note, N> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        note_interface: NoteInterface<Note, N>,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Set {\n            context,\n            storage_slot,\n            note_interface,\n        }\n    }\n    // docs:end:new\n\n    // docs:start:insert\n    pub fn insert(self,\n        note: &mut Note,\n        broadcast: bool,\n    ) {\n        create_note(\n            self.context.private.unwrap(),\n            self.storage_slot,\n            note,\n            self.note_interface,\n            broadcast,\n        );\n    }\n    // docs:end:insert\n\n    // docs:start:insert_from_public\n    pub fn insert_from_public(self, note: &mut Note) {\n        create_note_hash_from_public(\n            self.context.public.unwrap(),\n            self.storage_slot,\n            note,\n            self.note_interface,\n        );\n    }\n    // docs:end:insert_from_public\n    \n    // DEPRECATED\n    fn assert_contains_and_remove(_self: Self, _note: &mut Note, _nonce: Field) {\n        assert(false, \"`assert_contains_and_remove` has been deprecated. Please call PXE.addNote() to add a note to the database. Then use Set.get_notes() and Set.remove() in your contract to verify and remove a note.\");\n    }\n\n    // DEPRECATED\n    fn assert_contains_and_remove_publicly_created(_self: Self, _note: &mut Note) {\n        assert(false, \"`assert_contains_and_remove_publicly_created` has been deprecated. Please call PXE.addNote() to add a note to the database. Then use Set.get_notes() and Set.remove() in your contract to verify and remove a note.\");\n    }\n\n    // docs:start:remove\n    pub fn remove(self, note: Note) {\n        let context = self.context.private.unwrap();\n        let note_hash = compute_note_hash_for_read_or_nullify(self.note_interface, note);\n        let has_been_read = context.read_requests.any(|r| r == note_hash);\n        assert(has_been_read, \"Can only remove a note that has been read from the set.\");\n\n        destroy_note(\n            context,\n            note,\n            self.note_interface,\n        );\n    }\n    // docs:end:remove\n\n    // docs:start:get_notes\n    pub fn get_notes<FILTER_ARGS>(\n        self,\n        options: NoteGetterOptions<Note, N, FILTER_ARGS>,\n    ) -> [Option<Note>; MAX_READ_REQUESTS_PER_CALL] {\n        let storage_slot = self.storage_slot;\n        let opt_notes = get_notes(\n            self.context.private.unwrap(),\n            storage_slot,\n            self.note_interface,\n            options,\n        );\n        opt_notes\n    }\n    // docs:end:get_notes\n\n    // docs:start:view_notes\n    unconstrained pub fn view_notes(\n        self,\n        options: NoteViewerOptions<Note, N>,\n    ) -> [Option<Note>; MAX_NOTES_PER_PAGE] {\n        view_notes(self.storage_slot, self.note_interface, options)\n    }\n    // docs:end:view_notes\n}\n",
                "path": "/aztec/state_vars/set.nr"
            },
            "141": {
                "source": "use dep::std::option::Option;\nuse dep::protocol_types::constants::{EMPTY_NULLIFIED_COMMITMENT, GENERATOR_INDEX__INITIALIZATION_NULLIFIER};\nuse crate::context::{PrivateContext, PublicContext, Context};\nuse crate::note::{\n    lifecycle::{create_note, destroy_note},\n    note_getter::{get_note, view_notes},\n    note_interface::NoteInterface,\n    note_viewer_options::NoteViewerOptions,\n};\nuse crate::oracle::{\n    get_secret_key::get_secret_key,\n    notes::check_nullifier_exists,\n};\nuse crate::hash::pedersen_hash;\n\npub fn compute_singleton_initialization_nullifier(storage_slot: Field, owner: Option<Field>) -> Field {\n    if owner.is_some() {\n        let secret = get_secret_key(owner.unwrap_unchecked());\n        pedersen_hash([storage_slot, secret.low, secret.high],\n            GENERATOR_INDEX__INITIALIZATION_NULLIFIER)\n    } else {\n        pedersen_hash([storage_slot], GENERATOR_INDEX__INITIALIZATION_NULLIFIER)\n    }\n}\n\n// docs:start:struct\nstruct Singleton<Note, N> {\n    context: Option<&mut PrivateContext>,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    compute_initialization_nullifier: fn (Field, Option<Field>) -> Field,\n}\n// docs:end:struct\n\nimpl<Note, N> Singleton<Note, N> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        note_interface: NoteInterface<Note, N>,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Singleton {\n            context: context.private,\n            storage_slot,\n            note_interface,\n            compute_initialization_nullifier: compute_singleton_initialization_nullifier,\n        }\n    }\n    // docs:end:new\n\n    // docs:start:is_initialized\n    unconstrained pub fn is_initialized(self, owner: Option<Field>) -> bool {\n        let compute_initialization_nullifier = self.compute_initialization_nullifier;\n        let nullifier = compute_initialization_nullifier(self.storage_slot, owner);\n        check_nullifier_exists(nullifier)\n    }\n    // docs:end:is_initialized\n\n    // docs:start:initialize\n    pub fn initialize(\n        self,\n        note: &mut Note,\n        owner: Option<Field>,\n        broadcast: bool,\n    ) {\n        let context = self.context.unwrap();\n\n        // Nullify the storage slot.\n        let compute_initialization_nullifier = self.compute_initialization_nullifier;\n        let nullifier = compute_initialization_nullifier(self.storage_slot, owner);\n        context.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT);\n\n        create_note(context, self.storage_slot, note, self.note_interface, broadcast);\n    }\n    // docs:end:initialize\n\n    // docs:start:replace\n    pub fn replace(\n        self,\n        new_note: &mut Note,\n        broadcast: bool,\n    ) {\n        let context = self.context.unwrap();\n        let prev_note = get_note(context, self.storage_slot, self.note_interface);\n\n        // Nullify previous note.\n        destroy_note(context, prev_note, self.note_interface);\n\n        // Add replacement note.\n        create_note(context, self.storage_slot, new_note, self.note_interface, broadcast);\n    }\n    // docs:end:replace\n\n    // docs:start:get_note\n    pub fn get_note(self, broadcast: bool) -> Note {\n        let context = self.context.unwrap();\n        let mut note = get_note(context, self.storage_slot, self.note_interface);\n\n        // Nullify current note to make sure it's reading the latest note.\n        destroy_note(context, note, self.note_interface);\n\n        // Add the same note again.\n        // Because a nonce is added to every note in the kernel, its nullifier will be different.\n        create_note(context, self.storage_slot, &mut note, self.note_interface, broadcast);\n\n        note\n    }\n    // docs:end:get_note\n\n    // docs:start:view_note\n    unconstrained pub fn view_note(self) -> Note {\n        let options = NoteViewerOptions::new().set_limit(1);\n        view_notes(self.storage_slot, self.note_interface, options)[0].unwrap()\n    }\n    // docs:end:view_note\n}\n",
                "path": "/aztec/state_vars/singleton.nr"
            },
            "145": {
                "source": "struct BoundedVec<T, MaxLen> {\n    storage: [T; MaxLen],\n    len: Field,\n}\n\nimpl<T, MaxLen> BoundedVec<T, MaxLen> {\n    pub fn new(initial_value: T) -> Self {\n        BoundedVec { storage: [initial_value; MaxLen], len: 0 }\n    }\n\n    pub fn get(mut self: Self, index: Field) -> T {\n        assert(index as u64 < self.len as u64);\n        self.storage[index]\n    }\n\n    pub fn get_unchecked(mut self: Self, index: Field) -> T {\n        self.storage[index]\n    }\n\n    pub fn push(&mut self, elem: T) {\n        assert(self.len as u64 < MaxLen as u64);\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    pub fn push_array<Len>(&mut self, array: [T; Len]) {\n        let newLen = self.len + array.len();\n        assert(newLen as u64 <= MaxLen as u64);\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = newLen;\n    }\n\n    pub fn pop(&mut self) -> T {\n        assert(self.len as u64 > 0);\n\n        let elem = self.storage[self.len - 1];\n        self.len -= 1;\n        elem\n    }\n\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        let mut exceeded_len = false;\n        for i in 0..MaxLen {\n            exceeded_len |= i == self.len;\n            if (!exceeded_len) {\n                ret |= predicate(self.storage[i]);\n            }\n        }\n        ret\n    }\n}\n\n#[test]\nfn test_vec_push_pop() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    assert(vec.len == 0);\n    vec.push(2);\n    assert(vec.len == 1);\n    vec.push(4);\n    assert(vec.len == 2);\n    vec.push(6);\n    assert(vec.len == 3);\n    let x = vec.pop();\n    assert(x == 6);\n    assert(vec.len == 2);\n    assert(vec.get(0) == 2);\n    assert(vec.get(1) == 4);\n}\n\n#[test]\nfn test_vec_push_array() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    vec.push_array([2, 4]);\n    assert(vec.len == 2);\n    assert(vec.get(0) == 2);\n    assert(vec.get(1) == 4);\n}\n\n#[test(should_fail)]\nfn test_vec_get_out_of_bound() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    vec.push_array([2, 4]);\n    let _x = vec.get(2);\n}\n\n#[test(should_fail)]\nfn test_vec_get_not_declared() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    vec.push_array([2]);\n    let _x = vec.get(1);\n}\n\n#[test(should_fail)]\nfn test_vec_get_uninitialized() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    let _x = vec.get(0);\n}\n\n#[test(should_fail)]\nfn test_vec_push_overflow() {\n    let mut vec: BoundedVec<Field, 1> = BoundedVec::new(0);\n    vec.push(1);\n    vec.push(2);\n}\n\n#[test]\nfn test_vec_any() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    vec.push_array([2, 4, 6]);\n    assert(vec.any(|v| v == 2) == true);\n    assert(vec.any(|v| v == 4) == true);\n    assert(vec.any(|v| v == 6) == true);\n    assert(vec.any(|v| v == 3) == false);\n}\n\n#[test]\nfn test_vec_any_not_default() {\n    let default_value = 1;\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(default_value);\n    vec.push_array([2, 4]);\n    assert(vec.any(|v| v == default_value) == false);\n}\n",
                "path": "/aztec/types/vec.nr"
            },
            "151": {
                "source": "pub fn arr_copy_slice<T, N, M>(src: [T; N], mut dst: [T; M], offset: Field) -> [T; M] {\n    for i in 0..dst.len() {\n        dst[i] = src[i + offset];\n    }\n    dst\n}\n\npub fn field_from_bytes<N>(bytes: [u8; N], big_endian: bool) -> Field {\n    assert(bytes.len() as u32 < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        let mut index = i;\n        if big_endian {\n            index = N - i - 1;\n        }\n        as_field += (bytes[index] as Field) * offset;\n        offset *= 256;\n    }\n\n    as_field\n}\n\n// TODO(#3470): Copied over from https://github.com/AztecProtocol/aztec-packages/blob/a07c4bd47313be6aa604a63f37857eb0136b41ba/yarn-project/noir-protocol-circuits/src/crates/rollup-lib/src/base/base_rollup_inputs.nr#L599\n// move to a shared place?\n\n// TODO to radix returns u8, so we cannot use bigger radixes. It'd be ideal to use a radix of the maximum range-constrained integer noir supports\npub fn full_field_less_than(lhs: Field, rhs: Field) -> bool {\n    dep::std::eddsa::lt_bytes32(lhs, rhs)\n}\n\npub fn full_field_greater_than(lhs: Field, rhs: Field) -> bool {\n    dep::std::eddsa::lt_bytes32(rhs, lhs)\n}",
                "path": "/aztec/utils.nr"
            },
            "153": {
                "source": "use dep::protocol_types::constants::{MAX_NOTES_PER_PAGE, MAX_READ_REQUESTS_PER_CALL};\nuse dep::aztec::note::{\n    note_getter_options::NoteGetterOptions, note_viewer_options::NoteViewerOptions,\n};\nuse dep::aztec::state_vars::{\n    immutable_singleton::ImmutableSingleton, map::Map, public_state::PublicState, set::Set,\n    singleton::Singleton,\n};\nuse dep::aztec::types::type_serialization::bool_serialization::BOOL_SERIALIZED_LEN;\nuse dep::std::option::Option;\n\nuse crate::types::{\n    card_note::{CardNote, CARD_NOTE_LEN},\n    profile_note::{ProfileNote, PROFILE_NOTE_LEN},\n    queen::{Queen, QUEEN_SERIALIZED_LEN},\n    rules_note::{RulesNote, RULES_NOTE_LEN},\n};\n\n// docs:start:state_vars-PublicStateRead\npub fn is_locked(state_var: PublicState<bool, BOOL_SERIALIZED_LEN>) -> bool {\n    state_var.read()\n}\n// docs:end:state_vars-PublicStateRead\n\n// docs:start:state_vars-PublicStateWrite\npub fn lock(state_var: PublicState<bool, BOOL_SERIALIZED_LEN>) {\n    state_var.write(true);\n}\n// docs:end:state_vars-PublicStateWrite\n\npub fn unlock(state_var: PublicState<bool, BOOL_SERIALIZED_LEN>) {\n    state_var.write(false);\n}\n\n// docs:start:state_vars-PublicStateReadCustom\npub fn get_current_queen(state_var: PublicState<Queen, QUEEN_SERIALIZED_LEN>) -> Queen {\n    state_var.read()\n}\n// docs:end:state_vars-PublicStateReadCustom\n\npub fn can_replace_queen(state_var: PublicState<Queen, QUEEN_SERIALIZED_LEN>, new_queen: Queen) -> bool {\n    let current_queen = get_current_queen(state_var);\n    new_queen.points > current_queen.points\n}\n\n// docs:start:state_vars-PublicStateWriteCustom\npub fn replace_queen(state_var: PublicState<Queen, QUEEN_SERIALIZED_LEN>, new_queen: Queen) {\n    state_var.write(new_queen);\n}\n// docs:end:state_vars-PublicStateWriteCustom\n\n// docs:start:state_vars-PublicStateReadWriteCustom\npub fn add_points_to_queen(state_var: PublicState<Queen, QUEEN_SERIALIZED_LEN>, new_points: u8) {\n    let mut queen = state_var.read();\n    queen.points += new_points;\n    state_var.write(queen);\n}\n// docs:end:state_vars-PublicStateReadWriteCustom\n\n// docs:start:state_vars-SingletonInit\npub fn init_legendary_card(state_var: Singleton<CardNote, CARD_NOTE_LEN>, card: &mut CardNote) {\n    state_var.initialize(card, Option::some(card.owner), true);\n}\n// docs:end:state_vars-SingletonInit\n\n// docs:start:state_vars-SingletonReplace\npub fn update_legendary_card(state_var: Singleton<CardNote, CARD_NOTE_LEN>, card: &mut CardNote) {\n    state_var.replace(card, true);\n}\n// docs:end:state_vars-SingletonReplace\n\n// docs:start:state_vars-SingletonGet\npub fn get_legendary_card(state_var: Singleton<CardNote, CARD_NOTE_LEN>) -> CardNote {\n    state_var.get_note(true)\n}\n// docs:end:state_vars-SingletonGet\n\n// docs:start:state_vars-ImmutableSingletonInit\npub fn init_game_rules(state_var: ImmutableSingleton<RulesNote, RULES_NOTE_LEN>, rules: &mut RulesNote) {\n    state_var.initialize(rules, Option::none(), true);\n}\n// docs:end:state_vars-ImmutableSingletonInit\n\n// docs:start:state_vars-ImmutableSingletonGet\npub fn is_valid_card(state_var: ImmutableSingleton<RulesNote, RULES_NOTE_LEN>, card: CardNote) -> bool {\n    let rules = state_var.get_note();\n    card.points >= rules.min_points & card.points <= rules.max_points\n}\n// docs:end:state_vars-ImmutableSingletonGet\n\n// docs:start:state_vars-SetInsert\npub fn add_new_card(state_var: Set<CardNote, CARD_NOTE_LEN>, card: &mut CardNote) {\n    state_var.insert(card, true);\n}\n// docs:end:state_vars-SetInsert\n\n// docs:start:state_vars-SetRemove\npub fn remove_card(state_var: Set<CardNote, CARD_NOTE_LEN>, card: CardNote) {\n    state_var.remove(card);\n}\n// docs:end:state_vars-SetRemove\n\n// docs:start:state_vars-SetGet\npub fn get_cards<FILTER_PARAMS>(\n    state_var: Set<CardNote, CARD_NOTE_LEN>,\n    options: NoteGetterOptions<CardNote, CARD_NOTE_LEN, FILTER_PARAMS>\n) -> [Option<CardNote>; MAX_READ_REQUESTS_PER_CALL] {\n    state_var.get_notes(options)\n}\n// docs:end:state_vars-SetGet\n\n// docs:start:state_vars-SetView\nunconstrained pub fn view_cards(state_var: Set<CardNote, CARD_NOTE_LEN>, options: NoteViewerOptions<CardNote, CARD_NOTE_LEN>) -> [Option<CardNote>; MAX_NOTES_PER_PAGE] {\n    state_var.view_notes(options)\n}\n// docs:end:state_vars-SetView\n\nunconstrained pub fn get_total_points(state_var: Set<CardNote, CARD_NOTE_LEN>, account: Field, offset: u32) -> u8 {\n    let options = NoteViewerOptions::new().select(2, account).set_offset(offset);\n    let mut total_points = 0;\n    let notes = view_cards(state_var, options);\n    for i in 0..notes.len() {\n        if notes[i].is_some() {\n            total_points += notes[i].unwrap_unchecked().points;\n        }\n    }\n    if notes[notes.len() - 1].is_some() {\n        total_points += get_total_points(state_var, account, offset + notes.len() as u32);\n    }\n    total_points\n}\n\n// docs:start:state_vars-MapAtSingletonInit\npub fn add_new_profile(state_var: Map<Singleton<ProfileNote, PROFILE_NOTE_LEN>>, account: Field, profile: &mut ProfileNote) {\n    state_var.at(account).initialize(profile, Option::some(account), true);\n}\n// docs:end:state_vars-MapAtSingletonInit\n\n// docs:start:state_vars-MapAtSingletonGet\npub fn get_profile(state_var: Map<Singleton<ProfileNote, PROFILE_NOTE_LEN>>, account: Field) -> ProfileNote {\n    state_var.at(account).get_note(true)\n}\n// docs:end:state_vars-MapAtSingletonGet\n",
                "path": "/usr/src/yarn-project/noir-contracts/src/contracts/docs_example_contract/src/actions.nr"
            },
            "156": {
                "source": "use dep::aztec::{\n    note::{\n        note_header::NoteHeader,\n        note_interface::NoteInterface,\n        utils::compute_note_hash_for_read_or_nullify,\n    },\n    oracle::{\n        get_secret_key::get_secret_key,\n        get_public_key::get_public_key,\n    },\n    log::emit_encrypted_log,\n    hash::pedersen_hash,\n    context::PrivateContext,\n};\n\nglobal CARD_NOTE_LEN: Field = 3;\n\n// docs:start:state_vars-CardNote\nstruct CardNote {\n    points: u8,\n    secret: Field,\n    owner: Field,\n    header: NoteHeader,\n}\n// docs:end:state_vars-CardNote\n\nimpl CardNote {\n    pub fn new(points: u8, secret: Field, owner: Field) -> Self {\n        CardNote {\n            points,\n            secret,\n            owner,\n            header: NoteHeader::empty(),\n        }\n    }\n\n    pub fn serialize(self) -> [Field; CARD_NOTE_LEN] {\n        [self.points as Field, self.secret, self.owner]\n    }\n\n    pub fn deserialize(serialized_note: [Field; CARD_NOTE_LEN]) -> Self {\n        CardNote {\n            points: serialized_note[0] as u8,\n            secret: serialized_note[1],\n            owner: serialized_note[2],\n            header: NoteHeader::empty(),\n        }\n    }\n\n    pub fn compute_note_hash(self) -> Field {\n        pedersen_hash([\n            self.points as Field, \n            self.secret,\n            self.owner,\n        ],0)\n    }\n\n    pub fn compute_nullifier(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_read_or_nullify(CardNoteMethods, self);\n        let secret = get_secret_key(self.owner);\n        pedersen_hash([\n            note_hash_for_nullify,\n            secret.high,\n            secret.low,\n        ],0)\n    }\n\n    pub fn set_header(&mut self, header: NoteHeader) {\n        self.header = header;\n    }\n\n    // Broadcasts the note as an encrypted log on L1.\n    pub fn broadcast(self, context: &mut PrivateContext, slot: Field) {\n        let encryption_pub_key = get_public_key(self.owner);\n        emit_encrypted_log(\n            context,\n            (*context).this_address(),\n            slot,\n            encryption_pub_key,\n            self.serialize(),\n        );\n    }\n}\n\nfn deserialize(serialized_note: [Field; CARD_NOTE_LEN]) -> CardNote {\n    CardNote::deserialize(serialized_note)\n}\n\nfn serialize(note: CardNote) -> [Field; CARD_NOTE_LEN] {\n    note.serialize()\n}\n\nfn compute_note_hash(note: CardNote) -> Field {\n    note.compute_note_hash()\n}\n\nfn compute_nullifier(note: CardNote) -> Field {\n    note.compute_nullifier()\n}\n\nfn get_header(note: CardNote) -> NoteHeader {\n    note.header\n}\n\nfn set_header(note: &mut CardNote, header: NoteHeader) {\n    note.set_header(header)\n}\n\n// Broadcasts the note as an encrypted log on L1.\nfn broadcast(context: &mut PrivateContext, slot: Field, note: CardNote) {\n    note.broadcast(context, slot);\n}\n\nglobal CardNoteMethods = NoteInterface {\n    deserialize,\n    serialize,\n    compute_note_hash,\n    compute_nullifier,\n    get_header,\n    set_header,\n    broadcast,\n};\n",
                "path": "/usr/src/yarn-project/noir-contracts/src/contracts/docs_example_contract/src/types/card_note.nr"
            },
            "158": {
                "source": "use dep::aztec::types::type_serialization::TypeSerializationInterface;\n\n// docs:start:state_vars-CustomStruct\nstruct Queen {\n    account: Field,\n    points: u8,\n}\n// docs:end:state_vars-CustomStruct\n\n// docs:start:state_vars-PublicStateCustomStruct\nglobal QUEEN_SERIALIZED_LEN: Field = 2;\n\nfn deserialize(fields: [Field; QUEEN_SERIALIZED_LEN]) -> Queen {\n    Queen { account: fields[0], points: fields[1] as u8 }\n}\n\nfn serialize(queen: Queen) -> [Field; QUEEN_SERIALIZED_LEN] {\n    [queen.account, queen.points as Field]\n}\n\nglobal QueenSerializationMethods = TypeSerializationInterface {\n    deserialize,\n    serialize,\n};\n// docs:end:state_vars-PublicStateCustomStruct",
                "path": "/usr/src/yarn-project/noir-contracts/src/contracts/docs_example_contract/src/types/queen.nr"
            },
            "159": {
                "source": "use dep::std::option::Option;\nuse dep::aztec::{\n    note::{\n        note_header::NoteHeader,\n        note_interface::NoteInterface,\n    },\n    oracle::get_public_key::get_public_key,\n    log::emit_encrypted_log,\n    hash::pedersen_hash,\n    context::PrivateContext,\n};\n\nglobal RULES_NOTE_LEN: Field = 2;\n\nstruct RulesNote {\n    min_points: u8,\n    max_points: u8,\n    maybe_owner: Option<Field>,\n    header: NoteHeader,\n}\n\nimpl RulesNote {\n    pub fn new(min_points: u8, max_points: u8, maybe_owner: Option<Field>) -> Self {\n        RulesNote {\n            min_points,\n            max_points,\n            maybe_owner,\n            header: NoteHeader::empty(),\n        }\n    }\n\n    pub fn serialize(self) -> [Field; RULES_NOTE_LEN] {\n        [self.min_points as Field, self.max_points as Field]\n    }\n\n    pub fn deserialize(serialized_note: [Field; RULES_NOTE_LEN]) -> Self {\n        RulesNote {\n            min_points: serialized_note[0] as u8,\n            max_points: serialized_note[1] as u8,\n            maybe_owner: Option::none(),\n            header: NoteHeader::empty(),\n        }\n    }\n\n    pub fn compute_note_hash(self) -> Field {\n        pedersen_hash([\n            self.min_points as Field, \n            self.max_points as Field, \n        ],0)\n    }\n\n    pub fn compute_nullifier(_self: Self) -> Field {\n        // Not used\n        0\n    }\n\n    pub fn set_header(&mut self, header: NoteHeader) {\n        self.header = header;\n    }\n\n    pub fn set_owner(&mut self, owner: Field) {\n        self.maybe_owner = Option::some(owner);\n    }\n\n    // Broadcasts the note as an encrypted log on L1.\n    pub fn broadcast(self, context: &mut PrivateContext, slot: Field) {\n        assert(self.maybe_owner.is_some(), \"Note owner must be set when the broadcast flow is triggered.\");\n        let owner = self.maybe_owner.unwrap_unchecked();\n\n        let encryption_pub_key = get_public_key(owner);\n        emit_encrypted_log(\n            context,\n            (*context).this_address(),\n            slot,\n            encryption_pub_key,\n            self.serialize(),\n        );\n    }\n}\n\nfn deserialize(serialized_note: [Field; RULES_NOTE_LEN]) -> RulesNote {\n    RulesNote::deserialize(serialized_note)\n}\n\nfn serialize(note: RulesNote) -> [Field; RULES_NOTE_LEN] {\n    note.serialize()\n}\n\nfn compute_note_hash(note: RulesNote) -> Field {\n    note.compute_note_hash()\n}\n\nfn compute_nullifier(note: RulesNote) -> Field {\n    note.compute_nullifier()\n}\n\nfn get_header(note: RulesNote) -> NoteHeader {\n    note.header\n}\n\nfn set_header(note: &mut RulesNote, header: NoteHeader) {\n    note.set_header(header)\n}\n\n// Broadcasts the note as an encrypted log on L1.\nfn broadcast(context: &mut PrivateContext, slot: Field, note: RulesNote) {\n    note.broadcast(context, slot);\n}\n\nglobal RulesNoteMethods = NoteInterface {\n    deserialize,\n    serialize,\n    compute_note_hash,\n    compute_nullifier,\n    get_header,\n    set_header,\n    broadcast,\n};\n",
                "path": "/usr/src/yarn-project/noir-contracts/src/contracts/docs_example_contract/src/types/rules_note.nr"
            }
        }
    }
}
