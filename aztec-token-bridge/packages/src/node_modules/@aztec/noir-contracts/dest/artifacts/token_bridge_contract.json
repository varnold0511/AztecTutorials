{
    "name": "TokenBridge",
    "functions": [
        {
            "name": "_assert_token_is_same",
            "functionType": "open",
            "isInternal": true,
            "parameters": [
                {
                    "name": "token",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                }
            ],
            "returnTypes": [
                {
                    "kind": "struct",
                    "path": "aztec::abi::PublicCircuitPublicInputs",
                    "fields": [
                        {
                            "name": "call_context",
                            "type": {
                                "kind": "struct",
                                "path": "aztec::abi::CallContext",
                                "fields": [
                                    {
                                        "name": "msg_sender",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "storage_contract_address",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "portal_contract_address",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "function_selector",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "is_delegate_call",
                                        "type": {
                                            "kind": "boolean"
                                        }
                                    },
                                    {
                                        "name": "is_static_call",
                                        "type": {
                                            "kind": "boolean"
                                        }
                                    },
                                    {
                                        "name": "is_contract_deployment",
                                        "type": {
                                            "kind": "boolean"
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "name": "args_hash",
                            "type": {
                                "kind": "field"
                            }
                        },
                        {
                            "name": "return_values",
                            "type": {
                                "kind": "array",
                                "length": 4,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "contract_storage_update_requests",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "struct",
                                    "path": "aztec::abi::ContractStorageUpdateRequest",
                                    "fields": [
                                        {
                                            "name": "storage_slot",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "old_value",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "new_value",
                                            "type": {
                                                "kind": "field"
                                            }
                                        }
                                    ]
                                }
                            }
                        },
                        {
                            "name": "contract_storage_read",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "struct",
                                    "path": "aztec::abi::ContractStorageRead",
                                    "fields": [
                                        {
                                            "name": "storage_slot",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "value",
                                            "type": {
                                                "kind": "field"
                                            }
                                        }
                                    ]
                                }
                            }
                        },
                        {
                            "name": "public_call_stack",
                            "type": {
                                "kind": "array",
                                "length": 4,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "new_commitments",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "new_nullifiers",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "new_l2_to_l1_msgs",
                            "type": {
                                "kind": "array",
                                "length": 2,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "unencrypted_logs_hash",
                            "type": {
                                "kind": "array",
                                "length": 2,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "unencrypted_log_preimages_length",
                            "type": {
                                "kind": "field"
                            }
                        },
                        {
                            "name": "block_header",
                            "type": {
                                "kind": "struct",
                                "path": "aztec::abi::BlockHeader",
                                "fields": [
                                    {
                                        "name": "note_hash_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "nullifier_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "contract_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "l1_to_l2_messages_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "archive_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "public_data_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "global_variables_hash",
                                        "type": {
                                            "kind": "field"
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "name": "prover_address",
                            "type": {
                                "kind": "field"
                            }
                        }
                    ]
                }
            ],
            "bytecode": "",
            "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
        },
        {
            "name": "_call_mint_on_token",
            "functionType": "open",
            "isInternal": true,
            "parameters": [
                {
                    "name": "amount",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                },
                {
                    "name": "secret_hash",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                }
            ],
            "returnTypes": [
                {
                    "kind": "struct",
                    "path": "aztec::abi::PublicCircuitPublicInputs",
                    "fields": [
                        {
                            "name": "call_context",
                            "type": {
                                "kind": "struct",
                                "path": "aztec::abi::CallContext",
                                "fields": [
                                    {
                                        "name": "msg_sender",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "storage_contract_address",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "portal_contract_address",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "function_selector",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "is_delegate_call",
                                        "type": {
                                            "kind": "boolean"
                                        }
                                    },
                                    {
                                        "name": "is_static_call",
                                        "type": {
                                            "kind": "boolean"
                                        }
                                    },
                                    {
                                        "name": "is_contract_deployment",
                                        "type": {
                                            "kind": "boolean"
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "name": "args_hash",
                            "type": {
                                "kind": "field"
                            }
                        },
                        {
                            "name": "return_values",
                            "type": {
                                "kind": "array",
                                "length": 4,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "contract_storage_update_requests",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "struct",
                                    "path": "aztec::abi::ContractStorageUpdateRequest",
                                    "fields": [
                                        {
                                            "name": "storage_slot",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "old_value",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "new_value",
                                            "type": {
                                                "kind": "field"
                                            }
                                        }
                                    ]
                                }
                            }
                        },
                        {
                            "name": "contract_storage_read",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "struct",
                                    "path": "aztec::abi::ContractStorageRead",
                                    "fields": [
                                        {
                                            "name": "storage_slot",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "value",
                                            "type": {
                                                "kind": "field"
                                            }
                                        }
                                    ]
                                }
                            }
                        },
                        {
                            "name": "public_call_stack",
                            "type": {
                                "kind": "array",
                                "length": 4,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "new_commitments",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "new_nullifiers",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "new_l2_to_l1_msgs",
                            "type": {
                                "kind": "array",
                                "length": 2,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "unencrypted_logs_hash",
                            "type": {
                                "kind": "array",
                                "length": 2,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "unencrypted_log_preimages_length",
                            "type": {
                                "kind": "field"
                            }
                        },
                        {
                            "name": "block_header",
                            "type": {
                                "kind": "struct",
                                "path": "aztec::abi::BlockHeader",
                                "fields": [
                                    {
                                        "name": "note_hash_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "nullifier_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "contract_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "l1_to_l2_messages_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "archive_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "public_data_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "global_variables_hash",
                                        "type": {
                                            "kind": "field"
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "name": "prover_address",
                            "type": {
                                "kind": "field"
                            }
                        }
                    ]
                }
            ],
            "bytecode": "",
            "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
        },
        {
            "name": "_initialize",
            "functionType": "open",
            "isInternal": true,
            "parameters": [
                {
                    "name": "token",
                    "type": {
                        "kind": "struct",
                        "path": "aztec::types::address::AztecAddress",
                        "fields": [
                            {
                                "name": "address",
                                "type": {
                                    "kind": "field"
                                }
                            }
                        ]
                    },
                    "visibility": "private"
                }
            ],
            "returnTypes": [
                {
                    "kind": "struct",
                    "path": "aztec::abi::PublicCircuitPublicInputs",
                    "fields": [
                        {
                            "name": "call_context",
                            "type": {
                                "kind": "struct",
                                "path": "aztec::abi::CallContext",
                                "fields": [
                                    {
                                        "name": "msg_sender",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "storage_contract_address",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "portal_contract_address",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "function_selector",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "is_delegate_call",
                                        "type": {
                                            "kind": "boolean"
                                        }
                                    },
                                    {
                                        "name": "is_static_call",
                                        "type": {
                                            "kind": "boolean"
                                        }
                                    },
                                    {
                                        "name": "is_contract_deployment",
                                        "type": {
                                            "kind": "boolean"
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "name": "args_hash",
                            "type": {
                                "kind": "field"
                            }
                        },
                        {
                            "name": "return_values",
                            "type": {
                                "kind": "array",
                                "length": 4,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "contract_storage_update_requests",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "struct",
                                    "path": "aztec::abi::ContractStorageUpdateRequest",
                                    "fields": [
                                        {
                                            "name": "storage_slot",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "old_value",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "new_value",
                                            "type": {
                                                "kind": "field"
                                            }
                                        }
                                    ]
                                }
                            }
                        },
                        {
                            "name": "contract_storage_read",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "struct",
                                    "path": "aztec::abi::ContractStorageRead",
                                    "fields": [
                                        {
                                            "name": "storage_slot",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "value",
                                            "type": {
                                                "kind": "field"
                                            }
                                        }
                                    ]
                                }
                            }
                        },
                        {
                            "name": "public_call_stack",
                            "type": {
                                "kind": "array",
                                "length": 4,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "new_commitments",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "new_nullifiers",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "new_l2_to_l1_msgs",
                            "type": {
                                "kind": "array",
                                "length": 2,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "unencrypted_logs_hash",
                            "type": {
                                "kind": "array",
                                "length": 2,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "unencrypted_log_preimages_length",
                            "type": {
                                "kind": "field"
                            }
                        },
                        {
                            "name": "block_header",
                            "type": {
                                "kind": "struct",
                                "path": "aztec::abi::BlockHeader",
                                "fields": [
                                    {
                                        "name": "note_hash_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "nullifier_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "contract_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "l1_to_l2_messages_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "archive_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "public_data_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "global_variables_hash",
                                        "type": {
                                            "kind": "field"
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "name": "prover_address",
                            "type": {
                                "kind": "field"
                            }
                        }
                    ]
                }
            ],
            "bytecode": "",
            "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
        },
        {
            "name": "claim_private",
            "functionType": "secret",
            "isInternal": false,
            "parameters": [
                {
                    "name": "secret_hash_for_redeeming_minted_notes",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                },
                {
                    "name": "amount",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                },
                {
                    "name": "canceller",
                    "type": {
                        "kind": "struct",
                        "path": "aztec::types::address::EthereumAddress",
                        "fields": [
                            {
                                "name": "address",
                                "type": {
                                    "kind": "field"
                                }
                            }
                        ]
                    },
                    "visibility": "private"
                },
                {
                    "name": "msg_key",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                },
                {
                    "name": "secret_for_L1_to_L2_message_consumption",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                }
            ],
            "returnTypes": [],
            "bytecode": "",
            "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
        },
        {
            "name": "claim_public",
            "functionType": "open",
            "isInternal": false,
            "parameters": [
                {
                    "name": "to",
                    "type": {
                        "kind": "struct",
                        "path": "aztec::types::address::AztecAddress",
                        "fields": [
                            {
                                "name": "address",
                                "type": {
                                    "kind": "field"
                                }
                            }
                        ]
                    },
                    "visibility": "private"
                },
                {
                    "name": "amount",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                },
                {
                    "name": "canceller",
                    "type": {
                        "kind": "struct",
                        "path": "aztec::types::address::EthereumAddress",
                        "fields": [
                            {
                                "name": "address",
                                "type": {
                                    "kind": "field"
                                }
                            }
                        ]
                    },
                    "visibility": "private"
                },
                {
                    "name": "msg_key",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                },
                {
                    "name": "secret",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                }
            ],
            "returnTypes": [
                {
                    "kind": "struct",
                    "path": "aztec::abi::PublicCircuitPublicInputs",
                    "fields": [
                        {
                            "name": "call_context",
                            "type": {
                                "kind": "struct",
                                "path": "aztec::abi::CallContext",
                                "fields": [
                                    {
                                        "name": "msg_sender",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "storage_contract_address",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "portal_contract_address",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "function_selector",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "is_delegate_call",
                                        "type": {
                                            "kind": "boolean"
                                        }
                                    },
                                    {
                                        "name": "is_static_call",
                                        "type": {
                                            "kind": "boolean"
                                        }
                                    },
                                    {
                                        "name": "is_contract_deployment",
                                        "type": {
                                            "kind": "boolean"
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "name": "args_hash",
                            "type": {
                                "kind": "field"
                            }
                        },
                        {
                            "name": "return_values",
                            "type": {
                                "kind": "array",
                                "length": 4,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "contract_storage_update_requests",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "struct",
                                    "path": "aztec::abi::ContractStorageUpdateRequest",
                                    "fields": [
                                        {
                                            "name": "storage_slot",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "old_value",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "new_value",
                                            "type": {
                                                "kind": "field"
                                            }
                                        }
                                    ]
                                }
                            }
                        },
                        {
                            "name": "contract_storage_read",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "struct",
                                    "path": "aztec::abi::ContractStorageRead",
                                    "fields": [
                                        {
                                            "name": "storage_slot",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "value",
                                            "type": {
                                                "kind": "field"
                                            }
                                        }
                                    ]
                                }
                            }
                        },
                        {
                            "name": "public_call_stack",
                            "type": {
                                "kind": "array",
                                "length": 4,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "new_commitments",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "new_nullifiers",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "new_l2_to_l1_msgs",
                            "type": {
                                "kind": "array",
                                "length": 2,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "unencrypted_logs_hash",
                            "type": {
                                "kind": "array",
                                "length": 2,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "unencrypted_log_preimages_length",
                            "type": {
                                "kind": "field"
                            }
                        },
                        {
                            "name": "block_header",
                            "type": {
                                "kind": "struct",
                                "path": "aztec::abi::BlockHeader",
                                "fields": [
                                    {
                                        "name": "note_hash_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "nullifier_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "contract_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "l1_to_l2_messages_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "archive_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "public_data_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "global_variables_hash",
                                        "type": {
                                            "kind": "field"
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "name": "prover_address",
                            "type": {
                                "kind": "field"
                            }
                        }
                    ]
                }
            ],
            "bytecode": "",
            "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
        },
        {
            "name": "compute_note_hash_and_nullifier",
            "functionType": "unconstrained",
            "isInternal": false,
            "parameters": [
                {
                    "name": "contract_address",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                },
                {
                    "name": "nonce",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                },
                {
                    "name": "storage_slot",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                },
                {
                    "name": "serialized_note",
                    "type": {
                        "kind": "array",
                        "length": 0,
                        "type": {
                            "kind": "field"
                        }
                    },
                    "visibility": "private"
                }
            ],
            "returnTypes": [
                {
                    "kind": "array",
                    "length": 4,
                    "type": {
                        "kind": "field"
                    }
                }
            ],
            "bytecode": "H4sIAAAAAAAA/+1VQQ4CIQws7C5sheg/PGHiA/b/rxK0TSYsnuwejDZpgBaGYWggEpGjl03VZ9qb5jdpy2d2c3ZY5Uie/kt4ToY83YCng7po7VI9VI/VrxJn2tcOy1zEYlnbzEMsSn+Sts1ZjXUKwM0IswT7+ywM2sygkWqzDDQPA83jQPMVMC6Qp+5OzrKGbc92x7tWc914gz7D+Y6oh5Mt5rMekjFmw8igieqn3BPkE+iVjfVysKfi6hj5/bn+NleGGL5Bml8h5rtz4DuXAaN/I0w/T5INPGze7N2np/YAao7Tjj0JAAA=",
            "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
        },
        {
            "name": "constructor",
            "functionType": "secret",
            "isInternal": false,
            "parameters": [
                {
                    "name": "token",
                    "type": {
                        "kind": "struct",
                        "path": "aztec::types::address::AztecAddress",
                        "fields": [
                            {
                                "name": "address",
                                "type": {
                                    "kind": "field"
                                }
                            }
                        ]
                    },
                    "visibility": "private"
                }
            ],
            "returnTypes": [],
            "bytecode": "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",
            "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
        },
        {
            "name": "exit_to_l1_private",
            "functionType": "secret",
            "isInternal": false,
            "parameters": [
                {
                    "name": "token",
                    "type": {
                        "kind": "struct",
                        "path": "aztec::types::address::AztecAddress",
                        "fields": [
                            {
                                "name": "address",
                                "type": {
                                    "kind": "field"
                                }
                            }
                        ]
                    },
                    "visibility": "private"
                },
                {
                    "name": "recipient",
                    "type": {
                        "kind": "struct",
                        "path": "aztec::types::address::EthereumAddress",
                        "fields": [
                            {
                                "name": "address",
                                "type": {
                                    "kind": "field"
                                }
                            }
                        ]
                    },
                    "visibility": "private"
                },
                {
                    "name": "amount",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                },
                {
                    "name": "callerOnL1",
                    "type": {
                        "kind": "struct",
                        "path": "aztec::types::address::EthereumAddress",
                        "fields": [
                            {
                                "name": "address",
                                "type": {
                                    "kind": "field"
                                }
                            }
                        ]
                    },
                    "visibility": "private"
                },
                {
                    "name": "nonce",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                }
            ],
            "returnTypes": [],
            "bytecode": "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",
            "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
        },
        {
            "name": "exit_to_l1_public",
            "functionType": "open",
            "isInternal": false,
            "parameters": [
                {
                    "name": "recipient",
                    "type": {
                        "kind": "struct",
                        "path": "aztec::types::address::EthereumAddress",
                        "fields": [
                            {
                                "name": "address",
                                "type": {
                                    "kind": "field"
                                }
                            }
                        ]
                    },
                    "visibility": "private"
                },
                {
                    "name": "amount",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                },
                {
                    "name": "callerOnL1",
                    "type": {
                        "kind": "struct",
                        "path": "aztec::types::address::EthereumAddress",
                        "fields": [
                            {
                                "name": "address",
                                "type": {
                                    "kind": "field"
                                }
                            }
                        ]
                    },
                    "visibility": "private"
                },
                {
                    "name": "nonce",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                }
            ],
            "returnTypes": [
                {
                    "kind": "struct",
                    "path": "aztec::abi::PublicCircuitPublicInputs",
                    "fields": [
                        {
                            "name": "call_context",
                            "type": {
                                "kind": "struct",
                                "path": "aztec::abi::CallContext",
                                "fields": [
                                    {
                                        "name": "msg_sender",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "storage_contract_address",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "portal_contract_address",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "function_selector",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "is_delegate_call",
                                        "type": {
                                            "kind": "boolean"
                                        }
                                    },
                                    {
                                        "name": "is_static_call",
                                        "type": {
                                            "kind": "boolean"
                                        }
                                    },
                                    {
                                        "name": "is_contract_deployment",
                                        "type": {
                                            "kind": "boolean"
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "name": "args_hash",
                            "type": {
                                "kind": "field"
                            }
                        },
                        {
                            "name": "return_values",
                            "type": {
                                "kind": "array",
                                "length": 4,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "contract_storage_update_requests",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "struct",
                                    "path": "aztec::abi::ContractStorageUpdateRequest",
                                    "fields": [
                                        {
                                            "name": "storage_slot",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "old_value",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "new_value",
                                            "type": {
                                                "kind": "field"
                                            }
                                        }
                                    ]
                                }
                            }
                        },
                        {
                            "name": "contract_storage_read",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "struct",
                                    "path": "aztec::abi::ContractStorageRead",
                                    "fields": [
                                        {
                                            "name": "storage_slot",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "value",
                                            "type": {
                                                "kind": "field"
                                            }
                                        }
                                    ]
                                }
                            }
                        },
                        {
                            "name": "public_call_stack",
                            "type": {
                                "kind": "array",
                                "length": 4,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "new_commitments",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "new_nullifiers",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "new_l2_to_l1_msgs",
                            "type": {
                                "kind": "array",
                                "length": 2,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "unencrypted_logs_hash",
                            "type": {
                                "kind": "array",
                                "length": 2,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "unencrypted_log_preimages_length",
                            "type": {
                                "kind": "field"
                            }
                        },
                        {
                            "name": "block_header",
                            "type": {
                                "kind": "struct",
                                "path": "aztec::abi::BlockHeader",
                                "fields": [
                                    {
                                        "name": "note_hash_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "nullifier_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "contract_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "l1_to_l2_messages_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "archive_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "public_data_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "global_variables_hash",
                                        "type": {
                                            "kind": "field"
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "name": "prover_address",
                            "type": {
                                "kind": "field"
                            }
                        }
                    ]
                }
            ],
            "bytecode": "",
            "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
        },
        {
            "name": "get_token",
            "functionType": "open",
            "isInternal": false,
            "parameters": [],
            "returnTypes": [
                {
                    "kind": "struct",
                    "path": "aztec::abi::PublicCircuitPublicInputs",
                    "fields": [
                        {
                            "name": "call_context",
                            "type": {
                                "kind": "struct",
                                "path": "aztec::abi::CallContext",
                                "fields": [
                                    {
                                        "name": "msg_sender",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "storage_contract_address",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "portal_contract_address",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "function_selector",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "is_delegate_call",
                                        "type": {
                                            "kind": "boolean"
                                        }
                                    },
                                    {
                                        "name": "is_static_call",
                                        "type": {
                                            "kind": "boolean"
                                        }
                                    },
                                    {
                                        "name": "is_contract_deployment",
                                        "type": {
                                            "kind": "boolean"
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "name": "args_hash",
                            "type": {
                                "kind": "field"
                            }
                        },
                        {
                            "name": "return_values",
                            "type": {
                                "kind": "array",
                                "length": 4,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "contract_storage_update_requests",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "struct",
                                    "path": "aztec::abi::ContractStorageUpdateRequest",
                                    "fields": [
                                        {
                                            "name": "storage_slot",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "old_value",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "new_value",
                                            "type": {
                                                "kind": "field"
                                            }
                                        }
                                    ]
                                }
                            }
                        },
                        {
                            "name": "contract_storage_read",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "struct",
                                    "path": "aztec::abi::ContractStorageRead",
                                    "fields": [
                                        {
                                            "name": "storage_slot",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "value",
                                            "type": {
                                                "kind": "field"
                                            }
                                        }
                                    ]
                                }
                            }
                        },
                        {
                            "name": "public_call_stack",
                            "type": {
                                "kind": "array",
                                "length": 4,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "new_commitments",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "new_nullifiers",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "new_l2_to_l1_msgs",
                            "type": {
                                "kind": "array",
                                "length": 2,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "unencrypted_logs_hash",
                            "type": {
                                "kind": "array",
                                "length": 2,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "unencrypted_log_preimages_length",
                            "type": {
                                "kind": "field"
                            }
                        },
                        {
                            "name": "block_header",
                            "type": {
                                "kind": "struct",
                                "path": "aztec::abi::BlockHeader",
                                "fields": [
                                    {
                                        "name": "note_hash_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "nullifier_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "contract_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "l1_to_l2_messages_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "archive_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "public_data_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "global_variables_hash",
                                        "type": {
                                            "kind": "field"
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "name": "prover_address",
                            "type": {
                                "kind": "field"
                            }
                        }
                    ]
                }
            ],
            "bytecode": "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",
            "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
        },
        {
            "name": "token",
            "functionType": "unconstrained",
            "isInternal": false,
            "parameters": [],
            "returnTypes": [
                {
                    "kind": "field"
                }
            ],
            "bytecode": "H4sIAAAAAAAA/8VUSQ7CMAx00iwEJL7AnVP5Qd/ADypRcUQC/i8IZNTBqnppKnyJ6yQzztiuEREjX2tkNKP8Y/EDxbuytgstEF8tTP/G8AUrUc62rPvyFluX97Sb0DCQtrV4uD6MK8SV5LeOiDVKi0Q+9rJ2B9r3E3fCBB/fR8zJqIO+yxp59ZZ2mX00Yp6OvsG1VTmsmQt0AK5TufyTN9blbTPGhnjRF5F0Bz/OJfK5f6w6F2WdmQoy9kAtTO5/2NzsrtmDWT/8nx7P272/DuehvxhKy6kULaXGPo88SuooNlfGSDHgcGm1PNXer3GNWrO9APM4bgIQBwAA",
            "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
        }
    ],
    "events": [],
    "debug": {
        "debugSymbols": [
            "",
            "",
            "",
            "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",
            "",
            "eJyrVsrJT04syczPK1ayqq6tBQAz9wY7",
            "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NjyWbHgs2fBYsuGxZOGxZOGxZOGxZOGxZPHRXNvwWLLwWLLwWLLwWLLwWLLwWLLwWLLwWLLwWLLwWLLwWLLwWLLwWLLwWLLwWLLwWLLwWLLwWLLwWLLwWLLwWLLwWLLwWLLwWLLwWLLwWLLwWLLwWLLwWLLwWLLwWLLwWLLwWLLwWLLwWLLwWLLwWLLwWLLwWLLwWLLwWLLwWLLwWLLwWLLwWLLwWLLwWLLwWLLwWLLwWLLwWLLwWLLwWLLwWLLwWLLwWLLwWLLwWLLwWLLwWLLwWLLwWLLwWLLwWLLwWLLwWLLwWLLwWLLwWLLwWLLwWLLwWLLwWLLwWLLwWLLwWLLwWLLwWLLwWLLwWLLwWLLwWLLwWLLwWLLwWLLwWLLwWLLwWLLwWLLwWLLwWLLwWLLwWLLwWLLwWLL0WLL0WLL0WLL0WLL8aK5teixZeixZeixZeixZeixZeixZeixZeixZeixZeixZeixZeixZeixZeixZeixZeixZeixZeixZeixZeixZeixZeixZeixZeixZeixZeixZeixZeixZeixZeixZeixZeixZeixZeixZeixZeixZeixZeixZeixZeixZeixZeixZeixZeixZeixZeixZeixZeixZeixZeixZeixZeixZeixZeixZeixZeixZeixZeixZeixZeixZeixZeixZeixZeixZeixZeixZeixZeixZeixZeixZeixZeixZeixZeixZeixZeixZeixZeixZeixZeixZeixZeixZeixZeixZeixZeixZeixZeixZeixZeixZeixZeixZeixZeixZeixZeSxZeSxZeSxZeSxZfTTXtjyWrDyWrDyWrDyWrDyWrDyWrDyWrDyWrDyWrDyWrDyWrDyWrDyWrDyWrDyWrDyWrDyWrDyWrDyWrDyWrDyWrDyWrDyWrDyWrDyWrDyWrDyWrDyWrDyWrDyWrDyWrDyWrDyWrDyWrDyWrDyWrDyWrDyWrDyWrDyWrDyWrDyWrDyWrDyWrDyWrDyWrDyWrDyWrDyWrDyWrDyWrDyWrDyWrDyWrDyWrDyWrDyWrDyWrDyWrDyWrDyWrDyWrDyWrDyWrDyWrDyWrDyWrDyWrDyWrDyWrDyWrDyWrDyWrDyWrDyWrDyWrDyWrDyWrDyWrDyWrDyWrDyWrDyWrDyWrDyWrDyWrDyWrDyWrDyWrDyW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"
        ],
        "fileMap": {
            "1": {
                "source": "// docs:start:token_bridge_imports\nmod token_interface;\n\n// Minimal implementation of the token bridge that can move funds between L1 <> L2.\n// The bridge has a corresponding Portal contract on L1 that it is attached to\n// And corresponds to a Token on L2 that uses the `AuthWit` accounts pattern.\n// Bridge has to be set as a minter on the token before it can be used\n\ncontract TokenBridge {\n    use dep::aztec::{\n        context::{Context},\n        hash::{compute_secret_hash},\n        state_vars::{public_state::PublicState},\n        types::type_serialization::field_serialization::FieldSerializationMethods,\n        types::address::{AztecAddress, EthereumAddress},\n        selector::compute_selector,\n    };\n    // docs:end:token_bridge_imports\n\n    use dep::token_portal_content_hash_lib::{get_mint_public_content_hash, get_mint_private_content_hash, get_withdraw_content_hash};\n\n    use crate::token_interface::Token;\n\n    // docs:start:token_bridge_storage_and_constructor\n    // Storage structure, containing all storage, and specifying what slots they use.\n    struct Storage {\n        token: PublicState<Field, 1>,\n    }\n\n    impl Storage {\n        fn init(context: Context) -> pub Self {\n            Storage {\n                token: PublicState::new(\n                    context,\n                    1,\n                    FieldSerializationMethods,\n                ),\n            }\n        }\n    }\n\n    // Constructs the contract.\n    #[aztec(private)]\n    fn constructor(token: AztecAddress) {\n        let selector = compute_selector(\"_initialize((Field))\");\n        context.call_public_function(context.this_address(), selector, [token.address]);\n    }\n    // docs:end:token_bridge_storage_and_constructor\n\n    // docs:start:claim_public\n    // Consumes a L1->L2 message and calls the token contract to mint the appropriate amount publicly\n    #[aztec(public)]\n    fn claim_public(to: AztecAddress, amount: Field, canceller: EthereumAddress, msg_key: Field, secret: Field) {\n        let content_hash = get_mint_public_content_hash(to.address, amount, canceller.address);\n\n        // Consume message and emit nullifier\n        context.consume_l1_to_l2_message(msg_key, content_hash, secret);\n\n        // Mint tokens\n        Token::at(storage.token.read()).mint_public(context, to.address, amount);\n    }\n    // docs:end:claim_public\n\n    // docs:start:exit_to_l1_public\n    // Burns the appropriate amount of tokens and creates a L2 to L1 withdraw message publicly\n    // Requires `msg.sender` to give approval to the bridge to burn tokens on their behalf using witness signatures\n    #[aztec(public)]\n    fn exit_to_l1_public(\n        recipient: EthereumAddress, // ethereum address to withdraw to\n        amount: Field,\n        callerOnL1: EthereumAddress, // ethereum address that can call this function on the L1 portal (0x0 if anyone can call)\n        nonce: Field // nonce used in the approval message by `msg.sender` to let bridge burn their tokens on L2\n    ) {\n        // Send an L2 to L1 message\n        let content = get_withdraw_content_hash(recipient.address, amount, callerOnL1.address);\n        context.message_portal(content);\n\n        // Burn tokens\n        Token::at(storage.token.read()).burn_public(context, context.msg_sender(), amount, nonce);\n    }\n    // docs:end:exit_to_l1_public\n    // docs:start:claim_private\n    // Consumes a L1->L2 message and calls the token contract to mint the appropriate amount in private assets\n    // User needs to call token.redeem_shield() to get the private assets\n    #[aztec(private)]\n    fn claim_private(\n        secret_hash_for_redeeming_minted_notes: Field, // secret hash used to redeem minted notes at a later time. This enables anyone to call this function and mint tokens to a user on their behalf\n        amount: Field,\n        canceller: EthereumAddress,\n        msg_key: Field, // L1 to L2 message key as derived from the inbox contract\n        secret_for_L1_to_L2_message_consumption: Field // secret used to consume the L1 to L2 message\n    ) {\n        // Consume L1 to L2 message and emit nullifier\n        let content_hash = get_mint_private_content_hash(secret_hash_for_redeeming_minted_notes,\n            amount,\n            canceller.address);\n        context.consume_l1_to_l2_message(msg_key, content_hash, secret_for_L1_to_L2_message_consumption);\n\n        // Mint tokens on L2\n        // `mint_private` on token is public. So we call an internal public function\n        // which then calls the public method on the token contract.\n        // Since the secret_hash is passed, no secret is leaked.\n        context.call_public_function(context.this_address(),\n            compute_selector(\"_call_mint_on_token(Field,Field)\"),\n            [amount, secret_hash_for_redeeming_minted_notes]);\n    }\n    // docs:end:claim_private\n\n    // docs:start:exit_to_l1_private\n    // Burns the appropriate amount of tokens and creates a L2 to L1 withdraw message privately\n    // Requires `msg.sender` (caller of the method) to give approval to the bridge to burn tokens on their behalf using witness signatures\n    #[aztec(private)]\n    fn exit_to_l1_private(\n        token: AztecAddress,\n        recipient: EthereumAddress, // ethereum address to withdraw to\n        amount: Field,\n        callerOnL1: EthereumAddress, // ethereum address that can call this function on the L1 portal (0x0 if anyone can call)\n        nonce: Field // nonce used in the approval message by `msg.sender` to let bridge burn their tokens on L2\n    ) {\n        // Send an L2 to L1 message\n        let content = get_withdraw_content_hash(recipient.address, amount, callerOnL1.address);\n        context.message_portal(content);\n\n        // docs:start:call_assert_token_is_same\n        // Assert that user provided token address is same as seen in storage.\n        context.call_public_function(context.this_address(),\n            compute_selector(\"_assert_token_is_same(Field)\"),\n            [token.address]);\n        // docs:end:call_assert_token_is_same\n\n        // Burn tokens\n        Token::at(token.address).burn(&mut context, context.msg_sender(), amount, nonce);\n    }\n    /// docs:end:exit_to_l1_private\n\n    // View function that is callable by other contracts.\n    // Unconstrained can't be called by others since it isn't safe.\n    #[aztec(public)]\n    fn get_token() -> Field {\n        storage.token.read()\n    }\n\n    // /// Unconstrained ///\n\n    unconstrained fn token() -> Field {\n        storage.token.read()\n    }\n\n    #[aztec(public)]\n    internal fn _initialize(token: AztecAddress) {\n        storage.token.write(token.address);\n    }\n\n    // docs:start:call_mint_on_token\n    // This is a public call as we need to read from public storage.\n    // Also, note that user hashes their secret in private and only sends the hash in public\n    // meaning only user can `redeem_shield` at a later time with their secret.\n    #[aztec(public)]\n    internal fn _call_mint_on_token(amount: Field, secret_hash: Field) {\n        Token::at(storage.token.read()).mint_private(context, amount, secret_hash);\n    }\n    // docs:end:call_mint_on_token\n\n    // docs:start:assert_token_is_same\n    #[aztec(public)]\n    internal fn _assert_token_is_same(token: Field) {\n        assert(storage.token.read() == token, \"Token address is not the same as seen in storage\");\n    }\n    // docs:end:assert_token_is_same\n\n    // TODO: remove this placeholder once https://github.com/AztecProtocol/aztec-packages/issues/2918 is implemented\n    // docs:start:compute_note_hash_and_nullifier_placeholder\n    unconstrained fn compute_note_hash_and_nullifier(contract_address: Field, nonce: Field, storage_slot: Field, serialized_note: [Field; 0]) -> [Field; 4] {\n        [0, 0, 0, 0]\n    }\n    // docs:end:compute_note_hash_and_nullifier_placeholder\n}\n",
                "path": "/usr/src/yarn-project/noir-contracts/src/contracts/token_bridge_contract/src/main.nr"
            },
            "3": {
                "source": "// docs:start:mint_public_content_hash_nr\nuse dep::aztec::hash::{sha256_to_field};\n\n// Computes a content hash of a deposit/mint_public message.\n// Refer TokenPortal.sol for reference on L1.\npub fn get_mint_public_content_hash(owner_address: Field, amount: Field, canceller: Field) -> Field {\n    \n    let mut hash_bytes: [u8; 100] = [0; 100];\n    let recipient_bytes = owner_address.to_be_bytes(32);\n    let amount_bytes = amount.to_be_bytes(32);\n    let canceller_bytes = canceller.to_be_bytes(32);\n\n    for i in 0..32 {\n        hash_bytes[i + 4] = recipient_bytes[i];\n        hash_bytes[i + 36] = amount_bytes[i];\n        hash_bytes[i + 68] = canceller_bytes[i];\n    }\n\n    // Function selector: 0xefc2aae6 keccak256('mint_public(bytes32,uint256,address)')\n    hash_bytes[0] = 0xef;\n    hash_bytes[1] = 0xc2;\n    hash_bytes[2] = 0xaa;\n    hash_bytes[3] = 0xe6;\n\n    let content_hash = sha256_to_field(hash_bytes);\n    content_hash\n}\n// docs:end:mint_public_content_hash_nr\n\n// docs:start:get_mint_private_content_hash\n// Computes a content hash of a deposit/mint_private message.\n// Refer TokenPortal.sol for reference on L1.\npub fn get_mint_private_content_hash(secret_hash_for_redeeming_minted_notes: Field, amount: Field, canceller: Field) -> Field {\n    let mut hash_bytes: [u8; 100] = [0; 100];\n    let secret_hash_bytes = secret_hash_for_redeeming_minted_notes.to_be_bytes(32);\n    let amount_bytes = amount.to_be_bytes(32);\n    let canceller_bytes = canceller.to_be_bytes(32);\n\n    for i in 0..32 {\n        hash_bytes[i + 4] = secret_hash_bytes[i];\n        hash_bytes[i + 36] = amount_bytes[i];\n        hash_bytes[i + 68] = canceller_bytes[i];\n    }\n\n    // Function selector: 0xf512262e keccak256('mint_private(bytes32,uint256,address)')\n    hash_bytes[0] = 0xf5;\n    hash_bytes[1] = 0x12;\n    hash_bytes[2] = 0x26;\n    hash_bytes[3] = 0x2e;\n\n    let content_hash = sha256_to_field(hash_bytes);\n    content_hash\n}\n// docs:end:get_mint_private_content_hash\n\n// docs:start:get_withdraw_content_hash\n// Computes a content hash of a withdraw message.\npub fn get_withdraw_content_hash(recipient: Field, amount: Field, callerOnL1: Field) -> Field {\n    // Compute the content hash\n    // Compute sha256(selector || amount || recipient)\n    // then convert to a single field element\n    // add that to the l2 to l1 messages\n    let mut hash_bytes: [u8; 100] = [0; 100];\n    let recipient_bytes = recipient.to_be_bytes(32);\n    let amount_bytes = amount.to_be_bytes(32);\n    let callerOnL1_bytes = callerOnL1.to_be_bytes(32);\n\n    //  0x69328dec, selector for \"withdraw(address,uint256,address)\"\n    hash_bytes[0] = 0x69;\n    hash_bytes[1] = 0x32;\n    hash_bytes[2] = 0x8d;\n    hash_bytes[3] = 0xec;\n\n    for i in 0..32 {\n        hash_bytes[i + 4] = recipient_bytes[i];\n        hash_bytes[i + 36] = amount_bytes[i];\n        hash_bytes[i + 68] = callerOnL1_bytes[i];\n    }\n    let content_hash = sha256_to_field(hash_bytes);\n    content_hash\n}\n// docs:end:get_withdraw_content_hash\n",
                "path": "/token_portal_content_hash_lib/lib.nr"
            },
            "23": {
                "source": "impl Field {\n    pub fn to_le_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_le_bits(bit_size)\n    }\n    \n    pub fn to_be_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_be_bits(bit_size)\n    }\n\n    #[builtin(to_le_bits)]\n    fn __to_le_bits(_self: Self, _bit_size: u32) -> [u1] {}\n    \n    #[builtin(to_be_bits)]\n    fn __to_be_bits(_self: Self, _bit_size: u32) -> [u1] {}\n\n    pub fn to_le_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_le_radix(256, byte_size)\n    }\n\n    pub fn to_be_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_be_radix(256, byte_size)\n    }\n\n\n    pub fn to_le_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_le_radix(radix, result_len)\n    }\n\n    pub fn to_be_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_be_radix(radix, result_len)\n    }\n\n\n\n    // decompose `_self` into a `_result_len` vector over the `_radix` basis\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix(_self: Self, _radix: u32, _result_len: u32) -> [u8] {}\n    \n    #[builtin(to_be_radix)]\n    fn __to_be_radix(_self: Self, _radix: u32, _result_len: u32) -> [u8] {}\n\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b = exponent.to_le_bits(32);\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32-i] as Field) * (r * self) + (1 - b[32-i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x ∈ {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub fn modulus_num_bits() -> Field {}\n\n#[builtin(modulus_be_bits)]\npub fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub fn modulus_le_bytes() -> [u8] {}\n// Convert a 32 byte array to a field element\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n",
                "path": "std/field.nr"
            },
            "34": {
                "source": "struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::unsafe::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default\n        }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            other\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<U, Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            default()\n        }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some {\n                Option::none()\n            } else {\n                self\n            }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n",
                "path": "std/option.nr"
            },
            "76": {
                "source": "global ARGS_LENGTH: Field = 16;\nglobal RETURN_VALUES_LENGTH: Field = 4;\n\n/**\n * Convention for constant array lengths are mainly divided in 2 classes:\n *  - FUNCTION CALL\n *  - TRANSACTION\n *\n * Agreed convention is to use MAX_XXX_PER_CALL resp. MAX_XXX_PER_TX, where XXX denotes a type of element such as\n * commitment, or nullifier, e.g.,:\n *  - MAX_NEW_NULLIFIERS_PER_CALL\n *  - MAX_NEW_COMMITMENTS_PER_TX\n *\n * In the kernel circuits, we accumulate elements such as commitments and the nullifiers from all functions calls in a\n * transaction. Therefore, we always must have:\n * MAX_XXX_PER_TX ≥ MAX_XXX_PER_CALL\n *\n * For instance:\n * MAX_NEW_COMMITMENTS_PER_TX ≥ MAX_NEW_COMMITMENTS_PER_CALL\n * MAX_NEW_NULLIFIERS_PER_TX ≥ MAX_NEW_NULLIFIERS_PER_CALL\n *\n */\n\n// docs:start:constants\n// \"PER CALL\" CONSTANTS\nglobal MAX_NEW_COMMITMENTS_PER_CALL: Field = 16;\nglobal MAX_NEW_NULLIFIERS_PER_CALL: Field = 16;\nglobal MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL: Field = 4;\nglobal MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL: Field = 4;\nglobal MAX_NEW_L2_TO_L1_MSGS_PER_CALL: Field = 2;\nglobal MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL: Field = 16;\nglobal MAX_PUBLIC_DATA_READS_PER_CALL: Field = 16;\nglobal MAX_READ_REQUESTS_PER_CALL: Field = 32;\nglobal MAX_PENDING_READ_REQUESTS_PER_CALL: Field = 32;\n\n// \"PER TRANSACTION\" CONSTANTS\nglobal MAX_NEW_COMMITMENTS_PER_TX: Field = 64;\nglobal MAX_NEW_NULLIFIERS_PER_TX: Field = 64;\nglobal MAX_PRIVATE_CALL_STACK_LENGTH_PER_TX: Field = 8;\nglobal MAX_PUBLIC_CALL_STACK_LENGTH_PER_TX: Field = 8;\nglobal MAX_NEW_L2_TO_L1_MSGS_PER_TX: Field = 2;\nglobal MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_TX: Field = 16;\nglobal MAX_PUBLIC_DATA_READS_PER_TX: Field = 16;\nglobal MAX_NEW_CONTRACTS_PER_TX: Field = 1;\nglobal MAX_OPTIONALLY_REVEALED_DATA_LENGTH_PER_TX: Field = 4;\nglobal MAX_READ_REQUESTS_PER_TX: Field = 128;\nglobal MAX_PENDING_READ_REQUESTS_PER_TX: Field = 128;\nglobal NUM_ENCRYPTED_LOGS_HASHES_PER_TX: Field = 1;\nglobal NUM_UNENCRYPTED_LOGS_HASHES_PER_TX: Field = 1;\n// docs:end:constants\n\n// ROLLUP CONTRACT CONSTANTS - constants used only in l1-contracts\nglobal NUMBER_OF_L1_L2_MESSAGES_PER_ROLLUP: Field = 16;\n// TODO(961): Use this constant everywhere instead of hard-coded \"2\".\nglobal KERNELS_PER_BASE_ROLLUP: Field = 2;\nglobal MAX_NEW_NULLIFIERS_PER_BASE_ROLLUP: Field = 128;\nglobal MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_BASE_ROLLUP: Field = 32;\nglobal MAX_PUBLIC_DATA_READS_PER_BASE_ROLLUP: Field = 32;\n\n// TREES RELATED CONSTANTS\nglobal VK_TREE_HEIGHT: Field = 3;\nglobal FUNCTION_TREE_HEIGHT: Field = 5;\nglobal CONTRACT_TREE_HEIGHT: Field = 16;\nglobal NOTE_HASH_TREE_HEIGHT: Field = 32;\nglobal PUBLIC_DATA_TREE_HEIGHT: Field = 254;\nglobal NULLIFIER_TREE_HEIGHT: Field = 20;\nglobal L1_TO_L2_MSG_TREE_HEIGHT: Field = 16;\nglobal ROLLUP_VK_TREE_HEIGHT: Field = 8;\n\n// SUB-TREES RELATED CONSTANTS\nglobal CONTRACT_SUBTREE_HEIGHT: Field = 1;\nglobal CONTRACT_SUBTREE_SIBLING_PATH_LENGTH: Field = 15;\nglobal NOTE_HASH_SUBTREE_HEIGHT: Field = 7;\nglobal NOTE_HASH_SUBTREE_SIBLING_PATH_LENGTH: Field = 25;\nglobal NULLIFIER_SUBTREE_HEIGHT: Field = 7;\nglobal ARCHIVE_HEIGHT: Field = 16;\nglobal NULLIFIER_SUBTREE_SIBLING_PATH_LENGTH: Field = 13;\nglobal L1_TO_L2_MSG_SUBTREE_HEIGHT: Field = 4;\nglobal L1_TO_L2_MSG_SUBTREE_SIBLING_PATH_LENGTH: Field = 12;\n\n// MISC CONSTANTS\nglobal FUNCTION_SELECTOR_NUM_BYTES: Field = 4;\nglobal MAPPING_SLOT_PEDERSEN_SEPARATOR: Field = 4;\nglobal NUM_FIELDS_PER_SHA256: Field = 2;\nglobal ARGS_HASH_CHUNK_LENGTH: u32 = 32;\nglobal ARGS_HASH_CHUNK_COUNT: u32 = 16;\n\n\n// NOIR CONSTANTS - constants used only in yarn-packages/noir-contracts\n// Some are defined here because Noir doesn't yet support globals referencing other globals yet.\n// Move these constants to a noir file once the issue bellow is resolved:\n// https://github.com/noir-lang/noir/issues/1734\nglobal L1_TO_L2_MESSAGE_LENGTH: Field = 8;\nglobal L1_TO_L2_MESSAGE_ORACLE_CALL_LENGTH: Field = 26;\nglobal MAX_NOTE_FIELDS_LENGTH: Field = 20;\n// GET_NOTE_ORACLE_RETURN_LENGT = MAX_NOTE_FIELDS_LENGTH + 1 + 2\n// The plus 1 is 1 extra field for nonce.\n// + 2 for EXTRA_DATA: [number_of_return_notes, contract_address]\nglobal GET_NOTE_ORACLE_RETURN_LENGTH: Field = 23;\nglobal MAX_NOTES_PER_PAGE: Field = 10;\n// VIEW_NOTE_ORACLE_RETURN_LENGTH = MAX_NOTES_PER_PAGE * (MAX_NOTE_FIELDS_LENGTH + 1) + 2;\nglobal VIEW_NOTE_ORACLE_RETURN_LENGTH: Field = 212;\nglobal CALL_CONTEXT_LENGTH: Field = 7;\nglobal BLOCK_HEADER_LENGTH: Field = 7;\nglobal FUNCTION_DATA_LENGTH: Field = 4;\nglobal CONTRACT_DEPLOYMENT_DATA_LENGTH: Field = 6;\n// Change this ONLY if you have changed the PrivateCircuitPublicInputs structure.\n// In other words, if the structure/size of the public inputs of a function call changes then we\n// should change this constant as well as the offsets in private_call_stack_item.nr\nglobal PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH: Field = 155;\nglobal CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH: Field = 3;\nglobal CONTRACT_STORAGE_READ_LENGTH: Field = 2;\n// Change this ONLY if you have changed the PublicCircuitPublicInputs structure.\nglobal PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH: Field = 142;\nglobal GET_NOTES_ORACLE_RETURN_LENGTH: Field = 674;\nglobal EMPTY_NULLIFIED_COMMITMENT: Field = 1000000;\nglobal CALL_PRIVATE_FUNCTION_RETURN_SIZE: Field = 161;\nglobal PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH: Field = 87;\nglobal PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH: Field = 144;\nglobal COMMITMENTS_NUM_BYTES_PER_BASE_ROLLUP: Field = 4096;\nglobal NULLIFIERS_NUM_BYTES_PER_BASE_ROLLUP: Field = 4096;\nglobal PUBLIC_DATA_WRITES_NUM_BYTES_PER_BASE_ROLLUP: Field = 2048;\nglobal CONTRACTS_NUM_BYTES_PER_BASE_ROLLUP: Field = 64;\nglobal CONTRACT_DATA_NUM_BYTES_PER_BASE_ROLLUP: Field = 128;\nglobal CONTRACT_DATA_NUM_BYTES_PER_BASE_ROLLUP_UNPADDED: Field = 104;\nglobal L2_TO_L1_MSGS_NUM_BYTES_PER_BASE_ROLLUP: Field = 128;\nglobal LOGS_HASHES_NUM_BYTES_PER_BASE_ROLLUP: Field = 128;\n\n/**\n * Enumerate the hash_indices which are used for pedersen hashing.\n * We start from 1 to avoid the default generators. The generator indices are listed\n * based on the number of elements each index hashes. The following conditions must be met:\n *\n * +-----------+-------------------------------+----------------------+\n * | Hash size | Number of elements hashed (n) | Condition to use     |\n * |-----------+-------------------------------+----------------------|\n * | LOW       | n ≤ 8                         | 0 < hash_index ≤ 32  |\n * | MID       | 8 < n ≤ 16                    | 32 < hash_index ≤ 40 |\n * | HIGH      | 16 < n ≤ 48                   | 40 < hash_index ≤ 48 |\n * +-----------+-------------------------------+----------------------+\n *\n * Note: When modifying, modify `GeneratorIndexPacker` in packer.hpp accordingly.\n */\n// Indices with size ≤ 8\nglobal GENERATOR_INDEX__COMMITMENT = 1;\nglobal GENERATOR_INDEX__COMMITMENT_NONCE = 2;\nglobal GENERATOR_INDEX__UNIQUE_COMMITMENT = 3;\nglobal GENERATOR_INDEX__SILOED_COMMITMENT = 4;\nglobal GENERATOR_INDEX__NULLIFIER = 5;\nglobal GENERATOR_INDEX__INITIALIZATION_NULLIFIER = 6;\nglobal GENERATOR_INDEX__OUTER_NULLIFIER = 7;\nglobal GENERATOR_INDEX__PUBLIC_DATA_READ = 8;\nglobal GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST = 9;\nglobal GENERATOR_INDEX__FUNCTION_DATA = 10;\nglobal GENERATOR_INDEX__FUNCTION_LEAF = 11;\nglobal GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA = 12;\nglobal GENERATOR_INDEX__CONSTRUCTOR = 13;\nglobal GENERATOR_INDEX__CONSTRUCTOR_ARGS = 14;\nglobal GENERATOR_INDEX__CONTRACT_ADDRESS = 15;\nglobal GENERATOR_INDEX__CONTRACT_LEAF = 16;\nglobal GENERATOR_INDEX__CALL_CONTEXT = 17;\nglobal GENERATOR_INDEX__CALL_STACK_ITEM = 18;\nglobal GENERATOR_INDEX__CALL_STACK_ITEM_2 = 19;\nglobal GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET = 20;\nglobal GENERATOR_INDEX__L2_TO_L1_MSG = 21;\nglobal GENERATOR_INDEX__TX_CONTEXT = 22;\nglobal GENERATOR_INDEX__PUBLIC_LEAF_INDEX = 23;\nglobal GENERATOR_INDEX__PUBLIC_DATA_LEAF = 24;\nglobal GENERATOR_INDEX__SIGNED_TX_REQUEST = 25;\nglobal GENERATOR_INDEX__GLOBAL_VARIABLES = 26;\nglobal GENERATOR_INDEX__PARTIAL_ADDRESS = 27;\nglobal GENERATOR_INDEX__BLOCK_HASH = 28;\n// Indices with size ≤ 16\nglobal GENERATOR_INDEX__TX_REQUEST = 33;\nglobal GENERATOR_INDEX__SIGNATURE_PAYLOAD = 34;\n// Indices with size ≤ 44\nglobal GENERATOR_INDEX__VK = 41;\nglobal GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS = 42;\nglobal GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS = 43;\nglobal GENERATOR_INDEX__FUNCTION_ARGS = 44;\n",
                "path": "/protocol_types/constants.nr"
            },
            "93": {
                "source": "use dep::protocol_types::constants::{\n    RETURN_VALUES_LENGTH,\n    MAX_READ_REQUESTS_PER_CALL,\n    MAX_PENDING_READ_REQUESTS_PER_CALL,\n    MAX_NEW_COMMITMENTS_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n    NUM_FIELDS_PER_SHA256,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL,\n    GENERATOR_INDEX__FUNCTION_ARGS,\n    BLOCK_HEADER_LENGTH,\n    CONTRACT_DEPLOYMENT_DATA_LENGTH,\n    CALL_CONTEXT_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n    CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH,\n    CONTRACT_STORAGE_READ_LENGTH,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n    GENERATOR_INDEX__BLOCK_HASH,\n    GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS,\n    GENERATOR_INDEX__FUNCTION_DATA,\n    GENERATOR_INDEX__PUBLIC_DATA_READ,\n    GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST,\n    GENERATOR_INDEX__CALL_CONTEXT,\n    GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS,\n    GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA,\n};\n\nuse crate::oracle::debug_log;\nuse crate::types::vec::BoundedVec;\nuse crate::types::point::Point;\nuse crate::hash::pedersen_hash;\n\n// docs:start:private-global-variables\nstruct PrivateGlobalVariables {\n    chain_id: Field,\n    version: Field,\n}\n// docs:end:private-global-variables\n\nimpl PrivateGlobalVariables {\n    fn serialize(self) -> [Field; 2] {\n        [self.chain_id, self.version]\n    }\n}\n\n// docs:start:public-global-variables\nstruct PublicGlobalVariables {\n    chain_id: Field,\n    version: Field,\n    block_number: Field,\n    timestamp: Field,\n}\n// docs:end:public-global-variables\n\nimpl PublicGlobalVariables {\n    fn serialize(self) -> [Field; 4] {\n        [self.chain_id, self.version, self.block_number, self.timestamp]\n    }\n}\n\n// docs:start:contract-deployment-data\nstruct ContractDeploymentData {\n    deployer_public_key: Point,\n    constructor_vk_hash : Field,\n    function_tree_root : Field,\n    contract_address_salt : Field,\n    portal_contract_address : Field,\n}\n// docs:end:contract-deployment-data\n\nimpl ContractDeploymentData {\n    fn serialize(self) -> [Field; CONTRACT_DEPLOYMENT_DATA_LENGTH] {\n        [\n            self.deployer_public_key.x,\n            self.deployer_public_key.y,\n            self.constructor_vk_hash,\n            self.function_tree_root,\n            self.contract_address_salt,\n            self.portal_contract_address,\n        ]\n    }\n\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA)\n    }\n}\n\n// PrivateContextInputs are expected to be provided to each private function\n// docs:start:private-context-inputs\nstruct PrivateContextInputs {\n    call_context : CallContext,\n    block_header: BlockHeader,\n    contract_deployment_data: ContractDeploymentData,\n    private_global_variables: PrivateGlobalVariables,\n}\n// docs:end:private-context-inputs\n\n// PublicContextInputs are expected to be provided to each public function\n// docs:start:public-context-inputs\nstruct PublicContextInputs {\n    call_context: CallContext,\n    block_header: BlockHeader,\n\n    public_global_variables: PublicGlobalVariables,\n}\n// docs:end:public-context-inputs\n\n// docs:start:call-context\nstruct CallContext {\n    msg_sender : Field,\n    storage_contract_address : Field,\n    portal_contract_address : Field,\n    function_selector: Field,\n\n    is_delegate_call : bool,\n    is_static_call : bool,\n    is_contract_deployment: bool,\n}\n// docs:end:call-context\n\nimpl CallContext {\n    fn serialize(self) -> [Field; CALL_CONTEXT_LENGTH] {\n        [\n            self.msg_sender,\n            self.storage_contract_address,\n            self.portal_contract_address,\n            self.function_selector,\n            self.is_delegate_call as Field,\n            self.is_static_call as Field,\n            self.is_contract_deployment as Field,\n        ]\n    }\n\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CALL_CONTEXT)\n    }\n}\n\n// docs:start:block-header\nstruct BlockHeader {\n    note_hash_tree_root : Field,\n    nullifier_tree_root : Field,\n    contract_tree_root : Field,\n    l1_to_l2_messages_tree_root : Field,\n    archive_root: Field,\n    public_data_tree_root: Field,\n    global_variables_hash: Field,\n}\n// docs:end:block-header\n\nimpl BlockHeader {\n    // NOTE: this order must match the order in `private_circuit_public_inputs.hpp`\n    pub fn serialize(self) -> [Field; BLOCK_HEADER_LENGTH] {\n        [\n            self.note_hash_tree_root,\n            self.nullifier_tree_root,\n            self.contract_tree_root,\n            self.l1_to_l2_messages_tree_root,\n            self.archive_root,\n            self.public_data_tree_root,\n            self.global_variables_hash,\n        ]\n    }\n\n    pub fn deserialize(deserialized: [Field; BLOCK_HEADER_LENGTH]) -> Self {\n        BlockHeader {\n            note_hash_tree_root: deserialized[0],\n            nullifier_tree_root: deserialized[1],\n            contract_tree_root: deserialized[2],\n            l1_to_l2_messages_tree_root: deserialized[3],\n            archive_root: deserialized[4],\n            public_data_tree_root: deserialized[5],\n            global_variables_hash: deserialized[6],\n        }\n    }\n\n    pub fn empty() -> Self {\n        Self { note_hash_tree_root: 0, nullifier_tree_root: 0, contract_tree_root: 0, l1_to_l2_messages_tree_root: 0, archive_root: 0, public_data_tree_root: 0, global_variables_hash: 0 }\n    }\n\n    pub fn block_hash(self) -> Field {\n        // TODO(#3442): Unify the ordering in `BlockHeader::serialize` function and the ordering\n        // in the block hash preimage --> This requires changes in the circuits.\n        let inputs = [\n            self.global_variables_hash,\n            self.note_hash_tree_root,\n            self.nullifier_tree_root,\n            self.contract_tree_root,\n            self.l1_to_l2_messages_tree_root,\n            self.public_data_tree_root\n        ];\n        pedersen_hash(inputs, GENERATOR_INDEX__BLOCK_HASH)\n    }\n}\n\nstruct FunctionData {\n    function_selector: Field,\n    is_internal: bool,\n    is_private: bool,\n    is_constructor: bool,\n}\n\nimpl FunctionData {\n    fn hash(self) -> Field {\n        pedersen_hash([\n            self.function_selector,\n            self.is_internal as Field,\n            self.is_private as Field,\n            self.is_constructor as Field,\n        ], GENERATOR_INDEX__FUNCTION_DATA)\n    }\n}\n\nstruct PrivateCircuitPublicInputs {\n    call_context: CallContext,\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n    read_requests: [Field; crate::abi::MAX_READ_REQUESTS_PER_CALL],\n    pending_read_requests: [Field; crate::abi::MAX_PENDING_READ_REQUESTS_PER_CALL],\n    new_commitments: [Field; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [Field; MAX_NEW_NULLIFIERS_PER_CALL],\n    nullified_commitments: [Field; MAX_NEW_NULLIFIERS_PER_CALL],\n    private_call_stack: [Field; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL],\n    public_call_stack: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_l2_to_l1_msgs: [Field; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    // Explore introducing a new type like uint256 (similar to Point), so it's more explicit that\n    // we're talking about a single number backed by two field elements.\n    encrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    encrypted_log_preimages_length: Field,\n    unencrypted_log_preimages_length: Field,\n    block_header: BlockHeader,\n    contract_deployment_data: ContractDeploymentData,\n    chain_id: Field,\n    version: Field,\n}\n\nimpl PrivateCircuitPublicInputs {\n    fn hash(self) -> Field {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0); \n        fields.push(self.call_context.hash());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.push_array(self.read_requests);\n        fields.push_array(self.pending_read_requests);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.nullified_commitments);\n        fields.push_array(self.private_call_stack);\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_header.serialize());\n        fields.push(self.contract_deployment_data.hash());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n\n        pedersen_hash(fields.storage, GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS)\n    }\n\n    fn serialize(self) -> [Field; PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.push_array(self.read_requests);\n        fields.push_array(self.pending_read_requests);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.private_call_stack);\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_header.serialize());\n        fields.push_array(self.contract_deployment_data.serialize());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n        fields.storage\n    }\n}\n\nstruct ContractStorageRead {\n    storage_slot: Field,\n    value: Field,\n}\n\nimpl ContractStorageRead {\n    pub fn serialize(self) -> [Field; CONTRACT_STORAGE_READ_LENGTH] {\n        [self.storage_slot, self.value]\n    }\n\n    pub fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_READ)\n    }\n\n    pub fn empty() -> Self {\n        Self { storage_slot: 0, value: 0 }\n    }\n}\n\nstruct ContractStorageUpdateRequest {\n    storage_slot: Field,\n    old_value: Field,\n    new_value: Field,\n}\n\nimpl ContractStorageUpdateRequest {\n    pub fn serialize(self) -> [Field; CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH] {\n        [self.storage_slot, self.old_value, self.new_value]\n    }\n\n    pub fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST)\n    }\n\n    pub fn empty() -> Self {\n        Self { storage_slot: 0, old_value: 0, new_value: 0 }\n    }\n}\n\nstruct PublicCircuitPublicInputs {\n    call_context: CallContext,\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n    contract_storage_update_requests: [ContractStorageUpdateRequest; MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n    contract_storage_read: [ContractStorageRead; MAX_PUBLIC_DATA_READS_PER_CALL],\n    public_call_stack: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_commitments: [Field; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [Field; crate::abi::MAX_NEW_NULLIFIERS_PER_CALL],\n    new_l2_to_l1_msgs: [Field; crate::abi::MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_log_preimages_length: Field,\n    block_header: BlockHeader,\n    prover_address: Field,\n}\n\nimpl PublicCircuitPublicInputs {\n    \n    pub fn hash(self) -> Field {\n        let mut inputs: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0);\n        inputs.push(self.call_context.hash());\n        inputs.push(self.args_hash);\n        inputs.push_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            inputs.push(self.contract_storage_update_requests[i].hash());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            inputs.push(self.contract_storage_read[i].hash());\n        }\n        inputs.push_array(self.public_call_stack);\n        inputs.push_array(self.new_commitments);\n        inputs.push_array(self.new_nullifiers);\n        inputs.push_array(self.new_l2_to_l1_msgs);\n\n        inputs.push_array(self.unencrypted_logs_hash);\n        inputs.push(self.unencrypted_log_preimages_length);\n        inputs.push_array(self.block_header.serialize());\n        inputs.push(self.prover_address);\n\n        pedersen_hash(inputs.storage, GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS)\n    }\n\n    pub fn serialize(self) -> [Field; PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());   \n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            fields.push_array(self.contract_storage_update_requests[i].serialize());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            fields.push_array(self.contract_storage_read[i].serialize());\n        }\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_header.serialize());\n        fields.push(self.prover_address);\n        fields.storage\n    }\n}\n\nstruct Hasher {\n    fields: [Field],\n}\n\nimpl Hasher {\n    pub fn new()-> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<N>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n\n    pub fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nglobal ARGS_HASH_CHUNK_LENGTH: u32 = 32;\nglobal ARGS_HASH_CHUNK_COUNT: u32 = 16;\n\npub fn hash_args<N>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        let mut chunks_hashes = [0; ARGS_HASH_CHUNK_COUNT];\n        for i in 0..ARGS_HASH_CHUNK_COUNT {\n            let mut chunk_hash = 0;\n            let start_chunk_index = i * ARGS_HASH_CHUNK_LENGTH;\n            if start_chunk_index < (args.len() as u32) {\n                let mut chunk_args = [0; ARGS_HASH_CHUNK_LENGTH];\n                for j in 0..ARGS_HASH_CHUNK_LENGTH {\n                    let item_index = i * ARGS_HASH_CHUNK_LENGTH + j;\n                    if item_index < (args.len() as u32) {\n                        chunk_args[j] = args[item_index];\n                    }\n                }\n                chunk_hash = pedersen_hash(chunk_args, GENERATOR_INDEX__FUNCTION_ARGS);\n            }\n            chunks_hashes[i] = chunk_hash;\n        }\n        pedersen_hash(chunks_hashes, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n",
                "path": "/aztec/abi.nr"
            },
            "95": {
                "source": "use dep::protocol_types::constants::{\n    EMPTY_NULLIFIED_COMMITMENT,\n    MAX_NEW_COMMITMENTS_PER_CALL,\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_READ_REQUESTS_PER_CALL,\n    MAX_PENDING_READ_REQUESTS_PER_CALL,\n    NUM_FIELDS_PER_SHA256,\n    RETURN_VALUES_LENGTH,\n};\n\nuse crate::abi;\n\nuse crate::abi::{\n    hash_args,\n    CallContext,\n    ContractDeploymentData,\n    BlockHeader,\n    FunctionData,\n    PrivateCircuitPublicInputs,\n    PublicCircuitPublicInputs,\n};\n\n// TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n// use dep::std::collections::vec::Vec;\n\n// l1 to l2 messaging\nuse crate::messaging::process_l1_to_l2_message;\nuse crate::private_call_stack_item::PrivateCallStackItem;\nuse crate::public_call_stack_item::PublicCallStackItem;\n\nuse crate::types::{\n    vec::BoundedVec,\n    point::Point,\n};\n\nuse crate::utils::arr_copy_slice;\n\nuse crate::oracle::{\n    arguments,\n    call_private_function::call_private_function_internal,\n    public_call::call_public_function_internal,\n    enqueue_public_function_call::enqueue_public_function_call_internal,\n    context::get_portal_address,\n    get_block_header::get_block_header,\n};\n\nuse dep::std::option::Option;\n\n// When finished, one can call .finish() to convert back to the abi\nstruct PrivateContext {\n    // docs:start:private-context\n    inputs: abi::PrivateContextInputs,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    read_requests: BoundedVec<Field, MAX_READ_REQUESTS_PER_CALL>,\n    pending_read_requests: BoundedVec<Field, MAX_PENDING_READ_REQUESTS_PER_CALL>,\n\n    new_commitments: BoundedVec<Field, MAX_NEW_COMMITMENTS_PER_CALL>,\n    new_nullifiers: BoundedVec<Field, MAX_NEW_NULLIFIERS_PER_CALL>,\n    nullified_commitments: BoundedVec<Field, MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    private_call_stack : BoundedVec<Field, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_stack : BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    new_l2_to_l1_msgs : BoundedVec<Field, MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    block_header: BlockHeader,\n\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    // encrypted_logs_preimages: Vec<Field>,\n    // unencrypted_logs_preimages: Vec<Field>,\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: abi::PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs: inputs,\n\n            args_hash: args_hash,\n            return_values: BoundedVec::new(0),\n\n            read_requests: BoundedVec::new(0),\n            pending_read_requests: BoundedVec::new(0),\n\n            new_commitments: BoundedVec::new(0),\n            new_nullifiers: BoundedVec::new(0),\n            nullified_commitments: BoundedVec::new(0),\n\n            block_header: inputs.block_header,\n\n            private_call_stack: BoundedVec::new(0),\n            public_call_stack: BoundedVec::new(0),\n            new_l2_to_l1_msgs: BoundedVec::new(0),\n\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    pub fn msg_sender(self) -> Field {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> Field {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    pub fn this_portal_address(self) -> Field {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.private_global_variables.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.private_global_variables.version\n    }\n\n    pub fn selector(self) -> Field {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn get_block_header(self, block_number: u32) -> BlockHeader {\n        get_block_header(block_number, self)\n    }\n\n    pub fn finish(self) -> abi::PrivateCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let encrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let encrypted_log_preimages_length = 0;\n        let unencrypted_log_preimages_length = 0;\n\n        let priv_circuit_pub_inputs = abi::PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            return_values: self.return_values.storage,\n            read_requests: self.read_requests.storage,\n            pending_read_requests: self.pending_read_requests.storage,\n            new_commitments: self.new_commitments.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            nullified_commitments: self.nullified_commitments.storage,\n            private_call_stack: self.private_call_stack.storage,\n            public_call_stack: self.public_call_stack.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            encrypted_logs_hash: encrypted_logs_hash,\n            unencrypted_logs_hash: unencrypted_logs_hash,\n            encrypted_log_preimages_length: encrypted_log_preimages_length,\n            unencrypted_log_preimages_length: unencrypted_log_preimages_length,\n            block_header: self.block_header,\n            contract_deployment_data: self.inputs.contract_deployment_data,\n            chain_id: self.inputs.private_global_variables.chain_id,\n            version: self.inputs.private_global_variables.version,\n        };\n        priv_circuit_pub_inputs\n    }\n\n    pub fn push_read_request(&mut self, read_request: Field) {\n        self.read_requests.push(read_request);\n    }\n\n    pub fn push_pending_read_request(&mut self, pending_read_request: Field) {\n        self.pending_read_requests.push(pending_read_request);\n    }\n\n    pub fn push_new_note_hash(&mut self, note_hash: Field) {\n        self.new_commitments.push(note_hash);\n    }\n\n    // We never push a zero nullified_commitment as zero is used to indicate the end\n    // of a field array in private kernel. This routine transparently replaces a\n    // zero value into the special placeholder: EMPTY_NULLIFIED_COMMITMENT.\n    pub fn push_new_nullifier(&mut self, nullifier: Field, nullified_commitment: Field) {\n        self.new_nullifiers.push(nullifier);\n        let mut non_zero_nullified = nullified_commitment;\n        if (non_zero_nullified == 0) {\n            non_zero_nullified = EMPTY_NULLIFIED_COMMITMENT;\n        }\n        self.nullified_commitments.push(non_zero_nullified);\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, content: Field) \n    // docs:end:context_message_portal\n    {\n        self.new_l2_to_l1_msgs.push(content);\n    }\n\n    // PrivateContextInputs must be temporarily passed in to prevent too many unknowns\n    // Note this returns self to get around an issue where mutable structs do not maintain mutations unless reassigned\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        msg_key: Field,\n        content: Field,\n        secret: Field\n    ) \n    // docs:end:context_consume_l1_to_l2_message\n    {\n        let nullifier = process_l1_to_l2_message(self.block_header.l1_to_l2_messages_tree_root, self.this_address(), self.this_portal_address(), self.chain_id(), self.version(), msg_key, content, secret);\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash)\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0)\n    }\n\n    pub fn call_private_function_with_packed_args(\n        &mut self,\n        contract_address: Field,\n        function_selector: Field,\n        args_hash: Field\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let fields = call_private_function_internal(\n            contract_address, \n            function_selector, \n            args_hash\n        );\n        let item = PrivateCallStackItem {\n            contract_address: fields[0],\n            function_data: FunctionData {\n                function_selector: fields[1],\n                is_internal: fields[2] as bool,\n                is_private: fields[3] as bool,\n                is_constructor: fields[4] as bool,\n            },\n            public_inputs: PrivateCircuitPublicInputs {\n                call_context: CallContext {\n                    msg_sender : fields[5],\n                    storage_contract_address : fields[6],\n                    portal_contract_address : fields[7],\n                    function_selector: fields[8], // practically same as fields[1]\n                    is_delegate_call : fields[9] as bool,\n                    is_static_call : fields[10] as bool,\n                    is_contract_deployment: fields[11] as bool,\n                },\n                // TODO handle the offsets as a variable incremented during extraction?\n                args_hash: fields[12],\n                return_values: arr_copy_slice(fields, [0; RETURN_VALUES_LENGTH], 13),\n                read_requests: arr_copy_slice(fields, [0; MAX_READ_REQUESTS_PER_CALL], 17),\n                pending_read_requests: arr_copy_slice(fields, [0; MAX_READ_REQUESTS_PER_CALL], 49),\n                new_commitments: arr_copy_slice(fields, [0; MAX_NEW_COMMITMENTS_PER_CALL], 81),\n                new_nullifiers: arr_copy_slice(fields, [0; MAX_NEW_NULLIFIERS_PER_CALL], 97),\n                nullified_commitments: arr_copy_slice(fields, [0; MAX_NEW_NULLIFIERS_PER_CALL], 113),\n                private_call_stack: arr_copy_slice(fields, [0; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL], 129),\n                public_call_stack: arr_copy_slice(fields, [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL], 133),\n                new_l2_to_l1_msgs: arr_copy_slice(fields, [0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL], 137),\n                encrypted_logs_hash: arr_copy_slice(fields, [0; NUM_FIELDS_PER_SHA256], 139),\n                unencrypted_logs_hash: arr_copy_slice(fields, [0; NUM_FIELDS_PER_SHA256], 141),\n                encrypted_log_preimages_length: fields[143],\n                unencrypted_log_preimages_length: fields[144],\n                block_header: BlockHeader {\n                    // Must match order in `private_circuit_public_inputs.hpp`\n                    note_hash_tree_root : fields[145],\n                    nullifier_tree_root : fields[146],\n                    contract_tree_root : fields[147],\n                    l1_to_l2_messages_tree_root : fields[148],\n                    archive_root : fields[149],\n                    public_data_tree_root: fields[150],\n                    global_variables_hash: fields[151],\n                },\n                contract_deployment_data: ContractDeploymentData {\n                    deployer_public_key: Point::new(fields[152], fields[153]),\n                    constructor_vk_hash : fields[154],\n                    function_tree_root : fields[155],\n                    contract_address_salt : fields[156],\n                    portal_contract_address : fields[157],\n                },\n                chain_id: fields[158],\n                version: fields[159],\n            },\n            is_execution_request: fields[160] as bool,\n        };\n        assert(contract_address == item.contract_address);\n        assert(function_selector == item.function_data.function_selector);\n\n        assert(args_hash == item.public_inputs.args_hash);\n\n        assert(item.is_execution_request == false);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        // We are issuing a regular call which is not delegate, static, or deployment. We also constrain\n        // the msg_sender in the nested call to be equal to our address, and the execution context address\n        // for the nested call to be equal to the address we actually called.\n        assert(item.public_inputs.call_context.is_delegate_call == false);\n        assert(item.public_inputs.call_context.is_static_call == false);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n        assert(item.public_inputs.call_context.msg_sender == self.inputs.call_context.storage_contract_address);\n        assert(item.public_inputs.call_context.storage_contract_address == contract_address);\n\n        self.private_call_stack.push(item.hash());\n\n        item.public_inputs.return_values\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field,\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: Field,\n        function_selector: Field,\n        args_hash: Field\n    ) {\n        let fields = enqueue_public_function_call_internal(\n            contract_address, \n            function_selector, \n            args_hash\n        );\n        let item = PublicCallStackItem {\n            contract_address: fields[0],\n            function_data: FunctionData {\n                function_selector: fields[1],\n                is_internal: fields[2] as bool,\n                is_private: fields[3] as bool,\n                is_constructor: fields[4] as bool,\n            },\n            public_inputs: PublicCircuitPublicInputs {\n                call_context: CallContext {\n                    msg_sender : fields[5],\n                    storage_contract_address : fields[6],\n                    portal_contract_address : fields[7],\n                    function_selector: fields[8], // practically same as fields[1]\n                    is_delegate_call : fields[9] as bool,\n                    is_static_call : fields[10] as bool,\n                    is_contract_deployment: fields[11] as bool,\n                },\n                args_hash: fields[12],\n                return_values: [0; RETURN_VALUES_LENGTH],\n                contract_storage_update_requests: [ContractStorageUpdateRequest::empty(); MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n                contract_storage_read: [ContractStorageRead::empty(); MAX_PUBLIC_DATA_READS_PER_CALL],\n                public_call_stack: [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n                new_commitments: [0; MAX_NEW_COMMITMENTS_PER_CALL],\n                new_nullifiers: [0; MAX_NEW_NULLIFIERS_PER_CALL],\n                new_l2_to_l1_msgs:[0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n                unencrypted_logs_hash:[0; NUM_FIELDS_PER_SHA256],\n                unencrypted_log_preimages_length: 0,\n                block_header: BlockHeader::empty(),\n                prover_address: 0,\n            },\n            is_execution_request: true,\n        };\n\n        assert(contract_address == item.contract_address);\n        assert(function_selector == item.function_data.function_selector);\n        \n        assert(args_hash == item.public_inputs.args_hash);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        // We are issuing a regular call which is not delegate, static, or deployment. We also constrain\n        // the msg_sender in the nested call to be equal to our address, and the execution context address\n        // for the nested call to be equal to the address we actually called.\n        assert(item.public_inputs.call_context.is_delegate_call == false);\n        assert(item.public_inputs.call_context.is_static_call == false);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n        assert(item.public_inputs.call_context.msg_sender == self.inputs.call_context.storage_contract_address);\n        assert(item.public_inputs.call_context.storage_contract_address == contract_address);\n\n        self.public_call_stack.push(item.hash());\n    }\n}\n\nuse crate::abi::{\n    ContractStorageRead,\n    ContractStorageUpdateRequest\n};\n\nstruct PublicContext {\n    inputs: abi::PublicContextInputs,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    contract_storage_update_requests: BoundedVec<ContractStorageUpdateRequest, MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL>,\n    contract_storage_read: BoundedVec<ContractStorageRead, MAX_PUBLIC_DATA_READS_PER_CALL>,\n    public_call_stack: BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n\n    new_commitments: BoundedVec<Field, MAX_NEW_COMMITMENTS_PER_CALL>,\n    new_nullifiers: BoundedVec<Field, crate::abi::MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    new_l2_to_l1_msgs: BoundedVec<Field, crate::abi::MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n\n    unencrypted_logs_hash: BoundedVec<Field, NUM_FIELDS_PER_SHA256>,\n    unencrypted_logs_preimages_length: Field,\n\n    block_header: BlockHeader,\n    prover_address: Field,\n}\n\nimpl PublicContext {\n    pub fn new(inputs: abi::PublicContextInputs, args_hash: Field) -> PublicContext {\n        let empty_storage_read = ContractStorageRead::empty();\n        let empty_storage_update = ContractStorageUpdateRequest::empty();\n        PublicContext {\n            inputs: inputs,\n\n            args_hash: args_hash,\n            return_values: BoundedVec::new(0),\n\n            contract_storage_update_requests: BoundedVec::new(empty_storage_update),\n            contract_storage_read: BoundedVec::new(empty_storage_read),\n            public_call_stack: BoundedVec::new(0),\n\n            new_commitments: BoundedVec::new(0),\n            new_nullifiers: BoundedVec::new(0),\n\n            new_l2_to_l1_msgs: BoundedVec::new(0),\n\n            \n            unencrypted_logs_hash: BoundedVec::new(0),\n            unencrypted_logs_preimages_length: 0,\n\n            block_header: inputs.block_header,\n            prover_address: 0,\n\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    pub fn msg_sender(self) -> Field {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> Field {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    pub fn this_portal_address(self) -> Field {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.public_global_variables.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.public_global_variables.version\n    }\n\n    pub fn selector(self) -> Field {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn block_number(self) -> Field {\n        self.inputs.public_global_variables.block_number\n    }\n\n    pub fn timestamp(self) -> Field {\n        self.inputs.public_global_variables.timestamp\n    }\n\n    pub fn finish(self) -> abi::PublicCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_log_preimages_length = 0;\n\n\n        // Compute the public call stack hashes\n        let pub_circuit_pub_inputs = abi::PublicCircuitPublicInputs {\n            call_context: self.inputs.call_context, // Done\n            args_hash: self.args_hash, // Done\n            contract_storage_update_requests: self.contract_storage_update_requests.storage,\n            contract_storage_read: self.contract_storage_read.storage,\n            return_values: self.return_values.storage,\n            new_commitments: self.new_commitments.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            public_call_stack: self.public_call_stack.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            unencrypted_logs_hash: unencrypted_logs_hash,\n            unencrypted_log_preimages_length: unencrypted_log_preimages_length,\n            block_header: self.inputs.block_header,\n            prover_address: self.prover_address,\n        };\n        pub_circuit_pub_inputs\n    }\n\n    pub fn push_new_note_hash(&mut self, note_hash: Field) {\n        self.new_commitments.push(note_hash);\n    }\n\n    pub fn push_new_nullifier(&mut self, nullifier: Field, _nullified_commitment: Field) {\n        self.new_nullifiers.push(nullifier);\n    }\n\n    pub fn message_portal(&mut self, content: Field) {\n        self.new_l2_to_l1_msgs.push(content);\n    }\n\n    // PrivateContextInputs must be temporarily passed in to prevent too many unknowns\n    // Note this returns self to get around an issue where mutable structs do not maintain mutations unless reassigned\n    pub fn consume_l1_to_l2_message(&mut self, msg_key: Field, content: Field, secret: Field) {\n        let this = (*self).this_address();\n        let nullifier = process_l1_to_l2_message(self.block_header.l1_to_l2_messages_tree_root, this, self.this_portal_address(), self.chain_id(), self.version(), msg_key, content, secret);\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT)\n    }\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        _self: Self,\n        contract_address: Field, \n        function_selector: Field,\n        args: [Field; ARGS_COUNT],\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = abi::hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        call_public_function_internal(\n            contract_address, \n            function_selector, \n            args_hash,\n        )\n    }\n\n    pub fn call_public_function_no_args(\n        _self: Self,\n        contract_address: Field, \n        function_selector: Field,\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        call_public_function_internal(\n            contract_address, \n            function_selector, \n            0,\n        )\n    }\n\n}\n\nstruct Context {\n    private: Option<&mut PrivateContext>,\n    public: Option<&mut PublicContext>,\n}\n\nimpl Context {\n    pub fn private(context: &mut PrivateContext) -> Context {\n        Context {\n            private: Option::some(context),\n            public: Option::none()\n        }\n    }\n\n    pub fn public(context: &mut PublicContext) -> Context {\n        Context {\n            public: Option::some(context),\n            private: Option::none()\n        }\n    }\n\n    pub fn none() -> Context {\n        Context {\n            public: Option::none(),\n            private: Option::none()\n        }\n    }\n}\n",
                "path": "/aztec/context.nr"
            },
            "96": {
                "source": "use dep::std::hash::{pedersen_hash_with_separator, sha256};\nuse dep::protocol_types::constants::{\n  GENERATOR_INDEX__SIGNATURE_PAYLOAD,\n  GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET,\n};\n\npub fn sha256_to_field<N>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = sha256(bytes_to_hash);\n\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (sha256_hashed[15 - i] as Field) * v;\n        low = low + (sha256_hashed[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    let hash_in_a_field = low + high * v;\n\n    hash_in_a_field\n}\n\npub fn compute_secret_hash(secret: Field) -> Field {\n    // TODO(#1205) This is probably not the right index to use\n    pedersen_hash([secret], GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET)\n}\n\npub fn pedersen_hash<N>(inputs: [Field; N], hash_index: u32) -> Field {\n    pedersen_hash_with_separator(inputs, hash_index)\n}\n",
                "path": "/aztec/hash.nr"
            },
            "104": {
                "source": "mod l1_to_l2_message;\nmod l1_to_l2_message_getter_data;\n\nuse l1_to_l2_message_getter_data::make_l1_to_l2_message_getter_data;\n\nuse crate::abi::PublicContextInputs;\nuse crate::oracle::get_l1_to_l2_message::get_l1_to_l2_message_call;\n\n// Returns the nullifier for the message\npub fn process_l1_to_l2_message(\n    l1_to_l2_root: Field,\n    storage_contract_address: Field,\n    portal_contract_address: Field,\n    chain_id: Field,\n    version: Field,\n    msg_key: Field,\n    content: Field,\n    secret: Field\n) -> Field {\n    let returned_message = get_l1_to_l2_message_call(msg_key);\n    let l1_to_l2_message_data = make_l1_to_l2_message_getter_data(returned_message, 0, secret);\n\n    // Check tree roots against the inputs \n    assert(l1_to_l2_message_data.root == l1_to_l2_root);\n\n    // Validate this is the target contract\n    assert(l1_to_l2_message_data.message.recipient == storage_contract_address);\n\n    // Validate the sender is the portal contract\n    assert(l1_to_l2_message_data.message.sender == portal_contract_address);\n\n    // Validate the chain id is correct\n    assert(l1_to_l2_message_data.message.chainId == chain_id);\n\n    // Validate the version is correct\n    assert(l1_to_l2_message_data.message.version == version);\n\n    // Validate the message hash is correct\n    assert(l1_to_l2_message_data.message.content == content);\n\n    // Validate the message secret is correct\n    l1_to_l2_message_data.message.validate_message_secret();\n\n    // Compute Nullifier\n    l1_to_l2_message_data.message.compute_nullifier()\n}\n",
                "path": "/aztec/messaging.nr"
            },
            "105": {
                "source": "use dep::protocol_types::constants::{\n    L1_TO_L2_MESSAGE_LENGTH,\n    GENERATOR_INDEX__NULLIFIER,\n    GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET,\n};\nuse crate::hash::{sha256_to_field, pedersen_hash};\n\nstruct L1ToL2Message {\n    sender: Field,\n    chainId: Field,\n    recipient: Field,\n    version: Field,\n    content: Field,\n    secret: Field,\n    secret_hash: Field,\n    deadline: u32,\n    fee: u64,\n    tree_index: Field\n}\n\nimpl L1ToL2Message {\n    pub fn deserialize(\n        fields: [Field; L1_TO_L2_MESSAGE_LENGTH],\n        secret: Field,\n        tree_index: Field\n    ) -> L1ToL2Message {\n        L1ToL2Message {\n            sender: fields[0],\n            chainId: fields[1],\n            recipient: fields[2],\n            version: fields[3],\n            content: fields[4],\n            secret: secret,\n            secret_hash: fields[5],\n            deadline: fields[6] as u32,\n            fee: fields[7] as u64,\n            tree_index: tree_index\n        }\n    }\n\n    pub fn validate_message_secret(self: Self) {\n        let recomputed_hash = pedersen_hash([self.secret], GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET);\n        assert(self.secret_hash == recomputed_hash);\n    }\n\n    fn message_hash(self: Self) -> Field {\n        let mut hash_bytes: [u8; 256] = [0; 256];\n        let sender_bytes = self.sender.to_be_bytes(32);\n        let chainId_bytes = self.chainId.to_be_bytes(32);\n        let recipient_bytes = self.recipient.to_be_bytes(32);\n        let version_bytes = self.version.to_be_bytes(32);\n        let content_bytes = self.content.to_be_bytes(32);\n        let secret_hash_bytes = self.secret_hash.to_be_bytes(32);\n        let deadline_bytes = (self.deadline as Field).to_be_bytes(32);\n        let fee_bytes = (self.fee as Field).to_be_bytes(32);\n\n        for i in 0..32 {\n            hash_bytes[i] = sender_bytes[i];\n            hash_bytes[i + 32] = chainId_bytes[i];\n            hash_bytes[i + 64] = recipient_bytes[i];\n            hash_bytes[i + 96] = version_bytes[i];\n            hash_bytes[i + 128] = content_bytes[i];\n            hash_bytes[i + 160] = secret_hash_bytes[i];\n            hash_bytes[i + 192] = deadline_bytes[i];\n            hash_bytes[i + 224] = fee_bytes[i];\n        }\n\n        let message_hash = sha256_to_field(hash_bytes);\n        message_hash        \n    }\n\n    // The nullifier of a l1 to l2 message is the hash of the message salted with the secret and tree index\n    // docs:start:l1_to_l2_message_compute_nullifier\n    pub fn compute_nullifier(self: Self) -> Field {\n        let message_hash = self.message_hash();\n        pedersen_hash([message_hash, self.secret, self.tree_index], GENERATOR_INDEX__NULLIFIER)\n    }\n    // docs:end:l1_to_l2_message_compute_nullifier\n}\n",
                "path": "/aztec/messaging/l1_to_l2_message.nr"
            },
            "106": {
                "source": "use crate::messaging::l1_to_l2_message::L1ToL2Message;\nuse dep::protocol_types::constants::{\n    L1_TO_L2_MSG_TREE_HEIGHT,\n    L1_TO_L2_MESSAGE_LENGTH,\n};\nuse crate::utils::arr_copy_slice;\n\nstruct L1ToL2MessageGetterData {\n    message: L1ToL2Message,\n    sibling_path: [Field; L1_TO_L2_MSG_TREE_HEIGHT],\n    leaf_index: Field,\n    root: Field,\n}\n\npub fn l1_to_l2_message_getter_len() -> Field {\n    L1_TO_L2_MESSAGE_LENGTH + 1 + L1_TO_L2_MSG_TREE_HEIGHT + 1\n}\n\npub fn make_l1_to_l2_message_getter_data<N>(fields: [Field; N], start: Field, secret: Field) -> L1ToL2MessageGetterData {\n    L1ToL2MessageGetterData {\n        message: L1ToL2Message::deserialize(arr_copy_slice(fields, [0; L1_TO_L2_MESSAGE_LENGTH], start),\n            secret,\n            fields[start + L1_TO_L2_MESSAGE_LENGTH]),\n        leaf_index: fields[start + L1_TO_L2_MESSAGE_LENGTH],\n        sibling_path: arr_copy_slice(fields,\n            [0; L1_TO_L2_MSG_TREE_HEIGHT],\n            L1_TO_L2_MESSAGE_LENGTH + 1),\n        root: fields[start + L1_TO_L2_MESSAGE_LENGTH + L1_TO_L2_MSG_TREE_HEIGHT + 1]\n    }\n}\n",
                "path": "/aztec/messaging/l1_to_l2_message_getter_data.nr"
            },
            "117": {
                "source": "#[oracle(packArguments)]\nfn pack_arguments_oracle<N>(_args: [Field; N]) -> Field {}\n\n// TODO: explain what this does.\nunconstrained pub fn pack_arguments<N>(args: [Field; N]) -> Field {\n    pack_arguments_oracle(args)\n}\n",
                "path": "/aztec/oracle/arguments.nr"
            },
            "118": {
                "source": "use dep::protocol_types::constants::CALL_PRIVATE_FUNCTION_RETURN_SIZE;\n\n#[oracle(callPrivateFunction)]\nfn call_private_function_oracle(_contract_address: Field, _function_selector: Field, _args_hash: Field) -> [Field; CALL_PRIVATE_FUNCTION_RETURN_SIZE] {}\n\nunconstrained pub fn call_private_function_internal(contract_address: Field, function_selector: Field, args_hash: Field) -> [Field; CALL_PRIVATE_FUNCTION_RETURN_SIZE] {\n    call_private_function_oracle(contract_address, function_selector, args_hash)\n}\n",
                "path": "/aztec/oracle/call_private_function.nr"
            },
            "121": {
                "source": "use dep::protocol_types::constants::L1_TO_L2_MESSAGE_ORACLE_CALL_LENGTH;\n\n// Checks if a msg is within the l1ToL2Msg tree\n#[oracle(getL1ToL2Message)]\nfn get_l1_to_l2_msg_oracle(_msg_key: Field) -> [Field; L1_TO_L2_MESSAGE_ORACLE_CALL_LENGTH] {}\n\nunconstrained pub fn get_l1_to_l2_message_call(msg_key: Field) -> [Field; L1_TO_L2_MESSAGE_ORACLE_CALL_LENGTH] {\n    get_l1_to_l2_msg_oracle(msg_key)\n}\n",
                "path": "/aztec/oracle/get_l1_to_l2_message.nr"
            },
            "128": {
                "source": "\n// contract_address + \n// args_hash +\n// crate::abi::FUNCTION_DATA_SIZE +\n// crate::abi::CALL_CONTEXT_SIZE +\n// = 2 + 4 + 7\nglobal ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE: Field = 13;\n\n#[oracle(enqueuePublicFunctionCall)]\nfn enqueue_public_function_call_oracle(_contract_address: Field, _function_selector: Field, _args_hash: Field) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE] {}\n\nunconstrained pub fn enqueue_public_function_call_internal(contract_address: Field, function_selector: Field, args_hash: Field) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE] {\n    enqueue_public_function_call_oracle(contract_address, function_selector, args_hash)\n}\n",
                "path": "/aztec/oracle/enqueue_public_function_call.nr"
            },
            "130": {
                "source": "use dep::protocol_types::constants::RETURN_VALUES_LENGTH;\n\n#[oracle(callPublicFunction)]\nfn call_public_function_oracle(_contract_address: Field, _function_selector: Field, _args_hash: Field) -> [Field; RETURN_VALUES_LENGTH] {}\n\nunconstrained pub fn call_public_function_internal(contract_address: Field, function_selector: Field, args_hash: Field) -> [Field; RETURN_VALUES_LENGTH] {\n    call_public_function_oracle(contract_address, function_selector, args_hash)\n}\n",
                "path": "/aztec/oracle/public_call.nr"
            },
            "132": {
                "source": "#[oracle(storageRead)]\nfn storage_read_oracle<N>(_storage_slot: Field, _number_of_elements: Field) -> [Field; N] {}\n\nunconstrained fn storage_read_oracle_wrapper<N>(_storage_slot: Field) -> [Field; N] {\n    storage_read_oracle(_storage_slot, N)\n}\n\npub fn storage_read<T, N>(storage_slot: Field, deserialize: fn ([Field; N]) -> T) -> T {\n    let fields = storage_read_oracle_wrapper(storage_slot);\n    deserialize(fields)\n}\n\n#[oracle(storageWrite)]\nfn storage_write_oracle<N>(_storage_slot: Field, _values: [Field; N]) -> [Field; N] {}\n\n// TODO: Remove return value.\nunconstrained pub fn storage_write<N>(storage_slot: Field, fields: [Field; N]) {\n    let _hash = storage_write_oracle(storage_slot, fields);\n}\n",
                "path": "/aztec/oracle/storage.nr"
            },
            "134": {
                "source": "use crate::abi::FunctionData;\nuse crate::abi::PrivateCircuitPublicInputs;\nuse dep::protocol_types::constants::GENERATOR_INDEX__CALL_STACK_ITEM;\nuse crate::hash::pedersen_hash;\n\nstruct PrivateCallStackItem {\n    contract_address: Field,\n    function_data: FunctionData,\n    public_inputs: PrivateCircuitPublicInputs,\n    is_execution_request: bool,\n}\n\nimpl PrivateCallStackItem {\n    pub fn hash(self) -> Field {\n        pedersen_hash([\n            self.contract_address,\n            self.function_data.hash(),\n            self.public_inputs.hash(),\n        ], GENERATOR_INDEX__CALL_STACK_ITEM)\n    }\n}\n",
                "path": "/aztec/private_call_stack_item.nr"
            },
            "135": {
                "source": "use crate::{\n    abi,\n    hash::pedersen_hash,\n    abi::{\n        PublicCircuitPublicInputs,\n        FunctionData,\n    },\n};\nuse dep::protocol_types::constants::{\n    RETURN_VALUES_LENGTH,\n    GENERATOR_INDEX__CALL_STACK_ITEM,\n};\n\n// oracles\nuse crate::oracle::{\n    enqueue_public_function_call::enqueue_public_function_call_internal,\n};\n\nstruct PublicCallStackItem {\n    contract_address: Field,\n    function_data: FunctionData,\n    public_inputs: PublicCircuitPublicInputs,\n    is_execution_request: bool,\n}\n\nimpl PublicCallStackItem {\n    pub fn hash(self) -> Field {\n        pedersen_hash([\n            self.contract_address,\n            self.function_data.hash(),\n            self.public_inputs.hash(),\n        ], GENERATOR_INDEX__CALL_STACK_ITEM)\n    }\n}\n\n",
                "path": "/aztec/public_call_stack_item.nr"
            },
            "136": {
                "source": "use crate::utils::field_from_bytes;\n\nglobal SELECTOR_SIZE = 4;\n\npub fn compute_selector<N>(signature: str<N>) -> Field {\n    let bytes = signature.as_bytes();\n    let hash = dep::std::hash::keccak256(bytes, bytes.len() as u32);\n\n    let mut selector_be_bytes = [0; SELECTOR_SIZE];\n    for i in 0..SELECTOR_SIZE {\n        selector_be_bytes[i] = hash[i];\n    }\n\n    field_from_bytes(selector_be_bytes, true)\n}\n",
                "path": "/aztec/selector.nr"
            },
            "140": {
                "source": "use crate::context::{Context};\nuse crate::oracle::storage::storage_read;\nuse crate::oracle::storage::storage_write;\nuse crate::types::type_serialization::TypeSerializationInterface;\nuse dep::std::option::Option;\n\n// docs:start:public_state_struct\nstruct PublicState<T, T_SERIALIZED_LEN> {\n    context: Context,\n    storage_slot: Field,\n    serialization_methods: TypeSerializationInterface<T, T_SERIALIZED_LEN>,\n}\n// docs:end:public_state_struct\n\nimpl<T, T_SERIALIZED_LEN> PublicState<T, T_SERIALIZED_LEN> {\n    // docs:start:public_state_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field,\n        serialization_methods: TypeSerializationInterface<T, T_SERIALIZED_LEN>,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicState {\n            context,\n            storage_slot,\n            serialization_methods,\n        }\n    }\n    // docs:end:public_state_struct_new\n\n    // docs:start:public_state_struct_read\n    pub fn read(self) -> T {\n        assert(self.context.private.is_none(), \"Public state writes only supported in public functions\");\n        storage_read(self.storage_slot, self.serialization_methods.deserialize)\n    }\n    // docs:end:public_state_struct_read\n\n    // docs:start:public_state_struct_write\n    pub fn write(self, value: T) {\n        assert(self.context.private.is_none(), \"Public state writes only supported in public functions\");\n        let serialize = self.serialization_methods.serialize;\n        let fields = serialize(value);\n        storage_write(self.storage_slot, fields);\n    }\n    // docs:end:public_state_struct_write\n}\n",
                "path": "/aztec/state_vars/public_state.nr"
            },
            "146": {
                "source": "struct BoundedVec<T, MaxLen> {\n    storage: [T; MaxLen],\n    len: Field,\n}\n\nimpl<T, MaxLen> BoundedVec<T, MaxLen> {\n    pub fn new(initial_value: T) -> Self {\n        BoundedVec { storage: [initial_value; MaxLen], len: 0 }\n    }\n\n    pub fn get(mut self: Self, index: Field) -> T {\n        assert(index as u64 < self.len as u64);\n        self.storage[index]\n    }\n\n    pub fn get_unchecked(mut self: Self, index: Field) -> T {\n        self.storage[index]\n    }\n\n    pub fn push(&mut self, elem: T) {\n        assert(self.len as u64 < MaxLen as u64);\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    pub fn push_array<Len>(&mut self, array: [T; Len]) {\n        let newLen = self.len + array.len();\n        assert(newLen as u64 <= MaxLen as u64);\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = newLen;\n    }\n\n    pub fn pop(&mut self) -> T {\n        assert(self.len as u64 > 0);\n\n        let elem = self.storage[self.len - 1];\n        self.len -= 1;\n        elem\n    }\n\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        let mut exceeded_len = false;\n        for i in 0..MaxLen {\n            exceeded_len |= i == self.len;\n            if (!exceeded_len) {\n                ret |= predicate(self.storage[i]);\n            }\n        }\n        ret\n    }\n}\n\n#[test]\nfn test_vec_push_pop() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    assert(vec.len == 0);\n    vec.push(2);\n    assert(vec.len == 1);\n    vec.push(4);\n    assert(vec.len == 2);\n    vec.push(6);\n    assert(vec.len == 3);\n    let x = vec.pop();\n    assert(x == 6);\n    assert(vec.len == 2);\n    assert(vec.get(0) == 2);\n    assert(vec.get(1) == 4);\n}\n\n#[test]\nfn test_vec_push_array() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    vec.push_array([2, 4]);\n    assert(vec.len == 2);\n    assert(vec.get(0) == 2);\n    assert(vec.get(1) == 4);\n}\n\n#[test(should_fail)]\nfn test_vec_get_out_of_bound() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    vec.push_array([2, 4]);\n    let _x = vec.get(2);\n}\n\n#[test(should_fail)]\nfn test_vec_get_not_declared() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    vec.push_array([2]);\n    let _x = vec.get(1);\n}\n\n#[test(should_fail)]\nfn test_vec_get_uninitialized() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    let _x = vec.get(0);\n}\n\n#[test(should_fail)]\nfn test_vec_push_overflow() {\n    let mut vec: BoundedVec<Field, 1> = BoundedVec::new(0);\n    vec.push(1);\n    vec.push(2);\n}\n\n#[test]\nfn test_vec_any() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    vec.push_array([2, 4, 6]);\n    assert(vec.any(|v| v == 2) == true);\n    assert(vec.any(|v| v == 4) == true);\n    assert(vec.any(|v| v == 6) == true);\n    assert(vec.any(|v| v == 3) == false);\n}\n\n#[test]\nfn test_vec_any_not_default() {\n    let default_value = 1;\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(default_value);\n    vec.push_array([2, 4]);\n    assert(vec.any(|v| v == default_value) == false);\n}\n",
                "path": "/aztec/types/vec.nr"
            },
            "149": {
                "source": "use crate::types::type_serialization::TypeSerializationInterface;\n\n// docs:start:field_serialization\nglobal FIELD_SERIALIZED_LEN: Field = 1;\n\nfn deserializeField(fields: [Field; FIELD_SERIALIZED_LEN]) -> Field {\n    fields[0]\n}\n\nfn serializeField(value: Field) -> [Field; FIELD_SERIALIZED_LEN] {\n    [value]\n}\n\nglobal FieldSerializationMethods = TypeSerializationInterface {\n    deserialize: deserializeField,\n    serialize: serializeField,\n};\n// docs:end:field_serialization",
                "path": "/aztec/types/type_serialization/field_serialization.nr"
            },
            "152": {
                "source": "pub fn arr_copy_slice<T, N, M>(src: [T; N], mut dst: [T; M], offset: Field) -> [T; M] {\n    for i in 0..dst.len() {\n        dst[i] = src[i + offset];\n    }\n    dst\n}\n\npub fn field_from_bytes<N>(bytes: [u8; N], big_endian: bool) -> Field {\n    assert(bytes.len() as u32 < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        let mut index = i;\n        if big_endian {\n            index = N - i - 1;\n        }\n        as_field += (bytes[index] as Field) * offset;\n        offset *= 256;\n    }\n\n    as_field\n}\n\n// TODO(#3470): Copied over from https://github.com/AztecProtocol/aztec-packages/blob/a07c4bd47313be6aa604a63f37857eb0136b41ba/yarn-project/noir-protocol-circuits/src/crates/rollup-lib/src/base/base_rollup_inputs.nr#L599\n// move to a shared place?\n\n// TODO to radix returns u8, so we cannot use bigger radixes. It'd be ideal to use a radix of the maximum range-constrained integer noir supports\npub fn full_field_less_than(lhs: Field, rhs: Field) -> bool {\n    dep::std::eddsa::lt_bytes32(lhs, rhs)\n}\n\npub fn full_field_greater_than(lhs: Field, rhs: Field) -> bool {\n    dep::std::eddsa::lt_bytes32(rhs, lhs)\n}",
                "path": "/aztec/utils.nr"
            },
            "153": {
                "source": "// docs:start:token_bridge_token_interface\nuse dep::aztec::{\n  context::{ PrivateContext, PublicContext, Context },\n  selector::compute_selector,\n};\n\nstruct Token {\n  address: Field,\n}\n\nimpl Token {\n  pub fn at(address: Field) -> Self {\n    Self { address }\n  }\n\n  pub fn mint_public(self: Self, context: PublicContext, to: Field, amount: Field) {\n    let _return_values = context.call_public_function(\n      self.address,\n      compute_selector(\"mint_public((Field),Field)\"),\n      [to, amount]\n    );\n  }\n\n  // docs:start:public_burn_interface\n  pub fn burn_public(self: Self, context: PublicContext, from: Field, amount: Field, nonce: Field) {\n    let _return_values = context.call_public_function(\n      self.address,\n      compute_selector(\"burn_public((Field),Field,Field)\"),\n      [from, amount, nonce]\n    );\n  }\n  // docs:end:public_burn_interface\n\n  pub fn mint_private(self: Self, context: PublicContext, amount: Field, secret_hash: Field) {\n    let _return_values = context.call_public_function(\n      self.address,\n      compute_selector(\"mint_private(Field,Field)\"),\n      [amount, secret_hash]\n    );\n  }\n\n\n  // docs:start:private_burn_interface\n  pub fn burn(self: Self, context: &mut PrivateContext, from: Field, amount: Field, nonce: Field) {\n    let _return_values = context.call_private_function(\n      self.address,\n      compute_selector(\"burn((Field),Field,Field)\"),\n      [from, amount, nonce]\n    );\n  }\n  // docs:end:private_burn_interface\n}\n// docs:end:token_bridge_token_interface\n",
                "path": "/usr/src/yarn-project/noir-contracts/src/contracts/token_bridge_contract/src/token_interface.nr"
            }
        }
    }
}
