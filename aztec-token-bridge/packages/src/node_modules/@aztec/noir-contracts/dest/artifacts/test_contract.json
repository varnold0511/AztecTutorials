{
    "name": "Test",
    "functions": [
        {
            "name": "compute_note_hash_and_nullifier",
            "functionType": "unconstrained",
            "isInternal": false,
            "parameters": [
                {
                    "name": "contract_address",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                },
                {
                    "name": "nonce",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                },
                {
                    "name": "storage_slot",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                },
                {
                    "name": "serialized_note",
                    "type": {
                        "kind": "array",
                        "length": 1,
                        "type": {
                            "kind": "field"
                        }
                    },
                    "visibility": "private"
                }
            ],
            "returnTypes": [
                {
                    "kind": "array",
                    "length": 4,
                    "type": {
                        "kind": "field"
                    }
                }
            ],
            "bytecode": "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",
            "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
        },
        {
            "name": "constructor",
            "functionType": "secret",
            "isInternal": false,
            "parameters": [],
            "returnTypes": [],
            "bytecode": "H4sIAAAAAAAA/+XdZZOTZxSH8V0gSd27uLu1ySbZJFVK3alSL6Rk6y1V6qXU3XB390/IuWbCwAt4xb0z3HNl5j9590x+m+yj5z7nZE9Pz7aeM6/e7vuC7nv5wl6VQmyjcI7tVssDtVqn0d+pVCtLy/2tdrNertXbA81Ks1Jv1pf1N6vVTrPWbLTarUa5ValVO5XBeqs62N1wId1nLA+FuxjbKA6Bu3iRu0uxjdIQuEuJ3ef7vV/o5xw5RJ9zWOLvqTeheVQm5mEJzaMzMQ9PaB6TiXlEQvPYTMyFhOZxmZiLCc3jMzGXEponZGIemdA8UWieJDRPFpqnCM1TheZpQvN0oXmG0DxTaJ4lNM8WmucIzXOF5nlC83yh+Sah+WahuSw0V4TmfqG5KjTXhOa60DwgNDeE5qbQ3BKabxGabxWabxOabxea7xCa7xSaFwjNdwnNC4Xmu4Xme4Tme4Xm+4Tm+4XmB4TmB4Xmh4Tmh4XmR4TmR4Xmx4Tmx4XmRULzE0Lzk0LzU0Lz00LzM0Lzs0LzYqH5OaH5eaH5BaH5RaH5JaH5ZaH5FaH5VaF5idC8VGhuC82vCc3LhOaO0DwoNL8uNL8hNL8pNL8lNL8tNL8jNL8rNL8nNL8vNC8Xmj8Qmj8Umj8Smj8Wmj8Rmj8VmlcIzZ8JzZ8LzV8IzV8KzV8JzV8Lzd8Izd8KzSuF5u+E5lVC8/dC8w9C849C809C889C8y9C869C829C8+9C8x9C859C819C899C8z9C879C839C8/9C82qheY3QvFZoXic0rxeaNwjNG4XmTULzZqF5i9C8VWjeJjRvF5p3CM07heZdmZgvSWjenYn50oTmPZmYL0to3puJ+fKE5n2ZmK9IaN6fifnKhOYDmZivSmg+mIn56oTmQ5mYr0loPpyJ+dqE5iOZmK9LaD6aifn6hOZjmZhvSGg+non5xoTmE5mY+xKaTyY093W309s1D4+MiBQixUgpwjUh10hcM3AOzTkl51icc3AM5pjEPpp9Fv/D/Kb5jvvO+ntu6r6PioyOjImMjYyLjI9MiEyMTIpMjkyJTI1Mi0yPzIjMjMyKzI7MicyNzIvMjzDjnpnvfInMBGdGNjOjmaHMTGFm7DYizGBlJikzOplZyQxHZhoy4+/0zDtmoi2MMDOLGVLMVGLGEDN3mEHDTBZmlDCzgxkWzHRgxgE9/xdF6AlPj3R6htNDm57S9FheHKEHLz1p6dFKz1J6eNLTkh6P9DxcEqEnXjtCzzR6iNFTix5T9FyiBxE9eehRQ88WepjQ04MeF/R8WB6hJwBr5Fkzzhpq1hSzxnZFhDWYrElkjR5r1ljDxZom1viw5mVlhDURqyLUzFNDTk01NcbU3FKDSk0mNYrU7FHDRk0XNU7U/FADQ00INRLUDPAMnWfKPGPlmSPP4HgmxTMafhPcw+eeNvd4uee5PcI9Me4Rcc+EewhcU3ONyTUX1yCck3OOyjkb5zAc0znGsc9nH8g+gf+R069TXMw0LzyaAAA=",
            "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
        },
        {
            "name": "consume_mint_private_message",
            "functionType": "secret",
            "isInternal": false,
            "parameters": [
                {
                    "name": "secret_hash_for_redeeming_minted_notes",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                },
                {
                    "name": "amount",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                },
                {
                    "name": "canceller",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                },
                {
                    "name": "msg_key",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                },
                {
                    "name": "secret_for_L1_to_L2_message_consumption",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                }
            ],
            "returnTypes": [],
            "bytecode": "",
            "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
        },
        {
            "name": "consume_mint_public_message",
            "functionType": "open",
            "isInternal": false,
            "parameters": [
                {
                    "name": "to",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                },
                {
                    "name": "amount",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                },
                {
                    "name": "canceller",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                },
                {
                    "name": "msg_key",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                },
                {
                    "name": "secret",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                }
            ],
            "returnTypes": [
                {
                    "kind": "struct",
                    "path": "aztec::abi::PublicCircuitPublicInputs",
                    "fields": [
                        {
                            "name": "call_context",
                            "type": {
                                "kind": "struct",
                                "path": "aztec::abi::CallContext",
                                "fields": [
                                    {
                                        "name": "msg_sender",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "storage_contract_address",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "portal_contract_address",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "function_selector",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "is_delegate_call",
                                        "type": {
                                            "kind": "boolean"
                                        }
                                    },
                                    {
                                        "name": "is_static_call",
                                        "type": {
                                            "kind": "boolean"
                                        }
                                    },
                                    {
                                        "name": "is_contract_deployment",
                                        "type": {
                                            "kind": "boolean"
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "name": "args_hash",
                            "type": {
                                "kind": "field"
                            }
                        },
                        {
                            "name": "return_values",
                            "type": {
                                "kind": "array",
                                "length": 4,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "contract_storage_update_requests",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "struct",
                                    "path": "aztec::abi::ContractStorageUpdateRequest",
                                    "fields": [
                                        {
                                            "name": "storage_slot",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "old_value",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "new_value",
                                            "type": {
                                                "kind": "field"
                                            }
                                        }
                                    ]
                                }
                            }
                        },
                        {
                            "name": "contract_storage_read",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "struct",
                                    "path": "aztec::abi::ContractStorageRead",
                                    "fields": [
                                        {
                                            "name": "storage_slot",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "value",
                                            "type": {
                                                "kind": "field"
                                            }
                                        }
                                    ]
                                }
                            }
                        },
                        {
                            "name": "public_call_stack",
                            "type": {
                                "kind": "array",
                                "length": 4,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "new_commitments",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "new_nullifiers",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "new_l2_to_l1_msgs",
                            "type": {
                                "kind": "array",
                                "length": 2,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "unencrypted_logs_hash",
                            "type": {
                                "kind": "array",
                                "length": 2,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "unencrypted_log_preimages_length",
                            "type": {
                                "kind": "field"
                            }
                        },
                        {
                            "name": "block_header",
                            "type": {
                                "kind": "struct",
                                "path": "aztec::abi::BlockHeader",
                                "fields": [
                                    {
                                        "name": "note_hash_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "nullifier_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "contract_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "l1_to_l2_messages_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "archive_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "public_data_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "global_variables_hash",
                                        "type": {
                                            "kind": "field"
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "name": "prover_address",
                            "type": {
                                "kind": "field"
                            }
                        }
                    ]
                }
            ],
            "bytecode": "",
            "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
        },
        {
            "name": "create_l2_to_l1_message_public",
            "functionType": "open",
            "isInternal": false,
            "parameters": [
                {
                    "name": "amount",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                },
                {
                    "name": "secret_hash",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                }
            ],
            "returnTypes": [
                {
                    "kind": "struct",
                    "path": "aztec::abi::PublicCircuitPublicInputs",
                    "fields": [
                        {
                            "name": "call_context",
                            "type": {
                                "kind": "struct",
                                "path": "aztec::abi::CallContext",
                                "fields": [
                                    {
                                        "name": "msg_sender",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "storage_contract_address",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "portal_contract_address",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "function_selector",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "is_delegate_call",
                                        "type": {
                                            "kind": "boolean"
                                        }
                                    },
                                    {
                                        "name": "is_static_call",
                                        "type": {
                                            "kind": "boolean"
                                        }
                                    },
                                    {
                                        "name": "is_contract_deployment",
                                        "type": {
                                            "kind": "boolean"
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "name": "args_hash",
                            "type": {
                                "kind": "field"
                            }
                        },
                        {
                            "name": "return_values",
                            "type": {
                                "kind": "array",
                                "length": 4,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "contract_storage_update_requests",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "struct",
                                    "path": "aztec::abi::ContractStorageUpdateRequest",
                                    "fields": [
                                        {
                                            "name": "storage_slot",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "old_value",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "new_value",
                                            "type": {
                                                "kind": "field"
                                            }
                                        }
                                    ]
                                }
                            }
                        },
                        {
                            "name": "contract_storage_read",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "struct",
                                    "path": "aztec::abi::ContractStorageRead",
                                    "fields": [
                                        {
                                            "name": "storage_slot",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "value",
                                            "type": {
                                                "kind": "field"
                                            }
                                        }
                                    ]
                                }
                            }
                        },
                        {
                            "name": "public_call_stack",
                            "type": {
                                "kind": "array",
                                "length": 4,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "new_commitments",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "new_nullifiers",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "new_l2_to_l1_msgs",
                            "type": {
                                "kind": "array",
                                "length": 2,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "unencrypted_logs_hash",
                            "type": {
                                "kind": "array",
                                "length": 2,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "unencrypted_log_preimages_length",
                            "type": {
                                "kind": "field"
                            }
                        },
                        {
                            "name": "block_header",
                            "type": {
                                "kind": "struct",
                                "path": "aztec::abi::BlockHeader",
                                "fields": [
                                    {
                                        "name": "note_hash_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "nullifier_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "contract_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "l1_to_l2_messages_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "archive_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "public_data_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "global_variables_hash",
                                        "type": {
                                            "kind": "field"
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "name": "prover_address",
                            "type": {
                                "kind": "field"
                            }
                        }
                    ]
                }
            ],
            "bytecode": "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",
            "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
        },
        {
            "name": "create_nullifier_public",
            "functionType": "open",
            "isInternal": false,
            "parameters": [
                {
                    "name": "amount",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                },
                {
                    "name": "secret_hash",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                }
            ],
            "returnTypes": [
                {
                    "kind": "struct",
                    "path": "aztec::abi::PublicCircuitPublicInputs",
                    "fields": [
                        {
                            "name": "call_context",
                            "type": {
                                "kind": "struct",
                                "path": "aztec::abi::CallContext",
                                "fields": [
                                    {
                                        "name": "msg_sender",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "storage_contract_address",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "portal_contract_address",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "function_selector",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "is_delegate_call",
                                        "type": {
                                            "kind": "boolean"
                                        }
                                    },
                                    {
                                        "name": "is_static_call",
                                        "type": {
                                            "kind": "boolean"
                                        }
                                    },
                                    {
                                        "name": "is_contract_deployment",
                                        "type": {
                                            "kind": "boolean"
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "name": "args_hash",
                            "type": {
                                "kind": "field"
                            }
                        },
                        {
                            "name": "return_values",
                            "type": {
                                "kind": "array",
                                "length": 4,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "contract_storage_update_requests",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "struct",
                                    "path": "aztec::abi::ContractStorageUpdateRequest",
                                    "fields": [
                                        {
                                            "name": "storage_slot",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "old_value",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "new_value",
                                            "type": {
                                                "kind": "field"
                                            }
                                        }
                                    ]
                                }
                            }
                        },
                        {
                            "name": "contract_storage_read",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "struct",
                                    "path": "aztec::abi::ContractStorageRead",
                                    "fields": [
                                        {
                                            "name": "storage_slot",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "value",
                                            "type": {
                                                "kind": "field"
                                            }
                                        }
                                    ]
                                }
                            }
                        },
                        {
                            "name": "public_call_stack",
                            "type": {
                                "kind": "array",
                                "length": 4,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "new_commitments",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "new_nullifiers",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "new_l2_to_l1_msgs",
                            "type": {
                                "kind": "array",
                                "length": 2,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "unencrypted_logs_hash",
                            "type": {
                                "kind": "array",
                                "length": 2,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "unencrypted_log_preimages_length",
                            "type": {
                                "kind": "field"
                            }
                        },
                        {
                            "name": "block_header",
                            "type": {
                                "kind": "struct",
                                "path": "aztec::abi::BlockHeader",
                                "fields": [
                                    {
                                        "name": "note_hash_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "nullifier_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "contract_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "l1_to_l2_messages_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "archive_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "public_data_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "global_variables_hash",
                                        "type": {
                                            "kind": "field"
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "name": "prover_address",
                            "type": {
                                "kind": "field"
                            }
                        }
                    ]
                }
            ],
            "bytecode": "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",
            "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
        },
        {
            "name": "emit_msg_sender",
            "functionType": "secret",
            "isInternal": false,
            "parameters": [],
            "returnTypes": [],
            "bytecode": "H4sIAAAAAAAA/+XdZ3MbVRTGcRVLsiwIEMCQ6vReVG2JakKHAKEECDVRLIcAcUwwxdQQeu81FNN7zwfk/DOrYS00vMlRJneenTmjZl/tbyVtvfecI4lEYibx75SMbkej2+KxTaWMtZHp0m6lOFyttkbKrVKltKtYbjTrtWK11hyul+qlWr02Vq5XKq16tT7SaDZGio1StdIqjdcalfGo4YzfPBZ74c5aG9keuLMnuDtnbeR64M45utPWRjrx38l7WaScP6vOyantWi+XQdJxGSRj85iK7p9lcbbFUPQ43+Wz5bm+Dh/PZaL77bay/su22G0dUDzGKR+b53QXd18XdyZ2W4i9nuhYBnMs+i3mRo9b+/ZObZ9oTew+MD051Rrbun9PMvZfmY65iLfU+Xx7TrLROzgukXI+MfvTY0p2PB6N3e+PzUvOd16Orvnzvm0e/fUPxOa/bW2/TyH2eib2NwPOtmRi9rdmNPZ4oHfvW2wb/89f6DIfhePoj/+q8l3ms/16LvZcKna/fZvuaC++NZ31xh6geJvem+x5id5s/lLOyyDpaJ4fiDnlaF4QiDntaF4YiLnP0bwoEHPG0bw4EHPW0TwUiDnnaF4SiHmeo3mpoHmZoHm5oHmFoHmloHmVoHm1oHmNoHmtoHmdoHm9oHmDoHmjoHmToHmzoLkoaC4JmsuC5oqguSporgmahwXNI4LmuqC5IWg+R9B8rqD5PEHz+YLmCwTNFwqaRwXNFwmatwiaLxY0XyJovlTQfJmg+XJB8xWC5isFzVcJmq8WNG8VNF8jaL5W0HydoHmboPl6QfMNguYbBc03CZq3C5pvFjTfImi+VdC8Q9B8m6D5dkHzHYLmOwXNdwma7xY07xQ07xI0NwXNuwXNY4LmlqB5XNC8R9B8j6B5r6D5XkHzfYLm+wXN+wTNE4Lm/YLmSUHzA4LmA4LmBwXNU4LmhwTNDwuaHxE0PyponhY0PyZoflzQ/ISg+UlB81OC5qcFzQcFzc8Img8Jmp8VND8naH5e0PyCoPlFQfNLguaXBc2vCJpfFTS/Jmh+XdD8hqD5TUHzW4LmtwXN7wia3xU0vydofl/Q/IGg+UNB80eC5o8FzZ8Img8Lmj8VNH8maP5c0PyFoHlG0PyloPkrQfPXguZvBM3fBmLudzR/F4g572j+PhDzgKP5h0DMBUfzj4GYT3I0/xSI+WRH88+BmOc4mn8JxHyKo/nXQMynOpp/C8R8mqP590DMcx3NfwRiPt3R/Gcg5jMczX8FYj7T0fx3IOZBR/MRR/Ng1E4yMqct+iwyFlmLnAXHhBwjcczAPjT7lOxjsc/BNphtEuto1ln8hvlO8xkPxpbn4eh2vsUCi4UWiywWWwxZLLFYarHMYrnFCouVFqssVlussVhrsc5ivcUGi40Wmyw2sxwsqPlODXRqglMjm5rR1FCmpjA1dhsW1GClJik1OqlZSQ3Hdk1Dat5tsaAmGjXCqJlFDSlqKlFjiJo71KChJgs1SqjZQQ0LajpssyDnPznwyQlPjnRyhpNDm5zS5FjeYUEOXnLSkqOVnKXk8CSn5U4Lch42LciJR444cqaRQ4ycWuSYIucSOYjIyUOOGnK2kMOEnB6TFuR8IAcCOQEYI8+YccZQM6aYMbbTFozBZEwiY/QYs8YYLsY0HbRgzMshC8ZEMEaAPvP0IadPNX2M6XNLH1T6ZNJHkT579GGjTxd9nOjzQx8Y+oTQR4I+A1xD55oy11i55sg1OL4LXKPhmgXn8DmnPWPBOU/OAXJOjHNEnDPhHALH1BxjcszFMQj75Oyjss/GPgzbdLZxrPNZB7JO4DfSnv4BRA0YG0ehAAA=",
            "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
        },
        {
            "name": "emit_nullifier",
            "functionType": "secret",
            "isInternal": false,
            "parameters": [
                {
                    "name": "nullifier",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                }
            ],
            "returnTypes": [],
            "bytecode": "H4sIAAAAAAAA/+XdZZMTWRTG8QyQZH1ZncEHtwHSkZnOKsu6s846BDK4u7u7uw3uzsejOP+qppCCV3OmiltPVz2Vd13963Q6LfeeczeVSrWkHi41yefw5DPXuiVK2zrST1lvIddYLFab8tWoEI3J5cuVuJQrliqNcRRHpbg0Lh8XCtW4GDeVK+WmXDkqFqpRc6lcaE5WnPbbxlxbuDO2jkwbuDPPuTtr68i2gTvr7H7W8d7a7axz3M6aZF/WJ+urtdyz1Il+Nlg6Jd8Z+6Vjsl86PQfb1Tn1+OJ9XHVJuRxXzcV88bHjv90T25lr3RLVOJq7ptrmN+9tbudo7haIub2juXsg5g6O5h6BmNOO5vpAzBlHc89AzFlHc69AzJ0dzb0DMdc5mvsImvsKmvsJmvsLmgcImgcKmgcJmgcLmhsEzUMEzUMFzcMEzTlBcyRozguaC4LmoqC5JGhuFDQ3CZpjQXNZ0PyeoPl9QfMHguYPBc0fCZo/FjQPFzR/ImgeIWj+VND8maD5c0HzF4LmLwXNXwmavxY0fyNo/lbQ/J2g+XtB8w+C5h8FzSMFzT8Jmn8WNP8iaP5V0PyboPl3QfMfguZRguY/Bc1/CZr/FjT/I2j+V9D8n6D5f0HzaEHzGEFzRdA8VtA8TtBcFTQ3C5rHC5onCJonCponCZonC5qnCJqnCpqnCZqnC5pnCJpnCppnCZpnC5rnCJrnCprnCZrnB2KudTQvEPyeFwqaFwmaFwualwialwqalwmalwuaVwiaVwqaVwmaVwua1wia1wqa1wma1wdi7uJo3iD4PW8UNG8SNG8WNG8RNG8VNG8TNG8XNO8QNO8UNO8SNO8WNO8RNO8VNO8TNO8XNB8QNB8UNB8SNB8WNB8RNB8VNB8TNB8XNJ8QNJ8UNLcImk8Jmk8Lms8Ims8Kms8FYn7B0Xw+EPOLjuYLgZhfcjRfDMT8sqP5UiDmVxzNlwMxv+povhKI+TVH89VAzK87mq8FYu7oaL4eiPkNR/ONQMxvOppvBmJ+y9F8KxDz247m24GY33E03wnE/K6j+a6juTZZT01ibm/pYElbMpashXtC7pG4Z+AammtKrrG45uA/mP8kztGcs/gNc0zzHWOufWSfHk4+u1q6WbpbeljqLT0tvSy9LX0sfS39LP0tAywDLYMsgy0NliGWoZZh7ANLZKHPPX3f6YNOX3D6ZNM3OrbQV5g+u/SdpQ8rfUnp0/mgbyV9DUdY6HtHHzj6otEnjL5Z9JGirxJ9hui7Qx8a+rLQp4S+HSMt9HWgzwF1/6mDT1146qRTN3yUhbrS1Fmm7jB1eKlLS51W6paOtlDXsmKh7iF1AKmLR5046qZRR4y6WtSZou4SdYioy0OdGuq2zLBQ14M6F9R9oA4CdQGYJ8+88QUW5hUzz5Z5p8zDZF4i8/SYt7bCwrymVRbmvTAPhHkRzBNg3DzjyBlXzThjxt0yDpVxmYxTZNzeDgvjuhjnxLgfxsEwLoRxEowb4D0675V5z8oxwHs43kvxnob3FicsPNdusfDck+eAPBfjORHPTXiOwH0195ncd3EfwnU516lct3Edw/86/3Oc9zkPcl7gd/JguQ9Pu3c5mJwAAA==",
            "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
        },
        {
            "name": "emit_unencrypted",
            "functionType": "open",
            "isInternal": false,
            "parameters": [
                {
                    "name": "value",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                }
            ],
            "returnTypes": [
                {
                    "kind": "struct",
                    "path": "aztec::abi::PublicCircuitPublicInputs",
                    "fields": [
                        {
                            "name": "call_context",
                            "type": {
                                "kind": "struct",
                                "path": "aztec::abi::CallContext",
                                "fields": [
                                    {
                                        "name": "msg_sender",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "storage_contract_address",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "portal_contract_address",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "function_selector",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "is_delegate_call",
                                        "type": {
                                            "kind": "boolean"
                                        }
                                    },
                                    {
                                        "name": "is_static_call",
                                        "type": {
                                            "kind": "boolean"
                                        }
                                    },
                                    {
                                        "name": "is_contract_deployment",
                                        "type": {
                                            "kind": "boolean"
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "name": "args_hash",
                            "type": {
                                "kind": "field"
                            }
                        },
                        {
                            "name": "return_values",
                            "type": {
                                "kind": "array",
                                "length": 4,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "contract_storage_update_requests",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "struct",
                                    "path": "aztec::abi::ContractStorageUpdateRequest",
                                    "fields": [
                                        {
                                            "name": "storage_slot",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "old_value",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "new_value",
                                            "type": {
                                                "kind": "field"
                                            }
                                        }
                                    ]
                                }
                            }
                        },
                        {
                            "name": "contract_storage_read",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "struct",
                                    "path": "aztec::abi::ContractStorageRead",
                                    "fields": [
                                        {
                                            "name": "storage_slot",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "value",
                                            "type": {
                                                "kind": "field"
                                            }
                                        }
                                    ]
                                }
                            }
                        },
                        {
                            "name": "public_call_stack",
                            "type": {
                                "kind": "array",
                                "length": 4,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "new_commitments",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "new_nullifiers",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "new_l2_to_l1_msgs",
                            "type": {
                                "kind": "array",
                                "length": 2,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "unencrypted_logs_hash",
                            "type": {
                                "kind": "array",
                                "length": 2,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "unencrypted_log_preimages_length",
                            "type": {
                                "kind": "field"
                            }
                        },
                        {
                            "name": "block_header",
                            "type": {
                                "kind": "struct",
                                "path": "aztec::abi::BlockHeader",
                                "fields": [
                                    {
                                        "name": "note_hash_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "nullifier_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "contract_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "l1_to_l2_messages_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "archive_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "public_data_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "global_variables_hash",
                                        "type": {
                                            "kind": "field"
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "name": "prover_address",
                            "type": {
                                "kind": "field"
                            }
                        }
                    ]
                }
            ],
            "bytecode": "",
            "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
        },
        {
            "name": "get_constant",
            "functionType": "unconstrained",
            "isInternal": false,
            "parameters": [],
            "returnTypes": [
                {
                    "kind": "field"
                }
            ],
            "bytecode": "",
            "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
        },
        {
            "name": "get_portal_contract_address",
            "functionType": "secret",
            "isInternal": false,
            "parameters": [
                {
                    "name": "aztec_address",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                }
            ],
            "returnTypes": [],
            "bytecode": "H4sIAAAAAAAA/+3dZ3MTVxTG8TW2JAgJIdWGUExvBrQq9irVQHp1OulYWCaFYGIrCemE9E56IYVAeqXz7RjOf1gNwmNecTzD5UEzz8gz9qz3t1pJW+4953AURbuj44+W9Lk3fc6f2iPO2DIyYyy3mO8ulWo9hVpcjPvzhUo1KedL5Wp3EidxOSkPFJJisZaUkp5KtdKTr8SlYi0eLFeKg+mCM37rmB8Pd9aWkR0Hd/Y0d+dsGblxcOec3Sfb3091PTsc17Ml3Zad6fLaLUcsHaLPXZZp6WvGdpmabpdpp8F6Tbe0Rsf3p+aH93usPfLdxxqPyyyT058nWSaMcmSbfu51+v9Z/+2Tb173xjPfF7kmWzTq91MsE6NjrymPDbV639BwvX/jmqFN9eH+9fVVAwPDtZGR5u3VGp34+jYvj//RNurvmter8btcNMY+0+uzIeLQd8gZ0dkd8ozaIaMxVsxr2S2R37f4zGh8jja8zRMczbMCMbc6mmcHYm5zNHcGYs44mucEYs46mucGYs45mucFYp7uaJ4fiHmGo3lBIOYOR/NCQfMiQfNiQfMSQfNSQfMyQXOXoHm5oHmFoHmloDkvaI4FzQVBc1HQXBI0lwXN3YLmHkFzImiuCJovFzRfIWi+UtB8laD5akHzNYLmXkHzKkHzakHzGkHztYLm6wTN1wuabxA03yhovknQfLOg+RZB862C5tsEzbcLmu8QNPcJmu8UNN8laL5b0HyPoPleQfN9gub7Bc1rBc0PCJofFDQ/JGh+WND8iKD5UUHzY4LmdYLmfkFzVdC8XtA8IGiuCZoHBc0bBM2PC5qfEDQ/KWh+StC8UdD8tKB5k6B5SNC8WdD8jKB5WNA8ImiuC5qfFTQ/J2h+XtC8RdD8gqD5RUHzS4LmlwXNrwiaXxU0vyZo3ipofl3QvE3Q/Iag+U1B81uC5rcFze8Imt8VNL8naH5f0PyBoPlDQfNHguaPBc2fCJq3C5o/FTR/Jmj+XND8haD5S0HzV4LmrwXN3wiavxU0fydo3iFo/l7Q/IOg+UdB80+C5p2C5p8FzbsEzbsFzb8Imn8VNP8maP5d0PxHIOaJjuY/AzFPcjT/FYj5HEfz34GYJzua/wnEfK6j+d9AzOc5mv8LxDzF0fx/IObzHc17AjFPdTTvDcR8gaN5XyDmCx3N+wMxX+RoPhCI+WJH88FAzJc4mg8FYr7U0XzY0dyeLqclNbda2iwZS9aSs3BOyDkS5wwcQ3NMyTEWxxx8B/OdxGc0n1m8h9mneY0xtzdt0x3p80zLLMtsS6dljmWuZZ5lvmWBZaFlkWWxZYllqWWZpcuy3LLCshK/JbYU2K4W+r7TB52+4PTJTiz0UaavMH126TtLH1b6kjb6dNLHcbWFPn/0vaMPHH3R6BNG3yz6SNFXiT5D9N2hDw19WehT0mehjwV9HehzQN1/6uBTF5466Wst1NGmrjR1lqk7TB1e6tJSp3WdhTqeVQt1Hql7SB1A6uJRJ466adQRo64Wdaaou0QdIuryUKdms4U6JtT1oM4FdR+og0BdAObJb7Ewj5p5xcyzZd4p8zCZl8g8va0W5nFtszDPh3kvzANhXgTzBBg3zzhyxlUzzphxt4xDZVwm4xS3WxjHxrguxjkx7odxMIwLYZwE4wa4j859ZV5/7jtyH477Utyn2WnhOv4uC9d5ue7JdUCui3GdiOsmXEfgvJrzTM67OA/huJzjVI7bOI7he53vOT73+Rzkc4H3SeNxFENeu7wSoQAA",
            "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
        },
        {
            "name": "get_public_key",
            "functionType": "secret",
            "isInternal": false,
            "parameters": [
                {
                    "name": "address",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                }
            ],
            "returnTypes": [],
            "bytecode": "H4sIAAAAAAAA/+Xdd3MTRxjH8bNkSTiFkmYDBkxvBnQq9inVJj2kOJ10LCQTJw4htkkglZDeSS+kEEJ67+HNZfJ8J6fhRoi/vJph56eZZ84j8Hk/q+vafZ6jQRAcCY69OuLlULzMz+wVZmwdmRbrLeYHSqX6YKEeFsPRfKFSjcr5Urk6EIVRWI7KtUJULNajUjRYqVYG85WwVKyHY+VKcSxeccZdG/PtcGdtHdk2uLMnuTtn68i1wZ1z7D7R9j7TdvY4bGdH3Jd98fq6Lf616BFd9lvMjz8z+mVu3C/zT4J2LbBIB8e2p+TL9T7WHbjdxhptTMc/L7TotVhkMS9+r8si1eTKJn4ectSeVsfM/AxfybY3lpw/cglb0PTvs2Nfxm1bil2Jfg4SfR+06Msg8fdpS6fbtoSzgv8/Y1476tMju6sT49u31PcO76yNjE5Oj49ODNdqk/WpqVYbSbpF41OJDs02/T/ea3R4Z+K9VALYeK/xO7nE8rgda8hRLzSOJsmtn726N14uipdzLBY3tSHV1JaZnj0c7tnh4qA9Z8xUG/rfVf8t8cSccmju88Scdmhe6om506F5mSfmjEPzck/MWYfmFZ6Ycw7NKz0xL3BoXuWJeaFD82pPzL0OzWs8Mfc4NK8VNK8TNK8XNPcLmjcImjcKmjcJmvOC5lDQXBA0FwXNJUFzWdA8IGgeFDRHguaKoPlcQfN5gubzBc0XCJovFDRfJGgeEjQPC5o3C5ovFjRfImi+VNB8maD5ckHzFYLmKwXNVwmatwiarxY0XyNovlbQfJ2geUTQfL2g+QZB842C5psEzTcLmm8RNN8qaN4qaL5N0Hy7oPkOQfOdgua7BM13C5rvETRvEzSPCpqrgubtguaaoLkuaB4TNO8QNN8raB4XNN8naL5f0DwhaH5A0LxT0PygoHmXoPkhQfOkoHlK0DwtaN4taH5Y0PyIoHmPoHmvoPlRQfNjgubHBc1PCJqfFDQ/JWjeJ2h+WtC8X9D8jKD5WUHzc4Lm5wXNLwiaXxQ0vyRoflnQ/Iqg+VVB82uC5tcFzW8Img8Imt8UNL8laH5b0PyOoPldQfN7gub3Bc0fCJo/FDR/JGg+KGj+WND8iaD5U0HzZ4LmQ4LmzwXNhwXNXwiajwiavxQ0fyVo/lrQ/I2g+VtB83eemGc5NH/vibnLofkHT8ynODT/6In5VIfmnzwxn+bQ/LMn5tMdmn/xxDzboflXT8xzHJp/88Q816H5d0/M8xya//DEfIZD85+emM90aP7LE/NZDs1/e2I+26H5H0/M5zg0H3Vo7o7X0xGb0xadFhmLrEXOgntC7pG4Z+AammtKrrG45uAczDmJYzTHLPZhtmk+Y8zdiT49GC+XWPRZLLVYZrHcYoXFSotVFqst1listVhnsd6i32KDxUaLTbgtQosC/WlRsqDOPXXfqYMeWVAnm7rR1FGmrjB1dqk726jDSp3OzRbUcaSuIXX+qHtHHTjqolEnjLpZ1JGirhJ1hqi7Qx2aEQvqlFC3gzoW1HWgzgF5/8mDv9WCPOnkDSePNnmlybNM3mHy8G6zIE9r1YI8nuS1JM8jeQ/JA0hePPLEkTeNPGLk1SLPFHmXyEO0y4I8NeRtIY8JeT3Ic0HeB/Ig7LFgnjzzxplHzbxi5tky75R5mPssmKe334J5XMxrYp4P816YB8K8COYJMG6eceSMq2acMeNuGYd6wIJxiozbYxwb47oY58S4H8bBMC6EcRKMG+Bz53tlvmfle0e+hztkwfc0hy14js9zbZ7z8tyT54A8F+M5Ec9NeI7AfTX3mdx3cR/CdTnXqVy3cR3DeZ3zHMd9joMcF9hPGq//AHW+hTjKoAAA",
            "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
        },
        {
            "name": "get_random",
            "functionType": "unconstrained",
            "isInternal": false,
            "parameters": [
                {
                    "name": "kindaSeed",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                }
            ],
            "returnTypes": [
                {
                    "kind": "field"
                }
            ],
            "bytecode": "H4sIAAAAAAAA/82UTQrCMBCFJ+mPVsETuPAI6Q2y8gDeQGgRwZ+N98eGJvKZZteIfTDMJJP2vZlMq0VEyYgCMRH2rPdmHlqV712GevVgBx83fk3UiG0m/jp/fwy1B18NtkJtEuV3g20T+05fkVdfG8+IRRy4qEX9WUsj07l2/dwjX8p33xo8XybOsabqBzWRx2IduDbQUC5Ai460MK+R553U0TnOfci5mV/LON8Ol/51Oj+65/147W9d/PUTvEGdYCjAMPnrWe/NPHzGkwQqIfgNxYQOj4cFAAA=",
            "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
        },
        {
            "name": "get_this_address",
            "functionType": "secret",
            "isInternal": false,
            "parameters": [],
            "returnTypes": [],
            "bytecode": "H4sIAAAAAAAA/+XdZZOTZxSH8V0gSd27uLu1ySbZJFVK3alSL6Rk6y1V6qXU3XB390/IuWbCwAt4xb0z3HNl5j9590x+m+yj5z7nZE9Pz7aeM6/e7vuC7nv5wl6VQmyjcI7tVssDtVqn0d+pVCtLy/2tdrNertXbA81Ks1Jv1pf1N6vVTrPWbLTarUa5ValVO5XBeqs62N1wId1nLA+FuxjbKA6Bu3iRu0uxjdIQuEuJ3ef7vV/o5xw5RJ9zWOLvqTeheVQm5mEJzaMzMQ9PaB6TiXlEQvPYTMyFhOZxmZiLCc3jMzGXEponZGIemdA8MRNzymPVJOH3PFloniI0TxWapwnN04XmGULzTKF5ltA8W2ieIzTPFZrnCc3zheabhOabheay0FwRmvuF5qrQXBOa60LzgNDcEJqbQnNLaL5FaL5VaL5NaL5daL5DaL5TaF4gNN8lNC8Umu8Wmu8Rmu8Vmu8Tmu8Xmh8Qmh8Umh8Smh8Wmh8Rmh8Vmh8Tmh8XmhcJzU8IzU8KzU8JzU8Lzc8Izc8KzYuF5ueE5ueF5heE5heF5peE5peF5leE5leF5iVC81KhuS00vyY0LxOaO0LzoND8utD8htD8ptD8ltD8ttD8jtD8rtD8ntD8vtC8XGj+QGj+UGj+SGj+WGj+RGj+VGheITR/JjR/LjR/ITR/KTR/JTR/LTR/IzR/KzSvFJq/E5pXCc3fC80/CM0/Cs0/Cc0/C82/CM2/Cs2/Cc2/C81/CM1/Cs1/Cc1/C83/CM3/Cs3/Cc3/C82rheY1QvNaoXmd0LxeaN4gNG8UmjcJzZuF5i1C81aheZvQvF1o3iE07xSad2ViviSheXcm5ksTmvdkYr4soXlvJubLE5r3ZWK+IqF5fybmKxOaD2Riviqh+WAm5qsTmg9lYr4moflwJuZrE5qPZGK+LqH5aCbm6xOaj2ViviGh+Xgm5hsTmk9kYu5LaD6Z0NzX3U5v1zw8MiJSiBQjpQjXhFwjcc3AOTTnlJxjcc7BMZhjEvto9ln8D/Ob5jvuO+vvuan7PioyOjImMjYyLjI+MiEyMTIpMjkyJTI1Mi0yPTIjMjMyKzI7MicyNzIvMj/CjHtmvvMlMhOcGdnMjGaGMjOFmbHbiDCDlZmkzOhkZiUzHJlpyIy/0zPvmIm2MMLMLGZIMVOJGUPM3GEGDTNZmFHCzA5mWDDTgRkH9PxfFKEnPD3S6RlOD216StNjeXGEHrz0pKVHKz1L6eFJT0t6PNLzcEmEnnjtCD3T6CFGTy16TNFziR5E9OShRw09W+hhQk8PelzQ82F5hJ4ArJFnzThrqFlTzBrbFRHWYLImkTV6rFljDRdrmljjw5qXlRHWRKyKUDNPDTk11dQYU3NLDSo1mdQoUrNHDRs1XdQ4UfNDDQw1IdRIUDPAM3SeKfOMlWeOPIPjmRTPaPhNcA+fe9rc4+We5/YI98S4R8Q9E+4hcE3NNSbXXFyDcE7OOSrnbJzDcEznGMc+n30g+wT+R06/TgFpW/Q0PJoAAA==",
            "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
        },
        {
            "name": "get_this_portal_address",
            "functionType": "secret",
            "isInternal": false,
            "parameters": [],
            "returnTypes": [],
            "bytecode": "H4sIAAAAAAAA/+XdZZOTZxSH8V0gSd27uLu1ySbZJFVK3alSL6Rk6y1V6qXU3XB390/IuWbCwAt4xb0z3HNl5j9590x+m+yj5z7nZE9Pz7aeM6/e7vuC7nv5wl6VQmyjcI7tVssDtVqn0d+pVCtLy/2tdrNertXbA81Ks1Jv1pf1N6vVTrPWbLTarUa5ValVO5XBeqs62N1wId1nLA+FuxjbKA6Bu3iRu0uxjdIQuEuJ3ef7vV/o5xw5RJ9zWOLvqTeheVQm5mEJzaMzMQ9PaB6TiXlEQvPYTMyFhOZxmZiLCc3jMzGXEponZGIemdA8MRNzyv32JOH3PFloniI0TxWapwnN04XmGULzTKF5ltA8W2ieIzTPFZrnCc3zheabhOabheay0FwRmvuF5qrQXBOa60LzgNDcEJqbQnNLaL5FaL5VaL5NaL5daL5DaL5TaF4gNN8lNC8Umu8Wmu8Rmu8Vmu8Tmu8Xmh8Qmh8Umh8Smh8Wmh8Rmh8Vmh8Tmh8XmhcJzU8IzU8KzU8JzU8Lzc8Izc8KzYuF5ueE5ueF5heE5heF5peE5peF5leE5leF5iVC81KhuS00vyY0LxOaO0LzoND8utD8htD8ptD8ltD8ttD8jtD8rtD8ntD8vtC8XGj+QGj+UGj+SGj+WGj+RGj+VGheITR/JjR/LjR/ITR/KTR/JTR/LTR/IzR/KzSvFJq/E5pXCc3fC80/CM0/Cs0/Cc0/C82/CM2/Cs2/Cc2/C81/CM1/Cs1/Cc1/C83/CM3/Cs3/Cc3/C82rheY1QvNaoXmd0LxeaN4gNG8UmjcJzZuF5i1C81aheZvQvF1o3iE07xSad2ViviSheXcm5ksTmvdkYr4soXlvJubLE5r3ZWK+IqF5fybmKxOaD2Riviqh+WAm5qsTmg9lYr4moflwJuZrE5qPZGK+LqH5aCbm6xOaj2ViviGh+Xgm5hsTmk9kYu5LaD6Z0NzX3U5v1zw8MiJSiBQjpQjXhFwjcc3AOTTnlJxjcc7BMZhjEvto9ln8D/Ob5jvuO+vvuan7PioyOjImMjYyLjI+MiEyMTIpMjkyJTI1Mi0yPTIjMjMyKzI7MicyNzIvMj/CjHtmvvMlMhOcGdnMjGaGMjOFmbHbiDCDlZmkzOhkZiUzHJlpyIy/0zPvmIm2MMLMLGZIMVOJGUPM3GEGDTNZmFHCzA5mWDDTgRkH9PxfFKEnPD3S6RlOD216StNjeXGEHrz0pKVHKz1L6eFJT0t6PNLzcEmEnnjtCD3T6CFGTy16TNFziR5E9OShRw09W+hhQk8PelzQ82F5hJ4ArJFnzThrqFlTzBrbFRHWYLImkTV6rFljDRdrmljjw5qXlRHWRKyKUDNPDTk11dQYU3NLDSo1mdQoUrNHDRs1XdQ4UfNDDQw1IdRIUDPAM3SeKfOMlWeOPIPjmRTPaPhNcA+fe9rc4+We5/YI98S4R8Q9E+4hcE3NNSbXXFyDcE7OOSrnbJzDcEznGMc+n30g+wT+R06/TgH08GCKPJoAAA==",
            "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
        },
        {
            "name": "is_time_equal",
            "functionType": "open",
            "isInternal": false,
            "parameters": [
                {
                    "name": "time",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                }
            ],
            "returnTypes": [
                {
                    "kind": "struct",
                    "path": "aztec::abi::PublicCircuitPublicInputs",
                    "fields": [
                        {
                            "name": "call_context",
                            "type": {
                                "kind": "struct",
                                "path": "aztec::abi::CallContext",
                                "fields": [
                                    {
                                        "name": "msg_sender",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "storage_contract_address",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "portal_contract_address",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "function_selector",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "is_delegate_call",
                                        "type": {
                                            "kind": "boolean"
                                        }
                                    },
                                    {
                                        "name": "is_static_call",
                                        "type": {
                                            "kind": "boolean"
                                        }
                                    },
                                    {
                                        "name": "is_contract_deployment",
                                        "type": {
                                            "kind": "boolean"
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "name": "args_hash",
                            "type": {
                                "kind": "field"
                            }
                        },
                        {
                            "name": "return_values",
                            "type": {
                                "kind": "array",
                                "length": 4,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "contract_storage_update_requests",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "struct",
                                    "path": "aztec::abi::ContractStorageUpdateRequest",
                                    "fields": [
                                        {
                                            "name": "storage_slot",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "old_value",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "new_value",
                                            "type": {
                                                "kind": "field"
                                            }
                                        }
                                    ]
                                }
                            }
                        },
                        {
                            "name": "contract_storage_read",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "struct",
                                    "path": "aztec::abi::ContractStorageRead",
                                    "fields": [
                                        {
                                            "name": "storage_slot",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "value",
                                            "type": {
                                                "kind": "field"
                                            }
                                        }
                                    ]
                                }
                            }
                        },
                        {
                            "name": "public_call_stack",
                            "type": {
                                "kind": "array",
                                "length": 4,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "new_commitments",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "new_nullifiers",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "new_l2_to_l1_msgs",
                            "type": {
                                "kind": "array",
                                "length": 2,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "unencrypted_logs_hash",
                            "type": {
                                "kind": "array",
                                "length": 2,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "unencrypted_log_preimages_length",
                            "type": {
                                "kind": "field"
                            }
                        },
                        {
                            "name": "block_header",
                            "type": {
                                "kind": "struct",
                                "path": "aztec::abi::BlockHeader",
                                "fields": [
                                    {
                                        "name": "note_hash_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "nullifier_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "contract_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "l1_to_l2_messages_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "archive_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "public_data_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "global_variables_hash",
                                        "type": {
                                            "kind": "field"
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "name": "prover_address",
                            "type": {
                                "kind": "field"
                            }
                        }
                    ]
                }
            ],
            "bytecode": "H4sIAAAAAAAA/+2dB5gcxZXHd7RKvaO4K61WG2eDVlma2VVOLBJBElFEEYUiCCStQCuEyDnnDCLIOWMbG84+4zNnOPuMzwEfPuOzz3D2GZ994DMOYBuHe9VT7/RXqZlvy3plz7Cvv+//dfer7vd+Va+6Os7u7rKyslRZfionVZXtO3F5l51n92/KpeR8ZUNy9isRzvIS4exfIpwDSoRzYIlwDioRzsElwhmVCGdFiXCmS4RzSIlwDi0RzmElwjm8RDhHlAjnyBLhrCwRzipBzrHAOcrOR9t5tZ2PsfMaO+d9au28ztaxv12vJzWQGklNtowbJENqJrWQWkltpHGkdtJ40gTSRNIk0mTSFNJU0jTSdOsnR+ogdZJmkGaSZpFmk+aQ5pLmkeaTFpAWkhaRDrDtdiBpMWkJ6SDSwaRDSIeSlpKWkZaTDiMdTjqCdCTpKFuXjK3L0aQVpGNIx5KOIx1POoF0Imkl6STSyaRTSKeSTiOdTlpFOoO0mrSGtJa0jrSetIF0Juks0kbS2aRzSJtIm0lbSN1Om28lnUs6j7TNlo2wZT2k7aTzSTtIF5B2ki4kXUS6mHQJ6VLSZaTLSVeQriRd5fi6mnQN6VrSdaTrSTeQbiTdRLqZdAvpVtJtpNtJd5DuJN1lffWzvu4m3ePY7iXdZ5fvt/MH7PxBO99l5w/Z+cN2/oidP2rnu0kzKvLL5hrOvdc2Nu7zKbBx/+8HNj4WysHGx0V/sPExMgBsfLwMBBsfO4PAVmeXB4OtHpZ53mCXK8DWaJfTYGuyy0PAlrHLQ8HWbJeHga3FLg8HW6tdHgG2Nrs8Emzj7HKlnXO9zdRl59n9nIxP4XE1a9g551VQH875KLBxzkeDjXNeDTau+xiwcc5rwMY5Hws2znkt2DjndWDjnGNf4Zw3gI1z3gg2znkT2DjnGbBxzpvBxjlvARvnvBVs3JZtYOO25L5i2m4JlPOExyA+N2Mbl+MxWA4+2cbleAxyOR6DXI7HIJbznMvxGORyPN64HI8tzhceR7xPJdg4X9jv2A/2Mc4X9if2jX2H84V9h+Nh3+F8Yd9hBuw73Pex7zBXBmzc97HvMCv3HVMv0/bc/7vsPLt/Uw5j8ZRy1rtgGcfqOlmWThz3e8NSByz1wu2ShnaphziNwnHwfNWbOjcCS5Mwi/GZkfUZX9Y2Az/XleOkoXwU1K1ZuG54Xcp+eb0ZWGodTrwmqC0CPrbhONOcwNciy9eRKts7j12w3gJ8bGsClowwS+SwmKnQMZMBljZRllwWrwV7w9IGLK2iLPnjd5ysz/g6sl3Yp/ExHtqE24/Z01DeDu01Xri9UhCT/fI68imrsiqrsiqrsiqrsipr32bF+xx8tsfbNRcBH9tagUX63gCfcbFv8xzxMYgp+4wil8X7ZL63dJ+zlcM2ldEersetraJs33trfEeA+WsQ5c/nj+OwX17H9xZcF3zeI/3sKQVx2O87N27HWvnnhLmseS5tnnVnrL96px74HKnasZk++TTUt1ie7eKzz37AJ/y8N/eXPu/F53TlwCd9rOL7xd7wNQAf74fvVaSf1+KY1Ru+JuDj/QYAn/QzTXx22hu+pOecA2Eu/bzM99ldK/DxfoOAT/j8msP3x73hw2sl3m8w8Elfixi+dg8+vD7h/SLgmxiAb4IH30Tg4/0qgG9yAL5JHnyTgW8SLDPf1AB8Uzz4pgIT7zcE+KYH4JvmwTcd+Hi/ocCXC8CXLes9Xw74eL9hwNcZgK/Dg68T+Hi/4cA3MwDfDA++mcDH+40AvtkB+GZ58M0GPt5vJPDNDcA3x4NvLvDxfviN0vwAfPM8+OYDH+9XBXwLA/At8OBbCHy8XzXwHSDLF78HXeTBdwCwHBigrbo8WA4EliUB2mWxB8sSYDlElKUzfkZykAfLIcBysChL/v3wobI+4/fDS4V9Gh/LoE24/Zg9DeVLob2WCbdXCmKyX15HPmVVVmVVVmVVVmVVVmVVVmVVVmVVVmVVVmVVVmVVVmVVVmVVVmVVVmVVVmVVVmWVZzUsix3OCLZbXAR8bDs4IEvksJip0LcnSXyYy8Nk+eLvdJZ78B0GLEeKsnTE3+kc7sFyJLAcIcqS/07nKFmf8Tc1RwM/15XjpKEcc360cN1SEJP98jryKauyKquyKquyKquyKquyKquyKquyKquyKquyKquylgqrYVnucEaw3fIi4GPbEQFZIofFTIWesyfxYS6PkeWL30ms8OA7BliOl2WZYViO9WA5HliOk2WJ30mcIOsza3ycCPxcV46ThnLM+YnCdUtBTPbL68inrH2b1bCscDgj2G5FEfCx7biALJHDYqZC41ISH+byJFm+eAxf6cF3ErCcKsqS//8AJ3uwnAosp4iy5Mfw02R9xmP46cDPdeU4aSjHnJ8uXLcUxGS/vI58yqqsyqqsyqqsyqqsytq3WQ3LSoczgu1WFgEf204JyBI5LGYqdJ+SxIe5PEOWL76nW+XBdwawrBVlyd/TrfZgWQssa0RZ8vd062R9xvd064Gf68px0lCOOV8vXLcUxGS/vI58yqqsyqqsyqqsyqqsytq3WQ3LKoczgu1WFQEf29YEZIkcFjMVuk9J4sNcninLF9/TbfDgOxNYzg7AcpYHy9nAslGWJb6nO0fWZ3xPtwn4ua4cJw3lmPNNwnVLQUz2y+vIVyqshmWDwxnBdhuKgI9tGwOyRA6LmQodP0l8mMstsnzx8b3Zg28LsJwbgKXbg+VcYNkqyxKPNefJ+ozHmm3Az3XlOGkox5xvE65bCmKyX15HvlJhNSybHc4ItttcBHxs2xqQJXJYzFTo+Eniw1xuD8DX48G3Hfh6Evh2BOA734NvB/DxfhHw7QzAd4EH307g4/3w//ZdFIDvQg++i4DvQlhmvksC8F3swXcJMPF+Q4DvsgB8l3rwXQZ8vB/+374rAvBd7sF3BfDxfvh/+64KwHelB99VwMf7DQe+awLwXe3Bdw3w8X44/l0XgO9aD77rgO/aBL4bAvBd78F3A/Bdn8B3UwC+Gz34bgK+GxP4bgnAd7MH3y3Ad3MC320B+G714LsNWG6XZcmmgeV2iHNngDrfUdb7OnP8NOyHfHcH4LvLg+9u4Lsrge/eAHz3ePDdC3y8H/bp+wPw3efBdz/w3ZfA92AAvgc8+B4EvgcS+B4KwLfLg+8h4NuVwPdIAL6HPfgeAb6HE/h2B+B71INvN/A9msD37gB87/LgezfwvSuB770B+N7jwfde4HtPAt/7A/C9z4Pv/cD3vgS+Dwbg+4AH3weB7wMJfB8OwPchD74PA9+HEvg+GoDvIx58HwW+jyTwPRaA72MefI8B38cS+D4RgO/jHnyfAL6PJ/A9HoDvkx58jwPfJxP4Ph2A71MefJ8Gvk8l8D0pyxe/M3jCg+9JYPmsLEv8u/S/82D5LLB8RpYlfn/x97I+4/cXnwN+rivHSUM55vxzwnVLQUz2y+vIp6x9m9WwPOFwRrDdE0XAx7bPBGSJHBYzFRqXkvgwl5+X5YvH8Kc8+D4PLE+LsuT/3vk/eLA8DSxfEGXJj+H/KOszHsO/CPxcV46ThnLM+ReF65aCmOyX15FPWZVVWZVVWZVVWZVVWZVVWZVVWZVVWZVVWZVVWZW1VFgNy1MOZwTbPVUEfGz7QkCWyGExU8pZ74LlJD7M5bOyfPE7iWc8+J4Fli+LsuTfSfyTB8uXgeVLoiz5dxL/LOszfifxFeDnunKcNJRjzr8iXLcUxGS/vI58yqqsyqqsyqqsyqqsyqqsyqqsyqqsyqqsyqqsyqqspcJqWJ5xOCPY7pki4GPblwKyRA6LmQo9Z0/iw1x+VZYvfifxnAffV4Hl66Is+f/18C8eLF8Hlq+JsuTfSXxD1mf8TuKbwM915ThpKMecf1O4bimIyX55HfmUVVmVVVmVVVmVVVmVtW+zGpbnHM4ItnuuCPjY9rWALJHDYqZC9ylJfJjLb8nyxfd0z3vwfQtYvi3Kkr+n+1cPlm8DywuiLPl7un+T9Zk1Pr4D/FxXjpOGcsz5d4TrloKY7JfXkU9ZlVVZlVVZlVVZlVVZ+zarYXne4Yxgu+eLgI9tLwRkiRwWMxW6T0niw1x+V5Yvvqd70YPvu8DyfVGW/D3dv3uwfB9YvifKkr+n+w9Zn/E93Q+An+vKcdJQjjn/gXDdUhCT/fI68imrsiqrsiqrsiqrsipr32Y1LC86nBFs92IR8LHtewFZIofFTIXuU5L4MJcvy/LF93QvefC9DCw/kmWJ/8/Af3qw/AhYfijLEt/T/Zesz/ie7sfAz3XlOGkox5z/WLhuKYjJfnkd+ZS1b7Malpcczgi2e6kI+Nj2w4AskcNipkLjUhIf5vInsnzxGP6KB99PgOVnsizxGP7fHiw/A5afyrLEY/j/yPqMx/BXgZ/rynHSUI45f1W4bimIyX55HfmUtW+zGpZXHM4ItnulCPjY9tOALJHDYqZC41ISH+by57J88Rj+mgffz4Hl9QAs/+vB8jqw/EKWJR7DfynrMx7DfwX8XFeOk4ZyzPmvhOuWgpjsl9eRr1RYDctrDmcE271WBHxs+0VAlshhMVOh4yeJD3P5mwB8v/bg+w3w/TqB780AfG948L0JfG8k8P0uAN9vPfh+B3y/TeB7KwDf7z343gK+3yfw/TEA3x88+P4IfH9I4PtzAL4/efD9Gfj+lMCXSsnzuUCF+Dh+GjZcCuX9rK0/qcraRtl5OZTvGpifD7X16i9br/jesZ9HvTi+YSkXbmPjc4Csz/i6Y2Bq33YfAPnhcm7/gWCTqlsKYrJfXke+3rIuVdZ3JKthWeRwRrDdoiLgY1s5jAXCx20uDb4GQJzBAca/gR7j32BgGRRg/IsCjH8VCcdBBPmsSBj/KgL0rcjpW7yOfL1lXaqs70hWEzctGrcz/m418jjG06lwbWB8DglwjA+FCnFdh0B+hybkd2iA/A5x8svryKesyqqsyqqsyqqsyqqsyqqsyqqsyqqsyqqsyqqsyqqsyqqsyqqsyqqsyqqsyqqs8qwm7jDRuB3xNxcY10zO6v/HKoP4IdrA+Bwu6zP+5mIEVIjrOhzyOyIhvyMC5He4k19eRz5lVVZlVVZlVVZlVVZlVVZlVVZlVVZlVVZlVVZlVdZSYTVxR8rGjX8LjHHN5Kzu9cx6ZCpcGxiflbI+42fWVVAhrmsl5LcqIb9VAfJb6eSX15FPWfs2q4k7SjRu/n/YVHoc46NS4drA+Bwd4BivhgpxXUdDfqsT8lsdIL+jnfzyOvIpq7Iqq7Iqq7Iqq7Iqa99mNXHHiMbNX/NjXDM5q3td849JhWsD47NG1md8zT8WKsR1rYH8jk3I79gA+a1x8svryKesyqqsyqqsyqqsyqqsfZvVxK2VjRv/PxWMayZnda9r/tpUuDYwPutkfcbX/PVQIa5rHeS3PiG/9QHyW+fkl9eRr1RYTdyGAH2xzqMvNqTCtYHx2RigLzZBhbiujZDfpoT8NgXIb6OTX15HvlJhjcDWr2yPjcvLwZaxtv5ga7a2AWBrgb7FtlZrGwS2NmsbDLZx1lYNtnb2B8zj2R/YJvAy2Cba5QqwTbLLQ8A22S4PBdsUuzwcbFPt8giwTbPLlWCbbperwJa1y6PBluP6gq3DOY8aW6dzPjO2Gc4YZ2wznbHG2GY5fc3YZkM5z+dwW4FtLvRZts3j9gPbfG4/sC2wtmFgW8htCrZFCXzcFxuBk/si9l3uixmwcV9sBhv3xRawcV9sBRv3xTawcRuNAxu3UTvYuI3Gg43baALYuI0mgo3baBLYuI0mg22EtU0B20hrmwq2SmubBjb+HzDTwcZ/jz8LttHWlgMbH48dYBtjbZ1gq7G2GWAba20zwVZrbbPAVmdt2DfrrW0O2BqsbS6OYdY2D2xN1jYfbBlrWwC2ZmtbCLYWa1sE49ZA8Nll59n9m3LIxFOh8zbHj8+xsizZNLA0Qpx60TgdcVfjHPazMbnP1UPcOpm4OV4wcWvBfzNwcKxy2KbBHvj8f5FqRdvBXisCTwZ4aoGHt2m2PGbMezbas59wP+jAY4enQn0S+4pQzhgli8d7b1iwPWX7bf66VrgPZON7QWGfxkcNtInbp9JQPhbaq0a4vfB4Y7+8jnzKqqzKqqzKqqzKqqzKqqzKqqzKqqzKqqzKqqzKqqylwhq/33c48Z1XUxHwsQ3ft0g/28Z3hOzbvLt4HN5dNIjGzL9bwvcRGWDgWOWwzavwTuVJu1wB5ZwrfBeJ+ZN935HPH8dhv7zOsSqgLpg/6fcd+J6O/b5z43aslT8GOrLm/b/5poD7k3vccU7x3Svb8D2fyTn3u2Y7x3djzcHapXf5wGOmAWy8nAE+2TbOhXiHljM+aiAPXDeOUw7l34Ax5PloT27c8cKUv5xQzlOh95r43rpVtq7xmNkG/rsgBsYdJxs3h3FTVhyD7eWw/BJ/iAPbmYnbl5lNv2tJ2A6X65190lDeErjOrcDRBescy/STF6BPvQznS+nzDdYX22U0tAuXN0C7SB9vpl3w+i4DDGOBpdnhxOsqHANbAvC93XVVC/CxrQ74uB44njwGrCGvgdzvazCHQueJvb6vwe8vmoGDY+H3LL+E72vc654M7DsGfP41vglyz834TdCbf4Nvgpgn6Zugt2CcyNqPEt/u+rXOsYXmZ791Dj9eF9T9lVjeri1D3YPxmGW+RUUOjlUO2wy0eeM+JXx+z+H3jDwVutZohbZpE2YJcE6Nv3dqB3733J+G8lFQt3bhuuH1C/vldeQbl8CK19Fjne0M63hR1o74mnmCqM/8tcRE68uMR3yMc5xyKK+u2LNdjV2OoM6N4Gd8QjlPhfrxeGi/ybJ1jc8bU8B/F8TAuFNl4+YwLl8zcwy2l8NyO3+oDtuZiduXmc1mkxK2w+Vxzj5pKJ8UuM6TgaML1jmW6Sd10Ke4z4Q4zrG+2C5joF24HK9dm5zt49+n2GU8J0sflymIw355fQLwsa0d2jQL7Sh7nWp/nwRcmbJ9n9XhM0QcE/gZonv8i8HxjyVMAHMRXW4DD7CNYX4QMLhsz49BTAOahz3mJG5+zGF+vGF+rGF+nGF+jFEFjLfYuTkZmQvzaltJc3FgOoy5ODEXDPW2IUzFm2wDmQtUc9IwJ2lzcjadySTMDDommSaJpvOZA8QMAuYAmUaabtqEZHpvB6mTNIM0kzSLNJs0hzSXNI80n7SAtJC0iHSAbdsDSYtJS0gHkQ4mHUI6tCz/A55lpOWkw0iHk44gHUk6inQ0aQXpGNKxpONIx5NOIJ1IWkk6iXQy6RTSqaTTSKeTVpHOIK0mrSGtJa0jrSdtIJ1JOou0kXQ26RzSJtJm0hZSN2kr6VzSeaRtpB7SdtL5pB2kC0g7SReSLiJdTLqEdCnpMtLlpCtIV5KuIl1NuoZ0Lek60vWkG0g3km4i3VyWz/WtpNtIt5PuIN1Juot0N+ke0r2k+0j3kx4gPUjaRXqI9DDpEdKjpN1le37whB2/3h4MfAO8uqdn/eatPZme7szm7Zt6Nm7dtDOzY2PPWZnu89eft2FT9w7c+fX92fkNu3P9vjuvXrfu7fcbYIcVPiqWbVm3/oJM9/aeTPeGzJru7VvWbfs/pNJf9kLCAQA=",
            "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
        },
        {
            "name": "set_constant",
            "functionType": "secret",
            "isInternal": false,
            "parameters": [
                {
                    "name": "value",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                }
            ],
            "returnTypes": [],
            "bytecode": "H4sIAAAAAAAA/+Xd93MUdRjH8b0kd0dUEERNaCH0FuD2SnJnjWAviB07ibkoFoIYFayIvWMvWBAb9l753xyf98zesNyE4Yd7wvCdz848c8ldsrev7+7tbfl+n+dgFEUHokNTJnkcTB4LrU1x1uaRnWC+pUJ/uVwfKNbjUjxUKNaGq5VCuTLcX42rcaVaGSlWS6V6tVwdqA3XBgq1uFyqx6OVWmk0mXHWbxkLk+HO2Txyk+DOHefuvM0jPwnuvLP7SNt7q8vZ7bicmaQte5P5dVn8Z9Et+thnMStZZ7TL9KRdZh0HyzU7Onzy3q7mRH6f0Ub7NZZxTuJg3zI31b6N1xvbHdO81OttTf8/L/V3PRbtSRxpGnT0ZI7S/oXWprgrOjb7n0JrU9wT+e5/GtN8i5nJz50TrFee62gysT1lnX2dyXyZ2lLvEzm/z0Tf3YUWp87UMrdP0JYdE7RlNvVctsnL71NTr0dN7TIt+ducc9tkUsvXmG9H07JNsZiR/Lx1bHzL6M712+tD4/WRDWPj9fSGlWtqkDQgk3o+/T/pRsk3zSfdyPnUY/MOwq010vP0/jTPj8I46un1Wc7RcrF82HK2ObdnxtG8YJLWjbe5zdG8MBBzu6N5USDmDkfz4kDMWUfzkkDMOUfz0kDMeUfzskDMsx3NywMxdzuaVwiaVwqaVwma+wTNqwXNawTNawXNBUFzLGguCppLguayoLkiaO4XNA8ImquC5pqg+QxB85mC5rMEzWcLms8RNJ8raB4UNJ8naF4naF4vaD5f0HyBoPlCQfNFguaLBc2XCJovFTRfJmi+XNB8haB5g6D5SkHzRkHzVYLmqwXN1wiarxU0Xydovl7QfIOgeZOg+UZB802C5psFzbcImm8VNN8maL5d0LxZ0DwkaB4WNN8haB4RNNcFzaOC5jsFzXcJmrcImu8WNN8jaL43EHOPo/k+wfW8VdA8JmjeJmi+X9C8XdD8gKB5XND8oKD5IUHzw4LmHYLmnYLmRwTNjwqaHwvEPNfR/Ljgen5C0PykoHmXoPkpQfNuQfPTguZnBM3PCpqfEzQ/L2h+QdD8oqD5JUHzy4LmVwIx9zqaXxVcz68Jml8XNO8RNL8haH5T0PyWoPltQfM7guZ3Bc3vCZrfFzR/IGj+UNC8V9D8kaD5Y0HzJ4LmTwXN+wTNnwma9wuaPxc0fyFo/lLQ/JWg+WtB8wFB8zeC5m8Fzd8Jmr8PxDzF0fxDIOZOR/OPgZhPcDT/FIj5REfzz4GYT3I0/xKIeaqj+ddAzNMczb8FYj7Z0fx7IObpjuY/AjHPcDT/GYj5FEfzX4GYZzqa/w7EfKqj+Z9AzKc5mv8NxHy6o/mgo7krmU8mMbdbdFhkLXIWeQvOCTlH4pyBY2iOKTnG4piD72C+k9hHs8/iM8w2zTrG3JVq073J4wKLhRaLLBZbLLFYarHMYrnFCouVFqss+ixWW6yxWIvXIrYo0o4WZYuKRb8Fde6rFtRBpy44dbKpG00dZeoKN+rsUod1nQV1OqlbSR1H6hpS54+6d9SBoy4adcKom0UdKeoqUWdoowV1aKjLQp0S6nZQx4K6DtQ52GRBHnzywpMnnbzh5NEmrzR5ljdbkId32II8reQtJY8neS3J80jeQ/IAkhePPHHkTSOPGHm1yDO1zYI8ROTlIU8NeVvIY0JeD/Jc7LAgDwJ5ARgnz7hxxlEzrphxtrssGIe524JxeoxbYxwX45oY58O4F8aBMC6CcQL0m6cfOf2q6We8x4J+qPTLpJ8i/fbox0a/Lvo50e+HfjD0C2F902+A++jcV+Y+6z4L7sPtt+A+DfctuI7PdW2u83Ldk+uAXBfjOhHXTbiOwHk155mcd3EewnE5x6kct3Ecw/c633Ps99kPsl/gc9KY/geXQ+BRNqMAAA==",
            "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
        },
        {
            "name": "test_code_gen",
            "functionType": "secret",
            "isInternal": false,
            "parameters": [
                {
                    "name": "a_field",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                },
                {
                    "name": "a_bool",
                    "type": {
                        "kind": "boolean"
                    },
                    "visibility": "private"
                },
                {
                    "name": "a_number",
                    "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 32
                    },
                    "visibility": "private"
                },
                {
                    "name": "an_array",
                    "type": {
                        "kind": "array",
                        "length": 2,
                        "type": {
                            "kind": "field"
                        }
                    },
                    "visibility": "private"
                },
                {
                    "name": "a_struct",
                    "type": {
                        "kind": "struct",
                        "path": "Test::DummyNote",
                        "fields": [
                            {
                                "name": "amount",
                                "type": {
                                    "kind": "field"
                                }
                            },
                            {
                                "name": "secret_hash",
                                "type": {
                                    "kind": "field"
                                }
                            }
                        ]
                    },
                    "visibility": "private"
                },
                {
                    "name": "a_deep_struct",
                    "type": {
                        "kind": "struct",
                        "path": "Test::DeepStruct",
                        "fields": [
                            {
                                "name": "a_field",
                                "type": {
                                    "kind": "field"
                                }
                            },
                            {
                                "name": "a_bool",
                                "type": {
                                    "kind": "boolean"
                                }
                            },
                            {
                                "name": "a_note",
                                "type": {
                                    "kind": "struct",
                                    "path": "Test::DummyNote",
                                    "fields": [
                                        {
                                            "name": "amount",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "secret_hash",
                                            "type": {
                                                "kind": "field"
                                            }
                                        }
                                    ]
                                }
                            },
                            {
                                "name": "many_notes",
                                "type": {
                                    "kind": "array",
                                    "length": 3,
                                    "type": {
                                        "kind": "struct",
                                        "path": "Test::DummyNote",
                                        "fields": [
                                            {
                                                "name": "amount",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "secret_hash",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            }
                                        ]
                                    }
                                }
                            }
                        ]
                    },
                    "visibility": "private"
                }
            ],
            "returnTypes": [],
            "bytecode": "H4sIAAAAAAAA/+Xd5ZNTVxjH8exCknqpsmgW3QUWyI1sbtCFGnXq3kJKttSpe0upUaeCu7u7+7/F8HxnDgPMwKs9GfbMLzO/Oe/u5HNv5Mo5z3M2kUisSVx81bmxzY3Zjr2ipG0jeYXt5rOthUK1lKtG+WhqNleuxMVsoVhpjaM4KsbFabk4n6/GhbhUrpRL2XJUyFej9mI53+42nPT3HrO1cKdsG6kauFOd3J22baRr4E53cneDbaOhBu4Gj27eW72lh6XRbdP3fsjYNjI12A8Zz8c/cRV/R99ns+fjlb7kWHW3nHOfs3PuODL2dGMvN/Z2Yx839nVjxo2Nbuznxv5uHODGgW4c5MbBbmxyY/M1GlssQ9wxY790c/tlSCd4X0MTl7/q3djmxmzHXlFdwt9ndFiiNt8l3+Z6j+aWQMxdPJqHB2Lu6tE8IhBz0qN5ZCDmlEdzNhBz2qM5CsQ81KM5J2jOB2Ju9mguCJqLguZWQXNJ0BwLmsuC5lGC5tGC5jGC5rGC5nGC5vGC5jZB8wRB80RB8z2C5nsFzfcJmu8XND8gaJ4kaH5Q0PyQoPlhQfMjguZHBc2PCZofFzRPFjQ/IWh+UtD8lKD5aUHzM4LmZwXNzwmanxc0vyBoflHQ/JKg+WVB8yuC5lcFza8JmqcImqcKmiuC5tcFzdMEzVVBc7ug+Q1B83RB85uC5rcEzW8Lmt8RNL8raH5P0Py+oHmGoPkDQfOHguaPBM0fC5o/ETR/Kmj+TND8uaD5C0Hzl4LmrwTNXwuavxE0fyto/k7QPFPQ/L2geZag+QdB84+C5p8EzT8Lmn8RNM8WNP8qaP5N0Py7oPkPQfOfgua/BM1/C5rnCJr/ETT/K2j+T9D8v6B5rqB5nqB5vqB5gaB5oaB5kaB5saB5iaB5qaB5maB5uaB5haB5paB5laB5taB5jaB5raB5naB5vaB5g6B5o6B5k6B5s6B5i6B5q6B5m6B5u6B5h6B5p6B5l6B5t6B5j6B5r6B5XyDm6zya9wdivt6j+UAg5hs8mg8GYr7Ro/lQIOabPJoPB2K+2aP5SCDmWzyajwZivtWj+Vgg5m4ezccDMd/m0XwiEPPtHs0nAzHf4dF8KhDznR7NpwMx3+XRfCYQ890ezWc9mpvcduqcuYulqyVpSVnSFq4JuUbimoFzaM4pOcfinIP/YP6T+I3mN4vvMJ9pjjHm7pYGSw9LT0svS29LH0tfS8bSaOln6W8ZYBloGWQZbGm65JgsduMwS4tluGWEZST7wRJZcuxfS8FStLRaSpbYUraMsoy2jLGMtYyzjHf7c4JlooU+6vQVp882fafpwzzJQp9e+tbSx5W+pvT5pO8lfSAnW+gTSN88+sjRV40+Y/Tdog8VfZnoU0TfHvrY0NeFPif0/aAPxhQLfRIqFuroU1eeOuvUHacO93QLdZqpW0wdX+raUueVuqfUAZ1hoU4kdROpI0hdPerMUXeNOmTU5aJOFXWbqGNEXR/q3FD3hTooMy3UyZhloY4CdQVYZ8+6c9Zhz7awTpd1q6zjZF0j6/xY98Y6sDkW1gmxboZ1JKyrYJ0B8+6Zh868bOYpL3LHkXmdzHNk3h/z4FZYmCe1ysI8GuaVMM+CeQc8h+e5NM9peW7Jczyea/Gch+cePAfgvjj3iblvyn1E7qtxn4n7LtyH4Lqc61Su27iO4bye81zO+zgPOmHhf5L/DX5H+V3he3bhdR6jAswtMJ4AAA==",
            "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
        }
    ],
    "events": [
        {
            "name": "ExampleEvent",
            "path": "Test::ExampleEvent",
            "fields": [
                {
                    "name": "value",
                    "type": {
                        "kind": "field"
                    }
                }
            ]
        }
    ],
    "debug": {
        "debugSymbols": [
            "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jb3pvHYuYRp703ntXMI09qbz2rmEaSzjvE7GeZ2M8zoZ53UyzutknNfJOK+TcV4n47xOxnmdjPM6Ged1Ms7rZJzXyTivk3FeJ+O8TsZ5nYzzOhnndTLO62Sc18k4r5NxXifjvE7GeZ2M8zoZ53UyzutknNfJOK+TcV4n47xOxnmdjPM6Ged1Ms7rZJzXYpzXYpzXYpzXYpzXeiiNXYzzWozzWozzWozzWozzWozzWozzWozzWozzWozzWozzWozzWozzWozzWozzWozzWozzWozzWozzWozzWozzWozzWozzWozzWozzWozzWozzWozzWozzWozzWozzWozzWozzWozzWozzWozzWozzWozzWozzWozzWozzWozzWozzWozzWozzWozzWozzWozzWozzWozzWozzWozzWozzWozzWozzWozzWozzWozzWozzWozzWozzWozzWozzWozzWozzWozzWozzWozzWozzWozzWozzWozzWozzWozzWozzWozzWozzWozzWozzWozzWozzWozzWozzWozzWozzWozzWozzWozzWozzWozzWozzWozzWozzWozzWozzigcDva4pSmWvKUpmrylKZ68pSmivKUpprylKaq8pSmuvKUpsrylObRnydU1xasugr2uKU1uGfV1TnNoy8Oua4tSWoV/XFKe2DP66pji1ZfjXNcWpLQPArilObRkCdk1xassgsGuKU1uGgV1TnNoyEOya4tSWoWDXFKe2DAa7pji1ZTjYNcWpLQPCrilObRkSdk1xasugsGuKU1uGhV1TnNoyMOya4tSWoWHXFKe2DA67pji1ZXjYNcWpLQPErilObRkidk1xassgsWuKU1uGiV1TnNoyUOya4tSWoWLXFKe2DBa7pji1ZbjYNcWpLQPGrilObRkydk1xasugsWuKU1uGjV1TnNoycOya4tSWoWPXFKe2DB67pji1ZfjYNcWpLQPIrilObRlCdk1xassgsmuKU1uGkV1TnNoykOya4tSWoWTXFKa24ViycCxZOJYsHEsWD6a24ViycCxZOJYsHEsWjiULx5KFY8nCsWThWLJwLFk4liwcSxaOJQvHkoVjycKxZOFYsnAsWTiWLBxLFo4lC8eShWPJwrFk4ViycCxZOJYsHEsWjiULx5KFY8nCsWThWLJwLFk4liwcSxaOJQvHkoVjycKxZOFY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",
            "eJyrVsrJT04syczPK1ayqq6tBQAz9wY7",
            "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",
            "",
            "",
            "",
            "eJxtjcsKgCAUBf/lrCW6qZj+SrSQHhCERbqT++8ZBAW1OwMznIx1G3xathDhMiRclxF3Hy6KyR8JThldC0xhLLMlywLzsk5wxOLjkmzV7ZLS5nFrxb2ArIj+Lmxj7sraVyRLxHwCByQwyg==",
            "eJyrVsrJT04syczPK1ayqlYyVrKKrlYqLkjMA/GKSxKLSpSsDHSUUvNSgHStjlJaZk6qkpVhrQ6GKkMTYzMzqEog28ICrtrSBJtyUyNDQ5hyUyMzAsotzc1hig2MTBFqzWtjdZRMhqSrTenoamMTU7irTQxMyXZ1bS0AZdGl9A==",
            "",
            "",
            "eJzVjksKwjAQQO8y6yD5TX5XERdBKxRKKia7kLsbpU0FK1IEwVUm8N7MyzCMR5/6MURwGQS4fYZ48eH+i8lfEzhKoAun+hYC537owLFCXigmhVITWWdjGm3lGo6csRlHrj7gVusZphwXVpcDAfmX1fjDaiGxVUuKX1SrtWpmedtv0Ty1V0NvNtTujWMnhQu1GJw+rmx2SrkBvSbgUA==",
            "eJzVkcsKgzAQRf9l1lLymJkk/krpQloLgmip7iT/XgtG2xqUKhS6SgLnTk5uOijrc9YWddVA2oGG9NhBc8uq56lps3sLqUggry796hO4FmUOqfTJjJKomQey31s70g5jOCkpA06KV3BnTICFook1/pQA/qU1/dBaI43WKGiHNcesJTsMEaNw0R2FHVDkl1f2F/XTzd7p5ML3MNLb9DmrhBpY5dz0zBi6WIndK80UKmFrPivhQ7QUZUNGazvPRJ1WMm5DRootIfllyPsH/FJcOA==",
            "eJyd0rsKwzAMheF30WxKpMRJ7FcpGUybQCA4pfZm9O65QOnSZjibNHzL4S+0rI+Q5zUm8oWqW0f+Xii9Qjz+lMM7k2+tZUNjfJ5np4ameRnJsw5mNz1gHGC4QhAjSBBUI6hBkEVQiyCkB0aCYKQIQYoQpAhBihCkCPlTRO2u0M/J3Ycwy1dIr4PqBtA6IZk=",
            "eJyrVsrJT04syczPK1ayqq6tBQAz9wY7",
            "eJyrVsrJT04syczPK1ayqq6tBQAz9wY7",
            "",
            "eJzVldFqwzAMRf/Fz2FIsiTb+ZXRh7B1UCjpWPJW/O9LIXY8amZKoVufksARHF0u0dkcT2/DfDiNk+nPxpr+9Wymz2G8fE3z8DWbHjqzH9+XZ+zMx+G4Nz3G7opCtqorubx7n+nANVwIMeFC2sCDcwkGko11cdcZfkpreaC1ZcnWDHKHtdaslSilohQa7kFpZQmoYG2o0J7TngG3LZedb/V2T+rt7/UmhKRCJNzwdiE10FvdWKix4lMgWlQKUWvpKebCKhfGUi0s8BaJxwb9a37h/+anmPNTauRHeUdbdg/p1jwQHhtIYMgy4H4kcrHBv7NBurKBF6xeQAkpUcVCh12aql6g5lT1Aiy/9nVKyilLcRfjN/aePbk=",
            "eJyrVsrJT04syczPK1ayqlYyU7KKrlYqLkjMA/GKSxKLSpSsjE0NTXSUUvNSQEwTo1odpbTMnFQlK8NaHQy1hqZGhoZQxUC2mQVctaUJFuWW5uYwxQZGpgi15rWxOkrmg8kxFpQ7xtjEFO4YEwNTsh1TWwsAJ7mA2g=="
        ],
        "fileMap": {
            "1": {
                "source": "// A contract used for testing a random hodgepodge of small features from simulator and end-to-end tests.\ncontract Test {\n    use dep::std::option::Option;\n    use dep::protocol_types::constants::EMPTY_NULLIFIED_COMMITMENT;\n    // docs:start:unencrypted_import\n    use dep::aztec::log::emit_unencrypted_log;\n    // docs:end:unencrypted_import\n\n    use dep::aztec::{\n        context::Context,\n        abi,\n        abi::PrivateContextInputs,\n        hash::pedersen_hash,\n        context::PrivateContext,\n        note::{\n            note_header::NoteHeader,\n            utils as note_utils,\n        },\n        oracle::{\n            get_public_key::get_public_key as get_public_key_oracle,\n            context::get_portal_address,\n            rand::rand\n        },\n        state_vars::immutable_singleton::ImmutableSingleton,\n        log::emit_unencrypted_log_from_private,\n        types::vec::BoundedVec,\n    };\n    use dep::token_portal_content_hash_lib::{get_mint_private_content_hash, get_mint_public_content_hash};\n    use dep::field_note::field_note::{FieldNote, FieldNoteMethods, FIELD_NOTE_LEN};\n\n    #[event]\n    struct ExampleEvent {\n        value: Field,\n    }\n\n    struct Storage {\n        example_constant: ImmutableSingleton<FieldNote, FIELD_NOTE_LEN>,\n    }\n\n    impl Storage {\n        fn init(context: Context) -> pub Self {\n            Storage {\n                example_constant: ImmutableSingleton::new(context, 1, FieldNoteMethods),\n            }\n        }\n    }\n\n    #[aztec(private)]\n    // docs:start:empty-constructor\n    fn constructor() {}\n    // docs:end:empty-constructor\n\n    #[aztec(private)]\n    fn get_public_key(address: Field) -> [Field; 2] {\n        let pub_key = get_public_key_oracle(address);\n\n        [pub_key.x, pub_key.y]\n    }\n\n    // Get the portal contract address through an oracle call\n    #[aztec(private)]\n    fn get_portal_contract_address(aztec_address: Field) -> Field {\n        get_portal_address(aztec_address)\n    }\n\n    // Get the address of the l1 portal for this contract (taken from the input context)\n    #[aztec(private)]\n    fn get_this_portal_address() -> Field {\n        context.this_portal_address()\n    }\n\n    // Get the address of this contract (taken from the input context)\n    #[aztec(private)]\n    fn get_this_address() -> Field {\n        context.this_address()\n    }\n\n    // Test codegen for Aztec.nr interfaces\n    // See yarn-project/acir-simulator/src/client/private_execution.test.ts 'nested calls through autogenerated interface'\n    // Note; this function is deliberately NOT annotated with #[aztec(private)] due to its use in tests\n    fn test_code_gen(\n        inputs: PrivateContextInputs,\n        a_field: Field,\n        a_bool: bool,\n        a_number: u32,\n        an_array: [Field; 2],\n        a_struct: DummyNote,\n        a_deep_struct: DeepStruct\n    ) -> distinct pub abi::PrivateCircuitPublicInputs {\n        let mut args: BoundedVec<Field, 17> = BoundedVec::new(0);\n        args.push(a_field);\n        args.push(a_bool as Field);\n        args.push(a_number as Field);\n        args.push_array(an_array);\n        args.push(a_struct.amount);\n        args.push(a_struct.secret_hash);\n        args.push(a_deep_struct.a_field);\n        args.push(a_deep_struct.a_bool as Field);\n        args.push(a_deep_struct.a_note.amount);\n        args.push(a_deep_struct.a_note.secret_hash);\n        for note in a_deep_struct.many_notes {\n            args.push(note.amount);\n            args.push(note.secret_hash);\n        }\n        let args_hash = abi::hash_args(args.storage);\n        let mut context = PrivateContext::new(inputs, args_hash);\n        context.return_values.push(args_hash);\n        context.finish()\n    }\n\n    // Purely exists for testing\n    #[aztec(public)]\n    fn create_l2_to_l1_message_public(amount: Field, secret_hash: Field) {\n        // Create a commitment to the amount\n        let note = DummyNote::new(amount, secret_hash);\n\n        // Public oracle call to emit new commitment.\n        context.message_portal(note.get_commitment());\n    }\n\n    // Purely exists for testing\n    #[aztec(public)]\n    fn create_nullifier_public(amount: Field, secret_hash: Field) {\n        // Create a commitment to the amount\n        let note = DummyNote::new(amount, secret_hash);\n\n        // Public oracle call to emit new commitment.\n        context.push_new_nullifier(note.get_commitment(), EMPTY_NULLIFIED_COMMITMENT);\n    }\n\n    // Forcefully emits a nullifier (for testing purposes)\n    #[aztec(private)]\n    fn emit_nullifier(nullifier: Field) {\n        context.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT);\n    }\n\n    #[aztec(private)]\n    fn emit_msg_sender() {\n        // Note: don't use emit_unencrypted_log_from_private in production code\n        emit_unencrypted_log_from_private(&mut context, context.msg_sender());\n    }\n\n    // docs:start:is-time-equal\n    #[aztec(public)]\n    fn is_time_equal(time: Field) -> Field {\n        assert(context.timestamp() == time);\n        time\n    }\n    // docs:end:is-time-equal\n\n    #[aztec(public)]\n    fn emit_unencrypted(value: Field) -> Field {\n        // docs:start:emit_unencrypted\n        emit_unencrypted_log(&mut context, value);\n        // docs:end:emit_unencrypted\n        0\n    }\n\n    #[aztec(public)]\n    fn consume_mint_public_message(to: Field, amount: Field, canceller: Field, msg_key: Field, secret: Field) {\n        let content_hash = get_mint_public_content_hash(to, amount, canceller);\n        // Consume message and emit nullifier\n        context.consume_l1_to_l2_message(msg_key, content_hash, secret);\n    }\n\n    #[aztec(private)]\n    fn consume_mint_private_message(\n        secret_hash_for_redeeming_minted_notes: Field,\n        amount: Field,\n        canceller: Field,\n        msg_key: Field,\n        secret_for_L1_to_L2_message_consumption: Field\n    ) {\n        // Consume L1 to L2 message and emit nullifier\n        let content_hash = get_mint_private_content_hash(secret_hash_for_redeeming_minted_notes, amount, canceller);\n        context.consume_l1_to_l2_message(msg_key, content_hash, secret_for_L1_to_L2_message_consumption);\n    }\n\n    #[aztec(private)]\n    fn set_constant(value: Field) {\n        let mut note = FieldNote::new(value);\n        storage.example_constant.initialize(&mut note, Option::none(), false);\n    }\n\n    unconstrained fn get_constant() -> Field {\n        let constant = storage.example_constant.view_note();\n        constant.value\n    }\n\n    // Purely exists for testing\n    unconstrained fn get_random(kindaSeed: Field) -> Field {\n        kindaSeed * rand()\n    }\n\n    struct DummyNote {\n        amount: Field,\n        secret_hash: Field\n    }\n\n    impl DummyNote {\n        fn new(amount: Field, secret_hash: Field) -> pub Self {\n            Self {\n                amount: amount,\n                secret_hash: secret_hash\n            }\n        }\n\n        fn get_commitment(self) -> pub Field {\n            pedersen_hash([self.amount, self.secret_hash],0)\n        }\n    }\n\n    struct DeepStruct {\n        a_field: Field,\n        a_bool: bool,\n        a_note: DummyNote,\n        many_notes: [DummyNote; 3],\n    }\n\n    // Computes note hash and nullifier.\n    // Note 1: Needs to be defined by every contract producing logs.\n    // Note 2: Having it in all the contracts gives us the ability to compute the note hash and nullifier differently for different kind of notes.\n    unconstrained fn compute_note_hash_and_nullifier(contract_address: Field, nonce: Field, storage_slot: Field, serialized_note: [Field; FIELD_NOTE_LEN]) -> [Field; 4] {\n        assert(storage_slot == 1);\n        let note_header = NoteHeader::new(contract_address, nonce, storage_slot);\n        note_utils::compute_note_hash_and_nullifier(FieldNoteMethods, note_header, serialized_note)\n    }\n}\n",
                "path": "/usr/src/yarn-project/noir-contracts/src/contracts/test_contract/src/main.nr"
            },
            "4": {
                "source": "// docs:start:mint_public_content_hash_nr\nuse dep::aztec::hash::{sha256_to_field};\n\n// Computes a content hash of a deposit/mint_public message.\n// Refer TokenPortal.sol for reference on L1.\npub fn get_mint_public_content_hash(owner_address: Field, amount: Field, canceller: Field) -> Field {\n    \n    let mut hash_bytes: [u8; 100] = [0; 100];\n    let recipient_bytes = owner_address.to_be_bytes(32);\n    let amount_bytes = amount.to_be_bytes(32);\n    let canceller_bytes = canceller.to_be_bytes(32);\n\n    for i in 0..32 {\n        hash_bytes[i + 4] = recipient_bytes[i];\n        hash_bytes[i + 36] = amount_bytes[i];\n        hash_bytes[i + 68] = canceller_bytes[i];\n    }\n\n    // Function selector: 0xefc2aae6 keccak256('mint_public(bytes32,uint256,address)')\n    hash_bytes[0] = 0xef;\n    hash_bytes[1] = 0xc2;\n    hash_bytes[2] = 0xaa;\n    hash_bytes[3] = 0xe6;\n\n    let content_hash = sha256_to_field(hash_bytes);\n    content_hash\n}\n// docs:end:mint_public_content_hash_nr\n\n// docs:start:get_mint_private_content_hash\n// Computes a content hash of a deposit/mint_private message.\n// Refer TokenPortal.sol for reference on L1.\npub fn get_mint_private_content_hash(secret_hash_for_redeeming_minted_notes: Field, amount: Field, canceller: Field) -> Field {\n    let mut hash_bytes: [u8; 100] = [0; 100];\n    let secret_hash_bytes = secret_hash_for_redeeming_minted_notes.to_be_bytes(32);\n    let amount_bytes = amount.to_be_bytes(32);\n    let canceller_bytes = canceller.to_be_bytes(32);\n\n    for i in 0..32 {\n        hash_bytes[i + 4] = secret_hash_bytes[i];\n        hash_bytes[i + 36] = amount_bytes[i];\n        hash_bytes[i + 68] = canceller_bytes[i];\n    }\n\n    // Function selector: 0xf512262e keccak256('mint_private(bytes32,uint256,address)')\n    hash_bytes[0] = 0xf5;\n    hash_bytes[1] = 0x12;\n    hash_bytes[2] = 0x26;\n    hash_bytes[3] = 0x2e;\n\n    let content_hash = sha256_to_field(hash_bytes);\n    content_hash\n}\n// docs:end:get_mint_private_content_hash\n\n// docs:start:get_withdraw_content_hash\n// Computes a content hash of a withdraw message.\npub fn get_withdraw_content_hash(recipient: Field, amount: Field, callerOnL1: Field) -> Field {\n    // Compute the content hash\n    // Compute sha256(selector || amount || recipient)\n    // then convert to a single field element\n    // add that to the l2 to l1 messages\n    let mut hash_bytes: [u8; 100] = [0; 100];\n    let recipient_bytes = recipient.to_be_bytes(32);\n    let amount_bytes = amount.to_be_bytes(32);\n    let callerOnL1_bytes = callerOnL1.to_be_bytes(32);\n\n    //  0x69328dec, selector for \"withdraw(address,uint256,address)\"\n    hash_bytes[0] = 0x69;\n    hash_bytes[1] = 0x32;\n    hash_bytes[2] = 0x8d;\n    hash_bytes[3] = 0xec;\n\n    for i in 0..32 {\n        hash_bytes[i + 4] = recipient_bytes[i];\n        hash_bytes[i + 36] = amount_bytes[i];\n        hash_bytes[i + 68] = callerOnL1_bytes[i];\n    }\n    let content_hash = sha256_to_field(hash_bytes);\n    content_hash\n}\n// docs:end:get_withdraw_content_hash\n",
                "path": "/token_portal_content_hash_lib/lib.nr"
            },
            "24": {
                "source": "impl Field {\n    pub fn to_le_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_le_bits(bit_size)\n    }\n    \n    pub fn to_be_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_be_bits(bit_size)\n    }\n\n    #[builtin(to_le_bits)]\n    fn __to_le_bits(_self: Self, _bit_size: u32) -> [u1] {}\n    \n    #[builtin(to_be_bits)]\n    fn __to_be_bits(_self: Self, _bit_size: u32) -> [u1] {}\n\n    pub fn to_le_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_le_radix(256, byte_size)\n    }\n\n    pub fn to_be_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_be_radix(256, byte_size)\n    }\n\n\n    pub fn to_le_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_le_radix(radix, result_len)\n    }\n\n    pub fn to_be_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_be_radix(radix, result_len)\n    }\n\n\n\n    // decompose `_self` into a `_result_len` vector over the `_radix` basis\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix(_self: Self, _radix: u32, _result_len: u32) -> [u8] {}\n    \n    #[builtin(to_be_radix)]\n    fn __to_be_radix(_self: Self, _radix: u32, _result_len: u32) -> [u8] {}\n\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b = exponent.to_le_bits(32);\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32-i] as Field) * (r * self) + (1 - b[32-i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x ∈ {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub fn modulus_num_bits() -> Field {}\n\n#[builtin(modulus_be_bits)]\npub fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub fn modulus_le_bytes() -> [u8] {}\n// Convert a 32 byte array to a field element\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n",
                "path": "std/field.nr"
            },
            "35": {
                "source": "struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::unsafe::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default\n        }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            other\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<U, Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            default()\n        }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some {\n                Option::none()\n            } else {\n                self\n            }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n",
                "path": "std/option.nr"
            },
            "77": {
                "source": "global ARGS_LENGTH: Field = 16;\nglobal RETURN_VALUES_LENGTH: Field = 4;\n\n/**\n * Convention for constant array lengths are mainly divided in 2 classes:\n *  - FUNCTION CALL\n *  - TRANSACTION\n *\n * Agreed convention is to use MAX_XXX_PER_CALL resp. MAX_XXX_PER_TX, where XXX denotes a type of element such as\n * commitment, or nullifier, e.g.,:\n *  - MAX_NEW_NULLIFIERS_PER_CALL\n *  - MAX_NEW_COMMITMENTS_PER_TX\n *\n * In the kernel circuits, we accumulate elements such as commitments and the nullifiers from all functions calls in a\n * transaction. Therefore, we always must have:\n * MAX_XXX_PER_TX ≥ MAX_XXX_PER_CALL\n *\n * For instance:\n * MAX_NEW_COMMITMENTS_PER_TX ≥ MAX_NEW_COMMITMENTS_PER_CALL\n * MAX_NEW_NULLIFIERS_PER_TX ≥ MAX_NEW_NULLIFIERS_PER_CALL\n *\n */\n\n// docs:start:constants\n// \"PER CALL\" CONSTANTS\nglobal MAX_NEW_COMMITMENTS_PER_CALL: Field = 16;\nglobal MAX_NEW_NULLIFIERS_PER_CALL: Field = 16;\nglobal MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL: Field = 4;\nglobal MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL: Field = 4;\nglobal MAX_NEW_L2_TO_L1_MSGS_PER_CALL: Field = 2;\nglobal MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL: Field = 16;\nglobal MAX_PUBLIC_DATA_READS_PER_CALL: Field = 16;\nglobal MAX_READ_REQUESTS_PER_CALL: Field = 32;\nglobal MAX_PENDING_READ_REQUESTS_PER_CALL: Field = 32;\n\n// \"PER TRANSACTION\" CONSTANTS\nglobal MAX_NEW_COMMITMENTS_PER_TX: Field = 64;\nglobal MAX_NEW_NULLIFIERS_PER_TX: Field = 64;\nglobal MAX_PRIVATE_CALL_STACK_LENGTH_PER_TX: Field = 8;\nglobal MAX_PUBLIC_CALL_STACK_LENGTH_PER_TX: Field = 8;\nglobal MAX_NEW_L2_TO_L1_MSGS_PER_TX: Field = 2;\nglobal MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_TX: Field = 16;\nglobal MAX_PUBLIC_DATA_READS_PER_TX: Field = 16;\nglobal MAX_NEW_CONTRACTS_PER_TX: Field = 1;\nglobal MAX_OPTIONALLY_REVEALED_DATA_LENGTH_PER_TX: Field = 4;\nglobal MAX_READ_REQUESTS_PER_TX: Field = 128;\nglobal MAX_PENDING_READ_REQUESTS_PER_TX: Field = 128;\nglobal NUM_ENCRYPTED_LOGS_HASHES_PER_TX: Field = 1;\nglobal NUM_UNENCRYPTED_LOGS_HASHES_PER_TX: Field = 1;\n// docs:end:constants\n\n// ROLLUP CONTRACT CONSTANTS - constants used only in l1-contracts\nglobal NUMBER_OF_L1_L2_MESSAGES_PER_ROLLUP: Field = 16;\n// TODO(961): Use this constant everywhere instead of hard-coded \"2\".\nglobal KERNELS_PER_BASE_ROLLUP: Field = 2;\nglobal MAX_NEW_NULLIFIERS_PER_BASE_ROLLUP: Field = 128;\nglobal MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_BASE_ROLLUP: Field = 32;\nglobal MAX_PUBLIC_DATA_READS_PER_BASE_ROLLUP: Field = 32;\n\n// TREES RELATED CONSTANTS\nglobal VK_TREE_HEIGHT: Field = 3;\nglobal FUNCTION_TREE_HEIGHT: Field = 5;\nglobal CONTRACT_TREE_HEIGHT: Field = 16;\nglobal NOTE_HASH_TREE_HEIGHT: Field = 32;\nglobal PUBLIC_DATA_TREE_HEIGHT: Field = 254;\nglobal NULLIFIER_TREE_HEIGHT: Field = 20;\nglobal L1_TO_L2_MSG_TREE_HEIGHT: Field = 16;\nglobal ROLLUP_VK_TREE_HEIGHT: Field = 8;\n\n// SUB-TREES RELATED CONSTANTS\nglobal CONTRACT_SUBTREE_HEIGHT: Field = 1;\nglobal CONTRACT_SUBTREE_SIBLING_PATH_LENGTH: Field = 15;\nglobal NOTE_HASH_SUBTREE_HEIGHT: Field = 7;\nglobal NOTE_HASH_SUBTREE_SIBLING_PATH_LENGTH: Field = 25;\nglobal NULLIFIER_SUBTREE_HEIGHT: Field = 7;\nglobal ARCHIVE_HEIGHT: Field = 16;\nglobal NULLIFIER_SUBTREE_SIBLING_PATH_LENGTH: Field = 13;\nglobal L1_TO_L2_MSG_SUBTREE_HEIGHT: Field = 4;\nglobal L1_TO_L2_MSG_SUBTREE_SIBLING_PATH_LENGTH: Field = 12;\n\n// MISC CONSTANTS\nglobal FUNCTION_SELECTOR_NUM_BYTES: Field = 4;\nglobal MAPPING_SLOT_PEDERSEN_SEPARATOR: Field = 4;\nglobal NUM_FIELDS_PER_SHA256: Field = 2;\nglobal ARGS_HASH_CHUNK_LENGTH: u32 = 32;\nglobal ARGS_HASH_CHUNK_COUNT: u32 = 16;\n\n\n// NOIR CONSTANTS - constants used only in yarn-packages/noir-contracts\n// Some are defined here because Noir doesn't yet support globals referencing other globals yet.\n// Move these constants to a noir file once the issue bellow is resolved:\n// https://github.com/noir-lang/noir/issues/1734\nglobal L1_TO_L2_MESSAGE_LENGTH: Field = 8;\nglobal L1_TO_L2_MESSAGE_ORACLE_CALL_LENGTH: Field = 26;\nglobal MAX_NOTE_FIELDS_LENGTH: Field = 20;\n// GET_NOTE_ORACLE_RETURN_LENGT = MAX_NOTE_FIELDS_LENGTH + 1 + 2\n// The plus 1 is 1 extra field for nonce.\n// + 2 for EXTRA_DATA: [number_of_return_notes, contract_address]\nglobal GET_NOTE_ORACLE_RETURN_LENGTH: Field = 23;\nglobal MAX_NOTES_PER_PAGE: Field = 10;\n// VIEW_NOTE_ORACLE_RETURN_LENGTH = MAX_NOTES_PER_PAGE * (MAX_NOTE_FIELDS_LENGTH + 1) + 2;\nglobal VIEW_NOTE_ORACLE_RETURN_LENGTH: Field = 212;\nglobal CALL_CONTEXT_LENGTH: Field = 7;\nglobal BLOCK_HEADER_LENGTH: Field = 7;\nglobal FUNCTION_DATA_LENGTH: Field = 4;\nglobal CONTRACT_DEPLOYMENT_DATA_LENGTH: Field = 6;\n// Change this ONLY if you have changed the PrivateCircuitPublicInputs structure.\n// In other words, if the structure/size of the public inputs of a function call changes then we\n// should change this constant as well as the offsets in private_call_stack_item.nr\nglobal PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH: Field = 155;\nglobal CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH: Field = 3;\nglobal CONTRACT_STORAGE_READ_LENGTH: Field = 2;\n// Change this ONLY if you have changed the PublicCircuitPublicInputs structure.\nglobal PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH: Field = 142;\nglobal GET_NOTES_ORACLE_RETURN_LENGTH: Field = 674;\nglobal EMPTY_NULLIFIED_COMMITMENT: Field = 1000000;\nglobal CALL_PRIVATE_FUNCTION_RETURN_SIZE: Field = 161;\nglobal PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH: Field = 87;\nglobal PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH: Field = 144;\nglobal COMMITMENTS_NUM_BYTES_PER_BASE_ROLLUP: Field = 4096;\nglobal NULLIFIERS_NUM_BYTES_PER_BASE_ROLLUP: Field = 4096;\nglobal PUBLIC_DATA_WRITES_NUM_BYTES_PER_BASE_ROLLUP: Field = 2048;\nglobal CONTRACTS_NUM_BYTES_PER_BASE_ROLLUP: Field = 64;\nglobal CONTRACT_DATA_NUM_BYTES_PER_BASE_ROLLUP: Field = 128;\nglobal CONTRACT_DATA_NUM_BYTES_PER_BASE_ROLLUP_UNPADDED: Field = 104;\nglobal L2_TO_L1_MSGS_NUM_BYTES_PER_BASE_ROLLUP: Field = 128;\nglobal LOGS_HASHES_NUM_BYTES_PER_BASE_ROLLUP: Field = 128;\n\n/**\n * Enumerate the hash_indices which are used for pedersen hashing.\n * We start from 1 to avoid the default generators. The generator indices are listed\n * based on the number of elements each index hashes. The following conditions must be met:\n *\n * +-----------+-------------------------------+----------------------+\n * | Hash size | Number of elements hashed (n) | Condition to use     |\n * |-----------+-------------------------------+----------------------|\n * | LOW       | n ≤ 8                         | 0 < hash_index ≤ 32  |\n * | MID       | 8 < n ≤ 16                    | 32 < hash_index ≤ 40 |\n * | HIGH      | 16 < n ≤ 48                   | 40 < hash_index ≤ 48 |\n * +-----------+-------------------------------+----------------------+\n *\n * Note: When modifying, modify `GeneratorIndexPacker` in packer.hpp accordingly.\n */\n// Indices with size ≤ 8\nglobal GENERATOR_INDEX__COMMITMENT = 1;\nglobal GENERATOR_INDEX__COMMITMENT_NONCE = 2;\nglobal GENERATOR_INDEX__UNIQUE_COMMITMENT = 3;\nglobal GENERATOR_INDEX__SILOED_COMMITMENT = 4;\nglobal GENERATOR_INDEX__NULLIFIER = 5;\nglobal GENERATOR_INDEX__INITIALIZATION_NULLIFIER = 6;\nglobal GENERATOR_INDEX__OUTER_NULLIFIER = 7;\nglobal GENERATOR_INDEX__PUBLIC_DATA_READ = 8;\nglobal GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST = 9;\nglobal GENERATOR_INDEX__FUNCTION_DATA = 10;\nglobal GENERATOR_INDEX__FUNCTION_LEAF = 11;\nglobal GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA = 12;\nglobal GENERATOR_INDEX__CONSTRUCTOR = 13;\nglobal GENERATOR_INDEX__CONSTRUCTOR_ARGS = 14;\nglobal GENERATOR_INDEX__CONTRACT_ADDRESS = 15;\nglobal GENERATOR_INDEX__CONTRACT_LEAF = 16;\nglobal GENERATOR_INDEX__CALL_CONTEXT = 17;\nglobal GENERATOR_INDEX__CALL_STACK_ITEM = 18;\nglobal GENERATOR_INDEX__CALL_STACK_ITEM_2 = 19;\nglobal GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET = 20;\nglobal GENERATOR_INDEX__L2_TO_L1_MSG = 21;\nglobal GENERATOR_INDEX__TX_CONTEXT = 22;\nglobal GENERATOR_INDEX__PUBLIC_LEAF_INDEX = 23;\nglobal GENERATOR_INDEX__PUBLIC_DATA_LEAF = 24;\nglobal GENERATOR_INDEX__SIGNED_TX_REQUEST = 25;\nglobal GENERATOR_INDEX__GLOBAL_VARIABLES = 26;\nglobal GENERATOR_INDEX__PARTIAL_ADDRESS = 27;\nglobal GENERATOR_INDEX__BLOCK_HASH = 28;\n// Indices with size ≤ 16\nglobal GENERATOR_INDEX__TX_REQUEST = 33;\nglobal GENERATOR_INDEX__SIGNATURE_PAYLOAD = 34;\n// Indices with size ≤ 44\nglobal GENERATOR_INDEX__VK = 41;\nglobal GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS = 42;\nglobal GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS = 43;\nglobal GENERATOR_INDEX__FUNCTION_ARGS = 44;\n",
                "path": "/protocol_types/constants.nr"
            },
            "94": {
                "source": "use dep::protocol_types::constants::{\n    RETURN_VALUES_LENGTH,\n    MAX_READ_REQUESTS_PER_CALL,\n    MAX_PENDING_READ_REQUESTS_PER_CALL,\n    MAX_NEW_COMMITMENTS_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n    NUM_FIELDS_PER_SHA256,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL,\n    GENERATOR_INDEX__FUNCTION_ARGS,\n    BLOCK_HEADER_LENGTH,\n    CONTRACT_DEPLOYMENT_DATA_LENGTH,\n    CALL_CONTEXT_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n    CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH,\n    CONTRACT_STORAGE_READ_LENGTH,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n    GENERATOR_INDEX__BLOCK_HASH,\n    GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS,\n    GENERATOR_INDEX__FUNCTION_DATA,\n    GENERATOR_INDEX__PUBLIC_DATA_READ,\n    GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST,\n    GENERATOR_INDEX__CALL_CONTEXT,\n    GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS,\n    GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA,\n};\n\nuse crate::oracle::debug_log;\nuse crate::types::vec::BoundedVec;\nuse crate::types::point::Point;\nuse crate::hash::pedersen_hash;\n\n// docs:start:private-global-variables\nstruct PrivateGlobalVariables {\n    chain_id: Field,\n    version: Field,\n}\n// docs:end:private-global-variables\n\nimpl PrivateGlobalVariables {\n    fn serialize(self) -> [Field; 2] {\n        [self.chain_id, self.version]\n    }\n}\n\n// docs:start:public-global-variables\nstruct PublicGlobalVariables {\n    chain_id: Field,\n    version: Field,\n    block_number: Field,\n    timestamp: Field,\n}\n// docs:end:public-global-variables\n\nimpl PublicGlobalVariables {\n    fn serialize(self) -> [Field; 4] {\n        [self.chain_id, self.version, self.block_number, self.timestamp]\n    }\n}\n\n// docs:start:contract-deployment-data\nstruct ContractDeploymentData {\n    deployer_public_key: Point,\n    constructor_vk_hash : Field,\n    function_tree_root : Field,\n    contract_address_salt : Field,\n    portal_contract_address : Field,\n}\n// docs:end:contract-deployment-data\n\nimpl ContractDeploymentData {\n    fn serialize(self) -> [Field; CONTRACT_DEPLOYMENT_DATA_LENGTH] {\n        [\n            self.deployer_public_key.x,\n            self.deployer_public_key.y,\n            self.constructor_vk_hash,\n            self.function_tree_root,\n            self.contract_address_salt,\n            self.portal_contract_address,\n        ]\n    }\n\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA)\n    }\n}\n\n// PrivateContextInputs are expected to be provided to each private function\n// docs:start:private-context-inputs\nstruct PrivateContextInputs {\n    call_context : CallContext,\n    block_header: BlockHeader,\n    contract_deployment_data: ContractDeploymentData,\n    private_global_variables: PrivateGlobalVariables,\n}\n// docs:end:private-context-inputs\n\n// PublicContextInputs are expected to be provided to each public function\n// docs:start:public-context-inputs\nstruct PublicContextInputs {\n    call_context: CallContext,\n    block_header: BlockHeader,\n\n    public_global_variables: PublicGlobalVariables,\n}\n// docs:end:public-context-inputs\n\n// docs:start:call-context\nstruct CallContext {\n    msg_sender : Field,\n    storage_contract_address : Field,\n    portal_contract_address : Field,\n    function_selector: Field,\n\n    is_delegate_call : bool,\n    is_static_call : bool,\n    is_contract_deployment: bool,\n}\n// docs:end:call-context\n\nimpl CallContext {\n    fn serialize(self) -> [Field; CALL_CONTEXT_LENGTH] {\n        [\n            self.msg_sender,\n            self.storage_contract_address,\n            self.portal_contract_address,\n            self.function_selector,\n            self.is_delegate_call as Field,\n            self.is_static_call as Field,\n            self.is_contract_deployment as Field,\n        ]\n    }\n\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CALL_CONTEXT)\n    }\n}\n\n// docs:start:block-header\nstruct BlockHeader {\n    note_hash_tree_root : Field,\n    nullifier_tree_root : Field,\n    contract_tree_root : Field,\n    l1_to_l2_messages_tree_root : Field,\n    archive_root: Field,\n    public_data_tree_root: Field,\n    global_variables_hash: Field,\n}\n// docs:end:block-header\n\nimpl BlockHeader {\n    // NOTE: this order must match the order in `private_circuit_public_inputs.hpp`\n    pub fn serialize(self) -> [Field; BLOCK_HEADER_LENGTH] {\n        [\n            self.note_hash_tree_root,\n            self.nullifier_tree_root,\n            self.contract_tree_root,\n            self.l1_to_l2_messages_tree_root,\n            self.archive_root,\n            self.public_data_tree_root,\n            self.global_variables_hash,\n        ]\n    }\n\n    pub fn deserialize(deserialized: [Field; BLOCK_HEADER_LENGTH]) -> Self {\n        BlockHeader {\n            note_hash_tree_root: deserialized[0],\n            nullifier_tree_root: deserialized[1],\n            contract_tree_root: deserialized[2],\n            l1_to_l2_messages_tree_root: deserialized[3],\n            archive_root: deserialized[4],\n            public_data_tree_root: deserialized[5],\n            global_variables_hash: deserialized[6],\n        }\n    }\n\n    pub fn empty() -> Self {\n        Self { note_hash_tree_root: 0, nullifier_tree_root: 0, contract_tree_root: 0, l1_to_l2_messages_tree_root: 0, archive_root: 0, public_data_tree_root: 0, global_variables_hash: 0 }\n    }\n\n    pub fn block_hash(self) -> Field {\n        // TODO(#3442): Unify the ordering in `BlockHeader::serialize` function and the ordering\n        // in the block hash preimage --> This requires changes in the circuits.\n        let inputs = [\n            self.global_variables_hash,\n            self.note_hash_tree_root,\n            self.nullifier_tree_root,\n            self.contract_tree_root,\n            self.l1_to_l2_messages_tree_root,\n            self.public_data_tree_root\n        ];\n        pedersen_hash(inputs, GENERATOR_INDEX__BLOCK_HASH)\n    }\n}\n\nstruct FunctionData {\n    function_selector: Field,\n    is_internal: bool,\n    is_private: bool,\n    is_constructor: bool,\n}\n\nimpl FunctionData {\n    fn hash(self) -> Field {\n        pedersen_hash([\n            self.function_selector,\n            self.is_internal as Field,\n            self.is_private as Field,\n            self.is_constructor as Field,\n        ], GENERATOR_INDEX__FUNCTION_DATA)\n    }\n}\n\nstruct PrivateCircuitPublicInputs {\n    call_context: CallContext,\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n    read_requests: [Field; crate::abi::MAX_READ_REQUESTS_PER_CALL],\n    pending_read_requests: [Field; crate::abi::MAX_PENDING_READ_REQUESTS_PER_CALL],\n    new_commitments: [Field; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [Field; MAX_NEW_NULLIFIERS_PER_CALL],\n    nullified_commitments: [Field; MAX_NEW_NULLIFIERS_PER_CALL],\n    private_call_stack: [Field; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL],\n    public_call_stack: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_l2_to_l1_msgs: [Field; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    // Explore introducing a new type like uint256 (similar to Point), so it's more explicit that\n    // we're talking about a single number backed by two field elements.\n    encrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    encrypted_log_preimages_length: Field,\n    unencrypted_log_preimages_length: Field,\n    block_header: BlockHeader,\n    contract_deployment_data: ContractDeploymentData,\n    chain_id: Field,\n    version: Field,\n}\n\nimpl PrivateCircuitPublicInputs {\n    fn hash(self) -> Field {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0); \n        fields.push(self.call_context.hash());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.push_array(self.read_requests);\n        fields.push_array(self.pending_read_requests);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.nullified_commitments);\n        fields.push_array(self.private_call_stack);\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_header.serialize());\n        fields.push(self.contract_deployment_data.hash());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n\n        pedersen_hash(fields.storage, GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS)\n    }\n\n    fn serialize(self) -> [Field; PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.push_array(self.read_requests);\n        fields.push_array(self.pending_read_requests);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.private_call_stack);\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_header.serialize());\n        fields.push_array(self.contract_deployment_data.serialize());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n        fields.storage\n    }\n}\n\nstruct ContractStorageRead {\n    storage_slot: Field,\n    value: Field,\n}\n\nimpl ContractStorageRead {\n    pub fn serialize(self) -> [Field; CONTRACT_STORAGE_READ_LENGTH] {\n        [self.storage_slot, self.value]\n    }\n\n    pub fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_READ)\n    }\n\n    pub fn empty() -> Self {\n        Self { storage_slot: 0, value: 0 }\n    }\n}\n\nstruct ContractStorageUpdateRequest {\n    storage_slot: Field,\n    old_value: Field,\n    new_value: Field,\n}\n\nimpl ContractStorageUpdateRequest {\n    pub fn serialize(self) -> [Field; CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH] {\n        [self.storage_slot, self.old_value, self.new_value]\n    }\n\n    pub fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST)\n    }\n\n    pub fn empty() -> Self {\n        Self { storage_slot: 0, old_value: 0, new_value: 0 }\n    }\n}\n\nstruct PublicCircuitPublicInputs {\n    call_context: CallContext,\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n    contract_storage_update_requests: [ContractStorageUpdateRequest; MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n    contract_storage_read: [ContractStorageRead; MAX_PUBLIC_DATA_READS_PER_CALL],\n    public_call_stack: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_commitments: [Field; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [Field; crate::abi::MAX_NEW_NULLIFIERS_PER_CALL],\n    new_l2_to_l1_msgs: [Field; crate::abi::MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_log_preimages_length: Field,\n    block_header: BlockHeader,\n    prover_address: Field,\n}\n\nimpl PublicCircuitPublicInputs {\n    \n    pub fn hash(self) -> Field {\n        let mut inputs: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0);\n        inputs.push(self.call_context.hash());\n        inputs.push(self.args_hash);\n        inputs.push_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            inputs.push(self.contract_storage_update_requests[i].hash());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            inputs.push(self.contract_storage_read[i].hash());\n        }\n        inputs.push_array(self.public_call_stack);\n        inputs.push_array(self.new_commitments);\n        inputs.push_array(self.new_nullifiers);\n        inputs.push_array(self.new_l2_to_l1_msgs);\n\n        inputs.push_array(self.unencrypted_logs_hash);\n        inputs.push(self.unencrypted_log_preimages_length);\n        inputs.push_array(self.block_header.serialize());\n        inputs.push(self.prover_address);\n\n        pedersen_hash(inputs.storage, GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS)\n    }\n\n    pub fn serialize(self) -> [Field; PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());   \n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            fields.push_array(self.contract_storage_update_requests[i].serialize());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            fields.push_array(self.contract_storage_read[i].serialize());\n        }\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_header.serialize());\n        fields.push(self.prover_address);\n        fields.storage\n    }\n}\n\nstruct Hasher {\n    fields: [Field],\n}\n\nimpl Hasher {\n    pub fn new()-> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<N>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n\n    pub fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nglobal ARGS_HASH_CHUNK_LENGTH: u32 = 32;\nglobal ARGS_HASH_CHUNK_COUNT: u32 = 16;\n\npub fn hash_args<N>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        let mut chunks_hashes = [0; ARGS_HASH_CHUNK_COUNT];\n        for i in 0..ARGS_HASH_CHUNK_COUNT {\n            let mut chunk_hash = 0;\n            let start_chunk_index = i * ARGS_HASH_CHUNK_LENGTH;\n            if start_chunk_index < (args.len() as u32) {\n                let mut chunk_args = [0; ARGS_HASH_CHUNK_LENGTH];\n                for j in 0..ARGS_HASH_CHUNK_LENGTH {\n                    let item_index = i * ARGS_HASH_CHUNK_LENGTH + j;\n                    if item_index < (args.len() as u32) {\n                        chunk_args[j] = args[item_index];\n                    }\n                }\n                chunk_hash = pedersen_hash(chunk_args, GENERATOR_INDEX__FUNCTION_ARGS);\n            }\n            chunks_hashes[i] = chunk_hash;\n        }\n        pedersen_hash(chunks_hashes, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n",
                "path": "/aztec/abi.nr"
            },
            "95": {
                "source": "use dep::protocol_types::constants::GENERATOR_INDEX__CONTRACT_ADDRESS;\nuse crate::hash::pedersen_hash;\n\npub fn compute_address(pub_key_x: Field, pub_key_y: Field, partial_address: Field) -> Field {\n    pedersen_hash([pub_key_x, pub_key_y, partial_address],\n        GENERATOR_INDEX__CONTRACT_ADDRESS)\n}\n",
                "path": "/aztec/address.nr"
            },
            "96": {
                "source": "use dep::protocol_types::constants::{\n    EMPTY_NULLIFIED_COMMITMENT,\n    MAX_NEW_COMMITMENTS_PER_CALL,\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_READ_REQUESTS_PER_CALL,\n    MAX_PENDING_READ_REQUESTS_PER_CALL,\n    NUM_FIELDS_PER_SHA256,\n    RETURN_VALUES_LENGTH,\n};\n\nuse crate::abi;\n\nuse crate::abi::{\n    hash_args,\n    CallContext,\n    ContractDeploymentData,\n    BlockHeader,\n    FunctionData,\n    PrivateCircuitPublicInputs,\n    PublicCircuitPublicInputs,\n};\n\n// TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n// use dep::std::collections::vec::Vec;\n\n// l1 to l2 messaging\nuse crate::messaging::process_l1_to_l2_message;\nuse crate::private_call_stack_item::PrivateCallStackItem;\nuse crate::public_call_stack_item::PublicCallStackItem;\n\nuse crate::types::{\n    vec::BoundedVec,\n    point::Point,\n};\n\nuse crate::utils::arr_copy_slice;\n\nuse crate::oracle::{\n    arguments,\n    call_private_function::call_private_function_internal,\n    public_call::call_public_function_internal,\n    enqueue_public_function_call::enqueue_public_function_call_internal,\n    context::get_portal_address,\n    get_block_header::get_block_header,\n};\n\nuse dep::std::option::Option;\n\n// When finished, one can call .finish() to convert back to the abi\nstruct PrivateContext {\n    // docs:start:private-context\n    inputs: abi::PrivateContextInputs,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    read_requests: BoundedVec<Field, MAX_READ_REQUESTS_PER_CALL>,\n    pending_read_requests: BoundedVec<Field, MAX_PENDING_READ_REQUESTS_PER_CALL>,\n\n    new_commitments: BoundedVec<Field, MAX_NEW_COMMITMENTS_PER_CALL>,\n    new_nullifiers: BoundedVec<Field, MAX_NEW_NULLIFIERS_PER_CALL>,\n    nullified_commitments: BoundedVec<Field, MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    private_call_stack : BoundedVec<Field, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_stack : BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    new_l2_to_l1_msgs : BoundedVec<Field, MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    block_header: BlockHeader,\n\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    // encrypted_logs_preimages: Vec<Field>,\n    // unencrypted_logs_preimages: Vec<Field>,\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: abi::PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs: inputs,\n\n            args_hash: args_hash,\n            return_values: BoundedVec::new(0),\n\n            read_requests: BoundedVec::new(0),\n            pending_read_requests: BoundedVec::new(0),\n\n            new_commitments: BoundedVec::new(0),\n            new_nullifiers: BoundedVec::new(0),\n            nullified_commitments: BoundedVec::new(0),\n\n            block_header: inputs.block_header,\n\n            private_call_stack: BoundedVec::new(0),\n            public_call_stack: BoundedVec::new(0),\n            new_l2_to_l1_msgs: BoundedVec::new(0),\n\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    pub fn msg_sender(self) -> Field {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> Field {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    pub fn this_portal_address(self) -> Field {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.private_global_variables.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.private_global_variables.version\n    }\n\n    pub fn selector(self) -> Field {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn get_block_header(self, block_number: u32) -> BlockHeader {\n        get_block_header(block_number, self)\n    }\n\n    pub fn finish(self) -> abi::PrivateCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let encrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let encrypted_log_preimages_length = 0;\n        let unencrypted_log_preimages_length = 0;\n\n        let priv_circuit_pub_inputs = abi::PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            return_values: self.return_values.storage,\n            read_requests: self.read_requests.storage,\n            pending_read_requests: self.pending_read_requests.storage,\n            new_commitments: self.new_commitments.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            nullified_commitments: self.nullified_commitments.storage,\n            private_call_stack: self.private_call_stack.storage,\n            public_call_stack: self.public_call_stack.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            encrypted_logs_hash: encrypted_logs_hash,\n            unencrypted_logs_hash: unencrypted_logs_hash,\n            encrypted_log_preimages_length: encrypted_log_preimages_length,\n            unencrypted_log_preimages_length: unencrypted_log_preimages_length,\n            block_header: self.block_header,\n            contract_deployment_data: self.inputs.contract_deployment_data,\n            chain_id: self.inputs.private_global_variables.chain_id,\n            version: self.inputs.private_global_variables.version,\n        };\n        priv_circuit_pub_inputs\n    }\n\n    pub fn push_read_request(&mut self, read_request: Field) {\n        self.read_requests.push(read_request);\n    }\n\n    pub fn push_pending_read_request(&mut self, pending_read_request: Field) {\n        self.pending_read_requests.push(pending_read_request);\n    }\n\n    pub fn push_new_note_hash(&mut self, note_hash: Field) {\n        self.new_commitments.push(note_hash);\n    }\n\n    // We never push a zero nullified_commitment as zero is used to indicate the end\n    // of a field array in private kernel. This routine transparently replaces a\n    // zero value into the special placeholder: EMPTY_NULLIFIED_COMMITMENT.\n    pub fn push_new_nullifier(&mut self, nullifier: Field, nullified_commitment: Field) {\n        self.new_nullifiers.push(nullifier);\n        let mut non_zero_nullified = nullified_commitment;\n        if (non_zero_nullified == 0) {\n            non_zero_nullified = EMPTY_NULLIFIED_COMMITMENT;\n        }\n        self.nullified_commitments.push(non_zero_nullified);\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, content: Field) \n    // docs:end:context_message_portal\n    {\n        self.new_l2_to_l1_msgs.push(content);\n    }\n\n    // PrivateContextInputs must be temporarily passed in to prevent too many unknowns\n    // Note this returns self to get around an issue where mutable structs do not maintain mutations unless reassigned\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        msg_key: Field,\n        content: Field,\n        secret: Field\n    ) \n    // docs:end:context_consume_l1_to_l2_message\n    {\n        let nullifier = process_l1_to_l2_message(self.block_header.l1_to_l2_messages_tree_root, self.this_address(), self.this_portal_address(), self.chain_id(), self.version(), msg_key, content, secret);\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash)\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0)\n    }\n\n    pub fn call_private_function_with_packed_args(\n        &mut self,\n        contract_address: Field,\n        function_selector: Field,\n        args_hash: Field\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let fields = call_private_function_internal(\n            contract_address, \n            function_selector, \n            args_hash\n        );\n        let item = PrivateCallStackItem {\n            contract_address: fields[0],\n            function_data: FunctionData {\n                function_selector: fields[1],\n                is_internal: fields[2] as bool,\n                is_private: fields[3] as bool,\n                is_constructor: fields[4] as bool,\n            },\n            public_inputs: PrivateCircuitPublicInputs {\n                call_context: CallContext {\n                    msg_sender : fields[5],\n                    storage_contract_address : fields[6],\n                    portal_contract_address : fields[7],\n                    function_selector: fields[8], // practically same as fields[1]\n                    is_delegate_call : fields[9] as bool,\n                    is_static_call : fields[10] as bool,\n                    is_contract_deployment: fields[11] as bool,\n                },\n                // TODO handle the offsets as a variable incremented during extraction?\n                args_hash: fields[12],\n                return_values: arr_copy_slice(fields, [0; RETURN_VALUES_LENGTH], 13),\n                read_requests: arr_copy_slice(fields, [0; MAX_READ_REQUESTS_PER_CALL], 17),\n                pending_read_requests: arr_copy_slice(fields, [0; MAX_READ_REQUESTS_PER_CALL], 49),\n                new_commitments: arr_copy_slice(fields, [0; MAX_NEW_COMMITMENTS_PER_CALL], 81),\n                new_nullifiers: arr_copy_slice(fields, [0; MAX_NEW_NULLIFIERS_PER_CALL], 97),\n                nullified_commitments: arr_copy_slice(fields, [0; MAX_NEW_NULLIFIERS_PER_CALL], 113),\n                private_call_stack: arr_copy_slice(fields, [0; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL], 129),\n                public_call_stack: arr_copy_slice(fields, [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL], 133),\n                new_l2_to_l1_msgs: arr_copy_slice(fields, [0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL], 137),\n                encrypted_logs_hash: arr_copy_slice(fields, [0; NUM_FIELDS_PER_SHA256], 139),\n                unencrypted_logs_hash: arr_copy_slice(fields, [0; NUM_FIELDS_PER_SHA256], 141),\n                encrypted_log_preimages_length: fields[143],\n                unencrypted_log_preimages_length: fields[144],\n                block_header: BlockHeader {\n                    // Must match order in `private_circuit_public_inputs.hpp`\n                    note_hash_tree_root : fields[145],\n                    nullifier_tree_root : fields[146],\n                    contract_tree_root : fields[147],\n                    l1_to_l2_messages_tree_root : fields[148],\n                    archive_root : fields[149],\n                    public_data_tree_root: fields[150],\n                    global_variables_hash: fields[151],\n                },\n                contract_deployment_data: ContractDeploymentData {\n                    deployer_public_key: Point::new(fields[152], fields[153]),\n                    constructor_vk_hash : fields[154],\n                    function_tree_root : fields[155],\n                    contract_address_salt : fields[156],\n                    portal_contract_address : fields[157],\n                },\n                chain_id: fields[158],\n                version: fields[159],\n            },\n            is_execution_request: fields[160] as bool,\n        };\n        assert(contract_address == item.contract_address);\n        assert(function_selector == item.function_data.function_selector);\n\n        assert(args_hash == item.public_inputs.args_hash);\n\n        assert(item.is_execution_request == false);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        // We are issuing a regular call which is not delegate, static, or deployment. We also constrain\n        // the msg_sender in the nested call to be equal to our address, and the execution context address\n        // for the nested call to be equal to the address we actually called.\n        assert(item.public_inputs.call_context.is_delegate_call == false);\n        assert(item.public_inputs.call_context.is_static_call == false);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n        assert(item.public_inputs.call_context.msg_sender == self.inputs.call_context.storage_contract_address);\n        assert(item.public_inputs.call_context.storage_contract_address == contract_address);\n\n        self.private_call_stack.push(item.hash());\n\n        item.public_inputs.return_values\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field,\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: Field,\n        function_selector: Field,\n        args_hash: Field\n    ) {\n        let fields = enqueue_public_function_call_internal(\n            contract_address, \n            function_selector, \n            args_hash\n        );\n        let item = PublicCallStackItem {\n            contract_address: fields[0],\n            function_data: FunctionData {\n                function_selector: fields[1],\n                is_internal: fields[2] as bool,\n                is_private: fields[3] as bool,\n                is_constructor: fields[4] as bool,\n            },\n            public_inputs: PublicCircuitPublicInputs {\n                call_context: CallContext {\n                    msg_sender : fields[5],\n                    storage_contract_address : fields[6],\n                    portal_contract_address : fields[7],\n                    function_selector: fields[8], // practically same as fields[1]\n                    is_delegate_call : fields[9] as bool,\n                    is_static_call : fields[10] as bool,\n                    is_contract_deployment: fields[11] as bool,\n                },\n                args_hash: fields[12],\n                return_values: [0; RETURN_VALUES_LENGTH],\n                contract_storage_update_requests: [ContractStorageUpdateRequest::empty(); MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n                contract_storage_read: [ContractStorageRead::empty(); MAX_PUBLIC_DATA_READS_PER_CALL],\n                public_call_stack: [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n                new_commitments: [0; MAX_NEW_COMMITMENTS_PER_CALL],\n                new_nullifiers: [0; MAX_NEW_NULLIFIERS_PER_CALL],\n                new_l2_to_l1_msgs:[0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n                unencrypted_logs_hash:[0; NUM_FIELDS_PER_SHA256],\n                unencrypted_log_preimages_length: 0,\n                block_header: BlockHeader::empty(),\n                prover_address: 0,\n            },\n            is_execution_request: true,\n        };\n\n        assert(contract_address == item.contract_address);\n        assert(function_selector == item.function_data.function_selector);\n        \n        assert(args_hash == item.public_inputs.args_hash);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        // We are issuing a regular call which is not delegate, static, or deployment. We also constrain\n        // the msg_sender in the nested call to be equal to our address, and the execution context address\n        // for the nested call to be equal to the address we actually called.\n        assert(item.public_inputs.call_context.is_delegate_call == false);\n        assert(item.public_inputs.call_context.is_static_call == false);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n        assert(item.public_inputs.call_context.msg_sender == self.inputs.call_context.storage_contract_address);\n        assert(item.public_inputs.call_context.storage_contract_address == contract_address);\n\n        self.public_call_stack.push(item.hash());\n    }\n}\n\nuse crate::abi::{\n    ContractStorageRead,\n    ContractStorageUpdateRequest\n};\n\nstruct PublicContext {\n    inputs: abi::PublicContextInputs,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    contract_storage_update_requests: BoundedVec<ContractStorageUpdateRequest, MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL>,\n    contract_storage_read: BoundedVec<ContractStorageRead, MAX_PUBLIC_DATA_READS_PER_CALL>,\n    public_call_stack: BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n\n    new_commitments: BoundedVec<Field, MAX_NEW_COMMITMENTS_PER_CALL>,\n    new_nullifiers: BoundedVec<Field, crate::abi::MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    new_l2_to_l1_msgs: BoundedVec<Field, crate::abi::MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n\n    unencrypted_logs_hash: BoundedVec<Field, NUM_FIELDS_PER_SHA256>,\n    unencrypted_logs_preimages_length: Field,\n\n    block_header: BlockHeader,\n    prover_address: Field,\n}\n\nimpl PublicContext {\n    pub fn new(inputs: abi::PublicContextInputs, args_hash: Field) -> PublicContext {\n        let empty_storage_read = ContractStorageRead::empty();\n        let empty_storage_update = ContractStorageUpdateRequest::empty();\n        PublicContext {\n            inputs: inputs,\n\n            args_hash: args_hash,\n            return_values: BoundedVec::new(0),\n\n            contract_storage_update_requests: BoundedVec::new(empty_storage_update),\n            contract_storage_read: BoundedVec::new(empty_storage_read),\n            public_call_stack: BoundedVec::new(0),\n\n            new_commitments: BoundedVec::new(0),\n            new_nullifiers: BoundedVec::new(0),\n\n            new_l2_to_l1_msgs: BoundedVec::new(0),\n\n            \n            unencrypted_logs_hash: BoundedVec::new(0),\n            unencrypted_logs_preimages_length: 0,\n\n            block_header: inputs.block_header,\n            prover_address: 0,\n\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    pub fn msg_sender(self) -> Field {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> Field {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    pub fn this_portal_address(self) -> Field {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.public_global_variables.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.public_global_variables.version\n    }\n\n    pub fn selector(self) -> Field {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn block_number(self) -> Field {\n        self.inputs.public_global_variables.block_number\n    }\n\n    pub fn timestamp(self) -> Field {\n        self.inputs.public_global_variables.timestamp\n    }\n\n    pub fn finish(self) -> abi::PublicCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_log_preimages_length = 0;\n\n\n        // Compute the public call stack hashes\n        let pub_circuit_pub_inputs = abi::PublicCircuitPublicInputs {\n            call_context: self.inputs.call_context, // Done\n            args_hash: self.args_hash, // Done\n            contract_storage_update_requests: self.contract_storage_update_requests.storage,\n            contract_storage_read: self.contract_storage_read.storage,\n            return_values: self.return_values.storage,\n            new_commitments: self.new_commitments.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            public_call_stack: self.public_call_stack.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            unencrypted_logs_hash: unencrypted_logs_hash,\n            unencrypted_log_preimages_length: unencrypted_log_preimages_length,\n            block_header: self.inputs.block_header,\n            prover_address: self.prover_address,\n        };\n        pub_circuit_pub_inputs\n    }\n\n    pub fn push_new_note_hash(&mut self, note_hash: Field) {\n        self.new_commitments.push(note_hash);\n    }\n\n    pub fn push_new_nullifier(&mut self, nullifier: Field, _nullified_commitment: Field) {\n        self.new_nullifiers.push(nullifier);\n    }\n\n    pub fn message_portal(&mut self, content: Field) {\n        self.new_l2_to_l1_msgs.push(content);\n    }\n\n    // PrivateContextInputs must be temporarily passed in to prevent too many unknowns\n    // Note this returns self to get around an issue where mutable structs do not maintain mutations unless reassigned\n    pub fn consume_l1_to_l2_message(&mut self, msg_key: Field, content: Field, secret: Field) {\n        let this = (*self).this_address();\n        let nullifier = process_l1_to_l2_message(self.block_header.l1_to_l2_messages_tree_root, this, self.this_portal_address(), self.chain_id(), self.version(), msg_key, content, secret);\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT)\n    }\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        _self: Self,\n        contract_address: Field, \n        function_selector: Field,\n        args: [Field; ARGS_COUNT],\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = abi::hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        call_public_function_internal(\n            contract_address, \n            function_selector, \n            args_hash,\n        )\n    }\n\n    pub fn call_public_function_no_args(\n        _self: Self,\n        contract_address: Field, \n        function_selector: Field,\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        call_public_function_internal(\n            contract_address, \n            function_selector, \n            0,\n        )\n    }\n\n}\n\nstruct Context {\n    private: Option<&mut PrivateContext>,\n    public: Option<&mut PublicContext>,\n}\n\nimpl Context {\n    pub fn private(context: &mut PrivateContext) -> Context {\n        Context {\n            private: Option::some(context),\n            public: Option::none()\n        }\n    }\n\n    pub fn public(context: &mut PublicContext) -> Context {\n        Context {\n            public: Option::some(context),\n            private: Option::none()\n        }\n    }\n\n    pub fn none() -> Context {\n        Context {\n            public: Option::none(),\n            private: Option::none()\n        }\n    }\n}\n",
                "path": "/aztec/context.nr"
            },
            "97": {
                "source": "use dep::std::hash::{pedersen_hash_with_separator, sha256};\nuse dep::protocol_types::constants::{\n  GENERATOR_INDEX__SIGNATURE_PAYLOAD,\n  GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET,\n};\n\npub fn sha256_to_field<N>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = sha256(bytes_to_hash);\n\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (sha256_hashed[15 - i] as Field) * v;\n        low = low + (sha256_hashed[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    let hash_in_a_field = low + high * v;\n\n    hash_in_a_field\n}\n\npub fn compute_secret_hash(secret: Field) -> Field {\n    // TODO(#1205) This is probably not the right index to use\n    pedersen_hash([secret], GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET)\n}\n\npub fn pedersen_hash<N>(inputs: [Field; N], hash_index: u32) -> Field {\n    pedersen_hash_with_separator(inputs, hash_index)\n}\n",
                "path": "/aztec/hash.nr"
            },
            "104": {
                "source": "use crate::context::{PrivateContext, PublicContext};\nuse crate::oracle;\nuse crate::types::point::Point;\n\npub fn emit_encrypted_log<N>(\n    context: &mut PrivateContext,\n    contract_address: Field,\n    storage_slot: Field,\n    encryption_pub_key: Point,\n    log: [Field; N]\n) {\n    let _ = oracle::logs::emit_encrypted_log(contract_address, storage_slot, encryption_pub_key, log);\n    context.accumulate_encrypted_logs(log);\n}\n\npub fn emit_unencrypted_log<T>(context: &mut PublicContext, log: T) {\n    let contract_address = context.this_address();\n    let event_selector = 5; // TODO: compute actual event selector.\n    let _ = oracle::logs::emit_unencrypted_log(contract_address, event_selector, log);\n    // context.accumulate_unencrypted_logs(log);\n}\n\n// TODO: We might want to remove this since emitting unencrypted logs from private functions is violating privacy.\n// --> might be a better approach to force devs to make a public function call that emits the log if needed then\n// it would be less easy to accidentally leak information.\n// If we decide to keep this function around would make sense to wait for traits and then merge it with emit_unencrypted_log.\npub fn emit_unencrypted_log_from_private<T>(context: &mut PrivateContext, log: T) {\n    let contract_address = context.this_address();\n    let event_selector = 5; // TODO: compute actual event selector.\n    let _ = oracle::logs::emit_unencrypted_log(contract_address, event_selector, log);\n    // context.accumulate_unencrypted_logs(log);\n}\n",
                "path": "/aztec/log.nr"
            },
            "105": {
                "source": "mod l1_to_l2_message;\nmod l1_to_l2_message_getter_data;\n\nuse l1_to_l2_message_getter_data::make_l1_to_l2_message_getter_data;\n\nuse crate::abi::PublicContextInputs;\nuse crate::oracle::get_l1_to_l2_message::get_l1_to_l2_message_call;\n\n// Returns the nullifier for the message\npub fn process_l1_to_l2_message(\n    l1_to_l2_root: Field,\n    storage_contract_address: Field,\n    portal_contract_address: Field,\n    chain_id: Field,\n    version: Field,\n    msg_key: Field,\n    content: Field,\n    secret: Field\n) -> Field {\n    let returned_message = get_l1_to_l2_message_call(msg_key);\n    let l1_to_l2_message_data = make_l1_to_l2_message_getter_data(returned_message, 0, secret);\n\n    // Check tree roots against the inputs \n    assert(l1_to_l2_message_data.root == l1_to_l2_root);\n\n    // Validate this is the target contract\n    assert(l1_to_l2_message_data.message.recipient == storage_contract_address);\n\n    // Validate the sender is the portal contract\n    assert(l1_to_l2_message_data.message.sender == portal_contract_address);\n\n    // Validate the chain id is correct\n    assert(l1_to_l2_message_data.message.chainId == chain_id);\n\n    // Validate the version is correct\n    assert(l1_to_l2_message_data.message.version == version);\n\n    // Validate the message hash is correct\n    assert(l1_to_l2_message_data.message.content == content);\n\n    // Validate the message secret is correct\n    l1_to_l2_message_data.message.validate_message_secret();\n\n    // Compute Nullifier\n    l1_to_l2_message_data.message.compute_nullifier()\n}\n",
                "path": "/aztec/messaging.nr"
            },
            "106": {
                "source": "use dep::protocol_types::constants::{\n    L1_TO_L2_MESSAGE_LENGTH,\n    GENERATOR_INDEX__NULLIFIER,\n    GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET,\n};\nuse crate::hash::{sha256_to_field, pedersen_hash};\n\nstruct L1ToL2Message {\n    sender: Field,\n    chainId: Field,\n    recipient: Field,\n    version: Field,\n    content: Field,\n    secret: Field,\n    secret_hash: Field,\n    deadline: u32,\n    fee: u64,\n    tree_index: Field\n}\n\nimpl L1ToL2Message {\n    pub fn deserialize(\n        fields: [Field; L1_TO_L2_MESSAGE_LENGTH],\n        secret: Field,\n        tree_index: Field\n    ) -> L1ToL2Message {\n        L1ToL2Message {\n            sender: fields[0],\n            chainId: fields[1],\n            recipient: fields[2],\n            version: fields[3],\n            content: fields[4],\n            secret: secret,\n            secret_hash: fields[5],\n            deadline: fields[6] as u32,\n            fee: fields[7] as u64,\n            tree_index: tree_index\n        }\n    }\n\n    pub fn validate_message_secret(self: Self) {\n        let recomputed_hash = pedersen_hash([self.secret], GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET);\n        assert(self.secret_hash == recomputed_hash);\n    }\n\n    fn message_hash(self: Self) -> Field {\n        let mut hash_bytes: [u8; 256] = [0; 256];\n        let sender_bytes = self.sender.to_be_bytes(32);\n        let chainId_bytes = self.chainId.to_be_bytes(32);\n        let recipient_bytes = self.recipient.to_be_bytes(32);\n        let version_bytes = self.version.to_be_bytes(32);\n        let content_bytes = self.content.to_be_bytes(32);\n        let secret_hash_bytes = self.secret_hash.to_be_bytes(32);\n        let deadline_bytes = (self.deadline as Field).to_be_bytes(32);\n        let fee_bytes = (self.fee as Field).to_be_bytes(32);\n\n        for i in 0..32 {\n            hash_bytes[i] = sender_bytes[i];\n            hash_bytes[i + 32] = chainId_bytes[i];\n            hash_bytes[i + 64] = recipient_bytes[i];\n            hash_bytes[i + 96] = version_bytes[i];\n            hash_bytes[i + 128] = content_bytes[i];\n            hash_bytes[i + 160] = secret_hash_bytes[i];\n            hash_bytes[i + 192] = deadline_bytes[i];\n            hash_bytes[i + 224] = fee_bytes[i];\n        }\n\n        let message_hash = sha256_to_field(hash_bytes);\n        message_hash        \n    }\n\n    // The nullifier of a l1 to l2 message is the hash of the message salted with the secret and tree index\n    // docs:start:l1_to_l2_message_compute_nullifier\n    pub fn compute_nullifier(self: Self) -> Field {\n        let message_hash = self.message_hash();\n        pedersen_hash([message_hash, self.secret, self.tree_index], GENERATOR_INDEX__NULLIFIER)\n    }\n    // docs:end:l1_to_l2_message_compute_nullifier\n}\n",
                "path": "/aztec/messaging/l1_to_l2_message.nr"
            },
            "107": {
                "source": "use crate::messaging::l1_to_l2_message::L1ToL2Message;\nuse dep::protocol_types::constants::{\n    L1_TO_L2_MSG_TREE_HEIGHT,\n    L1_TO_L2_MESSAGE_LENGTH,\n};\nuse crate::utils::arr_copy_slice;\n\nstruct L1ToL2MessageGetterData {\n    message: L1ToL2Message,\n    sibling_path: [Field; L1_TO_L2_MSG_TREE_HEIGHT],\n    leaf_index: Field,\n    root: Field,\n}\n\npub fn l1_to_l2_message_getter_len() -> Field {\n    L1_TO_L2_MESSAGE_LENGTH + 1 + L1_TO_L2_MSG_TREE_HEIGHT + 1\n}\n\npub fn make_l1_to_l2_message_getter_data<N>(fields: [Field; N], start: Field, secret: Field) -> L1ToL2MessageGetterData {\n    L1ToL2MessageGetterData {\n        message: L1ToL2Message::deserialize(arr_copy_slice(fields, [0; L1_TO_L2_MESSAGE_LENGTH], start),\n            secret,\n            fields[start + L1_TO_L2_MESSAGE_LENGTH]),\n        leaf_index: fields[start + L1_TO_L2_MESSAGE_LENGTH],\n        sibling_path: arr_copy_slice(fields,\n            [0; L1_TO_L2_MSG_TREE_HEIGHT],\n            L1_TO_L2_MESSAGE_LENGTH + 1),\n        root: fields[start + L1_TO_L2_MESSAGE_LENGTH + L1_TO_L2_MSG_TREE_HEIGHT + 1]\n    }\n}\n",
                "path": "/aztec/messaging/l1_to_l2_message_getter_data.nr"
            },
            "109": {
                "source": "use crate::abi::PublicContextInputs;\nuse crate::context::{\n    PrivateContext,\n    PublicContext,\n};\nuse crate::note::{\n    note_header::NoteHeader,\n    note_interface::NoteInterface,\n    utils::compute_inner_note_hash,\n};\nuse crate::oracle::notes::{notify_created_note, notify_nullified_note};\nuse dep::protocol_types::constants::EMPTY_NULLIFIED_COMMITMENT;\n\npub fn create_note<Note, N>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note: &mut Note,\n    note_interface: NoteInterface<Note, N>,\n    broadcast: bool\n) {\n    let contract_address = (*context).this_address();\n\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, is_transient: true };\n    let set_header = note_interface.set_header;\n    set_header(note, header);\n    let inner_note_hash = compute_inner_note_hash(note_interface, *note);\n\n    let serialize = note_interface.serialize;\n    let serialized_note = serialize(*note);\n    assert(notify_created_note(storage_slot, serialized_note, inner_note_hash) == 0);\n\n    context.push_new_note_hash(inner_note_hash);\n\n    if broadcast {\n        let broadcast = note_interface.broadcast;\n        broadcast(context, storage_slot, *note);\n    }\n}\n\npub fn create_note_hash_from_public<Note, N>(\n    context: &mut PublicContext,\n    storage_slot: Field,\n    note: &mut Note,\n    note_interface: NoteInterface<Note, N>\n) {\n    let contract_address = (*context).this_address();\n\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, is_transient: true };\n    let set_header = note_interface.set_header;\n    set_header(note, header);\n    let inner_note_hash = compute_inner_note_hash(note_interface, *note);\n\n    context.push_new_note_hash(inner_note_hash);\n}\n\npub fn destroy_note<Note, N>(context: &mut PrivateContext, note: Note, note_interface: NoteInterface<Note, N>) {\n    let mut nullifier = 0;\n    let mut nullified_commitment: Field = EMPTY_NULLIFIED_COMMITMENT;\n    let compute_nullifier = note_interface.compute_nullifier;\n    nullifier = compute_nullifier(note);\n\n    // We also need the note commitment corresponding to the \"nullifier\"\n    let get_header = note_interface.get_header;\n    let header = get_header(note);\n    // `nullified_commitment` is used to inform the kernel which pending commitment\n    // the nullifier corresponds to so they can be matched and both squashed/deleted.\n    // nonzero nonce implies \"persistable\" nullifier (nullifies a persistent/in-tree\n    // commitment) in which case `nullified_commitment` is not used since the kernel\n    // just siloes and forwards the nullifier to its output.\n    if (header.is_transient) {\n        // TODO(1718): Can we reuse the note commitment computed in `compute_nullifier`?\n        nullified_commitment = compute_inner_note_hash(note_interface, note);\n    }\n    assert(notify_nullified_note(nullifier, nullified_commitment) == 0);\n\n    context.push_new_nullifier(nullifier, nullified_commitment)\n}\n",
                "path": "/aztec/note/lifecycle.nr"
            },
            "110": {
                "source": "use dep::std::option::Option;\nuse dep::protocol_types::constants::{\n    MAX_READ_REQUESTS_PER_CALL,\n    GET_NOTE_ORACLE_RETURN_LENGTH,\n    GET_NOTES_ORACLE_RETURN_LENGTH,\n    MAX_NOTES_PER_PAGE,\n    VIEW_NOTE_ORACLE_RETURN_LENGTH,\n};\nuse crate::context::PrivateContext;\nuse crate::note::{\n    note_getter_options::{NoteGetterOptions, Select, Sort, SortOrder},\n    note_interface::NoteInterface,\n    note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_read_or_nullify,\n};\nuse crate::oracle;\nuse crate::types::vec::BoundedVec;\n\nfn check_note_header<Note, N>(context: PrivateContext, storage_slot: Field, note_interface: NoteInterface<Note, N>, note: Note) {\n    let get_header = note_interface.get_header;\n    let header = get_header(note);\n    let contract_address = context.this_address();\n    assert(header.contract_address == contract_address);\n    assert(header.storage_slot == storage_slot);\n}\n\nfn check_note_fields<N>(fields: [Field; N], selects: BoundedVec<Option<Select>, N>) {\n    for i in 0..selects.len {\n        let select = selects.get_unchecked(i).unwrap_unchecked();\n        assert(fields[select.field_index] == select.value, \"Mismatch return note field.\");\n    }\n}\n\nfn check_notes_order<N>(fields_0: [Field; N], fields_1: [Field; N], sorts: BoundedVec<Option<Sort>, N>) {\n    for i in 0..sorts.len {\n        let sort = sorts.get_unchecked(i).unwrap_unchecked();\n        let eq = fields_0[sort.field_index] == fields_1[sort.field_index];\n        let lt = fields_0[sort.field_index] as u120 < fields_1[sort.field_index] as u120;\n        if sort.order == SortOrder.ASC {\n            assert(eq | lt, \"Return notes not sorted in ascending order.\");\n        } else if !eq {\n            assert(!lt, \"Return notes not sorted in descending order.\");\n        }\n    }\n}\n\npub fn get_note<Note, N>(context: &mut PrivateContext, storage_slot: Field, note_interface: NoteInterface<Note, N>) -> Note {\n    let note = get_note_internal(storage_slot, note_interface);\n\n    check_note_header(*context, storage_slot, note_interface, note);\n\n    let note_hash_for_read_request = compute_note_hash_for_read_or_nullify(note_interface, note);\n\n    context.push_read_request(note_hash_for_read_request);\n    note\n}\n\npub fn get_notes<Note, N, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    options: NoteGetterOptions<Note, N, FILTER_ARGS>\n) -> [Option<Note>; MAX_READ_REQUESTS_PER_CALL] {\n    let opt_notes = get_notes_internal(storage_slot, note_interface, options);\n    let mut num_notes = 0;\n    let mut prev_fields = [0; N];\n    for i in 0..opt_notes.len() {\n        let opt_note = opt_notes[i];\n        if opt_note.is_some() {\n            let note = opt_note.unwrap_unchecked();\n            let serialize = note_interface.serialize;\n            let fields = serialize(note);\n            check_note_header(*context, storage_slot, note_interface, note);\n            check_note_fields(fields, options.selects);\n            if i != 0 {\n                check_notes_order(prev_fields, fields, options.sorts);\n            }\n            prev_fields = fields;\n\n            let note_hash_for_read_request = compute_note_hash_for_read_or_nullify(note_interface, note);\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1410): test to ensure\n            // failure if malicious oracle injects 0 nonce here for a \"pre-existing\" note.\n            context.push_read_request(note_hash_for_read_request);\n\n            num_notes += 1;\n        };\n    }\n    if options.limit != 0 {\n        assert(num_notes <= options.limit, \"Invalid number of return notes.\");\n    }\n    opt_notes\n}\n\nunconstrained fn get_note_internal<Note, N>(storage_slot: Field, note_interface: NoteInterface<Note, N>) -> Note {\n    let placeholder_note = [Option::none()];\n    let placeholder_fields = [0; GET_NOTE_ORACLE_RETURN_LENGTH];\n    oracle::notes::get_notes(storage_slot,\n        note_interface,\n        0,\n        [],\n        [],\n        [],\n        [],\n        1, // limit\n        0, // offset\n        placeholder_note,\n        placeholder_fields)[0].unwrap() // Notice: we don't allow dummies to be returned from get_note (singular).\n}\n\nunconstrained fn get_notes_internal<Note, N, FILTER_ARGS>(\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    options: NoteGetterOptions<Note, N, FILTER_ARGS>\n) -> [Option<Note>; MAX_READ_REQUESTS_PER_CALL] {\n    let (num_selects, select_by, select_values, sort_by, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_READ_REQUESTS_PER_CALL];\n    let placeholder_fields = [0; GET_NOTES_ORACLE_RETURN_LENGTH];\n    let opt_notes = oracle::notes::get_notes(storage_slot,\n        note_interface,\n        num_selects,\n        select_by,\n        select_values,\n        sort_by,\n        sort_order,\n        options.limit,\n        options.offset,\n        placeholder_opt_notes,\n        placeholder_fields);\n\n    let filter = options.filter;\n    let filter_args = options.filter_args;\n    filter(opt_notes, filter_args)\n}\n\nunconstrained pub fn view_notes<Note, N>(storage_slot: Field, note_interface: NoteInterface<Note, N>, options: NoteViewerOptions<Note, N>) -> [Option<Note>; MAX_NOTES_PER_PAGE] {\n    let (num_selects, select_by, select_values, sort_by, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_NOTES_PER_PAGE];\n    let placeholder_fields = [0; VIEW_NOTE_ORACLE_RETURN_LENGTH];\n    oracle::notes::get_notes(storage_slot,\n        note_interface,\n        num_selects,\n        select_by,\n        select_values,\n        sort_by,\n        sort_order,\n        options.limit,\n        options.offset,\n        placeholder_opt_notes,\n        placeholder_fields)\n}\n\nunconstrained fn flatten_options<Note, N>(selects: BoundedVec<Option<Select>, N>, sorts: BoundedVec<Option<Sort>, N>) -> (u8, [u8; N], [Field; N], [u8; N], [u2; N]) {\n    let mut num_selects = 0;\n    let mut select_by = [0; N];\n    let mut select_values = [0; N];\n    for i in 0..selects.len {\n        let select = selects.get(i);\n        if select.is_some() {\n            select_by[num_selects] = select.unwrap_unchecked().field_index;\n            select_values[num_selects] = select.unwrap_unchecked().value;\n            num_selects += 1;\n        };\n    }\n\n    let mut sort_by = [0; N];\n    let mut sort_order = [0; N];\n    for i in 0..sorts.len {\n        let sort = sorts.get(i);\n        if sort.is_some() {\n            sort_by[i] = sort.unwrap_unchecked().field_index;\n            sort_order[i] = sort.unwrap_unchecked().order;\n        };\n    }\n\n    (num_selects, select_by, select_values, sort_by, sort_order)\n}\n",
                "path": "/aztec/note/note_getter.nr"
            },
            "112": {
                "source": "use crate::hash::pedersen_hash;\nuse dep::protocol_types::constants::{GENERATOR_INDEX__UNIQUE_COMMITMENT, GENERATOR_INDEX__SILOED_COMMITMENT};\n\npub fn compute_inner_hash(storage_slot: Field, note_hash: Field) -> Field {\n    // TODO(#1205) Do we need a generator index here?\n    pedersen_hash([storage_slot, note_hash], 0)\n}\n\npub fn compute_siloed_hash(contract_address: Field, inner_note_hash: Field) -> Field {\n    let inputs = [contract_address, inner_note_hash];\n    pedersen_hash(inputs, GENERATOR_INDEX__SILOED_COMMITMENT)\n}\n\npub fn compute_unique_hash(nonce: Field, siloed_note_hash: Field) -> Field {\n    let inputs = [nonce, siloed_note_hash];\n    pedersen_hash(inputs, GENERATOR_INDEX__UNIQUE_COMMITMENT)\n}\n",
                "path": "/aztec/note/note_hash.nr"
            },
            "116": {
                "source": "use dep::protocol_types::constants::GENERATOR_INDEX__OUTER_NULLIFIER;\nuse crate::{\n    note::{\n        note_hash::{compute_inner_hash, compute_siloed_hash, compute_unique_hash},\n        note_header::NoteHeader,\n        note_interface::NoteInterface,\n    },\n    utils::arr_copy_slice,\n    hash::pedersen_hash,\n};\n\npub fn compute_inner_note_hash<Note, N>(note_interface: NoteInterface<Note, N>, note: Note) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note);\n\n    let compute_note_hash = note_interface.compute_note_hash;\n    let note_hash = compute_note_hash(note);\n\n    compute_inner_hash(header.storage_slot, note_hash)\n}\n\npub fn compute_siloed_note_hash<Note, N>(note_interface: NoteInterface<Note, N>, note_with_header: Note) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note_with_header);\n\n    let inner_note_hash = compute_inner_note_hash(note_interface, note_with_header);\n\n    compute_siloed_hash(header.contract_address, inner_note_hash)\n}\n\npub fn compute_unique_siloed_note_hash<Note, N>(note_interface: NoteInterface<Note, N>, note_with_header: Note) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note_with_header);\n\n    let siloed_note_hash = compute_siloed_note_hash(note_interface, note_with_header);\n\n    compute_unique_hash(header.nonce, siloed_note_hash)\n}\n\npub fn compute_siloed_nullifier<Note, N>(note_interface: NoteInterface<Note, N>, note_with_header: Note) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note_with_header);\n\n    let compute_nullifier = note_interface.compute_nullifier;\n    let inner_nullifier = compute_nullifier(note_with_header);\n\n    let input = [header.contract_address, inner_nullifier];\n    pedersen_hash(input, GENERATOR_INDEX__OUTER_NULLIFIER)\n}\n\npub fn compute_note_hash_for_read_or_nullify<Note, N>(note_interface: NoteInterface<Note, N>, note_with_header: Note) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note_with_header);\n\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1386)\n    if (header.is_transient) {\n        // If a note is transient, we just read the inner_note_hash (kernel will silo by contract address).\n        compute_inner_note_hash(note_interface, note_with_header)\n    } else if (header.nonce == 0) {\n        // If not transient and nonce is zero, that means we are reading a public note.\n        compute_siloed_note_hash(note_interface, note_with_header)\n    } else {\n        // When nonce is nonzero, that means we are reading a settled note (from tree) created in a\n        // previous TX. So we need the unique_siloed_note_hash which has already been hashed with\n        // contract address and then nonce. This hash will match the existing leaf in the private\n        // data tree, so the kernel can just perform a membership check directly on this hash/leaf.\n        compute_unique_siloed_note_hash(note_interface, note_with_header)\n    }\n}\n\npub fn compute_note_hash_and_nullifier<Note, N, S>(note_interface: NoteInterface<Note, N>, note_header: NoteHeader, serialized_note: [Field; S]) -> [Field; 4] {\n    let deserialize = note_interface.deserialize;\n    let set_header = note_interface.set_header;\n    let mut note = deserialize(arr_copy_slice(serialized_note, [0; N], 0));\n    set_header(&mut note, note_header);\n\n    let compute_note_hash = note_interface.compute_note_hash;\n    let note_hash = compute_note_hash(note);\n    let inner_note_hash = compute_inner_hash(note_header.storage_slot, note_hash);\n\n    let siloed_note_hash = compute_siloed_hash(note_header.contract_address, inner_note_hash);\n\n    let unique_siloed_note_hash = compute_unique_hash(note_header.nonce, siloed_note_hash);\n\n    let compute_nullifier = note_interface.compute_nullifier;\n    let inner_nullifier = compute_nullifier(note);\n\n    [inner_note_hash, siloed_note_hash, unique_siloed_note_hash, inner_nullifier]\n}\n",
                "path": "/aztec/note/utils.nr"
            },
            "120": {
                "source": "#[oracle(getPortalContractAddress)]\nfn _get_portal_address(_contract_address: Field) -> Field {}\n\nunconstrained pub fn get_portal_address(contract_address: Field) -> Field {\n    let portal_address = _get_portal_address(contract_address);\n    portal_address\n}\n",
                "path": "/aztec/oracle/context.nr"
            },
            "122": {
                "source": "use dep::protocol_types::constants::L1_TO_L2_MESSAGE_ORACLE_CALL_LENGTH;\n\n// Checks if a msg is within the l1ToL2Msg tree\n#[oracle(getL1ToL2Message)]\nfn get_l1_to_l2_msg_oracle(_msg_key: Field) -> [Field; L1_TO_L2_MESSAGE_ORACLE_CALL_LENGTH] {}\n\nunconstrained pub fn get_l1_to_l2_message_call(msg_key: Field) -> [Field; L1_TO_L2_MESSAGE_ORACLE_CALL_LENGTH] {\n    get_l1_to_l2_msg_oracle(msg_key)\n}\n",
                "path": "/aztec/oracle/get_l1_to_l2_message.nr"
            },
            "125": {
                "source": "use crate::types::point::Point;\nuse crate::address::compute_address;\n\n#[oracle(getPublicKeyAndPartialAddress)]\nfn get_public_key_and_partial_address_oracle(_address: Field) -> [Field; 3] {}\n\nunconstrained fn get_public_key_and_partial_address_internal(address: Field) -> [Field; 3] {\n    get_public_key_and_partial_address_oracle(address)\n}\n\npub fn get_public_key(address: Field) -> Point {\n    let result = get_public_key_and_partial_address_internal(address);\n    let pub_key_x = result[0];\n    let pub_key_y = result[1];\n    let partial_address = result[2];\n\n    let calculated_address = compute_address(pub_key_x, pub_key_y, partial_address);\n    assert(calculated_address == address);\n\n    Point::new(pub_key_x, pub_key_y)\n}\n",
                "path": "/aztec/oracle/get_public_key.nr"
            },
            "128": {
                "source": "#[oracle(getRandomField)]\nfn rand_oracle() -> Field {}\n\nunconstrained pub fn rand() -> Field {\n    rand_oracle()\n}\n",
                "path": "/aztec/oracle/rand.nr"
            },
            "132": {
                "source": "use dep::std::option::Option;\nuse crate::note::{\n    note_header::NoteHeader,\n    note_interface::NoteInterface,\n};\nuse crate::utils::arr_copy_slice;\n\n#[oracle(notifyCreatedNote)]\nfn notify_created_note_oracle<N>(_storage_slot: Field, _serialized_note: [Field; N], _inner_note_hash: Field) -> Field {}\n\nunconstrained pub fn notify_created_note<N>(storage_slot: Field, serialized_note: [Field; N], inner_note_hash: Field) -> Field {\n    notify_created_note_oracle(storage_slot, serialized_note, inner_note_hash)\n}\n\n#[oracle(notifyNullifiedNote)]\nfn notify_nullified_note_oracle<N>(_nullifier: Field, _inner_note_hash: Field) -> Field {}\n\nunconstrained pub fn notify_nullified_note<N>(nullifier: Field, inner_note_hash: Field) -> Field {\n    notify_nullified_note_oracle(nullifier, inner_note_hash)\n}\n\n#[oracle(getNotes)]\nfn get_notes_oracle<N, S>(\n    _storage_slot: Field,\n    _num_selects: u8,\n    _select_by: [u8; N],\n    _select_values: [Field; N],\n    _sort_by: [u8; N],\n    _sort_order: [u2; N],\n    _limit: u32,\n    _offset: u32,\n    _return_size: u32,\n    _placeholder_fields: [Field; S]\n) -> [Field; S] {}\n\nunconstrained fn get_notes_oracle_wrapper<N, S>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by: [u8; N],\n    select_values: [Field; N],\n    sort_by: [u8; N],\n    sort_order: [u2; N],\n    limit: u32,\n    offset: u32,\n    mut placeholder_fields: [Field; S]\n) -> [Field; S] {\n    let return_size = placeholder_fields.len() as u32;\n    get_notes_oracle(storage_slot,\n        num_selects,\n        select_by,\n        select_values,\n        sort_by,\n        sort_order,\n        limit,\n        offset,\n        return_size,\n        placeholder_fields)\n}\n\nunconstrained pub fn get_notes<Note, N, M, S, NS>(\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    num_selects: u8,\n    select_by: [u8; M],\n    select_values: [Field; M],\n    sort_by: [u8; M],\n    sort_order: [u2; M],\n    limit: u32,\n    offset: u32,\n    mut placeholder_opt_notes: [Option<Note>; S], // TODO: Remove it and use `limit` to initialize the note array.\n    placeholder_fields: [Field; NS] // TODO: Remove it and use `limit` to initialize the note array.\n) -> [Option<Note>; S] {\n    let fields = get_notes_oracle_wrapper(storage_slot,\n        num_selects,\n        select_by,\n        select_values,\n        sort_by,\n        sort_order,\n        limit,\n        offset,\n        placeholder_fields);\n    let num_notes = fields[0] as u32;\n    let contract_address = fields[1];\n    let deserialize = note_interface.deserialize;\n    let set_header = note_interface.set_header;\n    for i in 0..placeholder_opt_notes.len() {\n        if i as u32 < num_notes {\n            // lengths named as per typescript.\n            let return_header_length: Field = 2; // num_notes & contract_address.\n            let extra_preimage_length: Field = 2; // nonce & is_transient.\n            let read_offset: Field = return_header_length + i * (N + extra_preimage_length);\n            let nonce = fields[read_offset];\n            let is_transient = fields[read_offset + 1] as bool;\n            let header = NoteHeader { contract_address, nonce, storage_slot, is_transient };\n            let serialized_note = arr_copy_slice(fields, [0; N], read_offset + 2);\n            let mut note = deserialize(serialized_note);\n            set_header(&mut note, header);\n            placeholder_opt_notes[i] = Option::some(note);\n        };\n    }\n    placeholder_opt_notes\n}\n\n#[oracle(checkNullifierExists)]\nfn check_nullifier_exists_oracle(_inner_nullifier: Field) -> Field {}\n\nunconstrained pub fn check_nullifier_exists(inner_nullifier: Field) -> bool {\n    check_nullifier_exists_oracle(inner_nullifier) == 1\n}\n",
                "path": "/aztec/oracle/notes.nr"
            },
            "134": {
                "source": "use crate::types::point::Point;\nuse dep::protocol_types::constants::NUM_FIELDS_PER_SHA256;\n\n// TODO: Should take encrypted data.\n#[oracle(emitEncryptedLog)]\nfn emit_encrypted_log_oracle<N>(_contract_address: Field, _storage_slot: Field, _encryption_pub_key: Point, _preimage: [Field; N]) -> Field {}\n\nunconstrained pub fn emit_encrypted_log<N>(contract_address: Field, storage_slot: Field, encryption_pub_key: Point, preimage: [Field; N]) -> [Field; NUM_FIELDS_PER_SHA256] {\n    [emit_encrypted_log_oracle(contract_address, storage_slot, encryption_pub_key, preimage), 0]\n}\n\n#[oracle(emitUnencryptedLog)]\nfn emit_unencrypted_log_oracle<T>(_contract_address: Field, _event_selector: Field, _message: T) -> Field {}\n\nunconstrained pub fn emit_unencrypted_log<T>(contract_address: Field, event_selector: Field, message: T) -> [Field; NUM_FIELDS_PER_SHA256] {\n    // https://github.com/AztecProtocol/aztec-packages/issues/885\n    [emit_unencrypted_log_oracle(contract_address, event_selector, message), 0]\n}\n",
                "path": "/aztec/oracle/logs.nr"
            },
            "139": {
                "source": "use dep::std::option::Option;\nuse dep::protocol_types::constants::EMPTY_NULLIFIED_COMMITMENT;\nuse crate::context::{PrivateContext, Context};\nuse crate::note::{\n    lifecycle::create_note,\n    note_getter::{get_note, view_notes},\n    note_interface::NoteInterface,\n    note_viewer_options::NoteViewerOptions,\n};\nuse crate::oracle::notes::check_nullifier_exists;\nuse crate::state_vars::singleton::compute_singleton_initialization_nullifier;\n\n// docs:start:struct\nstruct ImmutableSingleton<Note, N> {\n    context: Option<&mut PrivateContext>,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    compute_initialization_nullifier: fn (Field, Option<Field>) -> Field,\n}\n// docs:end:struct\n\nimpl<Note, N> ImmutableSingleton<Note, N> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        note_interface: NoteInterface<Note, N>,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        ImmutableSingleton {\n            context: context.private,\n            storage_slot,\n            note_interface,\n            compute_initialization_nullifier: compute_singleton_initialization_nullifier,\n        }\n    }\n    // docs:end:new\n\n    // docs:start:is_initialized\n    unconstrained pub fn is_initialized(self, owner: Option<Field>) -> bool {\n        let compute_initialization_nullifier = self.compute_initialization_nullifier;\n        let nullifier = compute_initialization_nullifier(self.storage_slot, owner);\n        check_nullifier_exists(nullifier)\n    }\n    // docs:end:is_initialized\n\n    // docs:start:initialize\n    pub fn initialize(\n        self,\n        note: &mut Note, \n        owner: Option<Field>,\n        broadcast: bool,\n    ) {\n        let context = self.context.unwrap();\n\n        // Nullify the storage slot.\n        let compute_initialization_nullifier = self.compute_initialization_nullifier;\n        let nullifier = compute_initialization_nullifier(self.storage_slot, owner);\n        context.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT);\n\n        create_note(\n            context,\n            self.storage_slot,\n            note,\n            self.note_interface,\n            broadcast,\n        );\n    }\n    // docs:end:initialize\n\n    // docs:start:get_note\n    pub fn get_note(self) -> Note {\n        let context = self.context.unwrap();\n        let storage_slot = self.storage_slot;\n        get_note(context, storage_slot, self.note_interface)\n    }\n    // docs:end:get_note\n\n    // docs:start:view_note\n    unconstrained pub fn view_note(self) -> Note {\n        let options = NoteViewerOptions::new().set_limit(1);\n        view_notes(self.storage_slot, self.note_interface, options)[0].unwrap()\n    }\n    // docs:end:view_note\n}\n",
                "path": "/aztec/state_vars/immutable_singleton.nr"
            },
            "143": {
                "source": "use dep::std::option::Option;\nuse dep::protocol_types::constants::{EMPTY_NULLIFIED_COMMITMENT, GENERATOR_INDEX__INITIALIZATION_NULLIFIER};\nuse crate::context::{PrivateContext, PublicContext, Context};\nuse crate::note::{\n    lifecycle::{create_note, destroy_note},\n    note_getter::{get_note, view_notes},\n    note_interface::NoteInterface,\n    note_viewer_options::NoteViewerOptions,\n};\nuse crate::oracle::{\n    get_secret_key::get_secret_key,\n    notes::check_nullifier_exists,\n};\nuse crate::hash::pedersen_hash;\n\npub fn compute_singleton_initialization_nullifier(storage_slot: Field, owner: Option<Field>) -> Field {\n    if owner.is_some() {\n        let secret = get_secret_key(owner.unwrap_unchecked());\n        pedersen_hash([storage_slot, secret.low, secret.high],\n            GENERATOR_INDEX__INITIALIZATION_NULLIFIER)\n    } else {\n        pedersen_hash([storage_slot], GENERATOR_INDEX__INITIALIZATION_NULLIFIER)\n    }\n}\n\n// docs:start:struct\nstruct Singleton<Note, N> {\n    context: Option<&mut PrivateContext>,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    compute_initialization_nullifier: fn (Field, Option<Field>) -> Field,\n}\n// docs:end:struct\n\nimpl<Note, N> Singleton<Note, N> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        note_interface: NoteInterface<Note, N>,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Singleton {\n            context: context.private,\n            storage_slot,\n            note_interface,\n            compute_initialization_nullifier: compute_singleton_initialization_nullifier,\n        }\n    }\n    // docs:end:new\n\n    // docs:start:is_initialized\n    unconstrained pub fn is_initialized(self, owner: Option<Field>) -> bool {\n        let compute_initialization_nullifier = self.compute_initialization_nullifier;\n        let nullifier = compute_initialization_nullifier(self.storage_slot, owner);\n        check_nullifier_exists(nullifier)\n    }\n    // docs:end:is_initialized\n\n    // docs:start:initialize\n    pub fn initialize(\n        self,\n        note: &mut Note,\n        owner: Option<Field>,\n        broadcast: bool,\n    ) {\n        let context = self.context.unwrap();\n\n        // Nullify the storage slot.\n        let compute_initialization_nullifier = self.compute_initialization_nullifier;\n        let nullifier = compute_initialization_nullifier(self.storage_slot, owner);\n        context.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT);\n\n        create_note(context, self.storage_slot, note, self.note_interface, broadcast);\n    }\n    // docs:end:initialize\n\n    // docs:start:replace\n    pub fn replace(\n        self,\n        new_note: &mut Note,\n        broadcast: bool,\n    ) {\n        let context = self.context.unwrap();\n        let prev_note = get_note(context, self.storage_slot, self.note_interface);\n\n        // Nullify previous note.\n        destroy_note(context, prev_note, self.note_interface);\n\n        // Add replacement note.\n        create_note(context, self.storage_slot, new_note, self.note_interface, broadcast);\n    }\n    // docs:end:replace\n\n    // docs:start:get_note\n    pub fn get_note(self, broadcast: bool) -> Note {\n        let context = self.context.unwrap();\n        let mut note = get_note(context, self.storage_slot, self.note_interface);\n\n        // Nullify current note to make sure it's reading the latest note.\n        destroy_note(context, note, self.note_interface);\n\n        // Add the same note again.\n        // Because a nonce is added to every note in the kernel, its nullifier will be different.\n        create_note(context, self.storage_slot, &mut note, self.note_interface, broadcast);\n\n        note\n    }\n    // docs:end:get_note\n\n    // docs:start:view_note\n    unconstrained pub fn view_note(self) -> Note {\n        let options = NoteViewerOptions::new().set_limit(1);\n        view_notes(self.storage_slot, self.note_interface, options)[0].unwrap()\n    }\n    // docs:end:view_note\n}\n",
                "path": "/aztec/state_vars/singleton.nr"
            },
            "147": {
                "source": "struct BoundedVec<T, MaxLen> {\n    storage: [T; MaxLen],\n    len: Field,\n}\n\nimpl<T, MaxLen> BoundedVec<T, MaxLen> {\n    pub fn new(initial_value: T) -> Self {\n        BoundedVec { storage: [initial_value; MaxLen], len: 0 }\n    }\n\n    pub fn get(mut self: Self, index: Field) -> T {\n        assert(index as u64 < self.len as u64);\n        self.storage[index]\n    }\n\n    pub fn get_unchecked(mut self: Self, index: Field) -> T {\n        self.storage[index]\n    }\n\n    pub fn push(&mut self, elem: T) {\n        assert(self.len as u64 < MaxLen as u64);\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    pub fn push_array<Len>(&mut self, array: [T; Len]) {\n        let newLen = self.len + array.len();\n        assert(newLen as u64 <= MaxLen as u64);\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = newLen;\n    }\n\n    pub fn pop(&mut self) -> T {\n        assert(self.len as u64 > 0);\n\n        let elem = self.storage[self.len - 1];\n        self.len -= 1;\n        elem\n    }\n\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        let mut exceeded_len = false;\n        for i in 0..MaxLen {\n            exceeded_len |= i == self.len;\n            if (!exceeded_len) {\n                ret |= predicate(self.storage[i]);\n            }\n        }\n        ret\n    }\n}\n\n#[test]\nfn test_vec_push_pop() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    assert(vec.len == 0);\n    vec.push(2);\n    assert(vec.len == 1);\n    vec.push(4);\n    assert(vec.len == 2);\n    vec.push(6);\n    assert(vec.len == 3);\n    let x = vec.pop();\n    assert(x == 6);\n    assert(vec.len == 2);\n    assert(vec.get(0) == 2);\n    assert(vec.get(1) == 4);\n}\n\n#[test]\nfn test_vec_push_array() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    vec.push_array([2, 4]);\n    assert(vec.len == 2);\n    assert(vec.get(0) == 2);\n    assert(vec.get(1) == 4);\n}\n\n#[test(should_fail)]\nfn test_vec_get_out_of_bound() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    vec.push_array([2, 4]);\n    let _x = vec.get(2);\n}\n\n#[test(should_fail)]\nfn test_vec_get_not_declared() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    vec.push_array([2]);\n    let _x = vec.get(1);\n}\n\n#[test(should_fail)]\nfn test_vec_get_uninitialized() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    let _x = vec.get(0);\n}\n\n#[test(should_fail)]\nfn test_vec_push_overflow() {\n    let mut vec: BoundedVec<Field, 1> = BoundedVec::new(0);\n    vec.push(1);\n    vec.push(2);\n}\n\n#[test]\nfn test_vec_any() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    vec.push_array([2, 4, 6]);\n    assert(vec.any(|v| v == 2) == true);\n    assert(vec.any(|v| v == 4) == true);\n    assert(vec.any(|v| v == 6) == true);\n    assert(vec.any(|v| v == 3) == false);\n}\n\n#[test]\nfn test_vec_any_not_default() {\n    let default_value = 1;\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(default_value);\n    vec.push_array([2, 4]);\n    assert(vec.any(|v| v == default_value) == false);\n}\n",
                "path": "/aztec/types/vec.nr"
            },
            "153": {
                "source": "pub fn arr_copy_slice<T, N, M>(src: [T; N], mut dst: [T; M], offset: Field) -> [T; M] {\n    for i in 0..dst.len() {\n        dst[i] = src[i + offset];\n    }\n    dst\n}\n\npub fn field_from_bytes<N>(bytes: [u8; N], big_endian: bool) -> Field {\n    assert(bytes.len() as u32 < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        let mut index = i;\n        if big_endian {\n            index = N - i - 1;\n        }\n        as_field += (bytes[index] as Field) * offset;\n        offset *= 256;\n    }\n\n    as_field\n}\n\n// TODO(#3470): Copied over from https://github.com/AztecProtocol/aztec-packages/blob/a07c4bd47313be6aa604a63f37857eb0136b41ba/yarn-project/noir-protocol-circuits/src/crates/rollup-lib/src/base/base_rollup_inputs.nr#L599\n// move to a shared place?\n\n// TODO to radix returns u8, so we cannot use bigger radixes. It'd be ideal to use a radix of the maximum range-constrained integer noir supports\npub fn full_field_less_than(lhs: Field, rhs: Field) -> bool {\n    dep::std::eddsa::lt_bytes32(lhs, rhs)\n}\n\npub fn full_field_greater_than(lhs: Field, rhs: Field) -> bool {\n    dep::std::eddsa::lt_bytes32(rhs, lhs)\n}",
                "path": "/aztec/utils.nr"
            },
            "154": {
                "source": "use dep::aztec::{\n    note::{\n        note_header::NoteHeader,\n        note_interface::NoteInterface,\n    },\n    hash::pedersen_hash,\n    context::PrivateContext,\n};\n\nglobal FIELD_NOTE_LEN: Field = 1;\n\n// A note which stores a field and is expected to be passed around using the `addNote` function.\n// WARNING: This Note is not private as it does not contain randomness and hence it can be easy to perform serialized_note\n// attack on it.\nstruct FieldNote {\n    value: Field,\n    header: NoteHeader,\n}\n\nimpl FieldNote {\n    pub fn new(value: Field) -> Self {\n        FieldNote {\n            value,\n            header: NoteHeader::empty(),\n        }\n    }\n\n    pub fn serialize(self) -> [Field; FIELD_NOTE_LEN]{\n        [self.value]\n    }\n\n    pub fn deserialize(serialized_note: [Field; FIELD_NOTE_LEN]) -> Self {\n        FieldNote {\n            value: serialized_note[0],\n            header: NoteHeader::empty(),\n        }\n    }\n\n    pub fn compute_note_hash(self) -> Field {\n        // TODO(#1205) Should use a non-zero generator index.\n        pedersen_hash(self.serialize(), 0)\n    }\n\n    pub fn compute_nullifier(self) -> Field {\n        // This note is expected to be shared between users and for this reason can't be nullified using a secret.\n        0\n    }\n\n    pub fn set_header(&mut self, header: NoteHeader) {\n        self.header = header;\n    }\n}\n\nfn deserialize(serialized_note: [Field; FIELD_NOTE_LEN]) -> FieldNote {\n    FieldNote::deserialize(serialized_note)\n}\n\nfn serialize(note: FieldNote) -> [Field; FIELD_NOTE_LEN] {\n    note.serialize()\n}\n\nfn compute_note_hash(note: FieldNote) -> Field {\n    note.compute_note_hash()\n}\n\nfn compute_nullifier(note: FieldNote) -> Field {\n    note.compute_nullifier()\n}\n\nfn get_header(note: FieldNote) -> NoteHeader {\n    note.header\n}\n\nfn set_header(note: &mut FieldNote, header: NoteHeader) {\n    note.set_header(header);\n}\n\nfn broadcast(context: &mut PrivateContext, slot: Field, note: FieldNote) {\n    assert(false, \"FieldNote does not support broadcast. Add it to PXE directly using the `.addNote` function.\");\n}\n\nglobal FieldNoteMethods = NoteInterface {\n    deserialize,\n    serialize,\n    compute_note_hash,\n    compute_nullifier,\n    get_header,\n    set_header,\n    broadcast,\n};\n",
                "path": "/field_note/field_note.nr"
            }
        }
    }
}
