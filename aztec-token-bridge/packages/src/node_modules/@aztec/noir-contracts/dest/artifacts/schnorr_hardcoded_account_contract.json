{
    "name": "SchnorrHardcodedAccount",
    "functions": [
        {
            "name": "constructor",
            "functionType": "secret",
            "isInternal": false,
            "parameters": [],
            "returnTypes": [],
            "bytecode": "H4sIAAAAAAAA/+XdZZOTZxSH8V0gSd27uLu1ySbZJFVK3alSL6Rk6y1V6qXU3XB390/IuWbCwAt4xb0z3HNl5j9590x+m+yj5z7nZE9Pz7aeM6/e7vuC7nv5wl6VQmyjcI7tVssDtVqn0d+pVCtLy/2tdrNertXbA81Ks1Jv1pf1N6vVTrPWbLTarUa5ValVO5XBeqs62N1wId1nLA+FuxjbKA6Bu3iRu0uxjdIQuEuJ3ef7vV/o5xw5RJ9zWOLvqTeheVQm5mEJzaMzMQ9PaB6TiXlEQvPYTMyFhOZxmZiLCc3jMzGXEponZGIemdA8UWieJDRPFpqnCM1TheZpQvN0oXmG0DxTaJ4lNM8WmucIzXOF5nlC83yh+Sah+WahuSw0V4TmfqG5KjTXhOa60DwgNDeE5qbQ3BKabxGabxWabxOabxea7xCa7xSaFwjNdwnNC4Xmu4Xme4Tme4Xm+4Tm+4XmB4TmB4Xmh4Tmh4XmR4TmR4Xmx4Tmx4XmRULzE0Lzk0LzU0Lz00LzM0Lzs0LzYqH5OaH5eaH5BaH5RaH5JaH5ZaH5FaH5VaF5idC8VGhuC82vCc3LhOaO0DwoNL8uNL8hNL8pNL8lNL8tNL8jNL8rNL8nNL8vNC8Xmj8Qmj8Umj8Smj8Wmj8Rmj8VmlcIzZ8JzZ8LzV8IzV8KzV8JzV8Lzd8Izd8KzSuF5u+E5lVC8/dC8w9C849C809C889C8y9C869C829C8+9C8x9C859C819C899C8z9C879C839C8/9C82qheY3QvFZoXic0rxeaNwjNG4XmTULzZqF5i9C8VWjeJjRvF5p3CM07heZdmZgvSWjenYn50oTmPZmYL0to3puJ+fKE5n2ZmK9IaN6fifnKhOYDmZivSmg+mIn56oTmQ5mYr0loPpyJ+dqE5iOZmK9LaD6aifn6hOZjmZhvSGg+non5xoTmE5mY+xKaTyY093W309s1D4+MiBQixUgpwjUh10hcM3AOzTkl51icc3AM5pjEPpp9Fv/D/Kb5jvvO+ntu6r6PioyOjImMjYyLjI9MiEyMTIpMjkyJTI1Mi0yPzIjMjMyKzI7MicyNzIvMjzDjnpnvfInMBGdGNjOjmaHMTGFm7DYizGBlJikzOplZyQxHZhoy4+/0zDtmoi2MMDOLGVLMVGLGEDN3mEHDTBZmlDCzgxkWzHRgxgE9/xdF6AlPj3R6htNDm57S9FheHKEHLz1p6dFKz1J6eNLTkh6P9DxcEqEnXjtCzzR6iNFTix5T9FyiBxE9eehRQ88WepjQ04MeF/R8WB6hJwBr5Fkzzhpq1hSzxnZFhDWYrElkjR5r1ljDxZom1viw5mVlhDURqyLUzFNDTk01NcbU3FKDSk0mNYrU7FHDRk0XNU7U/FADQ00INRLUDPAMnWfKPGPlmSPP4HgmxTMafhPcw+eeNvd4uee5PcI9Me4Rcc+EewhcU3ONyTUX1yCck3OOyjkb5zAc0znGsc9nH8g+gf+R069TXMw0LzyaAAA=",
            "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
        },
        {
            "name": "entrypoint",
            "functionType": "secret",
            "isInternal": false,
            "parameters": [
                {
                    "name": "payload",
                    "type": {
                        "kind": "struct",
                        "path": "authwit::entrypoint::EntrypointPayload",
                        "fields": [
                            {
                                "name": "function_calls",
                                "type": {
                                    "kind": "array",
                                    "length": 4,
                                    "type": {
                                        "kind": "struct",
                                        "path": "authwit::entrypoint::FunctionCall",
                                        "fields": [
                                            {
                                                "name": "args_hash",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "function_selector",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "target_address",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "is_public",
                                                "type": {
                                                    "kind": "boolean"
                                                }
                                            }
                                        ]
                                    }
                                }
                            },
                            {
                                "name": "nonce",
                                "type": {
                                    "kind": "field"
                                }
                            }
                        ]
                    },
                    "visibility": "public"
                }
            ],
            "returnTypes": [],
            "bytecode": "",
            "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
        },
        {
            "name": "is_valid",
            "functionType": "secret",
            "isInternal": false,
            "parameters": [
                {
                    "name": "message_hash",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                }
            ],
            "returnTypes": [],
            "bytecode": "",
            "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
        },
        {
            "name": "is_valid_public",
            "functionType": "open",
            "isInternal": false,
            "parameters": [
                {
                    "name": "message_hash",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                }
            ],
            "returnTypes": [
                {
                    "kind": "struct",
                    "path": "aztec::abi::PublicCircuitPublicInputs",
                    "fields": [
                        {
                            "name": "call_context",
                            "type": {
                                "kind": "struct",
                                "path": "aztec::abi::CallContext",
                                "fields": [
                                    {
                                        "name": "msg_sender",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "storage_contract_address",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "portal_contract_address",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "function_selector",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "is_delegate_call",
                                        "type": {
                                            "kind": "boolean"
                                        }
                                    },
                                    {
                                        "name": "is_static_call",
                                        "type": {
                                            "kind": "boolean"
                                        }
                                    },
                                    {
                                        "name": "is_contract_deployment",
                                        "type": {
                                            "kind": "boolean"
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "name": "args_hash",
                            "type": {
                                "kind": "field"
                            }
                        },
                        {
                            "name": "return_values",
                            "type": {
                                "kind": "array",
                                "length": 4,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "contract_storage_update_requests",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "struct",
                                    "path": "aztec::abi::ContractStorageUpdateRequest",
                                    "fields": [
                                        {
                                            "name": "storage_slot",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "old_value",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "new_value",
                                            "type": {
                                                "kind": "field"
                                            }
                                        }
                                    ]
                                }
                            }
                        },
                        {
                            "name": "contract_storage_read",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "struct",
                                    "path": "aztec::abi::ContractStorageRead",
                                    "fields": [
                                        {
                                            "name": "storage_slot",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "value",
                                            "type": {
                                                "kind": "field"
                                            }
                                        }
                                    ]
                                }
                            }
                        },
                        {
                            "name": "public_call_stack",
                            "type": {
                                "kind": "array",
                                "length": 4,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "new_commitments",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "new_nullifiers",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "new_l2_to_l1_msgs",
                            "type": {
                                "kind": "array",
                                "length": 2,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "unencrypted_logs_hash",
                            "type": {
                                "kind": "array",
                                "length": 2,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "unencrypted_log_preimages_length",
                            "type": {
                                "kind": "field"
                            }
                        },
                        {
                            "name": "block_header",
                            "type": {
                                "kind": "struct",
                                "path": "aztec::abi::BlockHeader",
                                "fields": [
                                    {
                                        "name": "note_hash_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "nullifier_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "contract_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "l1_to_l2_messages_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "archive_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "public_data_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "global_variables_hash",
                                        "type": {
                                            "kind": "field"
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "name": "prover_address",
                            "type": {
                                "kind": "field"
                            }
                        }
                    ]
                }
            ],
            "bytecode": "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",
            "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
        },
        {
            "name": "set_is_valid_storage",
            "functionType": "open",
            "isInternal": true,
            "parameters": [
                {
                    "name": "message_hash",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                },
                {
                    "name": "value",
                    "type": {
                        "kind": "boolean"
                    },
                    "visibility": "private"
                }
            ],
            "returnTypes": [
                {
                    "kind": "struct",
                    "path": "aztec::abi::PublicCircuitPublicInputs",
                    "fields": [
                        {
                            "name": "call_context",
                            "type": {
                                "kind": "struct",
                                "path": "aztec::abi::CallContext",
                                "fields": [
                                    {
                                        "name": "msg_sender",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "storage_contract_address",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "portal_contract_address",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "function_selector",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "is_delegate_call",
                                        "type": {
                                            "kind": "boolean"
                                        }
                                    },
                                    {
                                        "name": "is_static_call",
                                        "type": {
                                            "kind": "boolean"
                                        }
                                    },
                                    {
                                        "name": "is_contract_deployment",
                                        "type": {
                                            "kind": "boolean"
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "name": "args_hash",
                            "type": {
                                "kind": "field"
                            }
                        },
                        {
                            "name": "return_values",
                            "type": {
                                "kind": "array",
                                "length": 4,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "contract_storage_update_requests",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "struct",
                                    "path": "aztec::abi::ContractStorageUpdateRequest",
                                    "fields": [
                                        {
                                            "name": "storage_slot",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "old_value",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "new_value",
                                            "type": {
                                                "kind": "field"
                                            }
                                        }
                                    ]
                                }
                            }
                        },
                        {
                            "name": "contract_storage_read",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "struct",
                                    "path": "aztec::abi::ContractStorageRead",
                                    "fields": [
                                        {
                                            "name": "storage_slot",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "value",
                                            "type": {
                                                "kind": "field"
                                            }
                                        }
                                    ]
                                }
                            }
                        },
                        {
                            "name": "public_call_stack",
                            "type": {
                                "kind": "array",
                                "length": 4,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "new_commitments",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "new_nullifiers",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "new_l2_to_l1_msgs",
                            "type": {
                                "kind": "array",
                                "length": 2,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "unencrypted_logs_hash",
                            "type": {
                                "kind": "array",
                                "length": 2,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "unencrypted_log_preimages_length",
                            "type": {
                                "kind": "field"
                            }
                        },
                        {
                            "name": "block_header",
                            "type": {
                                "kind": "struct",
                                "path": "aztec::abi::BlockHeader",
                                "fields": [
                                    {
                                        "name": "note_hash_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "nullifier_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "contract_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "l1_to_l2_messages_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "archive_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "public_data_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "global_variables_hash",
                                        "type": {
                                            "kind": "field"
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "name": "prover_address",
                            "type": {
                                "kind": "field"
                            }
                        }
                    ]
                }
            ],
            "bytecode": "",
            "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
        }
    ],
    "events": [],
    "debug": {
        "debugSymbols": [
            "eJyrVsrJT04syczPK1ayqq6tBQAz9wY7",
            "",
            "eJzl3N+KNUcVxuF7meMgvdaqqq7KrYgHwT8gSBSTs/Ddux11vsQ4dohC9SP7yAh7D29P4DcN4Vnfvf3pz7/96ts//vnrb96+/O6t3r789Xdv3/zlq6+//3/ffPvVX799+/L44u33X//u+t9PX7z94Y9/+v3bl/Hpi3/7VLQa45+fvP55zs+fXvXRx3tGvH+85/iZj6/zfP/wkf2Hz45Pv/nirf1fru4bV1frn1e3o/8Pq8dHqyPb+/DI82e2r/o8fc31w2f7R1vyyPefnEf/8U++tpybt0R//3efMc5/3TKhLQvaEoc0JqQxKY35sPxPjfkw6E+N+bDTT43Znd/bMVJ/QwpwSAVOqcApFTilAqdU4JQKnFKBUypwSgVOqcApFbikApdU4JIKXFKBSypwSQUuqcAlFbikApdU4CYVuEkFblKBm1TgJhW4SQVuUoGbVOAmFbhJBe5SgbtU4C4VuEsF7lKBu1TgLhW4SwXuUoG7VOAhFXhIBR5SgYdU4CEVeEgFHlKBh1TgIRV4SAU+pQKfUoFPqcCnVOBTKvApFfiUCnxKBT6lAp9SgadU4CkVeEoFnlKBp1TgKRV4SgWeUoGnVOApFXhJBV5SgZdU4CUVeEkFXlKBl1TgJRV4SQVeUoHjkBIch9TgOKQIxyFVOA4pw3FIHY5DCnEcUonjkFIcB9VijMdRLbaAnCXkLCJnGTkLyVlKzmJylJMLCsoFJeWConJBWbmgsFxQWi4oLheUlwsKzAUl5oIic0GZuaDQXFBqLig2F5SbCwrOBSXngqJzQdm5oPBcUHouKD4XlJ8LCtAFJeiCInRBGbqgEF1Qii4oRheUowsK0gUl6YKidEFZuqAwXVCaLihOF5SnCwrUBSXqgiJ1QZm6oFBdUKouKFYXlKsLCtYFJeuConVB2bqgcF1Qui4oXheUrwsK2AUl7IIidkEZu6CQXVDKLihmF5SzCwraBSXtgqJ2QVm7oLBdUNouKG4XlLcLCtwFJe6CIndBmbug0F1Q6i4odheUu0vK3SXl7pJyd0m5uzykFifl7pJyd0m5u6TcXVLuLil3l5S7S8rdJeXuknJ3Sbm7pNxdUu4uKXeXlLtLyt0l5e6ScndJubuk3F1S7i4pd5eUu0vK3SXl7pJyd0m5u6TcXVLuLil3l5S7S8rdJeXuknJ3Sbm7pNxdUu4uKXeXlLtLyt0l5e6ScndJubuk3F1S7i4pd5eUu0vK3SXl7pJyd0m5u6TcXVLuLil3l5S7S8rdJeXuknJ3Sbm7pNxdUu4uKXeXlLtLyt0l5e6ScndJubuk3F1S7i4pd5eUu0vK3SXl7pJyd0m5u6TcXVLuLil3l5S7S8rdJeXuknJ3Sbm7pNxdUu4uKXeXlLtLyt0l5e6ScndJubuk3F1S7i4pd5eUuyvK3RXl7opyd0W5uzqkFhfl7opyd0W5u6LcXVHurih3V5S7K8rdFeXuinJ3Rbm7otxdUe6uKHdXlLsryt0V5e6KcndFubui3F1R7q4od1eUuyvK3RXl7opyd0W5u6LcXVHurih3V5S7K8rdFeXuinJ3Rbm7otxdUe6uKHdXlLsryt0V5e6KcndFubui3F1R7q4od1eUuyvK3RXl7opyd0W5u6LcXVHurih3V5S7K8rdFeXuinJ3Rbm7otxdUe6uKHdXlLsryt0V5e6KcndFubui3F1R7q4od1eUuyvK3RXl7opyd0W5u6LcXVHurih3V5S7K8rdFeXuinJ3Rbm7otxdUe6uKHdXlLsryt0V5e6KcndFubui3F1R7q4od1eUu2uUu2uUu2uUu2uUu2uH1OJGubtGubtGubtGubtGubtGubtGubtGubtGubtGubtGubtGubtGubtGubtGubtGubtGubtGubtGubtGubtGubtGubtGubtGubtGubtGubtGubtGubtGubtGubtGubtGubtGubtGubtGubtGubtGubtGubtGubtGubtGubtGubtGubtGubtGubtGubtGubtGubtGubtGubtGubtGubtGubtGubtGubtGubtGubtGubtGubtGubtGubtGubtGubtGubtGubtGubtGubtGubtGubtGubtGubtGubtGubtGubtGubtGubtGubtGubtGubtGubtGubtGubtGubtGubtGubtGubtGubtGubtGubtGubtGubtGubtGubtGubtGubtOubtOubtOubtOubt+SC3ulLvrlLvrlLvrlLvrlLvrlLvrlLvrlLvrlLvrlLvrlLvrlLvrlLvrlLvrlLvrlLvrlLvrlLvrlLvrlLvrlLvrlLvrlLvrlLvrlLvrlLvrlLvrlLvrlLvrlLvrlLvrlLvrlLvrlLvrlLvrlLvrlLvrlLvrlLvrlLvrlLvrlLvrlLvrlLvrlLvrlLvr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",
            "",
            ""
        ],
        "fileMap": {
            "1": {
                "source": "// docs:start:contract\n// Account contract that uses Schnorr signatures for authentication using a hardcoded public key.\ncontract SchnorrHardcodedAccount {\n    use dep::std;\n    use dep::aztec::{\n        abi::{ PrivateCircuitPublicInputs, PrivateContextInputs, Hasher },\n        types::{ vec::BoundedVec, point::Point },\n        context::PrivateContext,\n    };\n\n    use dep::authwit:: {\n        entrypoint::{ EntrypointPayload, ENTRYPOINT_PAYLOAD_SIZE },\n        account::AccountActions,\n        auth_witness::get_auth_witness,\n    };\n\n    global public_key_x: Field = 0x0ede3d33c920df8fdf43f3e39ed38b0882c25b056620ef52fd016fe811aa2443;\n    global public_key_y: Field = 0x29155934ffaa105323695b5f91faadd84acc21f4a8bda2fad760f992d692bc7f;\n\n    global ACCOUNT_ACTIONS_STORAGE_SLOT = 1;\n\n    #[aztec(private)]\n    fn constructor() {}\n\n    #[aztec(private)]\n    fn entrypoint(payload: pub EntrypointPayload) {\n        let actions = AccountActions::private(&mut context, ACCOUNT_ACTIONS_STORAGE_SLOT, is_valid_impl);\n        actions.entrypoint(payload);\n    }\n\n    #[aztec(private)]\n    fn is_valid(message_hash: Field) -> Field {\n        let actions = AccountActions::private(&mut context, ACCOUNT_ACTIONS_STORAGE_SLOT, is_valid_impl);\n        actions.is_valid(message_hash)\n    }\n\n    #[aztec(public)]\n    fn is_valid_public(message_hash: Field) -> Field {\n        let actions = AccountActions::public(&mut context, ACCOUNT_ACTIONS_STORAGE_SLOT, is_valid_impl);\n        actions.is_valid_public(message_hash)\n    }\n\n    #[aztec(public)]\n    internal fn set_is_valid_storage(message_hash: Field, value: bool) {\n        let actions = AccountActions::public(&mut context, ACCOUNT_ACTIONS_STORAGE_SLOT, is_valid_impl);\n        actions.internal_set_is_valid_storage(message_hash, value)\n    }\n\n    // docs:start:is-valid\n    #[contract_library_method]\n    fn is_valid_impl(_context: &mut PrivateContext, message_hash: Field) -> pub bool {\n        // Load auth witness and format as an u8 array\n        let witness: [Field; 64] = get_auth_witness(message_hash);\n        let mut signature: [u8; 64] = [0; 64];\n        for i in 0..64 {\n            signature[i] = witness[i] as u8;\n        }\n\n        // Verify signature using hardcoded public key\n        let verification = std::schnorr::verify_signature(public_key_x,\n            public_key_y,\n            signature,\n            message_hash.to_be_bytes(32));\n        assert(verification == true);\n        true\n    }\n    // docs:end:is-valid\n}\n// docs:end:contract",
                "path": "/usr/src/yarn-project/noir-contracts/src/contracts/schnorr_hardcoded_account_contract/src/main.nr"
            },
            "23": {
                "source": "impl Field {\n    pub fn to_le_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_le_bits(bit_size)\n    }\n    \n    pub fn to_be_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_be_bits(bit_size)\n    }\n\n    #[builtin(to_le_bits)]\n    fn __to_le_bits(_self: Self, _bit_size: u32) -> [u1] {}\n    \n    #[builtin(to_be_bits)]\n    fn __to_be_bits(_self: Self, _bit_size: u32) -> [u1] {}\n\n    pub fn to_le_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_le_radix(256, byte_size)\n    }\n\n    pub fn to_be_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_be_radix(256, byte_size)\n    }\n\n\n    pub fn to_le_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_le_radix(radix, result_len)\n    }\n\n    pub fn to_be_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_be_radix(radix, result_len)\n    }\n\n\n\n    // decompose `_self` into a `_result_len` vector over the `_radix` basis\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix(_self: Self, _radix: u32, _result_len: u32) -> [u8] {}\n    \n    #[builtin(to_be_radix)]\n    fn __to_be_radix(_self: Self, _radix: u32, _result_len: u32) -> [u8] {}\n\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b = exponent.to_le_bits(32);\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32-i] as Field) * (r * self) + (1 - b[32-i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x ∈ {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub fn modulus_num_bits() -> Field {}\n\n#[builtin(modulus_be_bits)]\npub fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub fn modulus_le_bytes() -> [u8] {}\n// Convert a 32 byte array to a field element\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n",
                "path": "std/field.nr"
            },
            "34": {
                "source": "struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::unsafe::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default\n        }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            other\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<U, Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            default()\n        }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some {\n                Option::none()\n            } else {\n                self\n            }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n",
                "path": "std/option.nr"
            },
            "76": {
                "source": "global ARGS_LENGTH: Field = 16;\nglobal RETURN_VALUES_LENGTH: Field = 4;\n\n/**\n * Convention for constant array lengths are mainly divided in 2 classes:\n *  - FUNCTION CALL\n *  - TRANSACTION\n *\n * Agreed convention is to use MAX_XXX_PER_CALL resp. MAX_XXX_PER_TX, where XXX denotes a type of element such as\n * commitment, or nullifier, e.g.,:\n *  - MAX_NEW_NULLIFIERS_PER_CALL\n *  - MAX_NEW_COMMITMENTS_PER_TX\n *\n * In the kernel circuits, we accumulate elements such as commitments and the nullifiers from all functions calls in a\n * transaction. Therefore, we always must have:\n * MAX_XXX_PER_TX ≥ MAX_XXX_PER_CALL\n *\n * For instance:\n * MAX_NEW_COMMITMENTS_PER_TX ≥ MAX_NEW_COMMITMENTS_PER_CALL\n * MAX_NEW_NULLIFIERS_PER_TX ≥ MAX_NEW_NULLIFIERS_PER_CALL\n *\n */\n\n// docs:start:constants\n// \"PER CALL\" CONSTANTS\nglobal MAX_NEW_COMMITMENTS_PER_CALL: Field = 16;\nglobal MAX_NEW_NULLIFIERS_PER_CALL: Field = 16;\nglobal MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL: Field = 4;\nglobal MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL: Field = 4;\nglobal MAX_NEW_L2_TO_L1_MSGS_PER_CALL: Field = 2;\nglobal MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL: Field = 16;\nglobal MAX_PUBLIC_DATA_READS_PER_CALL: Field = 16;\nglobal MAX_READ_REQUESTS_PER_CALL: Field = 32;\nglobal MAX_PENDING_READ_REQUESTS_PER_CALL: Field = 32;\n\n// \"PER TRANSACTION\" CONSTANTS\nglobal MAX_NEW_COMMITMENTS_PER_TX: Field = 64;\nglobal MAX_NEW_NULLIFIERS_PER_TX: Field = 64;\nglobal MAX_PRIVATE_CALL_STACK_LENGTH_PER_TX: Field = 8;\nglobal MAX_PUBLIC_CALL_STACK_LENGTH_PER_TX: Field = 8;\nglobal MAX_NEW_L2_TO_L1_MSGS_PER_TX: Field = 2;\nglobal MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_TX: Field = 16;\nglobal MAX_PUBLIC_DATA_READS_PER_TX: Field = 16;\nglobal MAX_NEW_CONTRACTS_PER_TX: Field = 1;\nglobal MAX_OPTIONALLY_REVEALED_DATA_LENGTH_PER_TX: Field = 4;\nglobal MAX_READ_REQUESTS_PER_TX: Field = 128;\nglobal MAX_PENDING_READ_REQUESTS_PER_TX: Field = 128;\nglobal NUM_ENCRYPTED_LOGS_HASHES_PER_TX: Field = 1;\nglobal NUM_UNENCRYPTED_LOGS_HASHES_PER_TX: Field = 1;\n// docs:end:constants\n\n// ROLLUP CONTRACT CONSTANTS - constants used only in l1-contracts\nglobal NUMBER_OF_L1_L2_MESSAGES_PER_ROLLUP: Field = 16;\n// TODO(961): Use this constant everywhere instead of hard-coded \"2\".\nglobal KERNELS_PER_BASE_ROLLUP: Field = 2;\nglobal MAX_NEW_NULLIFIERS_PER_BASE_ROLLUP: Field = 128;\nglobal MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_BASE_ROLLUP: Field = 32;\nglobal MAX_PUBLIC_DATA_READS_PER_BASE_ROLLUP: Field = 32;\n\n// TREES RELATED CONSTANTS\nglobal VK_TREE_HEIGHT: Field = 3;\nglobal FUNCTION_TREE_HEIGHT: Field = 5;\nglobal CONTRACT_TREE_HEIGHT: Field = 16;\nglobal NOTE_HASH_TREE_HEIGHT: Field = 32;\nglobal PUBLIC_DATA_TREE_HEIGHT: Field = 254;\nglobal NULLIFIER_TREE_HEIGHT: Field = 20;\nglobal L1_TO_L2_MSG_TREE_HEIGHT: Field = 16;\nglobal ROLLUP_VK_TREE_HEIGHT: Field = 8;\n\n// SUB-TREES RELATED CONSTANTS\nglobal CONTRACT_SUBTREE_HEIGHT: Field = 1;\nglobal CONTRACT_SUBTREE_SIBLING_PATH_LENGTH: Field = 15;\nglobal NOTE_HASH_SUBTREE_HEIGHT: Field = 7;\nglobal NOTE_HASH_SUBTREE_SIBLING_PATH_LENGTH: Field = 25;\nglobal NULLIFIER_SUBTREE_HEIGHT: Field = 7;\nglobal ARCHIVE_HEIGHT: Field = 16;\nglobal NULLIFIER_SUBTREE_SIBLING_PATH_LENGTH: Field = 13;\nglobal L1_TO_L2_MSG_SUBTREE_HEIGHT: Field = 4;\nglobal L1_TO_L2_MSG_SUBTREE_SIBLING_PATH_LENGTH: Field = 12;\n\n// MISC CONSTANTS\nglobal FUNCTION_SELECTOR_NUM_BYTES: Field = 4;\nglobal MAPPING_SLOT_PEDERSEN_SEPARATOR: Field = 4;\nglobal NUM_FIELDS_PER_SHA256: Field = 2;\nglobal ARGS_HASH_CHUNK_LENGTH: u32 = 32;\nglobal ARGS_HASH_CHUNK_COUNT: u32 = 16;\n\n\n// NOIR CONSTANTS - constants used only in yarn-packages/noir-contracts\n// Some are defined here because Noir doesn't yet support globals referencing other globals yet.\n// Move these constants to a noir file once the issue bellow is resolved:\n// https://github.com/noir-lang/noir/issues/1734\nglobal L1_TO_L2_MESSAGE_LENGTH: Field = 8;\nglobal L1_TO_L2_MESSAGE_ORACLE_CALL_LENGTH: Field = 26;\nglobal MAX_NOTE_FIELDS_LENGTH: Field = 20;\n// GET_NOTE_ORACLE_RETURN_LENGT = MAX_NOTE_FIELDS_LENGTH + 1 + 2\n// The plus 1 is 1 extra field for nonce.\n// + 2 for EXTRA_DATA: [number_of_return_notes, contract_address]\nglobal GET_NOTE_ORACLE_RETURN_LENGTH: Field = 23;\nglobal MAX_NOTES_PER_PAGE: Field = 10;\n// VIEW_NOTE_ORACLE_RETURN_LENGTH = MAX_NOTES_PER_PAGE * (MAX_NOTE_FIELDS_LENGTH + 1) + 2;\nglobal VIEW_NOTE_ORACLE_RETURN_LENGTH: Field = 212;\nglobal CALL_CONTEXT_LENGTH: Field = 7;\nglobal BLOCK_HEADER_LENGTH: Field = 7;\nglobal FUNCTION_DATA_LENGTH: Field = 4;\nglobal CONTRACT_DEPLOYMENT_DATA_LENGTH: Field = 6;\n// Change this ONLY if you have changed the PrivateCircuitPublicInputs structure.\n// In other words, if the structure/size of the public inputs of a function call changes then we\n// should change this constant as well as the offsets in private_call_stack_item.nr\nglobal PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH: Field = 155;\nglobal CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH: Field = 3;\nglobal CONTRACT_STORAGE_READ_LENGTH: Field = 2;\n// Change this ONLY if you have changed the PublicCircuitPublicInputs structure.\nglobal PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH: Field = 142;\nglobal GET_NOTES_ORACLE_RETURN_LENGTH: Field = 674;\nglobal EMPTY_NULLIFIED_COMMITMENT: Field = 1000000;\nglobal CALL_PRIVATE_FUNCTION_RETURN_SIZE: Field = 161;\nglobal PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH: Field = 87;\nglobal PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH: Field = 144;\nglobal COMMITMENTS_NUM_BYTES_PER_BASE_ROLLUP: Field = 4096;\nglobal NULLIFIERS_NUM_BYTES_PER_BASE_ROLLUP: Field = 4096;\nglobal PUBLIC_DATA_WRITES_NUM_BYTES_PER_BASE_ROLLUP: Field = 2048;\nglobal CONTRACTS_NUM_BYTES_PER_BASE_ROLLUP: Field = 64;\nglobal CONTRACT_DATA_NUM_BYTES_PER_BASE_ROLLUP: Field = 128;\nglobal CONTRACT_DATA_NUM_BYTES_PER_BASE_ROLLUP_UNPADDED: Field = 104;\nglobal L2_TO_L1_MSGS_NUM_BYTES_PER_BASE_ROLLUP: Field = 128;\nglobal LOGS_HASHES_NUM_BYTES_PER_BASE_ROLLUP: Field = 128;\n\n/**\n * Enumerate the hash_indices which are used for pedersen hashing.\n * We start from 1 to avoid the default generators. The generator indices are listed\n * based on the number of elements each index hashes. The following conditions must be met:\n *\n * +-----------+-------------------------------+----------------------+\n * | Hash size | Number of elements hashed (n) | Condition to use     |\n * |-----------+-------------------------------+----------------------|\n * | LOW       | n ≤ 8                         | 0 < hash_index ≤ 32  |\n * | MID       | 8 < n ≤ 16                    | 32 < hash_index ≤ 40 |\n * | HIGH      | 16 < n ≤ 48                   | 40 < hash_index ≤ 48 |\n * +-----------+-------------------------------+----------------------+\n *\n * Note: When modifying, modify `GeneratorIndexPacker` in packer.hpp accordingly.\n */\n// Indices with size ≤ 8\nglobal GENERATOR_INDEX__COMMITMENT = 1;\nglobal GENERATOR_INDEX__COMMITMENT_NONCE = 2;\nglobal GENERATOR_INDEX__UNIQUE_COMMITMENT = 3;\nglobal GENERATOR_INDEX__SILOED_COMMITMENT = 4;\nglobal GENERATOR_INDEX__NULLIFIER = 5;\nglobal GENERATOR_INDEX__INITIALIZATION_NULLIFIER = 6;\nglobal GENERATOR_INDEX__OUTER_NULLIFIER = 7;\nglobal GENERATOR_INDEX__PUBLIC_DATA_READ = 8;\nglobal GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST = 9;\nglobal GENERATOR_INDEX__FUNCTION_DATA = 10;\nglobal GENERATOR_INDEX__FUNCTION_LEAF = 11;\nglobal GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA = 12;\nglobal GENERATOR_INDEX__CONSTRUCTOR = 13;\nglobal GENERATOR_INDEX__CONSTRUCTOR_ARGS = 14;\nglobal GENERATOR_INDEX__CONTRACT_ADDRESS = 15;\nglobal GENERATOR_INDEX__CONTRACT_LEAF = 16;\nglobal GENERATOR_INDEX__CALL_CONTEXT = 17;\nglobal GENERATOR_INDEX__CALL_STACK_ITEM = 18;\nglobal GENERATOR_INDEX__CALL_STACK_ITEM_2 = 19;\nglobal GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET = 20;\nglobal GENERATOR_INDEX__L2_TO_L1_MSG = 21;\nglobal GENERATOR_INDEX__TX_CONTEXT = 22;\nglobal GENERATOR_INDEX__PUBLIC_LEAF_INDEX = 23;\nglobal GENERATOR_INDEX__PUBLIC_DATA_LEAF = 24;\nglobal GENERATOR_INDEX__SIGNED_TX_REQUEST = 25;\nglobal GENERATOR_INDEX__GLOBAL_VARIABLES = 26;\nglobal GENERATOR_INDEX__PARTIAL_ADDRESS = 27;\nglobal GENERATOR_INDEX__BLOCK_HASH = 28;\n// Indices with size ≤ 16\nglobal GENERATOR_INDEX__TX_REQUEST = 33;\nglobal GENERATOR_INDEX__SIGNATURE_PAYLOAD = 34;\n// Indices with size ≤ 44\nglobal GENERATOR_INDEX__VK = 41;\nglobal GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS = 42;\nglobal GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS = 43;\nglobal GENERATOR_INDEX__FUNCTION_ARGS = 44;\n",
                "path": "/protocol_types/constants.nr"
            },
            "93": {
                "source": "use dep::protocol_types::constants::{\n    RETURN_VALUES_LENGTH,\n    MAX_READ_REQUESTS_PER_CALL,\n    MAX_PENDING_READ_REQUESTS_PER_CALL,\n    MAX_NEW_COMMITMENTS_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n    NUM_FIELDS_PER_SHA256,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL,\n    GENERATOR_INDEX__FUNCTION_ARGS,\n    BLOCK_HEADER_LENGTH,\n    CONTRACT_DEPLOYMENT_DATA_LENGTH,\n    CALL_CONTEXT_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n    CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH,\n    CONTRACT_STORAGE_READ_LENGTH,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n    GENERATOR_INDEX__BLOCK_HASH,\n    GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS,\n    GENERATOR_INDEX__FUNCTION_DATA,\n    GENERATOR_INDEX__PUBLIC_DATA_READ,\n    GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST,\n    GENERATOR_INDEX__CALL_CONTEXT,\n    GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS,\n    GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA,\n};\n\nuse crate::oracle::debug_log;\nuse crate::types::vec::BoundedVec;\nuse crate::types::point::Point;\nuse crate::hash::pedersen_hash;\n\n// docs:start:private-global-variables\nstruct PrivateGlobalVariables {\n    chain_id: Field,\n    version: Field,\n}\n// docs:end:private-global-variables\n\nimpl PrivateGlobalVariables {\n    fn serialize(self) -> [Field; 2] {\n        [self.chain_id, self.version]\n    }\n}\n\n// docs:start:public-global-variables\nstruct PublicGlobalVariables {\n    chain_id: Field,\n    version: Field,\n    block_number: Field,\n    timestamp: Field,\n}\n// docs:end:public-global-variables\n\nimpl PublicGlobalVariables {\n    fn serialize(self) -> [Field; 4] {\n        [self.chain_id, self.version, self.block_number, self.timestamp]\n    }\n}\n\n// docs:start:contract-deployment-data\nstruct ContractDeploymentData {\n    deployer_public_key: Point,\n    constructor_vk_hash : Field,\n    function_tree_root : Field,\n    contract_address_salt : Field,\n    portal_contract_address : Field,\n}\n// docs:end:contract-deployment-data\n\nimpl ContractDeploymentData {\n    fn serialize(self) -> [Field; CONTRACT_DEPLOYMENT_DATA_LENGTH] {\n        [\n            self.deployer_public_key.x,\n            self.deployer_public_key.y,\n            self.constructor_vk_hash,\n            self.function_tree_root,\n            self.contract_address_salt,\n            self.portal_contract_address,\n        ]\n    }\n\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA)\n    }\n}\n\n// PrivateContextInputs are expected to be provided to each private function\n// docs:start:private-context-inputs\nstruct PrivateContextInputs {\n    call_context : CallContext,\n    block_header: BlockHeader,\n    contract_deployment_data: ContractDeploymentData,\n    private_global_variables: PrivateGlobalVariables,\n}\n// docs:end:private-context-inputs\n\n// PublicContextInputs are expected to be provided to each public function\n// docs:start:public-context-inputs\nstruct PublicContextInputs {\n    call_context: CallContext,\n    block_header: BlockHeader,\n\n    public_global_variables: PublicGlobalVariables,\n}\n// docs:end:public-context-inputs\n\n// docs:start:call-context\nstruct CallContext {\n    msg_sender : Field,\n    storage_contract_address : Field,\n    portal_contract_address : Field,\n    function_selector: Field,\n\n    is_delegate_call : bool,\n    is_static_call : bool,\n    is_contract_deployment: bool,\n}\n// docs:end:call-context\n\nimpl CallContext {\n    fn serialize(self) -> [Field; CALL_CONTEXT_LENGTH] {\n        [\n            self.msg_sender,\n            self.storage_contract_address,\n            self.portal_contract_address,\n            self.function_selector,\n            self.is_delegate_call as Field,\n            self.is_static_call as Field,\n            self.is_contract_deployment as Field,\n        ]\n    }\n\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CALL_CONTEXT)\n    }\n}\n\n// docs:start:block-header\nstruct BlockHeader {\n    note_hash_tree_root : Field,\n    nullifier_tree_root : Field,\n    contract_tree_root : Field,\n    l1_to_l2_messages_tree_root : Field,\n    archive_root: Field,\n    public_data_tree_root: Field,\n    global_variables_hash: Field,\n}\n// docs:end:block-header\n\nimpl BlockHeader {\n    // NOTE: this order must match the order in `private_circuit_public_inputs.hpp`\n    pub fn serialize(self) -> [Field; BLOCK_HEADER_LENGTH] {\n        [\n            self.note_hash_tree_root,\n            self.nullifier_tree_root,\n            self.contract_tree_root,\n            self.l1_to_l2_messages_tree_root,\n            self.archive_root,\n            self.public_data_tree_root,\n            self.global_variables_hash,\n        ]\n    }\n\n    pub fn deserialize(deserialized: [Field; BLOCK_HEADER_LENGTH]) -> Self {\n        BlockHeader {\n            note_hash_tree_root: deserialized[0],\n            nullifier_tree_root: deserialized[1],\n            contract_tree_root: deserialized[2],\n            l1_to_l2_messages_tree_root: deserialized[3],\n            archive_root: deserialized[4],\n            public_data_tree_root: deserialized[5],\n            global_variables_hash: deserialized[6],\n        }\n    }\n\n    pub fn empty() -> Self {\n        Self { note_hash_tree_root: 0, nullifier_tree_root: 0, contract_tree_root: 0, l1_to_l2_messages_tree_root: 0, archive_root: 0, public_data_tree_root: 0, global_variables_hash: 0 }\n    }\n\n    pub fn block_hash(self) -> Field {\n        // TODO(#3442): Unify the ordering in `BlockHeader::serialize` function and the ordering\n        // in the block hash preimage --> This requires changes in the circuits.\n        let inputs = [\n            self.global_variables_hash,\n            self.note_hash_tree_root,\n            self.nullifier_tree_root,\n            self.contract_tree_root,\n            self.l1_to_l2_messages_tree_root,\n            self.public_data_tree_root\n        ];\n        pedersen_hash(inputs, GENERATOR_INDEX__BLOCK_HASH)\n    }\n}\n\nstruct FunctionData {\n    function_selector: Field,\n    is_internal: bool,\n    is_private: bool,\n    is_constructor: bool,\n}\n\nimpl FunctionData {\n    fn hash(self) -> Field {\n        pedersen_hash([\n            self.function_selector,\n            self.is_internal as Field,\n            self.is_private as Field,\n            self.is_constructor as Field,\n        ], GENERATOR_INDEX__FUNCTION_DATA)\n    }\n}\n\nstruct PrivateCircuitPublicInputs {\n    call_context: CallContext,\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n    read_requests: [Field; crate::abi::MAX_READ_REQUESTS_PER_CALL],\n    pending_read_requests: [Field; crate::abi::MAX_PENDING_READ_REQUESTS_PER_CALL],\n    new_commitments: [Field; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [Field; MAX_NEW_NULLIFIERS_PER_CALL],\n    nullified_commitments: [Field; MAX_NEW_NULLIFIERS_PER_CALL],\n    private_call_stack: [Field; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL],\n    public_call_stack: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_l2_to_l1_msgs: [Field; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    // Explore introducing a new type like uint256 (similar to Point), so it's more explicit that\n    // we're talking about a single number backed by two field elements.\n    encrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    encrypted_log_preimages_length: Field,\n    unencrypted_log_preimages_length: Field,\n    block_header: BlockHeader,\n    contract_deployment_data: ContractDeploymentData,\n    chain_id: Field,\n    version: Field,\n}\n\nimpl PrivateCircuitPublicInputs {\n    fn hash(self) -> Field {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0); \n        fields.push(self.call_context.hash());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.push_array(self.read_requests);\n        fields.push_array(self.pending_read_requests);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.nullified_commitments);\n        fields.push_array(self.private_call_stack);\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_header.serialize());\n        fields.push(self.contract_deployment_data.hash());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n\n        pedersen_hash(fields.storage, GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS)\n    }\n\n    fn serialize(self) -> [Field; PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.push_array(self.read_requests);\n        fields.push_array(self.pending_read_requests);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.private_call_stack);\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_header.serialize());\n        fields.push_array(self.contract_deployment_data.serialize());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n        fields.storage\n    }\n}\n\nstruct ContractStorageRead {\n    storage_slot: Field,\n    value: Field,\n}\n\nimpl ContractStorageRead {\n    pub fn serialize(self) -> [Field; CONTRACT_STORAGE_READ_LENGTH] {\n        [self.storage_slot, self.value]\n    }\n\n    pub fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_READ)\n    }\n\n    pub fn empty() -> Self {\n        Self { storage_slot: 0, value: 0 }\n    }\n}\n\nstruct ContractStorageUpdateRequest {\n    storage_slot: Field,\n    old_value: Field,\n    new_value: Field,\n}\n\nimpl ContractStorageUpdateRequest {\n    pub fn serialize(self) -> [Field; CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH] {\n        [self.storage_slot, self.old_value, self.new_value]\n    }\n\n    pub fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST)\n    }\n\n    pub fn empty() -> Self {\n        Self { storage_slot: 0, old_value: 0, new_value: 0 }\n    }\n}\n\nstruct PublicCircuitPublicInputs {\n    call_context: CallContext,\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n    contract_storage_update_requests: [ContractStorageUpdateRequest; MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n    contract_storage_read: [ContractStorageRead; MAX_PUBLIC_DATA_READS_PER_CALL],\n    public_call_stack: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_commitments: [Field; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [Field; crate::abi::MAX_NEW_NULLIFIERS_PER_CALL],\n    new_l2_to_l1_msgs: [Field; crate::abi::MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_log_preimages_length: Field,\n    block_header: BlockHeader,\n    prover_address: Field,\n}\n\nimpl PublicCircuitPublicInputs {\n    \n    pub fn hash(self) -> Field {\n        let mut inputs: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0);\n        inputs.push(self.call_context.hash());\n        inputs.push(self.args_hash);\n        inputs.push_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            inputs.push(self.contract_storage_update_requests[i].hash());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            inputs.push(self.contract_storage_read[i].hash());\n        }\n        inputs.push_array(self.public_call_stack);\n        inputs.push_array(self.new_commitments);\n        inputs.push_array(self.new_nullifiers);\n        inputs.push_array(self.new_l2_to_l1_msgs);\n\n        inputs.push_array(self.unencrypted_logs_hash);\n        inputs.push(self.unencrypted_log_preimages_length);\n        inputs.push_array(self.block_header.serialize());\n        inputs.push(self.prover_address);\n\n        pedersen_hash(inputs.storage, GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS)\n    }\n\n    pub fn serialize(self) -> [Field; PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());   \n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            fields.push_array(self.contract_storage_update_requests[i].serialize());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            fields.push_array(self.contract_storage_read[i].serialize());\n        }\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_header.serialize());\n        fields.push(self.prover_address);\n        fields.storage\n    }\n}\n\nstruct Hasher {\n    fields: [Field],\n}\n\nimpl Hasher {\n    pub fn new()-> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<N>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n\n    pub fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nglobal ARGS_HASH_CHUNK_LENGTH: u32 = 32;\nglobal ARGS_HASH_CHUNK_COUNT: u32 = 16;\n\npub fn hash_args<N>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        let mut chunks_hashes = [0; ARGS_HASH_CHUNK_COUNT];\n        for i in 0..ARGS_HASH_CHUNK_COUNT {\n            let mut chunk_hash = 0;\n            let start_chunk_index = i * ARGS_HASH_CHUNK_LENGTH;\n            if start_chunk_index < (args.len() as u32) {\n                let mut chunk_args = [0; ARGS_HASH_CHUNK_LENGTH];\n                for j in 0..ARGS_HASH_CHUNK_LENGTH {\n                    let item_index = i * ARGS_HASH_CHUNK_LENGTH + j;\n                    if item_index < (args.len() as u32) {\n                        chunk_args[j] = args[item_index];\n                    }\n                }\n                chunk_hash = pedersen_hash(chunk_args, GENERATOR_INDEX__FUNCTION_ARGS);\n            }\n            chunks_hashes[i] = chunk_hash;\n        }\n        pedersen_hash(chunks_hashes, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n",
                "path": "/aztec/abi.nr"
            },
            "95": {
                "source": "use dep::protocol_types::constants::{\n    EMPTY_NULLIFIED_COMMITMENT,\n    MAX_NEW_COMMITMENTS_PER_CALL,\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_READ_REQUESTS_PER_CALL,\n    MAX_PENDING_READ_REQUESTS_PER_CALL,\n    NUM_FIELDS_PER_SHA256,\n    RETURN_VALUES_LENGTH,\n};\n\nuse crate::abi;\n\nuse crate::abi::{\n    hash_args,\n    CallContext,\n    ContractDeploymentData,\n    BlockHeader,\n    FunctionData,\n    PrivateCircuitPublicInputs,\n    PublicCircuitPublicInputs,\n};\n\n// TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n// use dep::std::collections::vec::Vec;\n\n// l1 to l2 messaging\nuse crate::messaging::process_l1_to_l2_message;\nuse crate::private_call_stack_item::PrivateCallStackItem;\nuse crate::public_call_stack_item::PublicCallStackItem;\n\nuse crate::types::{\n    vec::BoundedVec,\n    point::Point,\n};\n\nuse crate::utils::arr_copy_slice;\n\nuse crate::oracle::{\n    arguments,\n    call_private_function::call_private_function_internal,\n    public_call::call_public_function_internal,\n    enqueue_public_function_call::enqueue_public_function_call_internal,\n    context::get_portal_address,\n    get_block_header::get_block_header,\n};\n\nuse dep::std::option::Option;\n\n// When finished, one can call .finish() to convert back to the abi\nstruct PrivateContext {\n    // docs:start:private-context\n    inputs: abi::PrivateContextInputs,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    read_requests: BoundedVec<Field, MAX_READ_REQUESTS_PER_CALL>,\n    pending_read_requests: BoundedVec<Field, MAX_PENDING_READ_REQUESTS_PER_CALL>,\n\n    new_commitments: BoundedVec<Field, MAX_NEW_COMMITMENTS_PER_CALL>,\n    new_nullifiers: BoundedVec<Field, MAX_NEW_NULLIFIERS_PER_CALL>,\n    nullified_commitments: BoundedVec<Field, MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    private_call_stack : BoundedVec<Field, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_stack : BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    new_l2_to_l1_msgs : BoundedVec<Field, MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    block_header: BlockHeader,\n\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    // encrypted_logs_preimages: Vec<Field>,\n    // unencrypted_logs_preimages: Vec<Field>,\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: abi::PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs: inputs,\n\n            args_hash: args_hash,\n            return_values: BoundedVec::new(0),\n\n            read_requests: BoundedVec::new(0),\n            pending_read_requests: BoundedVec::new(0),\n\n            new_commitments: BoundedVec::new(0),\n            new_nullifiers: BoundedVec::new(0),\n            nullified_commitments: BoundedVec::new(0),\n\n            block_header: inputs.block_header,\n\n            private_call_stack: BoundedVec::new(0),\n            public_call_stack: BoundedVec::new(0),\n            new_l2_to_l1_msgs: BoundedVec::new(0),\n\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    pub fn msg_sender(self) -> Field {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> Field {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    pub fn this_portal_address(self) -> Field {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.private_global_variables.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.private_global_variables.version\n    }\n\n    pub fn selector(self) -> Field {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn get_block_header(self, block_number: u32) -> BlockHeader {\n        get_block_header(block_number, self)\n    }\n\n    pub fn finish(self) -> abi::PrivateCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let encrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let encrypted_log_preimages_length = 0;\n        let unencrypted_log_preimages_length = 0;\n\n        let priv_circuit_pub_inputs = abi::PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            return_values: self.return_values.storage,\n            read_requests: self.read_requests.storage,\n            pending_read_requests: self.pending_read_requests.storage,\n            new_commitments: self.new_commitments.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            nullified_commitments: self.nullified_commitments.storage,\n            private_call_stack: self.private_call_stack.storage,\n            public_call_stack: self.public_call_stack.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            encrypted_logs_hash: encrypted_logs_hash,\n            unencrypted_logs_hash: unencrypted_logs_hash,\n            encrypted_log_preimages_length: encrypted_log_preimages_length,\n            unencrypted_log_preimages_length: unencrypted_log_preimages_length,\n            block_header: self.block_header,\n            contract_deployment_data: self.inputs.contract_deployment_data,\n            chain_id: self.inputs.private_global_variables.chain_id,\n            version: self.inputs.private_global_variables.version,\n        };\n        priv_circuit_pub_inputs\n    }\n\n    pub fn push_read_request(&mut self, read_request: Field) {\n        self.read_requests.push(read_request);\n    }\n\n    pub fn push_pending_read_request(&mut self, pending_read_request: Field) {\n        self.pending_read_requests.push(pending_read_request);\n    }\n\n    pub fn push_new_note_hash(&mut self, note_hash: Field) {\n        self.new_commitments.push(note_hash);\n    }\n\n    // We never push a zero nullified_commitment as zero is used to indicate the end\n    // of a field array in private kernel. This routine transparently replaces a\n    // zero value into the special placeholder: EMPTY_NULLIFIED_COMMITMENT.\n    pub fn push_new_nullifier(&mut self, nullifier: Field, nullified_commitment: Field) {\n        self.new_nullifiers.push(nullifier);\n        let mut non_zero_nullified = nullified_commitment;\n        if (non_zero_nullified == 0) {\n            non_zero_nullified = EMPTY_NULLIFIED_COMMITMENT;\n        }\n        self.nullified_commitments.push(non_zero_nullified);\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, content: Field) \n    // docs:end:context_message_portal\n    {\n        self.new_l2_to_l1_msgs.push(content);\n    }\n\n    // PrivateContextInputs must be temporarily passed in to prevent too many unknowns\n    // Note this returns self to get around an issue where mutable structs do not maintain mutations unless reassigned\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        msg_key: Field,\n        content: Field,\n        secret: Field\n    ) \n    // docs:end:context_consume_l1_to_l2_message\n    {\n        let nullifier = process_l1_to_l2_message(self.block_header.l1_to_l2_messages_tree_root, self.this_address(), self.this_portal_address(), self.chain_id(), self.version(), msg_key, content, secret);\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash)\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0)\n    }\n\n    pub fn call_private_function_with_packed_args(\n        &mut self,\n        contract_address: Field,\n        function_selector: Field,\n        args_hash: Field\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let fields = call_private_function_internal(\n            contract_address, \n            function_selector, \n            args_hash\n        );\n        let item = PrivateCallStackItem {\n            contract_address: fields[0],\n            function_data: FunctionData {\n                function_selector: fields[1],\n                is_internal: fields[2] as bool,\n                is_private: fields[3] as bool,\n                is_constructor: fields[4] as bool,\n            },\n            public_inputs: PrivateCircuitPublicInputs {\n                call_context: CallContext {\n                    msg_sender : fields[5],\n                    storage_contract_address : fields[6],\n                    portal_contract_address : fields[7],\n                    function_selector: fields[8], // practically same as fields[1]\n                    is_delegate_call : fields[9] as bool,\n                    is_static_call : fields[10] as bool,\n                    is_contract_deployment: fields[11] as bool,\n                },\n                // TODO handle the offsets as a variable incremented during extraction?\n                args_hash: fields[12],\n                return_values: arr_copy_slice(fields, [0; RETURN_VALUES_LENGTH], 13),\n                read_requests: arr_copy_slice(fields, [0; MAX_READ_REQUESTS_PER_CALL], 17),\n                pending_read_requests: arr_copy_slice(fields, [0; MAX_READ_REQUESTS_PER_CALL], 49),\n                new_commitments: arr_copy_slice(fields, [0; MAX_NEW_COMMITMENTS_PER_CALL], 81),\n                new_nullifiers: arr_copy_slice(fields, [0; MAX_NEW_NULLIFIERS_PER_CALL], 97),\n                nullified_commitments: arr_copy_slice(fields, [0; MAX_NEW_NULLIFIERS_PER_CALL], 113),\n                private_call_stack: arr_copy_slice(fields, [0; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL], 129),\n                public_call_stack: arr_copy_slice(fields, [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL], 133),\n                new_l2_to_l1_msgs: arr_copy_slice(fields, [0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL], 137),\n                encrypted_logs_hash: arr_copy_slice(fields, [0; NUM_FIELDS_PER_SHA256], 139),\n                unencrypted_logs_hash: arr_copy_slice(fields, [0; NUM_FIELDS_PER_SHA256], 141),\n                encrypted_log_preimages_length: fields[143],\n                unencrypted_log_preimages_length: fields[144],\n                block_header: BlockHeader {\n                    // Must match order in `private_circuit_public_inputs.hpp`\n                    note_hash_tree_root : fields[145],\n                    nullifier_tree_root : fields[146],\n                    contract_tree_root : fields[147],\n                    l1_to_l2_messages_tree_root : fields[148],\n                    archive_root : fields[149],\n                    public_data_tree_root: fields[150],\n                    global_variables_hash: fields[151],\n                },\n                contract_deployment_data: ContractDeploymentData {\n                    deployer_public_key: Point::new(fields[152], fields[153]),\n                    constructor_vk_hash : fields[154],\n                    function_tree_root : fields[155],\n                    contract_address_salt : fields[156],\n                    portal_contract_address : fields[157],\n                },\n                chain_id: fields[158],\n                version: fields[159],\n            },\n            is_execution_request: fields[160] as bool,\n        };\n        assert(contract_address == item.contract_address);\n        assert(function_selector == item.function_data.function_selector);\n\n        assert(args_hash == item.public_inputs.args_hash);\n\n        assert(item.is_execution_request == false);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        // We are issuing a regular call which is not delegate, static, or deployment. We also constrain\n        // the msg_sender in the nested call to be equal to our address, and the execution context address\n        // for the nested call to be equal to the address we actually called.\n        assert(item.public_inputs.call_context.is_delegate_call == false);\n        assert(item.public_inputs.call_context.is_static_call == false);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n        assert(item.public_inputs.call_context.msg_sender == self.inputs.call_context.storage_contract_address);\n        assert(item.public_inputs.call_context.storage_contract_address == contract_address);\n\n        self.private_call_stack.push(item.hash());\n\n        item.public_inputs.return_values\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field,\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: Field,\n        function_selector: Field,\n        args_hash: Field\n    ) {\n        let fields = enqueue_public_function_call_internal(\n            contract_address, \n            function_selector, \n            args_hash\n        );\n        let item = PublicCallStackItem {\n            contract_address: fields[0],\n            function_data: FunctionData {\n                function_selector: fields[1],\n                is_internal: fields[2] as bool,\n                is_private: fields[3] as bool,\n                is_constructor: fields[4] as bool,\n            },\n            public_inputs: PublicCircuitPublicInputs {\n                call_context: CallContext {\n                    msg_sender : fields[5],\n                    storage_contract_address : fields[6],\n                    portal_contract_address : fields[7],\n                    function_selector: fields[8], // practically same as fields[1]\n                    is_delegate_call : fields[9] as bool,\n                    is_static_call : fields[10] as bool,\n                    is_contract_deployment: fields[11] as bool,\n                },\n                args_hash: fields[12],\n                return_values: [0; RETURN_VALUES_LENGTH],\n                contract_storage_update_requests: [ContractStorageUpdateRequest::empty(); MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n                contract_storage_read: [ContractStorageRead::empty(); MAX_PUBLIC_DATA_READS_PER_CALL],\n                public_call_stack: [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n                new_commitments: [0; MAX_NEW_COMMITMENTS_PER_CALL],\n                new_nullifiers: [0; MAX_NEW_NULLIFIERS_PER_CALL],\n                new_l2_to_l1_msgs:[0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n                unencrypted_logs_hash:[0; NUM_FIELDS_PER_SHA256],\n                unencrypted_log_preimages_length: 0,\n                block_header: BlockHeader::empty(),\n                prover_address: 0,\n            },\n            is_execution_request: true,\n        };\n\n        assert(contract_address == item.contract_address);\n        assert(function_selector == item.function_data.function_selector);\n        \n        assert(args_hash == item.public_inputs.args_hash);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        // We are issuing a regular call which is not delegate, static, or deployment. We also constrain\n        // the msg_sender in the nested call to be equal to our address, and the execution context address\n        // for the nested call to be equal to the address we actually called.\n        assert(item.public_inputs.call_context.is_delegate_call == false);\n        assert(item.public_inputs.call_context.is_static_call == false);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n        assert(item.public_inputs.call_context.msg_sender == self.inputs.call_context.storage_contract_address);\n        assert(item.public_inputs.call_context.storage_contract_address == contract_address);\n\n        self.public_call_stack.push(item.hash());\n    }\n}\n\nuse crate::abi::{\n    ContractStorageRead,\n    ContractStorageUpdateRequest\n};\n\nstruct PublicContext {\n    inputs: abi::PublicContextInputs,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    contract_storage_update_requests: BoundedVec<ContractStorageUpdateRequest, MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL>,\n    contract_storage_read: BoundedVec<ContractStorageRead, MAX_PUBLIC_DATA_READS_PER_CALL>,\n    public_call_stack: BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n\n    new_commitments: BoundedVec<Field, MAX_NEW_COMMITMENTS_PER_CALL>,\n    new_nullifiers: BoundedVec<Field, crate::abi::MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    new_l2_to_l1_msgs: BoundedVec<Field, crate::abi::MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n\n    unencrypted_logs_hash: BoundedVec<Field, NUM_FIELDS_PER_SHA256>,\n    unencrypted_logs_preimages_length: Field,\n\n    block_header: BlockHeader,\n    prover_address: Field,\n}\n\nimpl PublicContext {\n    pub fn new(inputs: abi::PublicContextInputs, args_hash: Field) -> PublicContext {\n        let empty_storage_read = ContractStorageRead::empty();\n        let empty_storage_update = ContractStorageUpdateRequest::empty();\n        PublicContext {\n            inputs: inputs,\n\n            args_hash: args_hash,\n            return_values: BoundedVec::new(0),\n\n            contract_storage_update_requests: BoundedVec::new(empty_storage_update),\n            contract_storage_read: BoundedVec::new(empty_storage_read),\n            public_call_stack: BoundedVec::new(0),\n\n            new_commitments: BoundedVec::new(0),\n            new_nullifiers: BoundedVec::new(0),\n\n            new_l2_to_l1_msgs: BoundedVec::new(0),\n\n            \n            unencrypted_logs_hash: BoundedVec::new(0),\n            unencrypted_logs_preimages_length: 0,\n\n            block_header: inputs.block_header,\n            prover_address: 0,\n\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    pub fn msg_sender(self) -> Field {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> Field {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    pub fn this_portal_address(self) -> Field {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.public_global_variables.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.public_global_variables.version\n    }\n\n    pub fn selector(self) -> Field {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn block_number(self) -> Field {\n        self.inputs.public_global_variables.block_number\n    }\n\n    pub fn timestamp(self) -> Field {\n        self.inputs.public_global_variables.timestamp\n    }\n\n    pub fn finish(self) -> abi::PublicCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_log_preimages_length = 0;\n\n\n        // Compute the public call stack hashes\n        let pub_circuit_pub_inputs = abi::PublicCircuitPublicInputs {\n            call_context: self.inputs.call_context, // Done\n            args_hash: self.args_hash, // Done\n            contract_storage_update_requests: self.contract_storage_update_requests.storage,\n            contract_storage_read: self.contract_storage_read.storage,\n            return_values: self.return_values.storage,\n            new_commitments: self.new_commitments.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            public_call_stack: self.public_call_stack.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            unencrypted_logs_hash: unencrypted_logs_hash,\n            unencrypted_log_preimages_length: unencrypted_log_preimages_length,\n            block_header: self.inputs.block_header,\n            prover_address: self.prover_address,\n        };\n        pub_circuit_pub_inputs\n    }\n\n    pub fn push_new_note_hash(&mut self, note_hash: Field) {\n        self.new_commitments.push(note_hash);\n    }\n\n    pub fn push_new_nullifier(&mut self, nullifier: Field, _nullified_commitment: Field) {\n        self.new_nullifiers.push(nullifier);\n    }\n\n    pub fn message_portal(&mut self, content: Field) {\n        self.new_l2_to_l1_msgs.push(content);\n    }\n\n    // PrivateContextInputs must be temporarily passed in to prevent too many unknowns\n    // Note this returns self to get around an issue where mutable structs do not maintain mutations unless reassigned\n    pub fn consume_l1_to_l2_message(&mut self, msg_key: Field, content: Field, secret: Field) {\n        let this = (*self).this_address();\n        let nullifier = process_l1_to_l2_message(self.block_header.l1_to_l2_messages_tree_root, this, self.this_portal_address(), self.chain_id(), self.version(), msg_key, content, secret);\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT)\n    }\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        _self: Self,\n        contract_address: Field, \n        function_selector: Field,\n        args: [Field; ARGS_COUNT],\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = abi::hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        call_public_function_internal(\n            contract_address, \n            function_selector, \n            args_hash,\n        )\n    }\n\n    pub fn call_public_function_no_args(\n        _self: Self,\n        contract_address: Field, \n        function_selector: Field,\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        call_public_function_internal(\n            contract_address, \n            function_selector, \n            0,\n        )\n    }\n\n}\n\nstruct Context {\n    private: Option<&mut PrivateContext>,\n    public: Option<&mut PublicContext>,\n}\n\nimpl Context {\n    pub fn private(context: &mut PrivateContext) -> Context {\n        Context {\n            private: Option::some(context),\n            public: Option::none()\n        }\n    }\n\n    pub fn public(context: &mut PublicContext) -> Context {\n        Context {\n            public: Option::some(context),\n            private: Option::none()\n        }\n    }\n\n    pub fn none() -> Context {\n        Context {\n            public: Option::none(),\n            private: Option::none()\n        }\n    }\n}\n",
                "path": "/aztec/context.nr"
            },
            "96": {
                "source": "use dep::std::hash::{pedersen_hash_with_separator, sha256};\nuse dep::protocol_types::constants::{\n  GENERATOR_INDEX__SIGNATURE_PAYLOAD,\n  GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET,\n};\n\npub fn sha256_to_field<N>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = sha256(bytes_to_hash);\n\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (sha256_hashed[15 - i] as Field) * v;\n        low = low + (sha256_hashed[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    let hash_in_a_field = low + high * v;\n\n    hash_in_a_field\n}\n\npub fn compute_secret_hash(secret: Field) -> Field {\n    // TODO(#1205) This is probably not the right index to use\n    pedersen_hash([secret], GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET)\n}\n\npub fn pedersen_hash<N>(inputs: [Field; N], hash_index: u32) -> Field {\n    pedersen_hash_with_separator(inputs, hash_index)\n}\n",
                "path": "/aztec/hash.nr"
            },
            "118": {
                "source": "use dep::protocol_types::constants::CALL_PRIVATE_FUNCTION_RETURN_SIZE;\n\n#[oracle(callPrivateFunction)]\nfn call_private_function_oracle(_contract_address: Field, _function_selector: Field, _args_hash: Field) -> [Field; CALL_PRIVATE_FUNCTION_RETURN_SIZE] {}\n\nunconstrained pub fn call_private_function_internal(contract_address: Field, function_selector: Field, args_hash: Field) -> [Field; CALL_PRIVATE_FUNCTION_RETURN_SIZE] {\n    call_private_function_oracle(contract_address, function_selector, args_hash)\n}\n",
                "path": "/aztec/oracle/call_private_function.nr"
            },
            "128": {
                "source": "\n// contract_address + \n// args_hash +\n// crate::abi::FUNCTION_DATA_SIZE +\n// crate::abi::CALL_CONTEXT_SIZE +\n// = 2 + 4 + 7\nglobal ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE: Field = 13;\n\n#[oracle(enqueuePublicFunctionCall)]\nfn enqueue_public_function_call_oracle(_contract_address: Field, _function_selector: Field, _args_hash: Field) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE] {}\n\nunconstrained pub fn enqueue_public_function_call_internal(contract_address: Field, function_selector: Field, args_hash: Field) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE] {\n    enqueue_public_function_call_oracle(contract_address, function_selector, args_hash)\n}\n",
                "path": "/aztec/oracle/enqueue_public_function_call.nr"
            },
            "132": {
                "source": "#[oracle(storageRead)]\nfn storage_read_oracle<N>(_storage_slot: Field, _number_of_elements: Field) -> [Field; N] {}\n\nunconstrained fn storage_read_oracle_wrapper<N>(_storage_slot: Field) -> [Field; N] {\n    storage_read_oracle(_storage_slot, N)\n}\n\npub fn storage_read<T, N>(storage_slot: Field, deserialize: fn ([Field; N]) -> T) -> T {\n    let fields = storage_read_oracle_wrapper(storage_slot);\n    deserialize(fields)\n}\n\n#[oracle(storageWrite)]\nfn storage_write_oracle<N>(_storage_slot: Field, _values: [Field; N]) -> [Field; N] {}\n\n// TODO: Remove return value.\nunconstrained pub fn storage_write<N>(storage_slot: Field, fields: [Field; N]) {\n    let _hash = storage_write_oracle(storage_slot, fields);\n}\n",
                "path": "/aztec/oracle/storage.nr"
            },
            "134": {
                "source": "use crate::abi::FunctionData;\nuse crate::abi::PrivateCircuitPublicInputs;\nuse dep::protocol_types::constants::GENERATOR_INDEX__CALL_STACK_ITEM;\nuse crate::hash::pedersen_hash;\n\nstruct PrivateCallStackItem {\n    contract_address: Field,\n    function_data: FunctionData,\n    public_inputs: PrivateCircuitPublicInputs,\n    is_execution_request: bool,\n}\n\nimpl PrivateCallStackItem {\n    pub fn hash(self) -> Field {\n        pedersen_hash([\n            self.contract_address,\n            self.function_data.hash(),\n            self.public_inputs.hash(),\n        ], GENERATOR_INDEX__CALL_STACK_ITEM)\n    }\n}\n",
                "path": "/aztec/private_call_stack_item.nr"
            },
            "135": {
                "source": "use crate::{\n    abi,\n    hash::pedersen_hash,\n    abi::{\n        PublicCircuitPublicInputs,\n        FunctionData,\n    },\n};\nuse dep::protocol_types::constants::{\n    RETURN_VALUES_LENGTH,\n    GENERATOR_INDEX__CALL_STACK_ITEM,\n};\n\n// oracles\nuse crate::oracle::{\n    enqueue_public_function_call::enqueue_public_function_call_internal,\n};\n\nstruct PublicCallStackItem {\n    contract_address: Field,\n    function_data: FunctionData,\n    public_inputs: PublicCircuitPublicInputs,\n    is_execution_request: bool,\n}\n\nimpl PublicCallStackItem {\n    pub fn hash(self) -> Field {\n        pedersen_hash([\n            self.contract_address,\n            self.function_data.hash(),\n            self.public_inputs.hash(),\n        ], GENERATOR_INDEX__CALL_STACK_ITEM)\n    }\n}\n\n",
                "path": "/aztec/public_call_stack_item.nr"
            },
            "139": {
                "source": "use crate::context::{PrivateContext, PublicContext, Context};\nuse dep::std::option::Option;\nuse crate::hash::pedersen_hash;\n\n// docs:start:map\nstruct Map<V> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\nimpl<V> Map<V> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V,\n    ) -> Map<V> {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map {\n            context,\n            storage_slot,\n            state_var_constructor,\n        }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: Field) -> V {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = pedersen_hash([self.storage_slot, key],0);\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n",
                "path": "/aztec/state_vars/map.nr"
            },
            "140": {
                "source": "use crate::context::{Context};\nuse crate::oracle::storage::storage_read;\nuse crate::oracle::storage::storage_write;\nuse crate::types::type_serialization::TypeSerializationInterface;\nuse dep::std::option::Option;\n\n// docs:start:public_state_struct\nstruct PublicState<T, T_SERIALIZED_LEN> {\n    context: Context,\n    storage_slot: Field,\n    serialization_methods: TypeSerializationInterface<T, T_SERIALIZED_LEN>,\n}\n// docs:end:public_state_struct\n\nimpl<T, T_SERIALIZED_LEN> PublicState<T, T_SERIALIZED_LEN> {\n    // docs:start:public_state_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field,\n        serialization_methods: TypeSerializationInterface<T, T_SERIALIZED_LEN>,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicState {\n            context,\n            storage_slot,\n            serialization_methods,\n        }\n    }\n    // docs:end:public_state_struct_new\n\n    // docs:start:public_state_struct_read\n    pub fn read(self) -> T {\n        assert(self.context.private.is_none(), \"Public state writes only supported in public functions\");\n        storage_read(self.storage_slot, self.serialization_methods.deserialize)\n    }\n    // docs:end:public_state_struct_read\n\n    // docs:start:public_state_struct_write\n    pub fn write(self, value: T) {\n        assert(self.context.private.is_none(), \"Public state writes only supported in public functions\");\n        let serialize = self.serialization_methods.serialize;\n        let fields = serialize(value);\n        storage_write(self.storage_slot, fields);\n    }\n    // docs:end:public_state_struct_write\n}\n",
                "path": "/aztec/state_vars/public_state.nr"
            },
            "146": {
                "source": "struct BoundedVec<T, MaxLen> {\n    storage: [T; MaxLen],\n    len: Field,\n}\n\nimpl<T, MaxLen> BoundedVec<T, MaxLen> {\n    pub fn new(initial_value: T) -> Self {\n        BoundedVec { storage: [initial_value; MaxLen], len: 0 }\n    }\n\n    pub fn get(mut self: Self, index: Field) -> T {\n        assert(index as u64 < self.len as u64);\n        self.storage[index]\n    }\n\n    pub fn get_unchecked(mut self: Self, index: Field) -> T {\n        self.storage[index]\n    }\n\n    pub fn push(&mut self, elem: T) {\n        assert(self.len as u64 < MaxLen as u64);\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    pub fn push_array<Len>(&mut self, array: [T; Len]) {\n        let newLen = self.len + array.len();\n        assert(newLen as u64 <= MaxLen as u64);\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = newLen;\n    }\n\n    pub fn pop(&mut self) -> T {\n        assert(self.len as u64 > 0);\n\n        let elem = self.storage[self.len - 1];\n        self.len -= 1;\n        elem\n    }\n\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        let mut exceeded_len = false;\n        for i in 0..MaxLen {\n            exceeded_len |= i == self.len;\n            if (!exceeded_len) {\n                ret |= predicate(self.storage[i]);\n            }\n        }\n        ret\n    }\n}\n\n#[test]\nfn test_vec_push_pop() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    assert(vec.len == 0);\n    vec.push(2);\n    assert(vec.len == 1);\n    vec.push(4);\n    assert(vec.len == 2);\n    vec.push(6);\n    assert(vec.len == 3);\n    let x = vec.pop();\n    assert(x == 6);\n    assert(vec.len == 2);\n    assert(vec.get(0) == 2);\n    assert(vec.get(1) == 4);\n}\n\n#[test]\nfn test_vec_push_array() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    vec.push_array([2, 4]);\n    assert(vec.len == 2);\n    assert(vec.get(0) == 2);\n    assert(vec.get(1) == 4);\n}\n\n#[test(should_fail)]\nfn test_vec_get_out_of_bound() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    vec.push_array([2, 4]);\n    let _x = vec.get(2);\n}\n\n#[test(should_fail)]\nfn test_vec_get_not_declared() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    vec.push_array([2]);\n    let _x = vec.get(1);\n}\n\n#[test(should_fail)]\nfn test_vec_get_uninitialized() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    let _x = vec.get(0);\n}\n\n#[test(should_fail)]\nfn test_vec_push_overflow() {\n    let mut vec: BoundedVec<Field, 1> = BoundedVec::new(0);\n    vec.push(1);\n    vec.push(2);\n}\n\n#[test]\nfn test_vec_any() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    vec.push_array([2, 4, 6]);\n    assert(vec.any(|v| v == 2) == true);\n    assert(vec.any(|v| v == 4) == true);\n    assert(vec.any(|v| v == 6) == true);\n    assert(vec.any(|v| v == 3) == false);\n}\n\n#[test]\nfn test_vec_any_not_default() {\n    let default_value = 1;\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(default_value);\n    vec.push_array([2, 4]);\n    assert(vec.any(|v| v == default_value) == false);\n}\n",
                "path": "/aztec/types/vec.nr"
            },
            "148": {
                "source": "use crate::types::type_serialization::TypeSerializationInterface;\n\nglobal BOOL_SERIALIZED_LEN: Field = 1;\n\nfn deserializeBool(fields: [Field; BOOL_SERIALIZED_LEN]) -> bool {\n    fields[0] as bool\n}\n\nfn serializeBool(value: bool) -> [Field; BOOL_SERIALIZED_LEN] {\n    [value as Field]\n}\n\nglobal BoolSerializationMethods = TypeSerializationInterface {\n    deserialize: deserializeBool,\n    serialize: serializeBool,\n};\n",
                "path": "/aztec/types/type_serialization/bool_serialization.nr"
            },
            "153": {
                "source": "use dep::aztec::context::{PrivateContext, PublicContext, Context};\nuse dep::aztec::selector::compute_selector;\nuse dep::aztec::state_vars::{map::Map, public_state::PublicState};\nuse dep::aztec::types::type_serialization::bool_serialization::{BoolSerializationMethods,BOOL_SERIALIZED_LEN};\n\nuse crate::entrypoint::EntrypointPayload;\nuse crate::auth::IS_VALID_SELECTOR;\n\nstruct AccountActions {\n  context: Context,\n  is_valid_impl: fn(&mut PrivateContext, Field) -> bool,\n  approved_action: Map<PublicState<bool, BOOL_SERIALIZED_LEN>>,\n}\n\nimpl AccountActions {\n  pub fn init(context: Context, approved_action_storage_slot: Field, is_valid_impl: fn(&mut PrivateContext, Field) -> bool) -> Self {\n    AccountActions {\n      context: context,\n      is_valid_impl: is_valid_impl,\n      approved_action: Map::new(\n        context,\n        approved_action_storage_slot,\n        |context, slot| {\n          PublicState::new(context, slot, BoolSerializationMethods)\n        },\n      ),\n    }\n  }\n\n  pub fn private(context: &mut PrivateContext, approved_action_storage_slot: Field, is_valid_impl: fn(&mut PrivateContext, Field) -> bool) -> Self {\n    AccountActions::init(Context::private(context), approved_action_storage_slot, is_valid_impl)\n  }\n\n  pub fn public(context: &mut PublicContext, approved_action_storage_slot: Field, is_valid_impl: fn(&mut PrivateContext, Field) -> bool) -> Self {\n    AccountActions::init(Context::public(context), approved_action_storage_slot, is_valid_impl)\n  }\n  \n  // docs:start:entrypoint\n  pub fn entrypoint(self, payload: EntrypointPayload) {\n    let message_hash = payload.hash();\n    let valid_fn = self.is_valid_impl;\n    let private_context = self.context.private.unwrap();\n    assert(valid_fn(private_context, message_hash));\n    payload.execute_calls(private_context);\n  }\n  // docs:end:entrypoint\n\n  pub fn is_valid(self, message_hash: Field) -> Field {\n    let valid_fn = self.is_valid_impl;\n    if (valid_fn(self.context.private.unwrap(), message_hash)) {\n        IS_VALID_SELECTOR\n    } else {\n        0\n    }\n  }\n\n  pub fn is_valid_public(self, message_hash: Field) -> Field {\n    let value = self.approved_action.at(message_hash).read();\n    if (value){\n        IS_VALID_SELECTOR\n    } else {\n        0\n    }\n  }\n\n  pub fn internal_set_is_valid_storage(self, message_hash: Field, value: bool) {\n    self.approved_action.at(message_hash).write(value);\n  }\n}\n",
                "path": "/authwit/account.nr"
            },
            "154": {
                "source": "#[oracle(getAuthWitness)]\nfn get_auth_witness_oracle<N>(_message_hash: Field) -> [Field; N] {}\n\nunconstrained pub fn get_auth_witness<N>(message_hash: Field) -> [Field; N] {\n    get_auth_witness_oracle(message_hash)\n}\n",
                "path": "/authwit/auth_witness.nr"
            },
            "156": {
                "source": "use dep::aztec::abi;\nuse dep::aztec::types::vec::BoundedVec;\nuse dep::aztec::hash::pedersen_hash;\nuse dep::aztec::context::PrivateContext;\nuse dep::aztec::private_call_stack_item::PrivateCallStackItem;\nuse dep::aztec::public_call_stack_item::PublicCallStackItem;\nuse dep::protocol_types::constants::GENERATOR_INDEX__SIGNATURE_PAYLOAD;\n\nglobal ACCOUNT_MAX_CALLS: Field = 4;\n// 1 (ARGS_HASH) + 1 (FUNCTION_SELECTOR) + 1 (TARGET_ADDRESS) + 1 (IS_PUBLIC)\nglobal FUNCTION_CALL_SIZE: Field = 4;\n// 3 * 32 + 1\nglobal FUNCTION_CALL_SIZE_IN_BYTES: Field = 97;\n\nstruct FunctionCall {\n  args_hash: Field,\n  function_selector: Field,\n  target_address: Field,\n  is_public: bool,\n}\n\nimpl FunctionCall {\n  fn serialize(self) -> [Field; FUNCTION_CALL_SIZE] {\n    [self.args_hash, self.function_selector, self.target_address, self.is_public as Field]\n  }\n\n  fn to_be_bytes(self) -> [u8; FUNCTION_CALL_SIZE_IN_BYTES] {\n    let mut bytes: [u8; FUNCTION_CALL_SIZE_IN_BYTES] = [0; FUNCTION_CALL_SIZE_IN_BYTES];\n    let args_hash_bytes = self.args_hash.to_be_bytes(32);\n    for i in 0..32 { bytes[i] = args_hash_bytes[i]; }\n    let function_selector_bytes = self.function_selector.to_be_bytes(32);\n    for i in 0..32 { bytes[i + 32] = function_selector_bytes[i]; }\n    let target_address_bytes = self.target_address.to_be_bytes(32);\n    for i in 0..32 { bytes[i + 64] = target_address_bytes[i]; }\n    bytes[96] = self.is_public as u8;\n    bytes\n  }\n}\n\n// FUNCTION_CALL_SIZE * ACCOUNT_MAX_CALLS + 1\nglobal ENTRYPOINT_PAYLOAD_SIZE: Field = 17;\n// FUNCTION_CALL_SIZE_IN_BYTES * ACCOUNT_MAX_CALLS + 32\nglobal ENTRYPOINT_PAYLOAD_SIZE_IN_BYTES: Field = 420;\n\n// docs:start:entrypoint-struct\nstruct EntrypointPayload {\n  function_calls: [FunctionCall; ACCOUNT_MAX_CALLS],\n  nonce: Field,\n}\n// docs:end:entrypoint-struct\n\nimpl EntrypointPayload {\n  fn hash(self) -> Field {\n    pedersen_hash(\n      self.serialize(), \n      GENERATOR_INDEX__SIGNATURE_PAYLOAD\n    )\n  }\n\n  // Serializes the entrypoint struct\n  fn serialize(self) -> [Field; ENTRYPOINT_PAYLOAD_SIZE] {\n    let mut fields: BoundedVec<Field, ENTRYPOINT_PAYLOAD_SIZE> = BoundedVec::new(0); \n    for call in self.function_calls {\n      fields.push_array(call.serialize());\n    }\n    fields.push(self.nonce);\n    fields.storage\n  }\n\n  // Serializes the payload as an array of bytes. Useful for hashing with sha256.\n  fn to_be_bytes(self) -> [u8; ENTRYPOINT_PAYLOAD_SIZE_IN_BYTES] {\n    let mut bytes: [u8; ENTRYPOINT_PAYLOAD_SIZE_IN_BYTES] = [0; ENTRYPOINT_PAYLOAD_SIZE_IN_BYTES];\n\n    for i in 0..ACCOUNT_MAX_CALLS {\n      let item_bytes = self.function_calls[i].to_be_bytes();\n      for j in 0..FUNCTION_CALL_SIZE_IN_BYTES { \n        bytes[i * FUNCTION_CALL_SIZE_IN_BYTES + j] = item_bytes[j];\n      }\n    }\n\n    let nonce_bytes = self.nonce.to_be_bytes(32);\n    let nonce_offset = FUNCTION_CALL_SIZE_IN_BYTES * ACCOUNT_MAX_CALLS;\n    for j in 0..32 {\n      bytes[nonce_offset + j] = nonce_bytes[j];\n    }\n    \n    bytes\n  }\n\n  // Executes all private and public calls \n  // docs:start:entrypoint-execute-calls\n  fn execute_calls(self, context: &mut PrivateContext) {\n    for call in self.function_calls {\n      if call.target_address != 0 {\n        if call.is_public {\n          context.call_public_function_with_packed_args(\n            call.target_address, call.function_selector, call.args_hash\n          );\n        } else {\n          let _result = context.call_private_function_with_packed_args(\n            call.target_address, call.function_selector, call.args_hash\n          );\n        }\n      }\n    }\n  }\n  // docs:end:entrypoint-execute-calls\n}\n",
                "path": "/authwit/entrypoint.nr"
            }
        }
    }
}
