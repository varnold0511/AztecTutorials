{
    "name": "Parent",
    "functions": [
        {
            "name": "constructor",
            "functionType": "secret",
            "isInternal": false,
            "parameters": [],
            "returnTypes": [],
            "bytecode": "H4sIAAAAAAAA/+XdZZOTZxSH8V0gSd27uLu1ySbZJFVK3alSL6Rk6y1V6qXU3XB390/IuWbCwAt4xb0z3HNl5j9590x+m+yj5z7nZE9Pz7aeM6/e7vuC7nv5wl6VQmyjcI7tVssDtVqn0d+pVCtLy/2tdrNertXbA81Ks1Jv1pf1N6vVTrPWbLTarUa5ValVO5XBeqs62N1wId1nLA+FuxjbKA6Bu3iRu0uxjdIQuEuJ3ef7vV/o5xw5RJ9zWOLvqTeheVQm5mEJzaMzMQ9PaB6TiXlEQvPYTMyFhOZxmZiLCc3jMzGXEponZGIemdA8UWieJDRPFpqnCM1TheZpQvN0oXmG0DxTaJ4lNM8WmucIzXOF5nlC83yh+Sah+WahuSw0V4TmfqG5KjTXhOa60DwgNDeE5qbQ3BKabxGabxWabxOabxea7xCa7xSaFwjNdwnNC4Xmu4Xme4Tme4Xm+4Tm+4XmB4TmB4Xmh4Tmh4XmR4TmR4Xmx4Tmx4XmRULzE0Lzk0LzU0Lz00LzM0Lzs0LzYqH5OaH5eaH5BaH5RaH5JaH5ZaH5FaH5VaF5idC8VGhuC82vCc3LhOaO0DwoNL8uNL8hNL8pNL8lNL8tNL8jNL8rNL8nNL8vNC8Xmj8Qmj8Umj8Smj8Wmj8Rmj8VmlcIzZ8JzZ8LzV8IzV8KzV8JzV8Lzd8Izd8KzSuF5u+E5lVC8/dC8w9C849C809C889C8y9C869C829C8+9C8x9C859C819C899C8z9C879C839C8/9C82qheY3QvFZoXic0rxeaNwjNG4XmTULzZqF5i9C8VWjeJjRvF5p3CM07heZdmZgvSWjenYn50oTmPZmYL0to3puJ+fKE5n2ZmK9IaN6fifnKhOYDmZivSmg+mIn56oTmQ5mYr0loPpyJ+dqE5iOZmK9LaD6aifn6hOZjmZhvSGg+non5xoTmE5mY+xKaTyY093W309s1D4+MiBQixUgpwjUh10hcM3AOzTkl51icc3AM5pjEPpp9Fv/D/Kb5jvvO+ntu6r6PioyOjImMjYyLjI9MiEyMTIpMjkyJTI1Mi0yPzIjMjMyKzI7MicyNzIvMjzDjnpnvfInMBGdGNjOjmaHMTGFm7DYizGBlJikzOplZyQxHZhoy4+/0zDtmoi2MMDOLGVLMVGLGEDN3mEHDTBZmlDCzgxkWzHRgxgE9/xdF6AlPj3R6htNDm57S9FheHKEHLz1p6dFKz1J6eNLTkh6P9DxcEqEnXjtCzzR6iNFTix5T9FyiBxE9eehRQ88WepjQ04MeF/R8WB6hJwBr5Fkzzhpq1hSzxnZFhDWYrElkjR5r1ljDxZom1viw5mVlhDURqyLUzFNDTk01NcbU3FKDSk0mNYrU7FHDRk0XNU7U/FADQ00INRLUDPAMnWfKPGPlmSPP4HgmxTMafhPcw+eeNvd4uee5PcI9Me4Rcc+EewhcU3ONyTUX1yCck3OOyjkb5zAc0znGsc9nH8g+gf+R069TXMw0LzyaAAA=",
            "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
        },
        {
            "name": "enqueueCallsToChildWithNestedFirst",
            "functionType": "secret",
            "isInternal": false,
            "parameters": [
                {
                    "name": "targetContract",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                },
                {
                    "name": "targetSelector",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                }
            ],
            "returnTypes": [],
            "bytecode": "H4sIAAAAAAAA/+1dBXhUxxaeTQgQXEtwd9uNkA3u7u40SoHghLq7Uxfq7u5KaWmpUaNGjbY8Kq9OvX3wznn578dNCH2bL2e2Oz17v+///pAMs/Ofmbnz7+7cMzsCxiwmeJf340BwsGJXKInqSCqj3rRgr/T0/MzU/FBaKDuYmpUTzgimZ+T0CofCoYxwRl5qOC0tP5wezszKycoMZoXS0/JDBRlZaQWoOEmujUEbuitTHZUt6K4c47qrUB1VLOiuIqx7f+O9ou1sLNjOAGLZCvU1IuwmpIAbK+NuhCboM45LHcSlSQy0q6kpeUmPq2ZGbFxl/79x1exvjuff0X/Nzb7jqnkMtKsFIdHsHU8B/Nt/Sd/DGxn5e610G1OMnfVAsI3ZPltlWhJq4+dkQkKp16zs61eh1/+fBxHWlFaWpwlW8PLHI8EXIy8eHifh98bH/v9TC3GsJBzH0nNuoO/f3mtVJdTEzyuyc5cMWrWwaGn+sjWr/YPAK+yfzAmlRCZDqL+8P0De3/wmq0TLJBT760wQrruFkVsVW8q1K5ho9r2z+jtLSn+CsXfnkmhnOCMznBcqyLcZgxZG1iV7bbwaP7citCa0IbQltCO0J3QgdCR0InQmdCF0NcUrbXdCD0JPbhOBJ0Eqj1FCOiGD0IuQSQgTsgi9CX0IfQn9CP0JA6BtEGEwYQhhKGEYYThhBGEkYRRhNGEMYSxhHGE8YQJhImESYTJhCmEqYRphOmEGYSZhFmE2YQ5hLmEeYT5hAeFAQjYhh5BLyCNwhxYQFhIOIiwiLCYsIRQSlhKWEZYTVhBWElYRVhPWEIoIawkHEw4hHEo4jHA44QjCkYSjCEcTjiEcSziOcDzhBMKJhJMIJxNOIZxKOI1wOuEMwpmEswhnE9YRziGcSziPcD7hAsKFhIsIFxMuIVxKWE+4jHA54QrClYSrTPFYuIZwLeE6wvWEGwg3Em4i3Ey4hXAr4TbC7YQ7CHcS7iLcTbiHcC/hPsL9hAcIDxIeIjxMeITwKOExwuOEJwhPEjYQGpriy7+SGd/vSi8G/hu/d8+1sIIHba/giWXorlSG7iQfV/f93ZSKgbeqVxFtc3bIH29Tqi9Kx9z4Xt/7ZEeuLcEQu4f6qCs3u7Bw4qpFa7PX5A8vWpa7ZtHyZf5bnNdk71aXWEbISv/eH/6q+DnJ97tknzTvd15dVX2/83etFxJrHiTR7OuSjZFfi9qY2F6PcaX6Y/EUeKPZ25F+M8kdvqeMmAV8PyegTMJflAnsp579zVNrg8ETx8L/U6oxUq+xEQGV/uhmo7EzwKTfLrYR0JxfUHw95UD8pN/YSGp+2ldXKJyWmpqZxuXCecFQel5uajg1NS8nPZgbzM5Nzc9KD2UVpKemp+Xm5eZQndmhgmBBdm5WQbi4Xf6Pj/yX9Px5Wq6uoL+9z5i9K1hZK5wFQ1PiDXBZ8bN6s7PVOc9YqHeTkRv0tnRvku+jMtsqcaPbZKHeZ43sxORJ+Cw4Wi6trbGzCAiPixIu7TnwZqPMpbFwWy5tMwIqPUk2GzsDTNqltRXQ7Lm05xyIn7RLk9T8vHHPpT1vZBcD73rBxF2aSOe8YKHeF01suzTW/aJ8H1lxaZvRVul6XzKyE5Mn4Usmui6tnbGzCAiPixIu7WXwFqPMpbFwWy5tCwIqPUm2GDsDTNqltRPQ7Lm0lx2In7RLk9T8inHPpb1iZBcD73rVxF2aSOe8aqHe10xsuzTW/Zp8H1lxaVvQVul6XzeyE5Mn4esmui6ts7GzCAiPixIu7Q3wVqPMpbFwWy5tKwIqPUm2GjsDTNqldRbQ7Lm0NxyIn7RLk9T8pnHPpb1pZBcD73rLxF2aSOe8ZaHet01suzTW/bZ8H1lxaVvRVul63zGyE5Mn4Tsmui6ti7GzCAiPixIu7V3wNqPMpbFwWy5tGwIqPUm2GTsDTNqldRHQ7Lm0dx2In7RLk9T8nnHPpb1nZBcD73rfxF2aSOe8b6HeD0xsuzTW/YF8H1lxadvQVul6PzSyE5Mn4Ycmui6tq7GzCAiPixIu7SPwdqPMpbFwWy5tOwIqPUm2GzsDTNqldRXQ7Lm0jxyIn7RLk9T8sXHPpX1sZBcD7/rExF2aSOd8YqHeT01suzTW/al8H1lxadvRVul6dxjZicmTcIeJrkvbYOwsAsLjooRL+xd4p1Hm0li4LZe2EwGVniQ7jZ0BJu3SNgho9lzavxyIn7RLk9T8mXHPpX1mZBcD7/rcxF2aSOd8bqHeL0xsuzTW/YV8H1lxaTvRVul6vzSyE5Mn4ZdmX3cmfUNNEIxBK2NnEZHuq9YC7SwrS5d030hmausWpb4JVuwK7XSknVsdaec2R9q53VI7S8/Jis6jBEHN7RVq7mDcWCP+beTWCG4bp+ryDDbXzfmFN4I3g7eAqxG+giYvn7vXr7t93BHcyfx1HuO6hK999Xlpxh7C3x8GPwJ+FPwY+HFwDcI3vnrWoZ6v8fcW4O7gHuCe4CA4BE4Fp4HTwRngXuBMcBicBe4N7gPuC+4H7g8eAB4IHgQeDB4CHgoeBh4OHgEeCR4FHg0eAx4LHgceD54AngieBJ4MngKeCp4Gng6eAZ4JngWeDZ4DngueB54PXgA+EJwNzgHngvPA+eAC8ELwQeBF4MXgJeBC8FLwMvBy8ArwSvAq8GrwGnAReC34YPAh4EPBh4EPBx8BPhJ8FPho8DHgY8HHgY8HnwA+EXwS+GTwKeBTwaeBTwefAT4TfBb4bPA68Dngc8Hngc8HXwC+EHwR+GLwJeBLwevBl4EvB18BvhJ8Ffhq8DXga8HXga8H3wC+EXwT+GbwLeBbwbeBbwffAb4TfBf4bvA94HvB94HvBz8AfhD8DfgJ8JNg3qD2rdl7X/I+tPDuk1+BvwXXI3xnSl7S68f3RmqdC6V7ulqhvu+hw7U8/5J5+X/w9XcdxOWHGGjXLrPveQFlfTDI10BwsEJX8fjwrh/NPyLPfSie5764XvE89/6vl/7Ree53Gbm7+Y9y7Ypannsbp4jYaGeKI+3cJdhO/8T0ZvNPhJ8JvxB+JfxG+J3wB+FPU/yVLK8ye/AfA4F4jvPYznEezIu1HOeNUVf+spVF+UX5E4tyChflelnOh2QXFvoHptdwb4DGM51X8HV+MXbudMLxKLELJgFBSAwo2wXDwm3tguFgMqTfdHKdQm20ugvmFwHN3i6YhEDsx0/8S1tBzZUC7u2CqSTYT/72JgXiu2BEOicpIF9vZcFBb0t35YB4H1nZBZOItkrXW0V4YvIk5DoTTPT2Kv9q7CwCwuOihEuriiAka3NpVS26NA5msoVJkuyIS/tVQLPn0qoGYj9+0i5NUnM1B11aNUsurXrcpcl0TnULLq1GjLs01l3DEZeWjLZK11vTgkurGWWX9puxswgIj4sSLq0WglBbm0urZdGlcTBrW5gktR1xab8JaPZcWq1A7MdP2qVJaq7joEurY8ml1Y27NJnOqWvBpdWLcZfGuus54tJqo63S9da34NLqR9ml7TZ2FgHhcVHCpTVAEBpqc2kNLLo0DmZDC5OkoSMubbeAZs+lNQjEfvykXZqk5gMcdGkHWHJpjeIuTaZzGllwaSkx7tJYd4ojLq0h2ipdb2MLLq1xlF3aHmNnERAeFyVcWhMEoak2l9bEokvjYDa1MEmaOuLS9gho9lxak0Dsx0/apUlqbuagS2tmyaU1j7s0mc5pbsGltYhxl8a6Wzji0pqirdL1trTg0lpG2aUZS4uA8Lgo4dJaIQittbm0VhZdGgeztYVJ0toRl2YEbrieS2sViP34Sbs0Sc1tHHRpbSy5tLZxlybTOW0tuLR2Me7SWHc7R1xaa7RVut72Flxa+4D9HJqNBGPwk3FjEUkR1PyzI5olM0oELJkF6ftSQ0fa2dSRdkbLJMZSzsffjRuaBTOmhP4wsmuZP38k33t5QwE/xcecDK4N5vyRHbA+l5U/shH4T7CXWeSv8kd29NXnGdr9led33Z3KWb5zOct3KWf5ruUs362c5buXs3yPcpbvWc7ywXKWD5WzfGo5y6eVs3x6OctnlLN8r3KWz/SVT9hPeU5gEo6wXFaE5XpHWK5PhOX6RliuX4Tl+kdYbkCE5QZGWG5QhOUGR1huSITlhkZYbliE5YZHWG6Er9wMlOuI+/0uE1l+wk4o3xncBdwV3A3cHdwD3BMcBIfAqeA0cDo4A9wLnAkOg7PAvcF9wH3B/cD9wQPAA8GDwIPBQ8BDwcPAw8EjApHFJ87RYT6qcmQZ91/Pl3RAf40Ec77WUZ4RxyX93i5g5Hzk6Ch5/GDFLtGzP8Y4ojlRUPNYRzRXEtQ8zhHNSYKaxzuiubKg5gmOaK4iqHmiI5qbCmqe5IjmxoKaJyvUPEWh5qkKNU9TqHm6Qs0zFGqeqVDzLIWaZyvUPEeh5rkKNc9TqHm+Qs0LFGo+UKHmbIWacxRqzlWoOU+h5nyFmgsUal6oUPNBCjUvUqh5sULNSxRqLlSoealCzcsUal6uUPMKhZpXKtS8SqHm1Qo1r1GouUih5rUKNR+sUPMhCjUfqlDzYQo1H65Q8xEKNR+pUPNRCjUfrVDzMQo1H6tQ83EKNR+vUPMJCjWfqFDzSQo1n6xQ8ykKNZ+qUPNpCjWfrlDzGQo1n6lQ81kKNZ+tUPM6hZrPUaj5XIWaz1Oo+XyFmi9QqPlChZovUqj5YoWaL1Go+VKFmtcr1HyZQs2XK9R8hULNVyrUfJVCzVcr1HyNQs3XKtR8nULN1yvUfINCzTcq1HyTQs03K9R8i0LNtyrUfJtCzbcr1HyHQs13KtR8l0LNdyvUfI9Czfcq1HyfQs33K9T8gELNDyrU/JBCzQ8r1PyIQs2PKtT8mELNjyvU/IRCzU8q1LxBoeanFGreqFDz0wo1P6NQ8yZHNH8nqPlZhf38nELNmxVqft4RzaMCcppfUNjPLyrU/JJCzS8r1LxFoeZXFGp+VaHm1xRqfl2h5jcUat6qUPObjmiuKqj5LUc0JwtqftsRzdUENb/jiObqgprfdURzDUHN2xzRXFNQ83uOaK4lqPl9RzTXFtT8gSOa6whq/tARzXUFNX/kiOZ6gpq3O6K5vqDmjx3R3EBQ8yeOaG4oqPlTRzQfIKh5h6DmFNQTgOZEQiVCEqEyoQqB3xPyeyR+z8Aemj0leyz2HLwG85rE92i+Z/Ec5jHNfcyaGxFSfHFdDx5NLziGMJYwjjCeMIEwkTCJMJkwhTCVMI0wnTCDMJMwizCbMIcwlzCPMJ+wgMBn3fPZ73wWOp8Nzmdl89nRfJYyny3MZ+3y2bN8FiufTcpndfLZlXyWI59tyGf98dl3fBYcn43GZ4Xx2Vl8lhSfrcRnDfHZO3wWDZ/NwmeV8NkdfJYFn+3AZx1w7n/Ohc+54TlXOucO51zanFuacy1z7mHOxcu5aTlXK+cu5VyenNuScz1y7kPOBci58ThXHOdO41xinFuLc01x7iXORcS5eThXDedu4VwmnNuDc11w7gfOhcC5AfhZeX52nJ+l5meL+VlbfvaUn8XkZxP5WT1+do2f5eJnm/hZH372hZ8F4Wcj+FkB3jvPe8l5bzXvNea9t7wXlfdm8l5F3rvHe9l4bxfvdeK9P7wXhveG8F4J3jvA36Xzd8v8XSt/98jfxfF3U/xdDX93wZ/l82fb/Fkvf/bJnwXyZ2P8WRF/dsKfJfB7a36vye+9+L0Ie3P2quzd2Mvw2s5rHd/7+V7I9waeK971X4jtcfvUUQEA",
            "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
        },
        {
            "name": "enqueueCallsToChildWithNestedLast",
            "functionType": "secret",
            "isInternal": false,
            "parameters": [
                {
                    "name": "targetContract",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                },
                {
                    "name": "targetSelector",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                }
            ],
            "returnTypes": [],
            "bytecode": "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",
            "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
        },
        {
            "name": "enqueueCallsToPubEntryPoint",
            "functionType": "secret",
            "isInternal": false,
            "parameters": [
                {
                    "name": "targetContract",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                },
                {
                    "name": "targetSelector",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                },
                {
                    "name": "targetValue",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                }
            ],
            "returnTypes": [],
            "bytecode": "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",
            "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
        },
        {
            "name": "enqueueCallToChild",
            "functionType": "secret",
            "isInternal": false,
            "parameters": [
                {
                    "name": "targetContract",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                },
                {
                    "name": "targetSelector",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                },
                {
                    "name": "targetValue",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                }
            ],
            "returnTypes": [],
            "bytecode": "H4sIAAAAAAAA/+2dB3RcxRWG7660Kja2gYTYMmCMbYptMO/trqxd0WQMohkw1XSQVrvGWJar6L1DGukJpBDSO+kJaYT0TnpPCOm9d9r8x3cOs+sV5+3RnT075+qdc8+VV9ej+aa8+d/b9+7MShHNNGYP++MA+2hyR5wxZWTqlJuLlufz5b5sOc7FQ1G2OFzojfK9w8sLcSHuLfSOZAu5XLmQL/QVh4t9UTHO58pxpbeYq3DBGbk6Rj64O0wZHR64O1qcu9OU0emBu1OYe6LxPtl6zhWsZ4rbcj6XN9vY48bmsO9hP1eJP8DY7txnaJeduV12b4F67eHUaz7XS1v/1GuXPev0154tUK95xtroqfmfcn4m5zMcA+yjyR1xD8meG+yxl7FZ/HO3sXQNRwezSrJ0OOVLlinc5pHbHmmnjWx7WJ/hz8nx7v+Zye3YLsyccupgy7X/tn+ry9gM/nnTUGn9ii1rxzeUx7ZtdQeBDXYHdLrms24GdePdBrK/cxfwqppJELtlpoXLnkdyK/lecvWK2qi6l6mmY6T4Z1NzVFI0uSOeE0g955H8GRvezub5xvY2tsDYQmOLjO1jbF9j+xnb39hiY0uMLaXtK9du/H/dsxg5n9WeCNxJb+ebh7N35Pvs3VaHu70Od8bx053fU00b2DN6p2ydR9z2ppq+qG1zcv6+vWIUrEuMlaOHyyqPbR4vj5dXjw+PrisNjo+Vtq3bOLZyaHTUHZi24naAttVpuNrP3U7o4p8zzmfdDqD9zJbV5XzmdrBtGG+rUBvtqJOI5M8gC8jPmU64PbJuWxzIfhk91ZGunECHP1GnzVwNneaY9NPEpCYoZ6LZ6m0wWDiAP1ZTGam/sYwbVPqGwzLyM8CkLxgWCDCXK9uPAwNoP2lpK8l8kFNWXMhls305xBVGojg/UsoWstmR4XxUioZK2XIxHxcr+Ww+VxopDZsyh+JKVBkqFSuF7fVyL6LdQ3r+HCRXVtXFMzqtvabP3PHvQdZUXQLVaz+vJztfnRN5KDcmuUHvizuW76O6dZU40cUeys2S7MTEJMyyb5ZKW0h+FgHhcVGl0nLs86RMpQHcl0rLc4NKT5I8+Rlg0iptoQCzVWm5ANpPWqVJMvdSeCqtl2QXA3sspymVJtI5yz2U20etrdLA3SffR15UWp7rKl1ugWQnJiZhgZqr0haRn0VAeFxUqbQi+35SptIA7kul9XODSk+SfvIzwKRV2iIBZqvSigG0n7RKk2Q+mMJTaQeT7GJgj0NoSqWJdM4hHso9lFpbpYH7UPk+8qLS+rmu0uUeRrITE5PwMGquSltMfhYB4XFRpdIOd8pWpdIA7kulDXBZ0pNkgPwMMGmVtliA2aq0wwNoP2mVJsm8gsJTaStIdjGwxxE0pdJEOucID+WupNZWaeBeKd9HXlTaANdVutwjSXZiYhIeSc1VaUvIzyIgPC6qVNpR7AdJmUoDuC+VNsgNKj1JBsnPAJNWaUsEmK1KOyqA9pNWaZLMR1N4Ku1okl0M7HEMTak0kc45xkO5x1JrqzRwHyvfR15U2iDXVbrc40h2YmISHkfNVWlLyc8iIDwuqlTa8exXkTKVBnBfKm0VN6j0JFlFfgaYtEpbKsBsVdrxAbSftEqTZD6BwlNpJ5DsYmCPE2lKpYl0zokeyj2JWlulgfsk+T7yotJWcV2ly11NshMTk3A17ajOpE+oswXbYD6FsYjMEWTeOxBmyYwSB3hi9vXFbavXczCQejZLJE52fKYFmfcJhFkwY0q8L8muZUiAYMWlzfm2jH2efT/7acZO5rFrc/DZ9sLvbe64/djvT0+fI2sXY6c45VlBO1E8rrpPbTD+tAbjT28w/owG49c0GH9mg/FnNRh/doPx5zQYf26D8ec1GH9+g/EXNBh/YYPxQw3GDzvx6QnikcCklDBuJGFcOWFcJWHc2oRxFyWMW5cw7uKEcesTxo0mjNuQMG4sYdzGhHGbEsZtThi3xYlbw3Gn8O/nUbJch6eyP4396ezPYL+G/Znsz2J/Nvtz2J/L/jz257O/gP2F7IfYD7MvsR9hX2ZfYb+W/UXs17G/mP169qPsN7AfY7+R/Sb2m9lvSdg+U745Hjdwt9KO51+rS05mv5X9rsa2UfUhfW2XIjkdOU7N0bvR5I44Lch8SSDMbYLMlwbC3C7IfFkgzBlB5ssDYe4QZL4iEOZOQeYrA2HeQ5D5qkCY5woyX62Q+RqFzNcqZL5OIfP1CplvUMh8o0LmmxQy36yQ+RaFzLcqZL5NIfPtCpnvUMj8bIXMz1HI/FyFzM9TyPx8hcx3KmR+gULmFypkfpFC5hcrZH6JQuaXKmR+mULmlytkfoVC5rsUMt+tkPmVCplfpZD51QqZX6OQ+R6FzK9VyHyvQubXKWR+vULmNyhkfqNC5jcpZH6zQua3KGR+q0LmtylkfrtC5ncoZH6nQuZ3KWS+TyHzuxUyv0ch83sVMr9PIfP7FTJ/QCHzBxUyf0gh84cVMt+vkPkjCpk/qpD5YwqZP66Q+RMKmR9QyPxJhcwPKmT+lELmTytk/oxC5s8qZP6cQubPK2T+gkLmLypk/pJC5i8rZP6KQuavKmT+mkLmhxQyf10h8zcUMn9TIfO3FDJ/WyHzdxQyf1ch8/cUMn9fIfMPFDL/UCHzjxQy/1gh808UMv9UIfPDCpl/ppD5EYXMP1fI/AuFzL9UyPwrhcy/Vsj8G4XMv1XI/DuFzL9XyPwHhcx/VMj8J4XMf1bI/BeFzH9VyPw3hcx/V8j8j0CYtwky/1NhP/9LIfO/FTL/RyHzfxUy/08h8/8VMj+qkPkxhcyPK2R+QiEzpcJg7hJkTgXC3C3InA6EeZogc1sgzNMFmdsDYd5JkDkTCPMMQeaOQJhnCjJ3BsI8S5C5KxDmnQWZuwNh3kWQeVogzLsKMk8PhPkZgsw7BcL8TEHmGYEw7ybIPDMQ5mcJMs8SZO7hclLM3Gas3VjGWIexTmO4JsQ1Eq4ZoKGhKaGxoDmwBmNNwjka5yzMYYxp9DGYZxubY6zHadu72Y8bu8TYpcYuM3a5sSuMXWnsKmNXG7vG2LXGrjN2vbEbjN1o7CZjNxu7xditxm4zdruxO4xhv3vs/4790LE/OPbLvtMY9lPG/sLYbxf7z2I/VuxPiv06sX8l9nO8i+uH/e+wHxz2R8N+YfcYw35S9xrDfkPYfwf70WB/FuxXgv07sJ8F9nfAfgfI/498+MgPj3zp9xlDPm3kl0a+ZeQfRj5e5KdFvlbkL0U+z/uNId8j8h8iHyDy4yFf3APGkE/sQWPIN4X8S8hHhPw8yFeD/C3IZ4L8Hsh3gfwPyIeA/AB4X/4hY3ifGu8X431bvH+K9zHxfiLe18P7a3ifC+834X0fvP+C90HwfgTeF3jYGJ4nf8QYnjfG87d4HhXPZ+J5RTy/h+fZ8HwXnnfC8z94HgbPh+B5CTw/gO/T8f0yvm/F94/4Pg7fT+H7Gnx/gfv5uL+N+724/4n7gbg/hvtFGKC4n4Dra1xv4voL1yPQ59Cr0G/QM1jfsd7h/I/zIc4PmC/2eBKW0VaBTPEAAA==",
            "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
        },
        {
            "name": "enqueueCallToChildTwice",
            "functionType": "secret",
            "isInternal": false,
            "parameters": [
                {
                    "name": "targetContract",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                },
                {
                    "name": "targetSelector",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                },
                {
                    "name": "targetValue",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                }
            ],
            "returnTypes": [],
            "bytecode": "H4sIAAAAAAAA/+2dB3RU1RaGdxKSgBUrRUUELIDizGRCJthANDZ675AyAaSXiApYAMWGDRuiYsPee++99959vfr6e76nvLMf+yzvhIR178p/Zs15e+5ae+0w2Zyc75R7/jv33n2mFRAtMWYP+2Nf8bGWHfFiU0ZxE+WWxXonk+mKRDpeFq+OJSprUuWxZHlN71Q8FS9PldclUmVl6VQyVVFZU1kRq4wny9Lx+vLKsnopuBhXx5gL7hJTRokD7pIc5y41ZZQ64C4Fczc33ltaz47AehZIW3aW8toZ+9FYe/EdxHdU4vc1tov0GbdLW2mXXXKgXrsG6tVZ6qWtf5pql92a6K/dcqBenYwV0U/zvyDwMwU+46Ov+FjLjngHwp4b7LG7sW3l5zbGChtxlAgrkqUkUD6yTHCbx4LtURhoI9se1hfL5xTwwf+zjbRjKzBzQaAOtlz7b/u3WhvbWn6eW107o9/8qQ2z0rMXLggOAhscHNCFjT5rI6DB+GAD2d8FF/CMmiGIg2UWgsvuRLiVfHdcvWJFlNnL1KhjUPztKDsqKdayI97ek3p2IvwZm72dzZ2N7WGsi7GuxroZ29PYXsb2NraPse7GehjrSRtXrp3k/wbPYhT4rPGJIDjp7XxzcPaOuT57FzXB3aoJ7uKA3zLwe2rUBvaMXoqtc12wvalRXzRucwr8fXvFCKxLnFeODlJWeva8hnRDekhDzczptVUNs2sXTp8zu3/1zJnBgWkrbgdoURMN1/jzYCe0lp+LA5+1CQDaz2xZrQOfBTvYNoyzVaiINtVJRPgzSBdyc6YDt0ci2Bb7ie9FP3VkUE5wh29oos2CGrpQYgo3E1PQTDnNzVZng8HCMfgPjSqD+hu9pEHRXzj0IjcDDH3B0AXAnK7feOznQfuhpS2Sef9AWfFUWSJRUcZxqbpYPFlXm0glEnU1yVhtrLo2ka5Mxivrk4lkWW1dbY0pszpeH6uvrq2sT22sV/AiOnig58/+uLIyLp6501o16rPg+HcgazIugZpqP6cnO1edE3NQbpxwg94VdxzfR03WFXGiizsoN0HYicmTMCE+WyqtK7lZBMDjIkOllYlPkjKVxuCuVFpSGhQ9SZLkZoChVVpXALNVaWUetB9apSGZy8k/lVZO2MXAHr0pr9IgndPbQbkVlNsqjbkr8H3kRKUlpa7oclOEnZg8CVOUXZXWjdwsAuBxkaHSKsX3IWUqjcFdqbQ+0qDoSdKH3AwwtErrBmC2Kq3Sg/ZDqzQk8wHkn0o7gLCLgT0OpLxKg3TOgQ7KPYhyW6Ux90H4PnKi0vpIXdHlHkzYicmT8GDKrkrrTm4WAfC4yFBphwTKVqXSGNyVSusrZaEnSV9yM8DQKq07gNmqtEM8aD+0SkMy9yP/VFo/wi4G9jiU8ioN0jmHOii3P+W2SmPu/vg+cqLS+kpd0eUeRtiJyZPwMMquSutBbhYB8LjIUGmHi68iZSqNwV2ptCppUPQkqSI3Awyt0noAmK1KO9yD9kOrNCTzEeSfSjuCsIuBPY6kvEqDdM6RDso9inJbpTH3Ufg+cqLSqqSu6HKPJuzE5El4NGVXpfUkN4sAeFxkqLRjxA8gZSqNwV2ptAHSoOhJMoDcDDC0SusJYLYq7RgP2g+t0pDMA8k/lTaQsIuBPQZRXqVBOmeQg3IHU26rNOYejO8jJyptgNQVXe4Qwk5MnoRDaFN1hj6htgO2QWfyYxFpD2TewxNmZEaJfR0xu7pxm+v1rPKkntkSiS0dn4VA5j09YQZmTInvRdi1jBMgWHFpc771Ep8U30f8FsaGyti1Ofhse/Hvbe64vcXvQ5vPkbWdsWGB8qygbS6er7qHR4wfETF+ZMT4URHjR0eMHxMxfmzE+HER48dHjJ8QMX5ixPhJEeMnR4yfEjG+OmJ8TSC+sJl4TmBSGzKuLmRcOmRcfci4qSHjpoWMmx4y7tiQcTNCxs0MGTcrZNzskHFzQsbNDRk3L2Tc/EDcaIkbJr/vROFyHQ4XP0L8SPGjxI8WP0b8WPHjxI8XP0H8RPGTxE8WP0V8tfga8bXi68SnxdeLnyp+mvjp4o8VP0P8TPGzxM8WP0f8XPHzxM8P2T55nx3PX+AuoE3Pv1aXDBW/QPz2xhZS5oG+tgvm42ypjmwA1su2UWcpr8GzvkZ7vm4+LjB22kq7HJcD9VpE2c8jCxxrGV9mH0/5PLLNHfk8spR5i/X/Oo/sIsKtDMfj6pXPI9uonr7kkV1E+DM2ezubTzB2orHFxpYYW2rsJGMnGzvF2KnGlhlbbmyFsdMon0c2n0c29JHPI9tsy2TrSbDF5OZMB26PjCfBThe/kpQ9Ccbgrp4EWykNir4Rv5LcDDD0BcNiALN9Eux0D9oPLW2RzGeQf0+CnYErK+Pi+UzKPwkG6ZwzHZR7FuEGvSvus/B95ORJsJVSV3S5ZxN2YvIkPJuy+7z+EnKzCIDHRYZKO0f8KlKm0hjclUpbJQ2KniSryM0AQ6u0JQBmq9LO8aD90CoNyXwu+afSziXsYmCP8yiv0iCdc56Dcs+n3FZpzH0+vo+cqLRVUld0uRcQdmLyJLyAsqvSlpKbRQA8LjJU2oXiV5MylcbgrlTaamlQ9CRZTW4GGFqlLQUwW5V2oQfth1ZpSOaLyD+VdhFhFwN7XEx5lQbpnIsdlHsJ5bZKY+5L8H3kRKWtlrqiy72UsBOTJ+GllF2VtozcLALgcZGh0i4Tv4aUqTQGd6XS1kiDoifJGnIzwNAqbRmA2aq0yzxoP7RKQzJfTv6ptMsJuxjYYy3lVRqkc9Y6KPcKym2VxtxX4PvIiUpbI3VFl3slYScmT8IrKbsqbTm5WQTA4yJDpV0lfh0pU2kM7kqlrZMGRU+SdeRmgKFV2nIAs1VpV3nQfmiVhmS+mvxTaVcTdjGwxzWUV2mQzrnGQbnXUm6rNOa+Ft9HTlTaOqkrutzrCDsxeRJeR9lVaSvIzSIAHhcZKu168etJmUpjcFcqbb00KHqSrCc3Awyt0lYAmK1Ku96D9kOrNCTzDeSfSruBsIuBPW6kvEqDdM6NDsq9iXJbpTH3Tfg+cqLS1ktd0eXeTNiJyZPwZvIrj+wJ5Mcigswje6InzMiMEqc5YnZx49aHeq7zpJ7ZEom5lEf2JE+YkXlkTybsWtZUHtmV4leJXy2e88jeImN3c3lkTxF/Km0+Rxbnkb01UF6YvJu3RYy/PWL8HRHj74wYf1fE+Lsjxt8TMf7eiPH3RYy/P2L8AxHjH4wY/1DE+Icjxj8SMf7RQHxhM/GcwOSxkHGPh4x7ImTckyHjngoZ93TIuGdCxj0bMu65kHHPh4x7IWTciyHjXgoZ93LIuFdCxr0aiLN5ZG+V3y+icLkObxN/u/g7xN8p/i7xd4u/R/y94u8Tf7/4B8Q/KP4h8Q+Lf0T8o+IfE/+4+CfEPyn+KfFPi39G/LPinxP/vPgXxL8o/iXxL4t/RfyrIdsn77PjOY/sa7Tp+dfqklvEvyae88i+TpkH+tqugHA68g3Kjt6NteyIFwKZ3/SEuQjI/JYnzK2AzG97wlwMZH7HE+YSIPO7njCXApnf84R5VyDz+54wdwQyf6CQ+UOFzB8pZP5YIfMnCpk/Vcj8mULmzxUyf6GQ+UuFzF8pZP5aIfM3Cpm/Vcj8M4XMP1fI/AuFzL9UyPwrhcy/Vsj8G4XMv1XI/DuFzL9XyPwHhcx/VMj8nULmPylk/rNC5r8oZP6rQua/KWT+u0Lmfyhk/qdC5n8pZP5eIfO/FTL/RyHzDwqZf1TIvEEhM7+AoI25QCFzoULmIoXMrRQyFytkLlHIXKqQubVC5jYKmbdQyLylQuatFDJvrZB5G4XM2ypkbquQeTuFzNsrZN5BIfOOCpl3Usi8s0LmdgqZ2ytk7qCQuaNC5l0UMu+qkHk3hcydFDLvrpC5s0LmPRQyd1HI3FUhczeFzHsqZN5LIfPeCpn3UcjcXSFzD4XMPRUy76uQeT+FzL0UMu+vkDmmkDmukDmhkLlMIXNSIXO5QubeCpkrFDKnFDJXKmTuo5D5AIXMBypkPkgh88EKmQ9RyNxXIXM/hcyHKmTur5D5MIXMhytkrlLIfIRC5iMVMh+lkPlohczHKGQeoJB5oCfMC4HMgzxhfh3IPFjh2B6ikHmoQuZhCpmHK2QeoZB5pELmUQqZRytkHqOQeawnzK2BzOM8YW4DZB7vCfMWQOYJnjBvCWSe6AnzVkDmSZ4wbw1knuwJ8zZA5imeMG8LZK72hLktkLnGE+btgMy1njBvD2Su84R5ByBz2hPmHYHM9Z4w7wRknuoJ885A5mlA5g5SToEwFxlrZazYWImxUmN8TcjXSHzNwBqaNSVrLNYcvAbzmsTnaD5n8RzmMc19zMztjLU31iHQtmvFv2HsTWNvGXvb2DvG3jX2nrH3jX1g7ENjHxn72Ngnxj419pmxz419YexLY18Z+9rYN8a+Ncb73fP+77wfOu8Pzvtl8/7RvJ8y7y/M++3y/rO8HyvvT/qdMd6/kvdz5P0Neb8/3v+O94Pj/dF4vzDeP+t7Y7y/Eu83xPvv8H40G6TxeP8O3s+C93fg/Q44/z/nw+f88JwvnfOHcz5tzi/N+ZY5/zDn4+X8tJyvlfOXcj5Pzm/J+R45/yHnA+T8eJwvjvOncT4xzq/F+aY4/xLnI+L8PJyvhvO3cD4Tzu/B+S44/wPnQ+D8APy+PL8/zu9T8/vF/L4tv3/K72Py+4n8vh6/v8bvc/H7Tfy+D7//wu+D8PsR/L4APz/Pz5Pz89X8vDE/f8vPo/7v+Uxj/PweP8/Gz3fx8078/A8/D8PPh/DzEvz8AN9P5/vLfL+V7z/y/Ti+P8X3a/j+BX+fz99v8/e9/P0nfx/I34/x90X8/Ql/n8DX13y9yddffD3C+pz1Kus31jO8vvN6x+d/Ph/y+YHniz3+C0dVpAOURwEA",
            "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
        },
        {
            "name": "enqueueCallToPubEntryPoint",
            "functionType": "secret",
            "isInternal": false,
            "parameters": [
                {
                    "name": "targetContract",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                },
                {
                    "name": "targetSelector",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                },
                {
                    "name": "targetValue",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                }
            ],
            "returnTypes": [],
            "bytecode": "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",
            "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
        },
        {
            "name": "entryPoint",
            "functionType": "secret",
            "isInternal": false,
            "parameters": [
                {
                    "name": "targetContract",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                },
                {
                    "name": "targetSelector",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                }
            ],
            "returnTypes": [],
            "bytecode": "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",
            "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
        },
        {
            "name": "pubEntryPoint",
            "functionType": "open",
            "isInternal": false,
            "parameters": [
                {
                    "name": "targetContract",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                },
                {
                    "name": "targetSelector",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                },
                {
                    "name": "initValue",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                }
            ],
            "returnTypes": [
                {
                    "kind": "struct",
                    "path": "aztec::abi::PublicCircuitPublicInputs",
                    "fields": [
                        {
                            "name": "call_context",
                            "type": {
                                "kind": "struct",
                                "path": "aztec::abi::CallContext",
                                "fields": [
                                    {
                                        "name": "msg_sender",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "storage_contract_address",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "portal_contract_address",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "function_selector",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "is_delegate_call",
                                        "type": {
                                            "kind": "boolean"
                                        }
                                    },
                                    {
                                        "name": "is_static_call",
                                        "type": {
                                            "kind": "boolean"
                                        }
                                    },
                                    {
                                        "name": "is_contract_deployment",
                                        "type": {
                                            "kind": "boolean"
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "name": "args_hash",
                            "type": {
                                "kind": "field"
                            }
                        },
                        {
                            "name": "return_values",
                            "type": {
                                "kind": "array",
                                "length": 4,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "contract_storage_update_requests",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "struct",
                                    "path": "aztec::abi::ContractStorageUpdateRequest",
                                    "fields": [
                                        {
                                            "name": "storage_slot",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "old_value",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "new_value",
                                            "type": {
                                                "kind": "field"
                                            }
                                        }
                                    ]
                                }
                            }
                        },
                        {
                            "name": "contract_storage_read",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "struct",
                                    "path": "aztec::abi::ContractStorageRead",
                                    "fields": [
                                        {
                                            "name": "storage_slot",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "value",
                                            "type": {
                                                "kind": "field"
                                            }
                                        }
                                    ]
                                }
                            }
                        },
                        {
                            "name": "public_call_stack",
                            "type": {
                                "kind": "array",
                                "length": 4,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "new_commitments",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "new_nullifiers",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "new_l2_to_l1_msgs",
                            "type": {
                                "kind": "array",
                                "length": 2,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "unencrypted_logs_hash",
                            "type": {
                                "kind": "array",
                                "length": 2,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "unencrypted_log_preimages_length",
                            "type": {
                                "kind": "field"
                            }
                        },
                        {
                            "name": "block_header",
                            "type": {
                                "kind": "struct",
                                "path": "aztec::abi::BlockHeader",
                                "fields": [
                                    {
                                        "name": "note_hash_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "nullifier_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "contract_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "l1_to_l2_messages_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "archive_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "public_data_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "global_variables_hash",
                                        "type": {
                                            "kind": "field"
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "name": "prover_address",
                            "type": {
                                "kind": "field"
                            }
                        }
                    ]
                }
            ],
            "bytecode": "",
            "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
        },
        {
            "name": "pubEntryPointTwice",
            "functionType": "open",
            "isInternal": false,
            "parameters": [
                {
                    "name": "targetContract",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                },
                {
                    "name": "targetSelector",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                },
                {
                    "name": "initValue",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                }
            ],
            "returnTypes": [
                {
                    "kind": "struct",
                    "path": "aztec::abi::PublicCircuitPublicInputs",
                    "fields": [
                        {
                            "name": "call_context",
                            "type": {
                                "kind": "struct",
                                "path": "aztec::abi::CallContext",
                                "fields": [
                                    {
                                        "name": "msg_sender",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "storage_contract_address",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "portal_contract_address",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "function_selector",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "is_delegate_call",
                                        "type": {
                                            "kind": "boolean"
                                        }
                                    },
                                    {
                                        "name": "is_static_call",
                                        "type": {
                                            "kind": "boolean"
                                        }
                                    },
                                    {
                                        "name": "is_contract_deployment",
                                        "type": {
                                            "kind": "boolean"
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "name": "args_hash",
                            "type": {
                                "kind": "field"
                            }
                        },
                        {
                            "name": "return_values",
                            "type": {
                                "kind": "array",
                                "length": 4,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "contract_storage_update_requests",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "struct",
                                    "path": "aztec::abi::ContractStorageUpdateRequest",
                                    "fields": [
                                        {
                                            "name": "storage_slot",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "old_value",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "new_value",
                                            "type": {
                                                "kind": "field"
                                            }
                                        }
                                    ]
                                }
                            }
                        },
                        {
                            "name": "contract_storage_read",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "struct",
                                    "path": "aztec::abi::ContractStorageRead",
                                    "fields": [
                                        {
                                            "name": "storage_slot",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "value",
                                            "type": {
                                                "kind": "field"
                                            }
                                        }
                                    ]
                                }
                            }
                        },
                        {
                            "name": "public_call_stack",
                            "type": {
                                "kind": "array",
                                "length": 4,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "new_commitments",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "new_nullifiers",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "new_l2_to_l1_msgs",
                            "type": {
                                "kind": "array",
                                "length": 2,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "unencrypted_logs_hash",
                            "type": {
                                "kind": "array",
                                "length": 2,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "unencrypted_log_preimages_length",
                            "type": {
                                "kind": "field"
                            }
                        },
                        {
                            "name": "block_header",
                            "type": {
                                "kind": "struct",
                                "path": "aztec::abi::BlockHeader",
                                "fields": [
                                    {
                                        "name": "note_hash_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "nullifier_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "contract_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "l1_to_l2_messages_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "archive_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "public_data_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "global_variables_hash",
                                        "type": {
                                            "kind": "field"
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "name": "prover_address",
                            "type": {
                                "kind": "field"
                            }
                        }
                    ]
                }
            ],
            "bytecode": "",
            "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
        }
    ],
    "events": [],
    "debug": {
        "debugSymbols": [
            "eJyrVsrJT04syczPK1ayqq6tBQAz9wY7",
            "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",
            "",
            "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"
        ],
        "fileMap": {
            "1": {
                "source": "// A contract used along with `Child` contract to test nested calls.\ncontract Parent {\n    use dep::aztec::selector::compute_selector;\n\n    #[aztec(private)]\n    fn constructor() {}\n\n    // Private function to call another private function in the targetContract using the provided selector\n    #[aztec(private)]\n    fn entryPoint(targetContract: Field, targetSelector: Field) -> Field {\n        // Call the target private function\n        let return_values = context.call_private_function(targetContract, targetSelector, [0]);\n\n        // Copy the return value from the call to this function's return values\n        return_values[0]\n    }\n\n    // Public function to directly call another public function to the targetContract using the selector and value provided\n    #[aztec(public)]\n    fn pubEntryPoint(targetContract: Field, targetSelector: Field, initValue: Field) -> Field {\n        let return_values = context.call_public_function(targetContract, targetSelector, [initValue]);\n\n        return_values[0]\n    }\n\n    // Same as pubEntryPoint, but calls the target contract twice, using the return value from the first invocation as the argument for the second.\n    #[aztec(public)]\n    fn pubEntryPointTwice(targetContract: Field, targetSelector: Field, initValue: Field) -> Field {\n        let returnValue = context.call_public_function(targetContract, targetSelector, [initValue])[0];\n        let return_values = context.call_public_function(targetContract, targetSelector, [returnValue]);\n\n        return_values[0]\n    }\n\n    // Private function to enqueue a call to the targetContract address using the selector and argument provided\n    #[aztec(private)]\n    fn enqueueCallToChild(targetContract: Field, targetSelector: Field, targetValue: Field) {\n        context.call_public_function(targetContract, targetSelector, [targetValue]);\n    }\n\n    // Private function that enqueues two calls to a child contract: \n    // - one through a nested call to enqueueCallToChild with value 10,\n    // - followed by one issued directly from this function with value 20.\n    #[aztec(private)]\n    fn enqueueCallsToChildWithNestedFirst(targetContract: Field, targetSelector: Field) {\n        let enqueueCallToChildSelector = compute_selector(\"enqueueCallToChild(Field,Field,Field)\");\n        let _ret = context.call_private_function(context.this_address(),\n            enqueueCallToChildSelector,\n            [targetContract, targetSelector, 10]);\n        context.call_public_function(targetContract, targetSelector, [20]);\n    }\n\n    // Private function that enqueues two calls to a child contract: \n    // - one issued directly from this function with value 20,\n    // - followed by one through a nested call to enqueueCallToChild with value 10.\n    #[aztec(private)]\n    fn enqueueCallsToChildWithNestedLast(targetContract: Field, targetSelector: Field) {\n        context.call_public_function(targetContract, targetSelector, [20]);\n        let enqueueCallToChildSelector = compute_selector(\"enqueueCallToChild(Field,Field,Field)\");\n        let _ret = context.call_private_function(context.this_address(),\n            enqueueCallToChildSelector,\n            [targetContract, targetSelector, 10]);\n    }\n\n    // Private function to enqueue a call to the targetContract address using the selector and argument provided\n    #[aztec(private)]\n    fn enqueueCallToChildTwice(targetContract: Field, targetSelector: Field, targetValue: Field) {\n        // Enqueue the first public call\n        context.call_public_function(targetContract, targetSelector, [targetValue]);\n        // Enqueue the second public call\n        context.call_public_function(targetContract, targetSelector, [targetValue + 1]);\n    }\n\n    // Private function to enqueue a call to the pubEntryPoint function of this same contract, passing the target arguments provided\n    #[aztec(private)]\n    fn enqueueCallToPubEntryPoint(targetContract: Field, targetSelector: Field, targetValue: Field) {\n        let pubEntryPointSelector = compute_selector(\"pubEntryPoint(Field,Field,Field)\");\n        let thisAddress = context.this_address();\n        let _void = context.call_public_function(thisAddress,\n            pubEntryPointSelector,\n            [targetContract, targetSelector, targetValue]);\n    }\n\n    // Private function to enqueue two calls to the pubEntryPoint function of this same contract, passing the target arguments provided\n    #[aztec(private)]\n    fn enqueueCallsToPubEntryPoint(targetContract: Field, targetSelector: Field, targetValue: Field) {\n        let pubEntryPointSelector = compute_selector(\"pubEntryPoint(Field,Field,Field)\");\n        let thisAddress = context.this_address();\n\n        context.call_public_function(thisAddress,\n            pubEntryPointSelector,\n            [targetContract, targetSelector, targetValue]);\n\n        context.call_public_function(thisAddress,\n            pubEntryPointSelector,\n            [targetContract, targetSelector, targetValue + 1]);\n    }\n}\n",
                "path": "/usr/src/yarn-project/noir-contracts/src/contracts/parent_contract/src/main.nr"
            },
            "75": {
                "source": "global ARGS_LENGTH: Field = 16;\nglobal RETURN_VALUES_LENGTH: Field = 4;\n\n/**\n * Convention for constant array lengths are mainly divided in 2 classes:\n *  - FUNCTION CALL\n *  - TRANSACTION\n *\n * Agreed convention is to use MAX_XXX_PER_CALL resp. MAX_XXX_PER_TX, where XXX denotes a type of element such as\n * commitment, or nullifier, e.g.,:\n *  - MAX_NEW_NULLIFIERS_PER_CALL\n *  - MAX_NEW_COMMITMENTS_PER_TX\n *\n * In the kernel circuits, we accumulate elements such as commitments and the nullifiers from all functions calls in a\n * transaction. Therefore, we always must have:\n * MAX_XXX_PER_TX ≥ MAX_XXX_PER_CALL\n *\n * For instance:\n * MAX_NEW_COMMITMENTS_PER_TX ≥ MAX_NEW_COMMITMENTS_PER_CALL\n * MAX_NEW_NULLIFIERS_PER_TX ≥ MAX_NEW_NULLIFIERS_PER_CALL\n *\n */\n\n// docs:start:constants\n// \"PER CALL\" CONSTANTS\nglobal MAX_NEW_COMMITMENTS_PER_CALL: Field = 16;\nglobal MAX_NEW_NULLIFIERS_PER_CALL: Field = 16;\nglobal MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL: Field = 4;\nglobal MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL: Field = 4;\nglobal MAX_NEW_L2_TO_L1_MSGS_PER_CALL: Field = 2;\nglobal MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL: Field = 16;\nglobal MAX_PUBLIC_DATA_READS_PER_CALL: Field = 16;\nglobal MAX_READ_REQUESTS_PER_CALL: Field = 32;\nglobal MAX_PENDING_READ_REQUESTS_PER_CALL: Field = 32;\n\n// \"PER TRANSACTION\" CONSTANTS\nglobal MAX_NEW_COMMITMENTS_PER_TX: Field = 64;\nglobal MAX_NEW_NULLIFIERS_PER_TX: Field = 64;\nglobal MAX_PRIVATE_CALL_STACK_LENGTH_PER_TX: Field = 8;\nglobal MAX_PUBLIC_CALL_STACK_LENGTH_PER_TX: Field = 8;\nglobal MAX_NEW_L2_TO_L1_MSGS_PER_TX: Field = 2;\nglobal MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_TX: Field = 16;\nglobal MAX_PUBLIC_DATA_READS_PER_TX: Field = 16;\nglobal MAX_NEW_CONTRACTS_PER_TX: Field = 1;\nglobal MAX_OPTIONALLY_REVEALED_DATA_LENGTH_PER_TX: Field = 4;\nglobal MAX_READ_REQUESTS_PER_TX: Field = 128;\nglobal MAX_PENDING_READ_REQUESTS_PER_TX: Field = 128;\nglobal NUM_ENCRYPTED_LOGS_HASHES_PER_TX: Field = 1;\nglobal NUM_UNENCRYPTED_LOGS_HASHES_PER_TX: Field = 1;\n// docs:end:constants\n\n// ROLLUP CONTRACT CONSTANTS - constants used only in l1-contracts\nglobal NUMBER_OF_L1_L2_MESSAGES_PER_ROLLUP: Field = 16;\n// TODO(961): Use this constant everywhere instead of hard-coded \"2\".\nglobal KERNELS_PER_BASE_ROLLUP: Field = 2;\nglobal MAX_NEW_NULLIFIERS_PER_BASE_ROLLUP: Field = 128;\nglobal MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_BASE_ROLLUP: Field = 32;\nglobal MAX_PUBLIC_DATA_READS_PER_BASE_ROLLUP: Field = 32;\n\n// TREES RELATED CONSTANTS\nglobal VK_TREE_HEIGHT: Field = 3;\nglobal FUNCTION_TREE_HEIGHT: Field = 5;\nglobal CONTRACT_TREE_HEIGHT: Field = 16;\nglobal NOTE_HASH_TREE_HEIGHT: Field = 32;\nglobal PUBLIC_DATA_TREE_HEIGHT: Field = 254;\nglobal NULLIFIER_TREE_HEIGHT: Field = 20;\nglobal L1_TO_L2_MSG_TREE_HEIGHT: Field = 16;\nglobal ROLLUP_VK_TREE_HEIGHT: Field = 8;\n\n// SUB-TREES RELATED CONSTANTS\nglobal CONTRACT_SUBTREE_HEIGHT: Field = 1;\nglobal CONTRACT_SUBTREE_SIBLING_PATH_LENGTH: Field = 15;\nglobal NOTE_HASH_SUBTREE_HEIGHT: Field = 7;\nglobal NOTE_HASH_SUBTREE_SIBLING_PATH_LENGTH: Field = 25;\nglobal NULLIFIER_SUBTREE_HEIGHT: Field = 7;\nglobal ARCHIVE_HEIGHT: Field = 16;\nglobal NULLIFIER_SUBTREE_SIBLING_PATH_LENGTH: Field = 13;\nglobal L1_TO_L2_MSG_SUBTREE_HEIGHT: Field = 4;\nglobal L1_TO_L2_MSG_SUBTREE_SIBLING_PATH_LENGTH: Field = 12;\n\n// MISC CONSTANTS\nglobal FUNCTION_SELECTOR_NUM_BYTES: Field = 4;\nglobal MAPPING_SLOT_PEDERSEN_SEPARATOR: Field = 4;\nglobal NUM_FIELDS_PER_SHA256: Field = 2;\nglobal ARGS_HASH_CHUNK_LENGTH: u32 = 32;\nglobal ARGS_HASH_CHUNK_COUNT: u32 = 16;\n\n\n// NOIR CONSTANTS - constants used only in yarn-packages/noir-contracts\n// Some are defined here because Noir doesn't yet support globals referencing other globals yet.\n// Move these constants to a noir file once the issue bellow is resolved:\n// https://github.com/noir-lang/noir/issues/1734\nglobal L1_TO_L2_MESSAGE_LENGTH: Field = 8;\nglobal L1_TO_L2_MESSAGE_ORACLE_CALL_LENGTH: Field = 26;\nglobal MAX_NOTE_FIELDS_LENGTH: Field = 20;\n// GET_NOTE_ORACLE_RETURN_LENGT = MAX_NOTE_FIELDS_LENGTH + 1 + 2\n// The plus 1 is 1 extra field for nonce.\n// + 2 for EXTRA_DATA: [number_of_return_notes, contract_address]\nglobal GET_NOTE_ORACLE_RETURN_LENGTH: Field = 23;\nglobal MAX_NOTES_PER_PAGE: Field = 10;\n// VIEW_NOTE_ORACLE_RETURN_LENGTH = MAX_NOTES_PER_PAGE * (MAX_NOTE_FIELDS_LENGTH + 1) + 2;\nglobal VIEW_NOTE_ORACLE_RETURN_LENGTH: Field = 212;\nglobal CALL_CONTEXT_LENGTH: Field = 7;\nglobal BLOCK_HEADER_LENGTH: Field = 7;\nglobal FUNCTION_DATA_LENGTH: Field = 4;\nglobal CONTRACT_DEPLOYMENT_DATA_LENGTH: Field = 6;\n// Change this ONLY if you have changed the PrivateCircuitPublicInputs structure.\n// In other words, if the structure/size of the public inputs of a function call changes then we\n// should change this constant as well as the offsets in private_call_stack_item.nr\nglobal PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH: Field = 155;\nglobal CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH: Field = 3;\nglobal CONTRACT_STORAGE_READ_LENGTH: Field = 2;\n// Change this ONLY if you have changed the PublicCircuitPublicInputs structure.\nglobal PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH: Field = 142;\nglobal GET_NOTES_ORACLE_RETURN_LENGTH: Field = 674;\nglobal EMPTY_NULLIFIED_COMMITMENT: Field = 1000000;\nglobal CALL_PRIVATE_FUNCTION_RETURN_SIZE: Field = 161;\nglobal PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH: Field = 87;\nglobal PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH: Field = 144;\nglobal COMMITMENTS_NUM_BYTES_PER_BASE_ROLLUP: Field = 4096;\nglobal NULLIFIERS_NUM_BYTES_PER_BASE_ROLLUP: Field = 4096;\nglobal PUBLIC_DATA_WRITES_NUM_BYTES_PER_BASE_ROLLUP: Field = 2048;\nglobal CONTRACTS_NUM_BYTES_PER_BASE_ROLLUP: Field = 64;\nglobal CONTRACT_DATA_NUM_BYTES_PER_BASE_ROLLUP: Field = 128;\nglobal CONTRACT_DATA_NUM_BYTES_PER_BASE_ROLLUP_UNPADDED: Field = 104;\nglobal L2_TO_L1_MSGS_NUM_BYTES_PER_BASE_ROLLUP: Field = 128;\nglobal LOGS_HASHES_NUM_BYTES_PER_BASE_ROLLUP: Field = 128;\n\n/**\n * Enumerate the hash_indices which are used for pedersen hashing.\n * We start from 1 to avoid the default generators. The generator indices are listed\n * based on the number of elements each index hashes. The following conditions must be met:\n *\n * +-----------+-------------------------------+----------------------+\n * | Hash size | Number of elements hashed (n) | Condition to use     |\n * |-----------+-------------------------------+----------------------|\n * | LOW       | n ≤ 8                         | 0 < hash_index ≤ 32  |\n * | MID       | 8 < n ≤ 16                    | 32 < hash_index ≤ 40 |\n * | HIGH      | 16 < n ≤ 48                   | 40 < hash_index ≤ 48 |\n * +-----------+-------------------------------+----------------------+\n *\n * Note: When modifying, modify `GeneratorIndexPacker` in packer.hpp accordingly.\n */\n// Indices with size ≤ 8\nglobal GENERATOR_INDEX__COMMITMENT = 1;\nglobal GENERATOR_INDEX__COMMITMENT_NONCE = 2;\nglobal GENERATOR_INDEX__UNIQUE_COMMITMENT = 3;\nglobal GENERATOR_INDEX__SILOED_COMMITMENT = 4;\nglobal GENERATOR_INDEX__NULLIFIER = 5;\nglobal GENERATOR_INDEX__INITIALIZATION_NULLIFIER = 6;\nglobal GENERATOR_INDEX__OUTER_NULLIFIER = 7;\nglobal GENERATOR_INDEX__PUBLIC_DATA_READ = 8;\nglobal GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST = 9;\nglobal GENERATOR_INDEX__FUNCTION_DATA = 10;\nglobal GENERATOR_INDEX__FUNCTION_LEAF = 11;\nglobal GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA = 12;\nglobal GENERATOR_INDEX__CONSTRUCTOR = 13;\nglobal GENERATOR_INDEX__CONSTRUCTOR_ARGS = 14;\nglobal GENERATOR_INDEX__CONTRACT_ADDRESS = 15;\nglobal GENERATOR_INDEX__CONTRACT_LEAF = 16;\nglobal GENERATOR_INDEX__CALL_CONTEXT = 17;\nglobal GENERATOR_INDEX__CALL_STACK_ITEM = 18;\nglobal GENERATOR_INDEX__CALL_STACK_ITEM_2 = 19;\nglobal GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET = 20;\nglobal GENERATOR_INDEX__L2_TO_L1_MSG = 21;\nglobal GENERATOR_INDEX__TX_CONTEXT = 22;\nglobal GENERATOR_INDEX__PUBLIC_LEAF_INDEX = 23;\nglobal GENERATOR_INDEX__PUBLIC_DATA_LEAF = 24;\nglobal GENERATOR_INDEX__SIGNED_TX_REQUEST = 25;\nglobal GENERATOR_INDEX__GLOBAL_VARIABLES = 26;\nglobal GENERATOR_INDEX__PARTIAL_ADDRESS = 27;\nglobal GENERATOR_INDEX__BLOCK_HASH = 28;\n// Indices with size ≤ 16\nglobal GENERATOR_INDEX__TX_REQUEST = 33;\nglobal GENERATOR_INDEX__SIGNATURE_PAYLOAD = 34;\n// Indices with size ≤ 44\nglobal GENERATOR_INDEX__VK = 41;\nglobal GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS = 42;\nglobal GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS = 43;\nglobal GENERATOR_INDEX__FUNCTION_ARGS = 44;\n",
                "path": "/protocol_types/constants.nr"
            },
            "92": {
                "source": "use dep::protocol_types::constants::{\n    RETURN_VALUES_LENGTH,\n    MAX_READ_REQUESTS_PER_CALL,\n    MAX_PENDING_READ_REQUESTS_PER_CALL,\n    MAX_NEW_COMMITMENTS_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n    NUM_FIELDS_PER_SHA256,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL,\n    GENERATOR_INDEX__FUNCTION_ARGS,\n    BLOCK_HEADER_LENGTH,\n    CONTRACT_DEPLOYMENT_DATA_LENGTH,\n    CALL_CONTEXT_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n    CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH,\n    CONTRACT_STORAGE_READ_LENGTH,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n    GENERATOR_INDEX__BLOCK_HASH,\n    GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS,\n    GENERATOR_INDEX__FUNCTION_DATA,\n    GENERATOR_INDEX__PUBLIC_DATA_READ,\n    GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST,\n    GENERATOR_INDEX__CALL_CONTEXT,\n    GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS,\n    GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA,\n};\n\nuse crate::oracle::debug_log;\nuse crate::types::vec::BoundedVec;\nuse crate::types::point::Point;\nuse crate::hash::pedersen_hash;\n\n// docs:start:private-global-variables\nstruct PrivateGlobalVariables {\n    chain_id: Field,\n    version: Field,\n}\n// docs:end:private-global-variables\n\nimpl PrivateGlobalVariables {\n    fn serialize(self) -> [Field; 2] {\n        [self.chain_id, self.version]\n    }\n}\n\n// docs:start:public-global-variables\nstruct PublicGlobalVariables {\n    chain_id: Field,\n    version: Field,\n    block_number: Field,\n    timestamp: Field,\n}\n// docs:end:public-global-variables\n\nimpl PublicGlobalVariables {\n    fn serialize(self) -> [Field; 4] {\n        [self.chain_id, self.version, self.block_number, self.timestamp]\n    }\n}\n\n// docs:start:contract-deployment-data\nstruct ContractDeploymentData {\n    deployer_public_key: Point,\n    constructor_vk_hash : Field,\n    function_tree_root : Field,\n    contract_address_salt : Field,\n    portal_contract_address : Field,\n}\n// docs:end:contract-deployment-data\n\nimpl ContractDeploymentData {\n    fn serialize(self) -> [Field; CONTRACT_DEPLOYMENT_DATA_LENGTH] {\n        [\n            self.deployer_public_key.x,\n            self.deployer_public_key.y,\n            self.constructor_vk_hash,\n            self.function_tree_root,\n            self.contract_address_salt,\n            self.portal_contract_address,\n        ]\n    }\n\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA)\n    }\n}\n\n// PrivateContextInputs are expected to be provided to each private function\n// docs:start:private-context-inputs\nstruct PrivateContextInputs {\n    call_context : CallContext,\n    block_header: BlockHeader,\n    contract_deployment_data: ContractDeploymentData,\n    private_global_variables: PrivateGlobalVariables,\n}\n// docs:end:private-context-inputs\n\n// PublicContextInputs are expected to be provided to each public function\n// docs:start:public-context-inputs\nstruct PublicContextInputs {\n    call_context: CallContext,\n    block_header: BlockHeader,\n\n    public_global_variables: PublicGlobalVariables,\n}\n// docs:end:public-context-inputs\n\n// docs:start:call-context\nstruct CallContext {\n    msg_sender : Field,\n    storage_contract_address : Field,\n    portal_contract_address : Field,\n    function_selector: Field,\n\n    is_delegate_call : bool,\n    is_static_call : bool,\n    is_contract_deployment: bool,\n}\n// docs:end:call-context\n\nimpl CallContext {\n    fn serialize(self) -> [Field; CALL_CONTEXT_LENGTH] {\n        [\n            self.msg_sender,\n            self.storage_contract_address,\n            self.portal_contract_address,\n            self.function_selector,\n            self.is_delegate_call as Field,\n            self.is_static_call as Field,\n            self.is_contract_deployment as Field,\n        ]\n    }\n\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CALL_CONTEXT)\n    }\n}\n\n// docs:start:block-header\nstruct BlockHeader {\n    note_hash_tree_root : Field,\n    nullifier_tree_root : Field,\n    contract_tree_root : Field,\n    l1_to_l2_messages_tree_root : Field,\n    archive_root: Field,\n    public_data_tree_root: Field,\n    global_variables_hash: Field,\n}\n// docs:end:block-header\n\nimpl BlockHeader {\n    // NOTE: this order must match the order in `private_circuit_public_inputs.hpp`\n    pub fn serialize(self) -> [Field; BLOCK_HEADER_LENGTH] {\n        [\n            self.note_hash_tree_root,\n            self.nullifier_tree_root,\n            self.contract_tree_root,\n            self.l1_to_l2_messages_tree_root,\n            self.archive_root,\n            self.public_data_tree_root,\n            self.global_variables_hash,\n        ]\n    }\n\n    pub fn deserialize(deserialized: [Field; BLOCK_HEADER_LENGTH]) -> Self {\n        BlockHeader {\n            note_hash_tree_root: deserialized[0],\n            nullifier_tree_root: deserialized[1],\n            contract_tree_root: deserialized[2],\n            l1_to_l2_messages_tree_root: deserialized[3],\n            archive_root: deserialized[4],\n            public_data_tree_root: deserialized[5],\n            global_variables_hash: deserialized[6],\n        }\n    }\n\n    pub fn empty() -> Self {\n        Self { note_hash_tree_root: 0, nullifier_tree_root: 0, contract_tree_root: 0, l1_to_l2_messages_tree_root: 0, archive_root: 0, public_data_tree_root: 0, global_variables_hash: 0 }\n    }\n\n    pub fn block_hash(self) -> Field {\n        // TODO(#3442): Unify the ordering in `BlockHeader::serialize` function and the ordering\n        // in the block hash preimage --> This requires changes in the circuits.\n        let inputs = [\n            self.global_variables_hash,\n            self.note_hash_tree_root,\n            self.nullifier_tree_root,\n            self.contract_tree_root,\n            self.l1_to_l2_messages_tree_root,\n            self.public_data_tree_root\n        ];\n        pedersen_hash(inputs, GENERATOR_INDEX__BLOCK_HASH)\n    }\n}\n\nstruct FunctionData {\n    function_selector: Field,\n    is_internal: bool,\n    is_private: bool,\n    is_constructor: bool,\n}\n\nimpl FunctionData {\n    fn hash(self) -> Field {\n        pedersen_hash([\n            self.function_selector,\n            self.is_internal as Field,\n            self.is_private as Field,\n            self.is_constructor as Field,\n        ], GENERATOR_INDEX__FUNCTION_DATA)\n    }\n}\n\nstruct PrivateCircuitPublicInputs {\n    call_context: CallContext,\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n    read_requests: [Field; crate::abi::MAX_READ_REQUESTS_PER_CALL],\n    pending_read_requests: [Field; crate::abi::MAX_PENDING_READ_REQUESTS_PER_CALL],\n    new_commitments: [Field; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [Field; MAX_NEW_NULLIFIERS_PER_CALL],\n    nullified_commitments: [Field; MAX_NEW_NULLIFIERS_PER_CALL],\n    private_call_stack: [Field; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL],\n    public_call_stack: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_l2_to_l1_msgs: [Field; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    // Explore introducing a new type like uint256 (similar to Point), so it's more explicit that\n    // we're talking about a single number backed by two field elements.\n    encrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    encrypted_log_preimages_length: Field,\n    unencrypted_log_preimages_length: Field,\n    block_header: BlockHeader,\n    contract_deployment_data: ContractDeploymentData,\n    chain_id: Field,\n    version: Field,\n}\n\nimpl PrivateCircuitPublicInputs {\n    fn hash(self) -> Field {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0); \n        fields.push(self.call_context.hash());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.push_array(self.read_requests);\n        fields.push_array(self.pending_read_requests);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.nullified_commitments);\n        fields.push_array(self.private_call_stack);\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_header.serialize());\n        fields.push(self.contract_deployment_data.hash());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n\n        pedersen_hash(fields.storage, GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS)\n    }\n\n    fn serialize(self) -> [Field; PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.push_array(self.read_requests);\n        fields.push_array(self.pending_read_requests);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.private_call_stack);\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_header.serialize());\n        fields.push_array(self.contract_deployment_data.serialize());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n        fields.storage\n    }\n}\n\nstruct ContractStorageRead {\n    storage_slot: Field,\n    value: Field,\n}\n\nimpl ContractStorageRead {\n    pub fn serialize(self) -> [Field; CONTRACT_STORAGE_READ_LENGTH] {\n        [self.storage_slot, self.value]\n    }\n\n    pub fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_READ)\n    }\n\n    pub fn empty() -> Self {\n        Self { storage_slot: 0, value: 0 }\n    }\n}\n\nstruct ContractStorageUpdateRequest {\n    storage_slot: Field,\n    old_value: Field,\n    new_value: Field,\n}\n\nimpl ContractStorageUpdateRequest {\n    pub fn serialize(self) -> [Field; CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH] {\n        [self.storage_slot, self.old_value, self.new_value]\n    }\n\n    pub fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST)\n    }\n\n    pub fn empty() -> Self {\n        Self { storage_slot: 0, old_value: 0, new_value: 0 }\n    }\n}\n\nstruct PublicCircuitPublicInputs {\n    call_context: CallContext,\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n    contract_storage_update_requests: [ContractStorageUpdateRequest; MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n    contract_storage_read: [ContractStorageRead; MAX_PUBLIC_DATA_READS_PER_CALL],\n    public_call_stack: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_commitments: [Field; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [Field; crate::abi::MAX_NEW_NULLIFIERS_PER_CALL],\n    new_l2_to_l1_msgs: [Field; crate::abi::MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_log_preimages_length: Field,\n    block_header: BlockHeader,\n    prover_address: Field,\n}\n\nimpl PublicCircuitPublicInputs {\n    \n    pub fn hash(self) -> Field {\n        let mut inputs: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0);\n        inputs.push(self.call_context.hash());\n        inputs.push(self.args_hash);\n        inputs.push_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            inputs.push(self.contract_storage_update_requests[i].hash());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            inputs.push(self.contract_storage_read[i].hash());\n        }\n        inputs.push_array(self.public_call_stack);\n        inputs.push_array(self.new_commitments);\n        inputs.push_array(self.new_nullifiers);\n        inputs.push_array(self.new_l2_to_l1_msgs);\n\n        inputs.push_array(self.unencrypted_logs_hash);\n        inputs.push(self.unencrypted_log_preimages_length);\n        inputs.push_array(self.block_header.serialize());\n        inputs.push(self.prover_address);\n\n        pedersen_hash(inputs.storage, GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS)\n    }\n\n    pub fn serialize(self) -> [Field; PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());   \n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            fields.push_array(self.contract_storage_update_requests[i].serialize());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            fields.push_array(self.contract_storage_read[i].serialize());\n        }\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_header.serialize());\n        fields.push(self.prover_address);\n        fields.storage\n    }\n}\n\nstruct Hasher {\n    fields: [Field],\n}\n\nimpl Hasher {\n    pub fn new()-> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<N>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n\n    pub fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nglobal ARGS_HASH_CHUNK_LENGTH: u32 = 32;\nglobal ARGS_HASH_CHUNK_COUNT: u32 = 16;\n\npub fn hash_args<N>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        let mut chunks_hashes = [0; ARGS_HASH_CHUNK_COUNT];\n        for i in 0..ARGS_HASH_CHUNK_COUNT {\n            let mut chunk_hash = 0;\n            let start_chunk_index = i * ARGS_HASH_CHUNK_LENGTH;\n            if start_chunk_index < (args.len() as u32) {\n                let mut chunk_args = [0; ARGS_HASH_CHUNK_LENGTH];\n                for j in 0..ARGS_HASH_CHUNK_LENGTH {\n                    let item_index = i * ARGS_HASH_CHUNK_LENGTH + j;\n                    if item_index < (args.len() as u32) {\n                        chunk_args[j] = args[item_index];\n                    }\n                }\n                chunk_hash = pedersen_hash(chunk_args, GENERATOR_INDEX__FUNCTION_ARGS);\n            }\n            chunks_hashes[i] = chunk_hash;\n        }\n        pedersen_hash(chunks_hashes, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n",
                "path": "/aztec/abi.nr"
            },
            "94": {
                "source": "use dep::protocol_types::constants::{\n    EMPTY_NULLIFIED_COMMITMENT,\n    MAX_NEW_COMMITMENTS_PER_CALL,\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_READ_REQUESTS_PER_CALL,\n    MAX_PENDING_READ_REQUESTS_PER_CALL,\n    NUM_FIELDS_PER_SHA256,\n    RETURN_VALUES_LENGTH,\n};\n\nuse crate::abi;\n\nuse crate::abi::{\n    hash_args,\n    CallContext,\n    ContractDeploymentData,\n    BlockHeader,\n    FunctionData,\n    PrivateCircuitPublicInputs,\n    PublicCircuitPublicInputs,\n};\n\n// TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n// use dep::std::collections::vec::Vec;\n\n// l1 to l2 messaging\nuse crate::messaging::process_l1_to_l2_message;\nuse crate::private_call_stack_item::PrivateCallStackItem;\nuse crate::public_call_stack_item::PublicCallStackItem;\n\nuse crate::types::{\n    vec::BoundedVec,\n    point::Point,\n};\n\nuse crate::utils::arr_copy_slice;\n\nuse crate::oracle::{\n    arguments,\n    call_private_function::call_private_function_internal,\n    public_call::call_public_function_internal,\n    enqueue_public_function_call::enqueue_public_function_call_internal,\n    context::get_portal_address,\n    get_block_header::get_block_header,\n};\n\nuse dep::std::option::Option;\n\n// When finished, one can call .finish() to convert back to the abi\nstruct PrivateContext {\n    // docs:start:private-context\n    inputs: abi::PrivateContextInputs,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    read_requests: BoundedVec<Field, MAX_READ_REQUESTS_PER_CALL>,\n    pending_read_requests: BoundedVec<Field, MAX_PENDING_READ_REQUESTS_PER_CALL>,\n\n    new_commitments: BoundedVec<Field, MAX_NEW_COMMITMENTS_PER_CALL>,\n    new_nullifiers: BoundedVec<Field, MAX_NEW_NULLIFIERS_PER_CALL>,\n    nullified_commitments: BoundedVec<Field, MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    private_call_stack : BoundedVec<Field, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_stack : BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    new_l2_to_l1_msgs : BoundedVec<Field, MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    block_header: BlockHeader,\n\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    // encrypted_logs_preimages: Vec<Field>,\n    // unencrypted_logs_preimages: Vec<Field>,\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: abi::PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs: inputs,\n\n            args_hash: args_hash,\n            return_values: BoundedVec::new(0),\n\n            read_requests: BoundedVec::new(0),\n            pending_read_requests: BoundedVec::new(0),\n\n            new_commitments: BoundedVec::new(0),\n            new_nullifiers: BoundedVec::new(0),\n            nullified_commitments: BoundedVec::new(0),\n\n            block_header: inputs.block_header,\n\n            private_call_stack: BoundedVec::new(0),\n            public_call_stack: BoundedVec::new(0),\n            new_l2_to_l1_msgs: BoundedVec::new(0),\n\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    pub fn msg_sender(self) -> Field {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> Field {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    pub fn this_portal_address(self) -> Field {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.private_global_variables.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.private_global_variables.version\n    }\n\n    pub fn selector(self) -> Field {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn get_block_header(self, block_number: u32) -> BlockHeader {\n        get_block_header(block_number, self)\n    }\n\n    pub fn finish(self) -> abi::PrivateCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let encrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let encrypted_log_preimages_length = 0;\n        let unencrypted_log_preimages_length = 0;\n\n        let priv_circuit_pub_inputs = abi::PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            return_values: self.return_values.storage,\n            read_requests: self.read_requests.storage,\n            pending_read_requests: self.pending_read_requests.storage,\n            new_commitments: self.new_commitments.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            nullified_commitments: self.nullified_commitments.storage,\n            private_call_stack: self.private_call_stack.storage,\n            public_call_stack: self.public_call_stack.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            encrypted_logs_hash: encrypted_logs_hash,\n            unencrypted_logs_hash: unencrypted_logs_hash,\n            encrypted_log_preimages_length: encrypted_log_preimages_length,\n            unencrypted_log_preimages_length: unencrypted_log_preimages_length,\n            block_header: self.block_header,\n            contract_deployment_data: self.inputs.contract_deployment_data,\n            chain_id: self.inputs.private_global_variables.chain_id,\n            version: self.inputs.private_global_variables.version,\n        };\n        priv_circuit_pub_inputs\n    }\n\n    pub fn push_read_request(&mut self, read_request: Field) {\n        self.read_requests.push(read_request);\n    }\n\n    pub fn push_pending_read_request(&mut self, pending_read_request: Field) {\n        self.pending_read_requests.push(pending_read_request);\n    }\n\n    pub fn push_new_note_hash(&mut self, note_hash: Field) {\n        self.new_commitments.push(note_hash);\n    }\n\n    // We never push a zero nullified_commitment as zero is used to indicate the end\n    // of a field array in private kernel. This routine transparently replaces a\n    // zero value into the special placeholder: EMPTY_NULLIFIED_COMMITMENT.\n    pub fn push_new_nullifier(&mut self, nullifier: Field, nullified_commitment: Field) {\n        self.new_nullifiers.push(nullifier);\n        let mut non_zero_nullified = nullified_commitment;\n        if (non_zero_nullified == 0) {\n            non_zero_nullified = EMPTY_NULLIFIED_COMMITMENT;\n        }\n        self.nullified_commitments.push(non_zero_nullified);\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, content: Field) \n    // docs:end:context_message_portal\n    {\n        self.new_l2_to_l1_msgs.push(content);\n    }\n\n    // PrivateContextInputs must be temporarily passed in to prevent too many unknowns\n    // Note this returns self to get around an issue where mutable structs do not maintain mutations unless reassigned\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        msg_key: Field,\n        content: Field,\n        secret: Field\n    ) \n    // docs:end:context_consume_l1_to_l2_message\n    {\n        let nullifier = process_l1_to_l2_message(self.block_header.l1_to_l2_messages_tree_root, self.this_address(), self.this_portal_address(), self.chain_id(), self.version(), msg_key, content, secret);\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash)\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0)\n    }\n\n    pub fn call_private_function_with_packed_args(\n        &mut self,\n        contract_address: Field,\n        function_selector: Field,\n        args_hash: Field\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let fields = call_private_function_internal(\n            contract_address, \n            function_selector, \n            args_hash\n        );\n        let item = PrivateCallStackItem {\n            contract_address: fields[0],\n            function_data: FunctionData {\n                function_selector: fields[1],\n                is_internal: fields[2] as bool,\n                is_private: fields[3] as bool,\n                is_constructor: fields[4] as bool,\n            },\n            public_inputs: PrivateCircuitPublicInputs {\n                call_context: CallContext {\n                    msg_sender : fields[5],\n                    storage_contract_address : fields[6],\n                    portal_contract_address : fields[7],\n                    function_selector: fields[8], // practically same as fields[1]\n                    is_delegate_call : fields[9] as bool,\n                    is_static_call : fields[10] as bool,\n                    is_contract_deployment: fields[11] as bool,\n                },\n                // TODO handle the offsets as a variable incremented during extraction?\n                args_hash: fields[12],\n                return_values: arr_copy_slice(fields, [0; RETURN_VALUES_LENGTH], 13),\n                read_requests: arr_copy_slice(fields, [0; MAX_READ_REQUESTS_PER_CALL], 17),\n                pending_read_requests: arr_copy_slice(fields, [0; MAX_READ_REQUESTS_PER_CALL], 49),\n                new_commitments: arr_copy_slice(fields, [0; MAX_NEW_COMMITMENTS_PER_CALL], 81),\n                new_nullifiers: arr_copy_slice(fields, [0; MAX_NEW_NULLIFIERS_PER_CALL], 97),\n                nullified_commitments: arr_copy_slice(fields, [0; MAX_NEW_NULLIFIERS_PER_CALL], 113),\n                private_call_stack: arr_copy_slice(fields, [0; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL], 129),\n                public_call_stack: arr_copy_slice(fields, [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL], 133),\n                new_l2_to_l1_msgs: arr_copy_slice(fields, [0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL], 137),\n                encrypted_logs_hash: arr_copy_slice(fields, [0; NUM_FIELDS_PER_SHA256], 139),\n                unencrypted_logs_hash: arr_copy_slice(fields, [0; NUM_FIELDS_PER_SHA256], 141),\n                encrypted_log_preimages_length: fields[143],\n                unencrypted_log_preimages_length: fields[144],\n                block_header: BlockHeader {\n                    // Must match order in `private_circuit_public_inputs.hpp`\n                    note_hash_tree_root : fields[145],\n                    nullifier_tree_root : fields[146],\n                    contract_tree_root : fields[147],\n                    l1_to_l2_messages_tree_root : fields[148],\n                    archive_root : fields[149],\n                    public_data_tree_root: fields[150],\n                    global_variables_hash: fields[151],\n                },\n                contract_deployment_data: ContractDeploymentData {\n                    deployer_public_key: Point::new(fields[152], fields[153]),\n                    constructor_vk_hash : fields[154],\n                    function_tree_root : fields[155],\n                    contract_address_salt : fields[156],\n                    portal_contract_address : fields[157],\n                },\n                chain_id: fields[158],\n                version: fields[159],\n            },\n            is_execution_request: fields[160] as bool,\n        };\n        assert(contract_address == item.contract_address);\n        assert(function_selector == item.function_data.function_selector);\n\n        assert(args_hash == item.public_inputs.args_hash);\n\n        assert(item.is_execution_request == false);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        // We are issuing a regular call which is not delegate, static, or deployment. We also constrain\n        // the msg_sender in the nested call to be equal to our address, and the execution context address\n        // for the nested call to be equal to the address we actually called.\n        assert(item.public_inputs.call_context.is_delegate_call == false);\n        assert(item.public_inputs.call_context.is_static_call == false);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n        assert(item.public_inputs.call_context.msg_sender == self.inputs.call_context.storage_contract_address);\n        assert(item.public_inputs.call_context.storage_contract_address == contract_address);\n\n        self.private_call_stack.push(item.hash());\n\n        item.public_inputs.return_values\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field,\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: Field,\n        function_selector: Field,\n        args_hash: Field\n    ) {\n        let fields = enqueue_public_function_call_internal(\n            contract_address, \n            function_selector, \n            args_hash\n        );\n        let item = PublicCallStackItem {\n            contract_address: fields[0],\n            function_data: FunctionData {\n                function_selector: fields[1],\n                is_internal: fields[2] as bool,\n                is_private: fields[3] as bool,\n                is_constructor: fields[4] as bool,\n            },\n            public_inputs: PublicCircuitPublicInputs {\n                call_context: CallContext {\n                    msg_sender : fields[5],\n                    storage_contract_address : fields[6],\n                    portal_contract_address : fields[7],\n                    function_selector: fields[8], // practically same as fields[1]\n                    is_delegate_call : fields[9] as bool,\n                    is_static_call : fields[10] as bool,\n                    is_contract_deployment: fields[11] as bool,\n                },\n                args_hash: fields[12],\n                return_values: [0; RETURN_VALUES_LENGTH],\n                contract_storage_update_requests: [ContractStorageUpdateRequest::empty(); MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n                contract_storage_read: [ContractStorageRead::empty(); MAX_PUBLIC_DATA_READS_PER_CALL],\n                public_call_stack: [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n                new_commitments: [0; MAX_NEW_COMMITMENTS_PER_CALL],\n                new_nullifiers: [0; MAX_NEW_NULLIFIERS_PER_CALL],\n                new_l2_to_l1_msgs:[0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n                unencrypted_logs_hash:[0; NUM_FIELDS_PER_SHA256],\n                unencrypted_log_preimages_length: 0,\n                block_header: BlockHeader::empty(),\n                prover_address: 0,\n            },\n            is_execution_request: true,\n        };\n\n        assert(contract_address == item.contract_address);\n        assert(function_selector == item.function_data.function_selector);\n        \n        assert(args_hash == item.public_inputs.args_hash);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        // We are issuing a regular call which is not delegate, static, or deployment. We also constrain\n        // the msg_sender in the nested call to be equal to our address, and the execution context address\n        // for the nested call to be equal to the address we actually called.\n        assert(item.public_inputs.call_context.is_delegate_call == false);\n        assert(item.public_inputs.call_context.is_static_call == false);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n        assert(item.public_inputs.call_context.msg_sender == self.inputs.call_context.storage_contract_address);\n        assert(item.public_inputs.call_context.storage_contract_address == contract_address);\n\n        self.public_call_stack.push(item.hash());\n    }\n}\n\nuse crate::abi::{\n    ContractStorageRead,\n    ContractStorageUpdateRequest\n};\n\nstruct PublicContext {\n    inputs: abi::PublicContextInputs,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    contract_storage_update_requests: BoundedVec<ContractStorageUpdateRequest, MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL>,\n    contract_storage_read: BoundedVec<ContractStorageRead, MAX_PUBLIC_DATA_READS_PER_CALL>,\n    public_call_stack: BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n\n    new_commitments: BoundedVec<Field, MAX_NEW_COMMITMENTS_PER_CALL>,\n    new_nullifiers: BoundedVec<Field, crate::abi::MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    new_l2_to_l1_msgs: BoundedVec<Field, crate::abi::MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n\n    unencrypted_logs_hash: BoundedVec<Field, NUM_FIELDS_PER_SHA256>,\n    unencrypted_logs_preimages_length: Field,\n\n    block_header: BlockHeader,\n    prover_address: Field,\n}\n\nimpl PublicContext {\n    pub fn new(inputs: abi::PublicContextInputs, args_hash: Field) -> PublicContext {\n        let empty_storage_read = ContractStorageRead::empty();\n        let empty_storage_update = ContractStorageUpdateRequest::empty();\n        PublicContext {\n            inputs: inputs,\n\n            args_hash: args_hash,\n            return_values: BoundedVec::new(0),\n\n            contract_storage_update_requests: BoundedVec::new(empty_storage_update),\n            contract_storage_read: BoundedVec::new(empty_storage_read),\n            public_call_stack: BoundedVec::new(0),\n\n            new_commitments: BoundedVec::new(0),\n            new_nullifiers: BoundedVec::new(0),\n\n            new_l2_to_l1_msgs: BoundedVec::new(0),\n\n            \n            unencrypted_logs_hash: BoundedVec::new(0),\n            unencrypted_logs_preimages_length: 0,\n\n            block_header: inputs.block_header,\n            prover_address: 0,\n\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    pub fn msg_sender(self) -> Field {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> Field {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    pub fn this_portal_address(self) -> Field {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.public_global_variables.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.public_global_variables.version\n    }\n\n    pub fn selector(self) -> Field {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn block_number(self) -> Field {\n        self.inputs.public_global_variables.block_number\n    }\n\n    pub fn timestamp(self) -> Field {\n        self.inputs.public_global_variables.timestamp\n    }\n\n    pub fn finish(self) -> abi::PublicCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_log_preimages_length = 0;\n\n\n        // Compute the public call stack hashes\n        let pub_circuit_pub_inputs = abi::PublicCircuitPublicInputs {\n            call_context: self.inputs.call_context, // Done\n            args_hash: self.args_hash, // Done\n            contract_storage_update_requests: self.contract_storage_update_requests.storage,\n            contract_storage_read: self.contract_storage_read.storage,\n            return_values: self.return_values.storage,\n            new_commitments: self.new_commitments.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            public_call_stack: self.public_call_stack.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            unencrypted_logs_hash: unencrypted_logs_hash,\n            unencrypted_log_preimages_length: unencrypted_log_preimages_length,\n            block_header: self.inputs.block_header,\n            prover_address: self.prover_address,\n        };\n        pub_circuit_pub_inputs\n    }\n\n    pub fn push_new_note_hash(&mut self, note_hash: Field) {\n        self.new_commitments.push(note_hash);\n    }\n\n    pub fn push_new_nullifier(&mut self, nullifier: Field, _nullified_commitment: Field) {\n        self.new_nullifiers.push(nullifier);\n    }\n\n    pub fn message_portal(&mut self, content: Field) {\n        self.new_l2_to_l1_msgs.push(content);\n    }\n\n    // PrivateContextInputs must be temporarily passed in to prevent too many unknowns\n    // Note this returns self to get around an issue where mutable structs do not maintain mutations unless reassigned\n    pub fn consume_l1_to_l2_message(&mut self, msg_key: Field, content: Field, secret: Field) {\n        let this = (*self).this_address();\n        let nullifier = process_l1_to_l2_message(self.block_header.l1_to_l2_messages_tree_root, this, self.this_portal_address(), self.chain_id(), self.version(), msg_key, content, secret);\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT)\n    }\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        _self: Self,\n        contract_address: Field, \n        function_selector: Field,\n        args: [Field; ARGS_COUNT],\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = abi::hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        call_public_function_internal(\n            contract_address, \n            function_selector, \n            args_hash,\n        )\n    }\n\n    pub fn call_public_function_no_args(\n        _self: Self,\n        contract_address: Field, \n        function_selector: Field,\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        call_public_function_internal(\n            contract_address, \n            function_selector, \n            0,\n        )\n    }\n\n}\n\nstruct Context {\n    private: Option<&mut PrivateContext>,\n    public: Option<&mut PublicContext>,\n}\n\nimpl Context {\n    pub fn private(context: &mut PrivateContext) -> Context {\n        Context {\n            private: Option::some(context),\n            public: Option::none()\n        }\n    }\n\n    pub fn public(context: &mut PublicContext) -> Context {\n        Context {\n            public: Option::some(context),\n            private: Option::none()\n        }\n    }\n\n    pub fn none() -> Context {\n        Context {\n            public: Option::none(),\n            private: Option::none()\n        }\n    }\n}\n",
                "path": "/aztec/context.nr"
            },
            "95": {
                "source": "use dep::std::hash::{pedersen_hash_with_separator, sha256};\nuse dep::protocol_types::constants::{\n  GENERATOR_INDEX__SIGNATURE_PAYLOAD,\n  GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET,\n};\n\npub fn sha256_to_field<N>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = sha256(bytes_to_hash);\n\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (sha256_hashed[15 - i] as Field) * v;\n        low = low + (sha256_hashed[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    let hash_in_a_field = low + high * v;\n\n    hash_in_a_field\n}\n\npub fn compute_secret_hash(secret: Field) -> Field {\n    // TODO(#1205) This is probably not the right index to use\n    pedersen_hash([secret], GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET)\n}\n\npub fn pedersen_hash<N>(inputs: [Field; N], hash_index: u32) -> Field {\n    pedersen_hash_with_separator(inputs, hash_index)\n}\n",
                "path": "/aztec/hash.nr"
            },
            "116": {
                "source": "#[oracle(packArguments)]\nfn pack_arguments_oracle<N>(_args: [Field; N]) -> Field {}\n\n// TODO: explain what this does.\nunconstrained pub fn pack_arguments<N>(args: [Field; N]) -> Field {\n    pack_arguments_oracle(args)\n}\n",
                "path": "/aztec/oracle/arguments.nr"
            },
            "117": {
                "source": "use dep::protocol_types::constants::CALL_PRIVATE_FUNCTION_RETURN_SIZE;\n\n#[oracle(callPrivateFunction)]\nfn call_private_function_oracle(_contract_address: Field, _function_selector: Field, _args_hash: Field) -> [Field; CALL_PRIVATE_FUNCTION_RETURN_SIZE] {}\n\nunconstrained pub fn call_private_function_internal(contract_address: Field, function_selector: Field, args_hash: Field) -> [Field; CALL_PRIVATE_FUNCTION_RETURN_SIZE] {\n    call_private_function_oracle(contract_address, function_selector, args_hash)\n}\n",
                "path": "/aztec/oracle/call_private_function.nr"
            },
            "127": {
                "source": "\n// contract_address + \n// args_hash +\n// crate::abi::FUNCTION_DATA_SIZE +\n// crate::abi::CALL_CONTEXT_SIZE +\n// = 2 + 4 + 7\nglobal ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE: Field = 13;\n\n#[oracle(enqueuePublicFunctionCall)]\nfn enqueue_public_function_call_oracle(_contract_address: Field, _function_selector: Field, _args_hash: Field) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE] {}\n\nunconstrained pub fn enqueue_public_function_call_internal(contract_address: Field, function_selector: Field, args_hash: Field) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE] {\n    enqueue_public_function_call_oracle(contract_address, function_selector, args_hash)\n}\n",
                "path": "/aztec/oracle/enqueue_public_function_call.nr"
            },
            "129": {
                "source": "use dep::protocol_types::constants::RETURN_VALUES_LENGTH;\n\n#[oracle(callPublicFunction)]\nfn call_public_function_oracle(_contract_address: Field, _function_selector: Field, _args_hash: Field) -> [Field; RETURN_VALUES_LENGTH] {}\n\nunconstrained pub fn call_public_function_internal(contract_address: Field, function_selector: Field, args_hash: Field) -> [Field; RETURN_VALUES_LENGTH] {\n    call_public_function_oracle(contract_address, function_selector, args_hash)\n}\n",
                "path": "/aztec/oracle/public_call.nr"
            },
            "133": {
                "source": "use crate::abi::FunctionData;\nuse crate::abi::PrivateCircuitPublicInputs;\nuse dep::protocol_types::constants::GENERATOR_INDEX__CALL_STACK_ITEM;\nuse crate::hash::pedersen_hash;\n\nstruct PrivateCallStackItem {\n    contract_address: Field,\n    function_data: FunctionData,\n    public_inputs: PrivateCircuitPublicInputs,\n    is_execution_request: bool,\n}\n\nimpl PrivateCallStackItem {\n    pub fn hash(self) -> Field {\n        pedersen_hash([\n            self.contract_address,\n            self.function_data.hash(),\n            self.public_inputs.hash(),\n        ], GENERATOR_INDEX__CALL_STACK_ITEM)\n    }\n}\n",
                "path": "/aztec/private_call_stack_item.nr"
            },
            "134": {
                "source": "use crate::{\n    abi,\n    hash::pedersen_hash,\n    abi::{\n        PublicCircuitPublicInputs,\n        FunctionData,\n    },\n};\nuse dep::protocol_types::constants::{\n    RETURN_VALUES_LENGTH,\n    GENERATOR_INDEX__CALL_STACK_ITEM,\n};\n\n// oracles\nuse crate::oracle::{\n    enqueue_public_function_call::enqueue_public_function_call_internal,\n};\n\nstruct PublicCallStackItem {\n    contract_address: Field,\n    function_data: FunctionData,\n    public_inputs: PublicCircuitPublicInputs,\n    is_execution_request: bool,\n}\n\nimpl PublicCallStackItem {\n    pub fn hash(self) -> Field {\n        pedersen_hash([\n            self.contract_address,\n            self.function_data.hash(),\n            self.public_inputs.hash(),\n        ], GENERATOR_INDEX__CALL_STACK_ITEM)\n    }\n}\n\n",
                "path": "/aztec/public_call_stack_item.nr"
            },
            "145": {
                "source": "struct BoundedVec<T, MaxLen> {\n    storage: [T; MaxLen],\n    len: Field,\n}\n\nimpl<T, MaxLen> BoundedVec<T, MaxLen> {\n    pub fn new(initial_value: T) -> Self {\n        BoundedVec { storage: [initial_value; MaxLen], len: 0 }\n    }\n\n    pub fn get(mut self: Self, index: Field) -> T {\n        assert(index as u64 < self.len as u64);\n        self.storage[index]\n    }\n\n    pub fn get_unchecked(mut self: Self, index: Field) -> T {\n        self.storage[index]\n    }\n\n    pub fn push(&mut self, elem: T) {\n        assert(self.len as u64 < MaxLen as u64);\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    pub fn push_array<Len>(&mut self, array: [T; Len]) {\n        let newLen = self.len + array.len();\n        assert(newLen as u64 <= MaxLen as u64);\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = newLen;\n    }\n\n    pub fn pop(&mut self) -> T {\n        assert(self.len as u64 > 0);\n\n        let elem = self.storage[self.len - 1];\n        self.len -= 1;\n        elem\n    }\n\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        let mut exceeded_len = false;\n        for i in 0..MaxLen {\n            exceeded_len |= i == self.len;\n            if (!exceeded_len) {\n                ret |= predicate(self.storage[i]);\n            }\n        }\n        ret\n    }\n}\n\n#[test]\nfn test_vec_push_pop() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    assert(vec.len == 0);\n    vec.push(2);\n    assert(vec.len == 1);\n    vec.push(4);\n    assert(vec.len == 2);\n    vec.push(6);\n    assert(vec.len == 3);\n    let x = vec.pop();\n    assert(x == 6);\n    assert(vec.len == 2);\n    assert(vec.get(0) == 2);\n    assert(vec.get(1) == 4);\n}\n\n#[test]\nfn test_vec_push_array() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    vec.push_array([2, 4]);\n    assert(vec.len == 2);\n    assert(vec.get(0) == 2);\n    assert(vec.get(1) == 4);\n}\n\n#[test(should_fail)]\nfn test_vec_get_out_of_bound() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    vec.push_array([2, 4]);\n    let _x = vec.get(2);\n}\n\n#[test(should_fail)]\nfn test_vec_get_not_declared() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    vec.push_array([2]);\n    let _x = vec.get(1);\n}\n\n#[test(should_fail)]\nfn test_vec_get_uninitialized() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    let _x = vec.get(0);\n}\n\n#[test(should_fail)]\nfn test_vec_push_overflow() {\n    let mut vec: BoundedVec<Field, 1> = BoundedVec::new(0);\n    vec.push(1);\n    vec.push(2);\n}\n\n#[test]\nfn test_vec_any() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    vec.push_array([2, 4, 6]);\n    assert(vec.any(|v| v == 2) == true);\n    assert(vec.any(|v| v == 4) == true);\n    assert(vec.any(|v| v == 6) == true);\n    assert(vec.any(|v| v == 3) == false);\n}\n\n#[test]\nfn test_vec_any_not_default() {\n    let default_value = 1;\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(default_value);\n    vec.push_array([2, 4]);\n    assert(vec.any(|v| v == default_value) == false);\n}\n",
                "path": "/aztec/types/vec.nr"
            }
        }
    }
}
