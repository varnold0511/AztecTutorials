{
    "name": "ImportTest",
    "functions": [
        {
            "name": "callNoArgs",
            "functionType": "secret",
            "isInternal": false,
            "parameters": [
                {
                    "name": "target",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                }
            ],
            "returnTypes": [],
            "bytecode": "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",
            "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
        },
        {
            "name": "callOpenFn",
            "functionType": "secret",
            "isInternal": false,
            "parameters": [
                {
                    "name": "target",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                }
            ],
            "returnTypes": [],
            "bytecode": "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",
            "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
        },
        {
            "name": "constructor",
            "functionType": "secret",
            "isInternal": false,
            "parameters": [],
            "returnTypes": [],
            "bytecode": "H4sIAAAAAAAA/+XdZZOTZxSH8V0gSd27uLu1ySbZJFVK3alSL6Rk6y1V6qXU3XB390/IuWbCwAt4xb0z3HNl5j9590x+m+yj5z7nZE9Pz7aeM6/e7vuC7nv5wl6VQmyjcI7tVssDtVqn0d+pVCtLy/2tdrNertXbA81Ks1Jv1pf1N6vVTrPWbLTarUa5ValVO5XBeqs62N1wId1nLA+FuxjbKA6Bu3iRu0uxjdIQuEuJ3ef7vV/o5xw5RJ9zWOLvqTeheVQm5mEJzaMzMQ9PaB6TiXlEQvPYTMyFhOZxmZiLCc3jMzGXEponZGIemdA8UWieJDRPFpqnCM1TheZpQvN0oXmG0DxTaJ4lNM8WmucIzXOF5nlC83yh+Sah+WahuSw0V4TmfqG5KjTXhOa60DwgNDeE5qbQ3BKabxGabxWabxOabxea7xCa7xSaFwjNdwnNC4Xmu4Xme4Tme4Xm+4Tm+4XmB4TmB4Xmh4Tmh4XmR4TmR4Xmx4Tmx4XmRULzE0Lzk0LzU0Lz00LzM0Lzs0LzYqH5OaH5eaH5BaH5RaH5JaH5ZaH5FaH5VaF5idC8VGhuC82vCc3LhOaO0DwoNL8uNL8hNL8pNL8lNL8tNL8jNL8rNL8nNL8vNC8Xmj8Qmj8Umj8Smj8Wmj8Rmj8VmlcIzZ8JzZ8LzV8IzV8KzV8JzV8Lzd8Izd8KzSuF5u+E5lVC8/dC8w9C849C809C889C8y9C869C829C8+9C8x9C859C819C899C8z9C879C839C8/9C82qheY3QvFZoXic0rxeaNwjNG4XmTULzZqF5i9C8VWjeJjRvF5p3CM07heZdmZgvSWjenYn50oTmPZmYL0to3puJ+fKE5n2ZmK9IaN6fifnKhOYDmZivSmg+mIn56oTmQ5mYr0loPpyJ+dqE5iOZmK9LaD6aifn6hOZjmZhvSGg+non5xoTmE5mY+xKaTyY093W309s1D4+MiBQixUgpwjUh10hcM3AOzTkl51icc3AM5pjEPpp9Fv/D/Kb5jvvO+ntu6r6PioyOjImMjYyLjI9MiEyMTIpMjkyJTI1Mi0yPzIjMjMyKzI7MicyNzIvMjzDjnpnvfInMBGdGNjOjmaHMTGFm7DYizGBlJikzOplZyQxHZhoy4+/0zDtmoi2MMDOLGVLMVGLGEDN3mEHDTBZmlDCzgxkWzHRgxgE9/xdF6AlPj3R6htNDm57S9FheHKEHLz1p6dFKz1J6eNLTkh6P9DxcEqEnXjtCzzR6iNFTix5T9FyiBxE9eehRQ88WepjQ04MeF/R8WB6hJwBr5Fkzzhpq1hSzxnZFhDWYrElkjR5r1ljDxZom1viw5mVlhDURqyLUzFNDTk01NcbU3FKDSk0mNYrU7FHDRk0XNU7U/FADQ00INRLUDPAMnWfKPGPlmSPP4HgmxTMafhPcw+eeNvd4uee5PcI9Me4Rcc+EewhcU3ONyTUX1yCck3OOyjkb5zAc0znGsc9nH8g+gf+R069TXMw0LzyaAAA=",
            "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
        },
        {
            "name": "main",
            "functionType": "secret",
            "isInternal": false,
            "parameters": [
                {
                    "name": "target",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                }
            ],
            "returnTypes": [],
            "bytecode": "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",
            "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
        },
        {
            "name": "pubCallOpenFn",
            "functionType": "open",
            "isInternal": false,
            "parameters": [
                {
                    "name": "target",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                }
            ],
            "returnTypes": [
                {
                    "kind": "struct",
                    "path": "aztec::abi::PublicCircuitPublicInputs",
                    "fields": [
                        {
                            "name": "call_context",
                            "type": {
                                "kind": "struct",
                                "path": "aztec::abi::CallContext",
                                "fields": [
                                    {
                                        "name": "msg_sender",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "storage_contract_address",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "portal_contract_address",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "function_selector",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "is_delegate_call",
                                        "type": {
                                            "kind": "boolean"
                                        }
                                    },
                                    {
                                        "name": "is_static_call",
                                        "type": {
                                            "kind": "boolean"
                                        }
                                    },
                                    {
                                        "name": "is_contract_deployment",
                                        "type": {
                                            "kind": "boolean"
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "name": "args_hash",
                            "type": {
                                "kind": "field"
                            }
                        },
                        {
                            "name": "return_values",
                            "type": {
                                "kind": "array",
                                "length": 4,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "contract_storage_update_requests",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "struct",
                                    "path": "aztec::abi::ContractStorageUpdateRequest",
                                    "fields": [
                                        {
                                            "name": "storage_slot",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "old_value",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "new_value",
                                            "type": {
                                                "kind": "field"
                                            }
                                        }
                                    ]
                                }
                            }
                        },
                        {
                            "name": "contract_storage_read",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "struct",
                                    "path": "aztec::abi::ContractStorageRead",
                                    "fields": [
                                        {
                                            "name": "storage_slot",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "value",
                                            "type": {
                                                "kind": "field"
                                            }
                                        }
                                    ]
                                }
                            }
                        },
                        {
                            "name": "public_call_stack",
                            "type": {
                                "kind": "array",
                                "length": 4,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "new_commitments",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "new_nullifiers",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "new_l2_to_l1_msgs",
                            "type": {
                                "kind": "array",
                                "length": 2,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "unencrypted_logs_hash",
                            "type": {
                                "kind": "array",
                                "length": 2,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "unencrypted_log_preimages_length",
                            "type": {
                                "kind": "field"
                            }
                        },
                        {
                            "name": "block_header",
                            "type": {
                                "kind": "struct",
                                "path": "aztec::abi::BlockHeader",
                                "fields": [
                                    {
                                        "name": "note_hash_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "nullifier_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "contract_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "l1_to_l2_messages_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "archive_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "public_data_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "global_variables_hash",
                                        "type": {
                                            "kind": "field"
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "name": "prover_address",
                            "type": {
                                "kind": "field"
                            }
                        }
                    ]
                }
            ],
            "bytecode": "",
            "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
        }
    ],
    "events": [],
    "debug": {
        "debugSymbols": [
            "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",
            "eJyrVsrJT04syczPK1ayqq6tBQAz9wY7",
            "eJzl3N9q2zAUx/F38XUYko6O/uRVxi7C1kGhpGPJXci712WRbBTtHEIc8wu9agoS+Vhx8xVJ7dPw9v5zd3x93x+G7WmgYfv9NBz+7Pafvx2Ou7/HYWs2w8v+1/jzvBl+v769DFt73lyNsp5CuIwcH6dUR2fXG87O2jKcXVCG5xjLYON4GsvnH5vBP6WaV1ST56r2hu9Qh57aGpvKlEiyPdhY6MH5ST4uZ2d0YkOX0Ynt7Dj9g1+d+EWOM32R48zQx7nc36c1ax+oT/VAY54f6KfGrq0hFjRubU0u7+cpJCufBNmmcsZkMlf0bplR6Fz/TDO71NK7eX4OerfRz0FfPdTL0Vdv73L01XO6HH31Qi5Gd6s3bzn66oFcjg5dU5mOXVNOlR65pWPXVKRj11SkY9dUpGPXVKRj11SkY9dUohN2TUU6dk1FOnZNRTp0TYPJhR5caOnQNZXp0DWV6dA1lenQNZXp0DWV6dA1FekeuqYyHbqmMh26pjIduabWGOeLwxhvWzxyT1U8clFVPHJTVTxyVVU8cldVPHJZNTwjt1XFI9dVxSP3VcWDFzaZCZ/bj64ZvLAyHrywMh68sDIevLAyHrywMh68sCI+gBdWxoMXVsaDF1bGYxfW+ml7YINr8diFVfDYhVXw2IVV8NiFVfDYhVXw2IWV8RG7sAoeu7AKHruwCh66sG76vnh8HGOLhy6shocurIaHLqyGhy6shocurIaHLqyCT9CF1fDQhdXw0IXV8NiFDaZeMeaCb79ETtiFDaHubVx07efzCbuw0ZsJn67w2IVNZsIn8i0eurDkfPm/CUtkrs556MISTd9JEV1dmpigC0uU6yWn5INp8Bm6sORjdRBHavHQhSXO9QpoCqGNVIYuLEUzrXy0WR7u6/WvbGYOop6aXHEEptlLevt14dCZf4oVhN5r3LaC7FxZQR+VFYzZFXXMbOQV9KZe4e+tifcsN/Tu6HHLnWKtf4pJuUWC41xqO24277pvBPR+7oHLPT57cWR/zx0pMvam8rZ32PqmyZmUFVRu0/Gtu+PzVJ9gtsG1Nl4m9W/voc7q73HqOjk7Ox1s+HevjP/Mkp9rnNXdkqizuhlWZ3XTo87qvoMKs87nD/Voz5U=",
            ""
        ],
        "fileMap": {
            "1": {
                "source": "mod test_contract_interface;\n\n// Contract that uses the autogenerated interface of the Test contract for calling its functions.\n// Used for testing calling into other contracts via autogenerated interfaces.\ncontract ImportTest {\n    use crate::test_contract_interface::{\n        TestPrivateContextInterface,\n        TestPublicContextInterface,\n        AStructTestCodeGenStruct,\n        ADeepStructTestCodeGenStruct,\n        ANoteADeepStructTestCodeGenStruct,\n        ManyNotesADeepStructTestCodeGenStruct,\n    };\n\n    #[aztec(private)]\n    fn constructor(\n    ) {}\n\n    // Calls the testCodeGen on the Test contract at the target address\n    // Used for testing calling a function with arguments of multiple types\n    // See yarn-project/acir-simulator/src/client/private_execution.ts\n    // See yarn-project/end-to-end/src/e2e_nested_contract.test.ts\n    #[aztec(private)]\n    fn main(target: Field) -> Field {\n        let test_contract_instance = TestPrivateContextInterface::at(target);\n        let return_values = test_contract_instance.test_code_gen(&mut context,\n            1,\n            true,\n            1 as u32,\n            [1, 2],\n            AStructTestCodeGenStruct { amount: 1, secret_hash: 2 },\n            ADeepStructTestCodeGenStruct {\n                a_field: 1,\n                a_bool: true,\n                a_note: ANoteADeepStructTestCodeGenStruct { amount: 1, secret_hash: 2 },\n                many_notes: [\n                    ManyNotesADeepStructTestCodeGenStruct { amount: 1, secret_hash: 2 },\n                    ManyNotesADeepStructTestCodeGenStruct { amount: 1, secret_hash: 2 },\n                    ManyNotesADeepStructTestCodeGenStruct { amount: 1, secret_hash: 2 }\n                ]\n            });\n\n        return_values[0]\n    }\n\n    // Calls the getThisAddress on the Test contract at the target address\n    // Used for testing calling a function with no arguments\n    // See yarn-project/end-to-end/src/e2e_nested_contract.test.ts\n    #[aztec(private)]\n    fn callNoArgs(target: Field) -> Field {\n        let test_contract_instance = TestPrivateContextInterface::at(target);\n        let return_values = test_contract_instance.get_this_address(&mut context);\n\n        return_values[0]\n    }\n\n    // Calls the createNullifierPublic on the Test contract at the target address\n    // Used for testing calling an open function\n    // See yarn-project/end-to-end/src/e2e_nested_contract.test.ts\n    #[aztec(private)]\n    fn callOpenFn(target: Field) {\n        let test_contract_instance = TestPrivateContextInterface::at(target);\n        test_contract_instance.create_nullifier_public(&mut context, 1, 2);\n    }\n\n    // Calls the createNullifierPublic on the Test contract at the target address\n    // Used for testing calling an open function from another open function\n    // See yarn-project/end-to-end/src/e2e_nested_contract.test.ts\n    #[aztec(public)]\n    fn pubCallOpenFn(target: Field) -> Field {\n        let test_contract_instance = TestPublicContextInterface::at(target);\n        let ret = test_contract_instance.create_nullifier_public(context, 1, 2);\n\n        ret[0]\n    }\n}\n\n",
                "path": "/usr/src/yarn-project/noir-contracts/src/contracts/import_test_contract/src/main.nr"
            },
            "75": {
                "source": "global ARGS_LENGTH: Field = 16;\nglobal RETURN_VALUES_LENGTH: Field = 4;\n\n/**\n * Convention for constant array lengths are mainly divided in 2 classes:\n *  - FUNCTION CALL\n *  - TRANSACTION\n *\n * Agreed convention is to use MAX_XXX_PER_CALL resp. MAX_XXX_PER_TX, where XXX denotes a type of element such as\n * commitment, or nullifier, e.g.,:\n *  - MAX_NEW_NULLIFIERS_PER_CALL\n *  - MAX_NEW_COMMITMENTS_PER_TX\n *\n * In the kernel circuits, we accumulate elements such as commitments and the nullifiers from all functions calls in a\n * transaction. Therefore, we always must have:\n * MAX_XXX_PER_TX ≥ MAX_XXX_PER_CALL\n *\n * For instance:\n * MAX_NEW_COMMITMENTS_PER_TX ≥ MAX_NEW_COMMITMENTS_PER_CALL\n * MAX_NEW_NULLIFIERS_PER_TX ≥ MAX_NEW_NULLIFIERS_PER_CALL\n *\n */\n\n// docs:start:constants\n// \"PER CALL\" CONSTANTS\nglobal MAX_NEW_COMMITMENTS_PER_CALL: Field = 16;\nglobal MAX_NEW_NULLIFIERS_PER_CALL: Field = 16;\nglobal MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL: Field = 4;\nglobal MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL: Field = 4;\nglobal MAX_NEW_L2_TO_L1_MSGS_PER_CALL: Field = 2;\nglobal MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL: Field = 16;\nglobal MAX_PUBLIC_DATA_READS_PER_CALL: Field = 16;\nglobal MAX_READ_REQUESTS_PER_CALL: Field = 32;\nglobal MAX_PENDING_READ_REQUESTS_PER_CALL: Field = 32;\n\n// \"PER TRANSACTION\" CONSTANTS\nglobal MAX_NEW_COMMITMENTS_PER_TX: Field = 64;\nglobal MAX_NEW_NULLIFIERS_PER_TX: Field = 64;\nglobal MAX_PRIVATE_CALL_STACK_LENGTH_PER_TX: Field = 8;\nglobal MAX_PUBLIC_CALL_STACK_LENGTH_PER_TX: Field = 8;\nglobal MAX_NEW_L2_TO_L1_MSGS_PER_TX: Field = 2;\nglobal MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_TX: Field = 16;\nglobal MAX_PUBLIC_DATA_READS_PER_TX: Field = 16;\nglobal MAX_NEW_CONTRACTS_PER_TX: Field = 1;\nglobal MAX_OPTIONALLY_REVEALED_DATA_LENGTH_PER_TX: Field = 4;\nglobal MAX_READ_REQUESTS_PER_TX: Field = 128;\nglobal MAX_PENDING_READ_REQUESTS_PER_TX: Field = 128;\nglobal NUM_ENCRYPTED_LOGS_HASHES_PER_TX: Field = 1;\nglobal NUM_UNENCRYPTED_LOGS_HASHES_PER_TX: Field = 1;\n// docs:end:constants\n\n// ROLLUP CONTRACT CONSTANTS - constants used only in l1-contracts\nglobal NUMBER_OF_L1_L2_MESSAGES_PER_ROLLUP: Field = 16;\n// TODO(961): Use this constant everywhere instead of hard-coded \"2\".\nglobal KERNELS_PER_BASE_ROLLUP: Field = 2;\nglobal MAX_NEW_NULLIFIERS_PER_BASE_ROLLUP: Field = 128;\nglobal MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_BASE_ROLLUP: Field = 32;\nglobal MAX_PUBLIC_DATA_READS_PER_BASE_ROLLUP: Field = 32;\n\n// TREES RELATED CONSTANTS\nglobal VK_TREE_HEIGHT: Field = 3;\nglobal FUNCTION_TREE_HEIGHT: Field = 5;\nglobal CONTRACT_TREE_HEIGHT: Field = 16;\nglobal NOTE_HASH_TREE_HEIGHT: Field = 32;\nglobal PUBLIC_DATA_TREE_HEIGHT: Field = 254;\nglobal NULLIFIER_TREE_HEIGHT: Field = 20;\nglobal L1_TO_L2_MSG_TREE_HEIGHT: Field = 16;\nglobal ROLLUP_VK_TREE_HEIGHT: Field = 8;\n\n// SUB-TREES RELATED CONSTANTS\nglobal CONTRACT_SUBTREE_HEIGHT: Field = 1;\nglobal CONTRACT_SUBTREE_SIBLING_PATH_LENGTH: Field = 15;\nglobal NOTE_HASH_SUBTREE_HEIGHT: Field = 7;\nglobal NOTE_HASH_SUBTREE_SIBLING_PATH_LENGTH: Field = 25;\nglobal NULLIFIER_SUBTREE_HEIGHT: Field = 7;\nglobal ARCHIVE_HEIGHT: Field = 16;\nglobal NULLIFIER_SUBTREE_SIBLING_PATH_LENGTH: Field = 13;\nglobal L1_TO_L2_MSG_SUBTREE_HEIGHT: Field = 4;\nglobal L1_TO_L2_MSG_SUBTREE_SIBLING_PATH_LENGTH: Field = 12;\n\n// MISC CONSTANTS\nglobal FUNCTION_SELECTOR_NUM_BYTES: Field = 4;\nglobal MAPPING_SLOT_PEDERSEN_SEPARATOR: Field = 4;\nglobal NUM_FIELDS_PER_SHA256: Field = 2;\nglobal ARGS_HASH_CHUNK_LENGTH: u32 = 32;\nglobal ARGS_HASH_CHUNK_COUNT: u32 = 16;\n\n\n// NOIR CONSTANTS - constants used only in yarn-packages/noir-contracts\n// Some are defined here because Noir doesn't yet support globals referencing other globals yet.\n// Move these constants to a noir file once the issue bellow is resolved:\n// https://github.com/noir-lang/noir/issues/1734\nglobal L1_TO_L2_MESSAGE_LENGTH: Field = 8;\nglobal L1_TO_L2_MESSAGE_ORACLE_CALL_LENGTH: Field = 26;\nglobal MAX_NOTE_FIELDS_LENGTH: Field = 20;\n// GET_NOTE_ORACLE_RETURN_LENGT = MAX_NOTE_FIELDS_LENGTH + 1 + 2\n// The plus 1 is 1 extra field for nonce.\n// + 2 for EXTRA_DATA: [number_of_return_notes, contract_address]\nglobal GET_NOTE_ORACLE_RETURN_LENGTH: Field = 23;\nglobal MAX_NOTES_PER_PAGE: Field = 10;\n// VIEW_NOTE_ORACLE_RETURN_LENGTH = MAX_NOTES_PER_PAGE * (MAX_NOTE_FIELDS_LENGTH + 1) + 2;\nglobal VIEW_NOTE_ORACLE_RETURN_LENGTH: Field = 212;\nglobal CALL_CONTEXT_LENGTH: Field = 7;\nglobal BLOCK_HEADER_LENGTH: Field = 7;\nglobal FUNCTION_DATA_LENGTH: Field = 4;\nglobal CONTRACT_DEPLOYMENT_DATA_LENGTH: Field = 6;\n// Change this ONLY if you have changed the PrivateCircuitPublicInputs structure.\n// In other words, if the structure/size of the public inputs of a function call changes then we\n// should change this constant as well as the offsets in private_call_stack_item.nr\nglobal PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH: Field = 155;\nglobal CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH: Field = 3;\nglobal CONTRACT_STORAGE_READ_LENGTH: Field = 2;\n// Change this ONLY if you have changed the PublicCircuitPublicInputs structure.\nglobal PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH: Field = 142;\nglobal GET_NOTES_ORACLE_RETURN_LENGTH: Field = 674;\nglobal EMPTY_NULLIFIED_COMMITMENT: Field = 1000000;\nglobal CALL_PRIVATE_FUNCTION_RETURN_SIZE: Field = 161;\nglobal PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH: Field = 87;\nglobal PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH: Field = 144;\nglobal COMMITMENTS_NUM_BYTES_PER_BASE_ROLLUP: Field = 4096;\nglobal NULLIFIERS_NUM_BYTES_PER_BASE_ROLLUP: Field = 4096;\nglobal PUBLIC_DATA_WRITES_NUM_BYTES_PER_BASE_ROLLUP: Field = 2048;\nglobal CONTRACTS_NUM_BYTES_PER_BASE_ROLLUP: Field = 64;\nglobal CONTRACT_DATA_NUM_BYTES_PER_BASE_ROLLUP: Field = 128;\nglobal CONTRACT_DATA_NUM_BYTES_PER_BASE_ROLLUP_UNPADDED: Field = 104;\nglobal L2_TO_L1_MSGS_NUM_BYTES_PER_BASE_ROLLUP: Field = 128;\nglobal LOGS_HASHES_NUM_BYTES_PER_BASE_ROLLUP: Field = 128;\n\n/**\n * Enumerate the hash_indices which are used for pedersen hashing.\n * We start from 1 to avoid the default generators. The generator indices are listed\n * based on the number of elements each index hashes. The following conditions must be met:\n *\n * +-----------+-------------------------------+----------------------+\n * | Hash size | Number of elements hashed (n) | Condition to use     |\n * |-----------+-------------------------------+----------------------|\n * | LOW       | n ≤ 8                         | 0 < hash_index ≤ 32  |\n * | MID       | 8 < n ≤ 16                    | 32 < hash_index ≤ 40 |\n * | HIGH      | 16 < n ≤ 48                   | 40 < hash_index ≤ 48 |\n * +-----------+-------------------------------+----------------------+\n *\n * Note: When modifying, modify `GeneratorIndexPacker` in packer.hpp accordingly.\n */\n// Indices with size ≤ 8\nglobal GENERATOR_INDEX__COMMITMENT = 1;\nglobal GENERATOR_INDEX__COMMITMENT_NONCE = 2;\nglobal GENERATOR_INDEX__UNIQUE_COMMITMENT = 3;\nglobal GENERATOR_INDEX__SILOED_COMMITMENT = 4;\nglobal GENERATOR_INDEX__NULLIFIER = 5;\nglobal GENERATOR_INDEX__INITIALIZATION_NULLIFIER = 6;\nglobal GENERATOR_INDEX__OUTER_NULLIFIER = 7;\nglobal GENERATOR_INDEX__PUBLIC_DATA_READ = 8;\nglobal GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST = 9;\nglobal GENERATOR_INDEX__FUNCTION_DATA = 10;\nglobal GENERATOR_INDEX__FUNCTION_LEAF = 11;\nglobal GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA = 12;\nglobal GENERATOR_INDEX__CONSTRUCTOR = 13;\nglobal GENERATOR_INDEX__CONSTRUCTOR_ARGS = 14;\nglobal GENERATOR_INDEX__CONTRACT_ADDRESS = 15;\nglobal GENERATOR_INDEX__CONTRACT_LEAF = 16;\nglobal GENERATOR_INDEX__CALL_CONTEXT = 17;\nglobal GENERATOR_INDEX__CALL_STACK_ITEM = 18;\nglobal GENERATOR_INDEX__CALL_STACK_ITEM_2 = 19;\nglobal GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET = 20;\nglobal GENERATOR_INDEX__L2_TO_L1_MSG = 21;\nglobal GENERATOR_INDEX__TX_CONTEXT = 22;\nglobal GENERATOR_INDEX__PUBLIC_LEAF_INDEX = 23;\nglobal GENERATOR_INDEX__PUBLIC_DATA_LEAF = 24;\nglobal GENERATOR_INDEX__SIGNED_TX_REQUEST = 25;\nglobal GENERATOR_INDEX__GLOBAL_VARIABLES = 26;\nglobal GENERATOR_INDEX__PARTIAL_ADDRESS = 27;\nglobal GENERATOR_INDEX__BLOCK_HASH = 28;\n// Indices with size ≤ 16\nglobal GENERATOR_INDEX__TX_REQUEST = 33;\nglobal GENERATOR_INDEX__SIGNATURE_PAYLOAD = 34;\n// Indices with size ≤ 44\nglobal GENERATOR_INDEX__VK = 41;\nglobal GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS = 42;\nglobal GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS = 43;\nglobal GENERATOR_INDEX__FUNCTION_ARGS = 44;\n",
                "path": "/protocol_types/constants.nr"
            },
            "92": {
                "source": "use dep::protocol_types::constants::{\n    RETURN_VALUES_LENGTH,\n    MAX_READ_REQUESTS_PER_CALL,\n    MAX_PENDING_READ_REQUESTS_PER_CALL,\n    MAX_NEW_COMMITMENTS_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n    NUM_FIELDS_PER_SHA256,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL,\n    GENERATOR_INDEX__FUNCTION_ARGS,\n    BLOCK_HEADER_LENGTH,\n    CONTRACT_DEPLOYMENT_DATA_LENGTH,\n    CALL_CONTEXT_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n    CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH,\n    CONTRACT_STORAGE_READ_LENGTH,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n    GENERATOR_INDEX__BLOCK_HASH,\n    GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS,\n    GENERATOR_INDEX__FUNCTION_DATA,\n    GENERATOR_INDEX__PUBLIC_DATA_READ,\n    GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST,\n    GENERATOR_INDEX__CALL_CONTEXT,\n    GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS,\n    GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA,\n};\n\nuse crate::oracle::debug_log;\nuse crate::types::vec::BoundedVec;\nuse crate::types::point::Point;\nuse crate::hash::pedersen_hash;\n\n// docs:start:private-global-variables\nstruct PrivateGlobalVariables {\n    chain_id: Field,\n    version: Field,\n}\n// docs:end:private-global-variables\n\nimpl PrivateGlobalVariables {\n    fn serialize(self) -> [Field; 2] {\n        [self.chain_id, self.version]\n    }\n}\n\n// docs:start:public-global-variables\nstruct PublicGlobalVariables {\n    chain_id: Field,\n    version: Field,\n    block_number: Field,\n    timestamp: Field,\n}\n// docs:end:public-global-variables\n\nimpl PublicGlobalVariables {\n    fn serialize(self) -> [Field; 4] {\n        [self.chain_id, self.version, self.block_number, self.timestamp]\n    }\n}\n\n// docs:start:contract-deployment-data\nstruct ContractDeploymentData {\n    deployer_public_key: Point,\n    constructor_vk_hash : Field,\n    function_tree_root : Field,\n    contract_address_salt : Field,\n    portal_contract_address : Field,\n}\n// docs:end:contract-deployment-data\n\nimpl ContractDeploymentData {\n    fn serialize(self) -> [Field; CONTRACT_DEPLOYMENT_DATA_LENGTH] {\n        [\n            self.deployer_public_key.x,\n            self.deployer_public_key.y,\n            self.constructor_vk_hash,\n            self.function_tree_root,\n            self.contract_address_salt,\n            self.portal_contract_address,\n        ]\n    }\n\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA)\n    }\n}\n\n// PrivateContextInputs are expected to be provided to each private function\n// docs:start:private-context-inputs\nstruct PrivateContextInputs {\n    call_context : CallContext,\n    block_header: BlockHeader,\n    contract_deployment_data: ContractDeploymentData,\n    private_global_variables: PrivateGlobalVariables,\n}\n// docs:end:private-context-inputs\n\n// PublicContextInputs are expected to be provided to each public function\n// docs:start:public-context-inputs\nstruct PublicContextInputs {\n    call_context: CallContext,\n    block_header: BlockHeader,\n\n    public_global_variables: PublicGlobalVariables,\n}\n// docs:end:public-context-inputs\n\n// docs:start:call-context\nstruct CallContext {\n    msg_sender : Field,\n    storage_contract_address : Field,\n    portal_contract_address : Field,\n    function_selector: Field,\n\n    is_delegate_call : bool,\n    is_static_call : bool,\n    is_contract_deployment: bool,\n}\n// docs:end:call-context\n\nimpl CallContext {\n    fn serialize(self) -> [Field; CALL_CONTEXT_LENGTH] {\n        [\n            self.msg_sender,\n            self.storage_contract_address,\n            self.portal_contract_address,\n            self.function_selector,\n            self.is_delegate_call as Field,\n            self.is_static_call as Field,\n            self.is_contract_deployment as Field,\n        ]\n    }\n\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CALL_CONTEXT)\n    }\n}\n\n// docs:start:block-header\nstruct BlockHeader {\n    note_hash_tree_root : Field,\n    nullifier_tree_root : Field,\n    contract_tree_root : Field,\n    l1_to_l2_messages_tree_root : Field,\n    archive_root: Field,\n    public_data_tree_root: Field,\n    global_variables_hash: Field,\n}\n// docs:end:block-header\n\nimpl BlockHeader {\n    // NOTE: this order must match the order in `private_circuit_public_inputs.hpp`\n    pub fn serialize(self) -> [Field; BLOCK_HEADER_LENGTH] {\n        [\n            self.note_hash_tree_root,\n            self.nullifier_tree_root,\n            self.contract_tree_root,\n            self.l1_to_l2_messages_tree_root,\n            self.archive_root,\n            self.public_data_tree_root,\n            self.global_variables_hash,\n        ]\n    }\n\n    pub fn deserialize(deserialized: [Field; BLOCK_HEADER_LENGTH]) -> Self {\n        BlockHeader {\n            note_hash_tree_root: deserialized[0],\n            nullifier_tree_root: deserialized[1],\n            contract_tree_root: deserialized[2],\n            l1_to_l2_messages_tree_root: deserialized[3],\n            archive_root: deserialized[4],\n            public_data_tree_root: deserialized[5],\n            global_variables_hash: deserialized[6],\n        }\n    }\n\n    pub fn empty() -> Self {\n        Self { note_hash_tree_root: 0, nullifier_tree_root: 0, contract_tree_root: 0, l1_to_l2_messages_tree_root: 0, archive_root: 0, public_data_tree_root: 0, global_variables_hash: 0 }\n    }\n\n    pub fn block_hash(self) -> Field {\n        // TODO(#3442): Unify the ordering in `BlockHeader::serialize` function and the ordering\n        // in the block hash preimage --> This requires changes in the circuits.\n        let inputs = [\n            self.global_variables_hash,\n            self.note_hash_tree_root,\n            self.nullifier_tree_root,\n            self.contract_tree_root,\n            self.l1_to_l2_messages_tree_root,\n            self.public_data_tree_root\n        ];\n        pedersen_hash(inputs, GENERATOR_INDEX__BLOCK_HASH)\n    }\n}\n\nstruct FunctionData {\n    function_selector: Field,\n    is_internal: bool,\n    is_private: bool,\n    is_constructor: bool,\n}\n\nimpl FunctionData {\n    fn hash(self) -> Field {\n        pedersen_hash([\n            self.function_selector,\n            self.is_internal as Field,\n            self.is_private as Field,\n            self.is_constructor as Field,\n        ], GENERATOR_INDEX__FUNCTION_DATA)\n    }\n}\n\nstruct PrivateCircuitPublicInputs {\n    call_context: CallContext,\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n    read_requests: [Field; crate::abi::MAX_READ_REQUESTS_PER_CALL],\n    pending_read_requests: [Field; crate::abi::MAX_PENDING_READ_REQUESTS_PER_CALL],\n    new_commitments: [Field; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [Field; MAX_NEW_NULLIFIERS_PER_CALL],\n    nullified_commitments: [Field; MAX_NEW_NULLIFIERS_PER_CALL],\n    private_call_stack: [Field; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL],\n    public_call_stack: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_l2_to_l1_msgs: [Field; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    // Explore introducing a new type like uint256 (similar to Point), so it's more explicit that\n    // we're talking about a single number backed by two field elements.\n    encrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    encrypted_log_preimages_length: Field,\n    unencrypted_log_preimages_length: Field,\n    block_header: BlockHeader,\n    contract_deployment_data: ContractDeploymentData,\n    chain_id: Field,\n    version: Field,\n}\n\nimpl PrivateCircuitPublicInputs {\n    fn hash(self) -> Field {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0); \n        fields.push(self.call_context.hash());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.push_array(self.read_requests);\n        fields.push_array(self.pending_read_requests);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.nullified_commitments);\n        fields.push_array(self.private_call_stack);\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_header.serialize());\n        fields.push(self.contract_deployment_data.hash());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n\n        pedersen_hash(fields.storage, GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS)\n    }\n\n    fn serialize(self) -> [Field; PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.push_array(self.read_requests);\n        fields.push_array(self.pending_read_requests);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.private_call_stack);\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_header.serialize());\n        fields.push_array(self.contract_deployment_data.serialize());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n        fields.storage\n    }\n}\n\nstruct ContractStorageRead {\n    storage_slot: Field,\n    value: Field,\n}\n\nimpl ContractStorageRead {\n    pub fn serialize(self) -> [Field; CONTRACT_STORAGE_READ_LENGTH] {\n        [self.storage_slot, self.value]\n    }\n\n    pub fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_READ)\n    }\n\n    pub fn empty() -> Self {\n        Self { storage_slot: 0, value: 0 }\n    }\n}\n\nstruct ContractStorageUpdateRequest {\n    storage_slot: Field,\n    old_value: Field,\n    new_value: Field,\n}\n\nimpl ContractStorageUpdateRequest {\n    pub fn serialize(self) -> [Field; CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH] {\n        [self.storage_slot, self.old_value, self.new_value]\n    }\n\n    pub fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST)\n    }\n\n    pub fn empty() -> Self {\n        Self { storage_slot: 0, old_value: 0, new_value: 0 }\n    }\n}\n\nstruct PublicCircuitPublicInputs {\n    call_context: CallContext,\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n    contract_storage_update_requests: [ContractStorageUpdateRequest; MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n    contract_storage_read: [ContractStorageRead; MAX_PUBLIC_DATA_READS_PER_CALL],\n    public_call_stack: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_commitments: [Field; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [Field; crate::abi::MAX_NEW_NULLIFIERS_PER_CALL],\n    new_l2_to_l1_msgs: [Field; crate::abi::MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_log_preimages_length: Field,\n    block_header: BlockHeader,\n    prover_address: Field,\n}\n\nimpl PublicCircuitPublicInputs {\n    \n    pub fn hash(self) -> Field {\n        let mut inputs: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0);\n        inputs.push(self.call_context.hash());\n        inputs.push(self.args_hash);\n        inputs.push_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            inputs.push(self.contract_storage_update_requests[i].hash());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            inputs.push(self.contract_storage_read[i].hash());\n        }\n        inputs.push_array(self.public_call_stack);\n        inputs.push_array(self.new_commitments);\n        inputs.push_array(self.new_nullifiers);\n        inputs.push_array(self.new_l2_to_l1_msgs);\n\n        inputs.push_array(self.unencrypted_logs_hash);\n        inputs.push(self.unencrypted_log_preimages_length);\n        inputs.push_array(self.block_header.serialize());\n        inputs.push(self.prover_address);\n\n        pedersen_hash(inputs.storage, GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS)\n    }\n\n    pub fn serialize(self) -> [Field; PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());   \n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            fields.push_array(self.contract_storage_update_requests[i].serialize());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            fields.push_array(self.contract_storage_read[i].serialize());\n        }\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_header.serialize());\n        fields.push(self.prover_address);\n        fields.storage\n    }\n}\n\nstruct Hasher {\n    fields: [Field],\n}\n\nimpl Hasher {\n    pub fn new()-> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<N>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n\n    pub fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nglobal ARGS_HASH_CHUNK_LENGTH: u32 = 32;\nglobal ARGS_HASH_CHUNK_COUNT: u32 = 16;\n\npub fn hash_args<N>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        let mut chunks_hashes = [0; ARGS_HASH_CHUNK_COUNT];\n        for i in 0..ARGS_HASH_CHUNK_COUNT {\n            let mut chunk_hash = 0;\n            let start_chunk_index = i * ARGS_HASH_CHUNK_LENGTH;\n            if start_chunk_index < (args.len() as u32) {\n                let mut chunk_args = [0; ARGS_HASH_CHUNK_LENGTH];\n                for j in 0..ARGS_HASH_CHUNK_LENGTH {\n                    let item_index = i * ARGS_HASH_CHUNK_LENGTH + j;\n                    if item_index < (args.len() as u32) {\n                        chunk_args[j] = args[item_index];\n                    }\n                }\n                chunk_hash = pedersen_hash(chunk_args, GENERATOR_INDEX__FUNCTION_ARGS);\n            }\n            chunks_hashes[i] = chunk_hash;\n        }\n        pedersen_hash(chunks_hashes, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n",
                "path": "/aztec/abi.nr"
            },
            "94": {
                "source": "use dep::protocol_types::constants::{\n    EMPTY_NULLIFIED_COMMITMENT,\n    MAX_NEW_COMMITMENTS_PER_CALL,\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_READ_REQUESTS_PER_CALL,\n    MAX_PENDING_READ_REQUESTS_PER_CALL,\n    NUM_FIELDS_PER_SHA256,\n    RETURN_VALUES_LENGTH,\n};\n\nuse crate::abi;\n\nuse crate::abi::{\n    hash_args,\n    CallContext,\n    ContractDeploymentData,\n    BlockHeader,\n    FunctionData,\n    PrivateCircuitPublicInputs,\n    PublicCircuitPublicInputs,\n};\n\n// TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n// use dep::std::collections::vec::Vec;\n\n// l1 to l2 messaging\nuse crate::messaging::process_l1_to_l2_message;\nuse crate::private_call_stack_item::PrivateCallStackItem;\nuse crate::public_call_stack_item::PublicCallStackItem;\n\nuse crate::types::{\n    vec::BoundedVec,\n    point::Point,\n};\n\nuse crate::utils::arr_copy_slice;\n\nuse crate::oracle::{\n    arguments,\n    call_private_function::call_private_function_internal,\n    public_call::call_public_function_internal,\n    enqueue_public_function_call::enqueue_public_function_call_internal,\n    context::get_portal_address,\n    get_block_header::get_block_header,\n};\n\nuse dep::std::option::Option;\n\n// When finished, one can call .finish() to convert back to the abi\nstruct PrivateContext {\n    // docs:start:private-context\n    inputs: abi::PrivateContextInputs,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    read_requests: BoundedVec<Field, MAX_READ_REQUESTS_PER_CALL>,\n    pending_read_requests: BoundedVec<Field, MAX_PENDING_READ_REQUESTS_PER_CALL>,\n\n    new_commitments: BoundedVec<Field, MAX_NEW_COMMITMENTS_PER_CALL>,\n    new_nullifiers: BoundedVec<Field, MAX_NEW_NULLIFIERS_PER_CALL>,\n    nullified_commitments: BoundedVec<Field, MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    private_call_stack : BoundedVec<Field, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_stack : BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    new_l2_to_l1_msgs : BoundedVec<Field, MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    block_header: BlockHeader,\n\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    // encrypted_logs_preimages: Vec<Field>,\n    // unencrypted_logs_preimages: Vec<Field>,\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: abi::PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs: inputs,\n\n            args_hash: args_hash,\n            return_values: BoundedVec::new(0),\n\n            read_requests: BoundedVec::new(0),\n            pending_read_requests: BoundedVec::new(0),\n\n            new_commitments: BoundedVec::new(0),\n            new_nullifiers: BoundedVec::new(0),\n            nullified_commitments: BoundedVec::new(0),\n\n            block_header: inputs.block_header,\n\n            private_call_stack: BoundedVec::new(0),\n            public_call_stack: BoundedVec::new(0),\n            new_l2_to_l1_msgs: BoundedVec::new(0),\n\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    pub fn msg_sender(self) -> Field {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> Field {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    pub fn this_portal_address(self) -> Field {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.private_global_variables.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.private_global_variables.version\n    }\n\n    pub fn selector(self) -> Field {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn get_block_header(self, block_number: u32) -> BlockHeader {\n        get_block_header(block_number, self)\n    }\n\n    pub fn finish(self) -> abi::PrivateCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let encrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let encrypted_log_preimages_length = 0;\n        let unencrypted_log_preimages_length = 0;\n\n        let priv_circuit_pub_inputs = abi::PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            return_values: self.return_values.storage,\n            read_requests: self.read_requests.storage,\n            pending_read_requests: self.pending_read_requests.storage,\n            new_commitments: self.new_commitments.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            nullified_commitments: self.nullified_commitments.storage,\n            private_call_stack: self.private_call_stack.storage,\n            public_call_stack: self.public_call_stack.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            encrypted_logs_hash: encrypted_logs_hash,\n            unencrypted_logs_hash: unencrypted_logs_hash,\n            encrypted_log_preimages_length: encrypted_log_preimages_length,\n            unencrypted_log_preimages_length: unencrypted_log_preimages_length,\n            block_header: self.block_header,\n            contract_deployment_data: self.inputs.contract_deployment_data,\n            chain_id: self.inputs.private_global_variables.chain_id,\n            version: self.inputs.private_global_variables.version,\n        };\n        priv_circuit_pub_inputs\n    }\n\n    pub fn push_read_request(&mut self, read_request: Field) {\n        self.read_requests.push(read_request);\n    }\n\n    pub fn push_pending_read_request(&mut self, pending_read_request: Field) {\n        self.pending_read_requests.push(pending_read_request);\n    }\n\n    pub fn push_new_note_hash(&mut self, note_hash: Field) {\n        self.new_commitments.push(note_hash);\n    }\n\n    // We never push a zero nullified_commitment as zero is used to indicate the end\n    // of a field array in private kernel. This routine transparently replaces a\n    // zero value into the special placeholder: EMPTY_NULLIFIED_COMMITMENT.\n    pub fn push_new_nullifier(&mut self, nullifier: Field, nullified_commitment: Field) {\n        self.new_nullifiers.push(nullifier);\n        let mut non_zero_nullified = nullified_commitment;\n        if (non_zero_nullified == 0) {\n            non_zero_nullified = EMPTY_NULLIFIED_COMMITMENT;\n        }\n        self.nullified_commitments.push(non_zero_nullified);\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, content: Field) \n    // docs:end:context_message_portal\n    {\n        self.new_l2_to_l1_msgs.push(content);\n    }\n\n    // PrivateContextInputs must be temporarily passed in to prevent too many unknowns\n    // Note this returns self to get around an issue where mutable structs do not maintain mutations unless reassigned\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        msg_key: Field,\n        content: Field,\n        secret: Field\n    ) \n    // docs:end:context_consume_l1_to_l2_message\n    {\n        let nullifier = process_l1_to_l2_message(self.block_header.l1_to_l2_messages_tree_root, self.this_address(), self.this_portal_address(), self.chain_id(), self.version(), msg_key, content, secret);\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash)\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0)\n    }\n\n    pub fn call_private_function_with_packed_args(\n        &mut self,\n        contract_address: Field,\n        function_selector: Field,\n        args_hash: Field\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let fields = call_private_function_internal(\n            contract_address, \n            function_selector, \n            args_hash\n        );\n        let item = PrivateCallStackItem {\n            contract_address: fields[0],\n            function_data: FunctionData {\n                function_selector: fields[1],\n                is_internal: fields[2] as bool,\n                is_private: fields[3] as bool,\n                is_constructor: fields[4] as bool,\n            },\n            public_inputs: PrivateCircuitPublicInputs {\n                call_context: CallContext {\n                    msg_sender : fields[5],\n                    storage_contract_address : fields[6],\n                    portal_contract_address : fields[7],\n                    function_selector: fields[8], // practically same as fields[1]\n                    is_delegate_call : fields[9] as bool,\n                    is_static_call : fields[10] as bool,\n                    is_contract_deployment: fields[11] as bool,\n                },\n                // TODO handle the offsets as a variable incremented during extraction?\n                args_hash: fields[12],\n                return_values: arr_copy_slice(fields, [0; RETURN_VALUES_LENGTH], 13),\n                read_requests: arr_copy_slice(fields, [0; MAX_READ_REQUESTS_PER_CALL], 17),\n                pending_read_requests: arr_copy_slice(fields, [0; MAX_READ_REQUESTS_PER_CALL], 49),\n                new_commitments: arr_copy_slice(fields, [0; MAX_NEW_COMMITMENTS_PER_CALL], 81),\n                new_nullifiers: arr_copy_slice(fields, [0; MAX_NEW_NULLIFIERS_PER_CALL], 97),\n                nullified_commitments: arr_copy_slice(fields, [0; MAX_NEW_NULLIFIERS_PER_CALL], 113),\n                private_call_stack: arr_copy_slice(fields, [0; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL], 129),\n                public_call_stack: arr_copy_slice(fields, [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL], 133),\n                new_l2_to_l1_msgs: arr_copy_slice(fields, [0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL], 137),\n                encrypted_logs_hash: arr_copy_slice(fields, [0; NUM_FIELDS_PER_SHA256], 139),\n                unencrypted_logs_hash: arr_copy_slice(fields, [0; NUM_FIELDS_PER_SHA256], 141),\n                encrypted_log_preimages_length: fields[143],\n                unencrypted_log_preimages_length: fields[144],\n                block_header: BlockHeader {\n                    // Must match order in `private_circuit_public_inputs.hpp`\n                    note_hash_tree_root : fields[145],\n                    nullifier_tree_root : fields[146],\n                    contract_tree_root : fields[147],\n                    l1_to_l2_messages_tree_root : fields[148],\n                    archive_root : fields[149],\n                    public_data_tree_root: fields[150],\n                    global_variables_hash: fields[151],\n                },\n                contract_deployment_data: ContractDeploymentData {\n                    deployer_public_key: Point::new(fields[152], fields[153]),\n                    constructor_vk_hash : fields[154],\n                    function_tree_root : fields[155],\n                    contract_address_salt : fields[156],\n                    portal_contract_address : fields[157],\n                },\n                chain_id: fields[158],\n                version: fields[159],\n            },\n            is_execution_request: fields[160] as bool,\n        };\n        assert(contract_address == item.contract_address);\n        assert(function_selector == item.function_data.function_selector);\n\n        assert(args_hash == item.public_inputs.args_hash);\n\n        assert(item.is_execution_request == false);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        // We are issuing a regular call which is not delegate, static, or deployment. We also constrain\n        // the msg_sender in the nested call to be equal to our address, and the execution context address\n        // for the nested call to be equal to the address we actually called.\n        assert(item.public_inputs.call_context.is_delegate_call == false);\n        assert(item.public_inputs.call_context.is_static_call == false);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n        assert(item.public_inputs.call_context.msg_sender == self.inputs.call_context.storage_contract_address);\n        assert(item.public_inputs.call_context.storage_contract_address == contract_address);\n\n        self.private_call_stack.push(item.hash());\n\n        item.public_inputs.return_values\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field,\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: Field,\n        function_selector: Field,\n        args_hash: Field\n    ) {\n        let fields = enqueue_public_function_call_internal(\n            contract_address, \n            function_selector, \n            args_hash\n        );\n        let item = PublicCallStackItem {\n            contract_address: fields[0],\n            function_data: FunctionData {\n                function_selector: fields[1],\n                is_internal: fields[2] as bool,\n                is_private: fields[3] as bool,\n                is_constructor: fields[4] as bool,\n            },\n            public_inputs: PublicCircuitPublicInputs {\n                call_context: CallContext {\n                    msg_sender : fields[5],\n                    storage_contract_address : fields[6],\n                    portal_contract_address : fields[7],\n                    function_selector: fields[8], // practically same as fields[1]\n                    is_delegate_call : fields[9] as bool,\n                    is_static_call : fields[10] as bool,\n                    is_contract_deployment: fields[11] as bool,\n                },\n                args_hash: fields[12],\n                return_values: [0; RETURN_VALUES_LENGTH],\n                contract_storage_update_requests: [ContractStorageUpdateRequest::empty(); MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n                contract_storage_read: [ContractStorageRead::empty(); MAX_PUBLIC_DATA_READS_PER_CALL],\n                public_call_stack: [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n                new_commitments: [0; MAX_NEW_COMMITMENTS_PER_CALL],\n                new_nullifiers: [0; MAX_NEW_NULLIFIERS_PER_CALL],\n                new_l2_to_l1_msgs:[0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n                unencrypted_logs_hash:[0; NUM_FIELDS_PER_SHA256],\n                unencrypted_log_preimages_length: 0,\n                block_header: BlockHeader::empty(),\n                prover_address: 0,\n            },\n            is_execution_request: true,\n        };\n\n        assert(contract_address == item.contract_address);\n        assert(function_selector == item.function_data.function_selector);\n        \n        assert(args_hash == item.public_inputs.args_hash);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        // We are issuing a regular call which is not delegate, static, or deployment. We also constrain\n        // the msg_sender in the nested call to be equal to our address, and the execution context address\n        // for the nested call to be equal to the address we actually called.\n        assert(item.public_inputs.call_context.is_delegate_call == false);\n        assert(item.public_inputs.call_context.is_static_call == false);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n        assert(item.public_inputs.call_context.msg_sender == self.inputs.call_context.storage_contract_address);\n        assert(item.public_inputs.call_context.storage_contract_address == contract_address);\n\n        self.public_call_stack.push(item.hash());\n    }\n}\n\nuse crate::abi::{\n    ContractStorageRead,\n    ContractStorageUpdateRequest\n};\n\nstruct PublicContext {\n    inputs: abi::PublicContextInputs,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    contract_storage_update_requests: BoundedVec<ContractStorageUpdateRequest, MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL>,\n    contract_storage_read: BoundedVec<ContractStorageRead, MAX_PUBLIC_DATA_READS_PER_CALL>,\n    public_call_stack: BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n\n    new_commitments: BoundedVec<Field, MAX_NEW_COMMITMENTS_PER_CALL>,\n    new_nullifiers: BoundedVec<Field, crate::abi::MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    new_l2_to_l1_msgs: BoundedVec<Field, crate::abi::MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n\n    unencrypted_logs_hash: BoundedVec<Field, NUM_FIELDS_PER_SHA256>,\n    unencrypted_logs_preimages_length: Field,\n\n    block_header: BlockHeader,\n    prover_address: Field,\n}\n\nimpl PublicContext {\n    pub fn new(inputs: abi::PublicContextInputs, args_hash: Field) -> PublicContext {\n        let empty_storage_read = ContractStorageRead::empty();\n        let empty_storage_update = ContractStorageUpdateRequest::empty();\n        PublicContext {\n            inputs: inputs,\n\n            args_hash: args_hash,\n            return_values: BoundedVec::new(0),\n\n            contract_storage_update_requests: BoundedVec::new(empty_storage_update),\n            contract_storage_read: BoundedVec::new(empty_storage_read),\n            public_call_stack: BoundedVec::new(0),\n\n            new_commitments: BoundedVec::new(0),\n            new_nullifiers: BoundedVec::new(0),\n\n            new_l2_to_l1_msgs: BoundedVec::new(0),\n\n            \n            unencrypted_logs_hash: BoundedVec::new(0),\n            unencrypted_logs_preimages_length: 0,\n\n            block_header: inputs.block_header,\n            prover_address: 0,\n\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    pub fn msg_sender(self) -> Field {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> Field {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    pub fn this_portal_address(self) -> Field {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.public_global_variables.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.public_global_variables.version\n    }\n\n    pub fn selector(self) -> Field {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn block_number(self) -> Field {\n        self.inputs.public_global_variables.block_number\n    }\n\n    pub fn timestamp(self) -> Field {\n        self.inputs.public_global_variables.timestamp\n    }\n\n    pub fn finish(self) -> abi::PublicCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_log_preimages_length = 0;\n\n\n        // Compute the public call stack hashes\n        let pub_circuit_pub_inputs = abi::PublicCircuitPublicInputs {\n            call_context: self.inputs.call_context, // Done\n            args_hash: self.args_hash, // Done\n            contract_storage_update_requests: self.contract_storage_update_requests.storage,\n            contract_storage_read: self.contract_storage_read.storage,\n            return_values: self.return_values.storage,\n            new_commitments: self.new_commitments.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            public_call_stack: self.public_call_stack.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            unencrypted_logs_hash: unencrypted_logs_hash,\n            unencrypted_log_preimages_length: unencrypted_log_preimages_length,\n            block_header: self.inputs.block_header,\n            prover_address: self.prover_address,\n        };\n        pub_circuit_pub_inputs\n    }\n\n    pub fn push_new_note_hash(&mut self, note_hash: Field) {\n        self.new_commitments.push(note_hash);\n    }\n\n    pub fn push_new_nullifier(&mut self, nullifier: Field, _nullified_commitment: Field) {\n        self.new_nullifiers.push(nullifier);\n    }\n\n    pub fn message_portal(&mut self, content: Field) {\n        self.new_l2_to_l1_msgs.push(content);\n    }\n\n    // PrivateContextInputs must be temporarily passed in to prevent too many unknowns\n    // Note this returns self to get around an issue where mutable structs do not maintain mutations unless reassigned\n    pub fn consume_l1_to_l2_message(&mut self, msg_key: Field, content: Field, secret: Field) {\n        let this = (*self).this_address();\n        let nullifier = process_l1_to_l2_message(self.block_header.l1_to_l2_messages_tree_root, this, self.this_portal_address(), self.chain_id(), self.version(), msg_key, content, secret);\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT)\n    }\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        _self: Self,\n        contract_address: Field, \n        function_selector: Field,\n        args: [Field; ARGS_COUNT],\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = abi::hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        call_public_function_internal(\n            contract_address, \n            function_selector, \n            args_hash,\n        )\n    }\n\n    pub fn call_public_function_no_args(\n        _self: Self,\n        contract_address: Field, \n        function_selector: Field,\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        call_public_function_internal(\n            contract_address, \n            function_selector, \n            0,\n        )\n    }\n\n}\n\nstruct Context {\n    private: Option<&mut PrivateContext>,\n    public: Option<&mut PublicContext>,\n}\n\nimpl Context {\n    pub fn private(context: &mut PrivateContext) -> Context {\n        Context {\n            private: Option::some(context),\n            public: Option::none()\n        }\n    }\n\n    pub fn public(context: &mut PublicContext) -> Context {\n        Context {\n            public: Option::some(context),\n            private: Option::none()\n        }\n    }\n\n    pub fn none() -> Context {\n        Context {\n            public: Option::none(),\n            private: Option::none()\n        }\n    }\n}\n",
                "path": "/aztec/context.nr"
            },
            "95": {
                "source": "use dep::std::hash::{pedersen_hash_with_separator, sha256};\nuse dep::protocol_types::constants::{\n  GENERATOR_INDEX__SIGNATURE_PAYLOAD,\n  GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET,\n};\n\npub fn sha256_to_field<N>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = sha256(bytes_to_hash);\n\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (sha256_hashed[15 - i] as Field) * v;\n        low = low + (sha256_hashed[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    let hash_in_a_field = low + high * v;\n\n    hash_in_a_field\n}\n\npub fn compute_secret_hash(secret: Field) -> Field {\n    // TODO(#1205) This is probably not the right index to use\n    pedersen_hash([secret], GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET)\n}\n\npub fn pedersen_hash<N>(inputs: [Field; N], hash_index: u32) -> Field {\n    pedersen_hash_with_separator(inputs, hash_index)\n}\n",
                "path": "/aztec/hash.nr"
            },
            "116": {
                "source": "#[oracle(packArguments)]\nfn pack_arguments_oracle<N>(_args: [Field; N]) -> Field {}\n\n// TODO: explain what this does.\nunconstrained pub fn pack_arguments<N>(args: [Field; N]) -> Field {\n    pack_arguments_oracle(args)\n}\n",
                "path": "/aztec/oracle/arguments.nr"
            },
            "117": {
                "source": "use dep::protocol_types::constants::CALL_PRIVATE_FUNCTION_RETURN_SIZE;\n\n#[oracle(callPrivateFunction)]\nfn call_private_function_oracle(_contract_address: Field, _function_selector: Field, _args_hash: Field) -> [Field; CALL_PRIVATE_FUNCTION_RETURN_SIZE] {}\n\nunconstrained pub fn call_private_function_internal(contract_address: Field, function_selector: Field, args_hash: Field) -> [Field; CALL_PRIVATE_FUNCTION_RETURN_SIZE] {\n    call_private_function_oracle(contract_address, function_selector, args_hash)\n}\n",
                "path": "/aztec/oracle/call_private_function.nr"
            },
            "127": {
                "source": "\n// contract_address + \n// args_hash +\n// crate::abi::FUNCTION_DATA_SIZE +\n// crate::abi::CALL_CONTEXT_SIZE +\n// = 2 + 4 + 7\nglobal ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE: Field = 13;\n\n#[oracle(enqueuePublicFunctionCall)]\nfn enqueue_public_function_call_oracle(_contract_address: Field, _function_selector: Field, _args_hash: Field) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE] {}\n\nunconstrained pub fn enqueue_public_function_call_internal(contract_address: Field, function_selector: Field, args_hash: Field) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE] {\n    enqueue_public_function_call_oracle(contract_address, function_selector, args_hash)\n}\n",
                "path": "/aztec/oracle/enqueue_public_function_call.nr"
            },
            "129": {
                "source": "use dep::protocol_types::constants::RETURN_VALUES_LENGTH;\n\n#[oracle(callPublicFunction)]\nfn call_public_function_oracle(_contract_address: Field, _function_selector: Field, _args_hash: Field) -> [Field; RETURN_VALUES_LENGTH] {}\n\nunconstrained pub fn call_public_function_internal(contract_address: Field, function_selector: Field, args_hash: Field) -> [Field; RETURN_VALUES_LENGTH] {\n    call_public_function_oracle(contract_address, function_selector, args_hash)\n}\n",
                "path": "/aztec/oracle/public_call.nr"
            },
            "133": {
                "source": "use crate::abi::FunctionData;\nuse crate::abi::PrivateCircuitPublicInputs;\nuse dep::protocol_types::constants::GENERATOR_INDEX__CALL_STACK_ITEM;\nuse crate::hash::pedersen_hash;\n\nstruct PrivateCallStackItem {\n    contract_address: Field,\n    function_data: FunctionData,\n    public_inputs: PrivateCircuitPublicInputs,\n    is_execution_request: bool,\n}\n\nimpl PrivateCallStackItem {\n    pub fn hash(self) -> Field {\n        pedersen_hash([\n            self.contract_address,\n            self.function_data.hash(),\n            self.public_inputs.hash(),\n        ], GENERATOR_INDEX__CALL_STACK_ITEM)\n    }\n}\n",
                "path": "/aztec/private_call_stack_item.nr"
            },
            "134": {
                "source": "use crate::{\n    abi,\n    hash::pedersen_hash,\n    abi::{\n        PublicCircuitPublicInputs,\n        FunctionData,\n    },\n};\nuse dep::protocol_types::constants::{\n    RETURN_VALUES_LENGTH,\n    GENERATOR_INDEX__CALL_STACK_ITEM,\n};\n\n// oracles\nuse crate::oracle::{\n    enqueue_public_function_call::enqueue_public_function_call_internal,\n};\n\nstruct PublicCallStackItem {\n    contract_address: Field,\n    function_data: FunctionData,\n    public_inputs: PublicCircuitPublicInputs,\n    is_execution_request: bool,\n}\n\nimpl PublicCallStackItem {\n    pub fn hash(self) -> Field {\n        pedersen_hash([\n            self.contract_address,\n            self.function_data.hash(),\n            self.public_inputs.hash(),\n        ], GENERATOR_INDEX__CALL_STACK_ITEM)\n    }\n}\n\n",
                "path": "/aztec/public_call_stack_item.nr"
            },
            "145": {
                "source": "struct BoundedVec<T, MaxLen> {\n    storage: [T; MaxLen],\n    len: Field,\n}\n\nimpl<T, MaxLen> BoundedVec<T, MaxLen> {\n    pub fn new(initial_value: T) -> Self {\n        BoundedVec { storage: [initial_value; MaxLen], len: 0 }\n    }\n\n    pub fn get(mut self: Self, index: Field) -> T {\n        assert(index as u64 < self.len as u64);\n        self.storage[index]\n    }\n\n    pub fn get_unchecked(mut self: Self, index: Field) -> T {\n        self.storage[index]\n    }\n\n    pub fn push(&mut self, elem: T) {\n        assert(self.len as u64 < MaxLen as u64);\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    pub fn push_array<Len>(&mut self, array: [T; Len]) {\n        let newLen = self.len + array.len();\n        assert(newLen as u64 <= MaxLen as u64);\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = newLen;\n    }\n\n    pub fn pop(&mut self) -> T {\n        assert(self.len as u64 > 0);\n\n        let elem = self.storage[self.len - 1];\n        self.len -= 1;\n        elem\n    }\n\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        let mut exceeded_len = false;\n        for i in 0..MaxLen {\n            exceeded_len |= i == self.len;\n            if (!exceeded_len) {\n                ret |= predicate(self.storage[i]);\n            }\n        }\n        ret\n    }\n}\n\n#[test]\nfn test_vec_push_pop() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    assert(vec.len == 0);\n    vec.push(2);\n    assert(vec.len == 1);\n    vec.push(4);\n    assert(vec.len == 2);\n    vec.push(6);\n    assert(vec.len == 3);\n    let x = vec.pop();\n    assert(x == 6);\n    assert(vec.len == 2);\n    assert(vec.get(0) == 2);\n    assert(vec.get(1) == 4);\n}\n\n#[test]\nfn test_vec_push_array() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    vec.push_array([2, 4]);\n    assert(vec.len == 2);\n    assert(vec.get(0) == 2);\n    assert(vec.get(1) == 4);\n}\n\n#[test(should_fail)]\nfn test_vec_get_out_of_bound() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    vec.push_array([2, 4]);\n    let _x = vec.get(2);\n}\n\n#[test(should_fail)]\nfn test_vec_get_not_declared() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    vec.push_array([2]);\n    let _x = vec.get(1);\n}\n\n#[test(should_fail)]\nfn test_vec_get_uninitialized() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    let _x = vec.get(0);\n}\n\n#[test(should_fail)]\nfn test_vec_push_overflow() {\n    let mut vec: BoundedVec<Field, 1> = BoundedVec::new(0);\n    vec.push(1);\n    vec.push(2);\n}\n\n#[test]\nfn test_vec_any() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    vec.push_array([2, 4, 6]);\n    assert(vec.any(|v| v == 2) == true);\n    assert(vec.any(|v| v == 4) == true);\n    assert(vec.any(|v| v == 6) == true);\n    assert(vec.any(|v| v == 3) == false);\n}\n\n#[test]\nfn test_vec_any_not_default() {\n    let default_value = 1;\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(default_value);\n    vec.push_array([2, 4]);\n    assert(vec.any(|v| v == default_value) == false);\n}\n",
                "path": "/aztec/types/vec.nr"
            },
            "152": {
                "source": "/* Autogenerated file, do not edit! */\n  \nuse dep::std;\nuse dep::aztec::context::{ PrivateContext, PublicContext };\nuse dep::protocol_types::constants::RETURN_VALUES_LENGTH;\n\nstruct AStructTestCodeGenStruct {\n  amount: Field,\n  secret_hash: Field,\n}\n\nstruct ADeepStructTestCodeGenStruct {\n  a_field: Field,\n  a_bool: bool,\n  a_note: ANoteADeepStructTestCodeGenStruct,\n  many_notes: [ManyNotesADeepStructTestCodeGenStruct;3],\n}\n\nstruct ANoteADeepStructTestCodeGenStruct {\n  amount: Field,\n  secret_hash: Field,\n}\n\nstruct ManyNotesADeepStructTestCodeGenStruct {\n  amount: Field,\n  secret_hash: Field,\n}\n\n\n// Interface for calling Test functions from a private context\nstruct TestPrivateContextInterface {\n  address: Field,\n}\n\nimpl TestPrivateContextInterface {\n  pub fn at(address: Field) -> Self {\n      Self {\n          address,\n      }\n  }\n  \n  pub fn consume_mint_private_message(\n    self,\n    context: &mut PrivateContext,\n    secret_hash_for_redeeming_minted_notes: Field,\n    amount: Field,\n    canceller: Field,\n    msg_key: Field,\n    secret_for_L1_to_L2_message_consumption: Field\n  ) -> [Field; RETURN_VALUES_LENGTH] {\n    let mut serialized_args = [0; 5];\n    serialized_args[0] = secret_hash_for_redeeming_minted_notes;\n    serialized_args[1] = amount;\n    serialized_args[2] = canceller;\n    serialized_args[3] = msg_key;\n    serialized_args[4] = secret_for_L1_to_L2_message_consumption;\n\n    context.call_private_function(self.address, 0x8999306a, serialized_args)\n  }\n  \n\n  pub fn consume_mint_public_message(\n    self,\n    context: &mut PrivateContext,\n    to: Field,\n    amount: Field,\n    canceller: Field,\n    msg_key: Field,\n    secret: Field\n  ) {\n    let mut serialized_args = [0; 5];\n    serialized_args[0] = to;\n    serialized_args[1] = amount;\n    serialized_args[2] = canceller;\n    serialized_args[3] = msg_key;\n    serialized_args[4] = secret;\n\n    context.call_public_function(self.address, 0x1c60863d, serialized_args)\n  }\n  \n\n  pub fn create_l2_to_l1_message_public(\n    self,\n    context: &mut PrivateContext,\n    amount: Field,\n    secret_hash: Field\n  ) {\n    let mut serialized_args = [0; 2];\n    serialized_args[0] = amount;\n    serialized_args[1] = secret_hash;\n\n    context.call_public_function(self.address, 0x9749ca06, serialized_args)\n  }\n  \n\n  pub fn create_nullifier_public(\n    self,\n    context: &mut PrivateContext,\n    amount: Field,\n    secret_hash: Field\n  ) {\n    let mut serialized_args = [0; 2];\n    serialized_args[0] = amount;\n    serialized_args[1] = secret_hash;\n\n    context.call_public_function(self.address, 0xdf02db8d, serialized_args)\n  }\n  \n\n  pub fn emit_msg_sender(\n    self,\n    context: &mut PrivateContext\n  ) -> [Field; RETURN_VALUES_LENGTH] {\n    let mut serialized_args = [0; 0];\n\n    context.call_private_function(self.address, 0x11fb5d45, serialized_args)\n  }\n  \n\n  pub fn emit_nullifier(\n    self,\n    context: &mut PrivateContext,\n    nullifier: Field\n  ) -> [Field; RETURN_VALUES_LENGTH] {\n    let mut serialized_args = [0; 1];\n    serialized_args[0] = nullifier;\n\n    context.call_private_function(self.address, 0x82a8b183, serialized_args)\n  }\n  \n\n  pub fn emit_unencrypted(\n    self,\n    context: &mut PrivateContext,\n    value: Field\n  ) {\n    let mut serialized_args = [0; 1];\n    serialized_args[0] = value;\n\n    context.call_public_function(self.address, 0x817a64cb, serialized_args)\n  }\n  \n\n  pub fn get_portal_contract_address(\n    self,\n    context: &mut PrivateContext,\n    aztec_address: Field\n  ) -> [Field; RETURN_VALUES_LENGTH] {\n    let mut serialized_args = [0; 1];\n    serialized_args[0] = aztec_address;\n\n    context.call_private_function(self.address, 0x98ff64fd, serialized_args)\n  }\n  \n\n  pub fn get_public_key(\n    self,\n    context: &mut PrivateContext,\n    address: Field\n  ) -> [Field; RETURN_VALUES_LENGTH] {\n    let mut serialized_args = [0; 1];\n    serialized_args[0] = address;\n\n    context.call_private_function(self.address, 0x5ccf578f, serialized_args)\n  }\n  \n\n  pub fn get_this_address(\n    self,\n    context: &mut PrivateContext\n  ) -> [Field; RETURN_VALUES_LENGTH] {\n    let mut serialized_args = [0; 0];\n\n    context.call_private_function(self.address, 0x95a7b2ae, serialized_args)\n  }\n  \n\n  pub fn get_this_portal_address(\n    self,\n    context: &mut PrivateContext\n  ) -> [Field; RETURN_VALUES_LENGTH] {\n    let mut serialized_args = [0; 0];\n\n    context.call_private_function(self.address, 0xc71384f5, serialized_args)\n  }\n  \n\n  pub fn is_time_equal(\n    self,\n    context: &mut PrivateContext,\n    time: Field\n  ) {\n    let mut serialized_args = [0; 1];\n    serialized_args[0] = time;\n\n    context.call_public_function(self.address, 0x61fa2bda, serialized_args)\n  }\n  \n\n  pub fn set_constant(\n    self,\n    context: &mut PrivateContext,\n    value: Field\n  ) -> [Field; RETURN_VALUES_LENGTH] {\n    let mut serialized_args = [0; 1];\n    serialized_args[0] = value;\n\n    context.call_private_function(self.address, 0x1b3b9e18, serialized_args)\n  }\n  \n\n  pub fn test_code_gen(\n    self,\n    context: &mut PrivateContext,\n    a_field: Field,\n    a_bool: bool,\n    a_number: u32,\n    an_array: [Field;2],\n    a_struct: AStructTestCodeGenStruct,\n    a_deep_struct: ADeepStructTestCodeGenStruct\n  ) -> [Field; RETURN_VALUES_LENGTH] {\n    let mut serialized_args = [0; 17];\n    serialized_args[0] = a_field;\n    serialized_args[1] = a_bool as Field;\n    serialized_args[2] = a_number as Field;\n    serialized_args[3] = an_array[0];\n    serialized_args[4] = an_array[1];\n    serialized_args[5] = a_struct.amount;\n    serialized_args[6] = a_struct.secret_hash;\n    serialized_args[7] = a_deep_struct.a_field;\n    serialized_args[8] = a_deep_struct.a_bool as Field;\n    serialized_args[9] = a_deep_struct.a_note.amount;\n    serialized_args[10] = a_deep_struct.a_note.secret_hash;\n    serialized_args[11] = a_deep_struct.many_notes[0].amount;\n    serialized_args[12] = a_deep_struct.many_notes[0].secret_hash;\n    serialized_args[13] = a_deep_struct.many_notes[1].amount;\n    serialized_args[14] = a_deep_struct.many_notes[1].secret_hash;\n    serialized_args[15] = a_deep_struct.many_notes[2].amount;\n    serialized_args[16] = a_deep_struct.many_notes[2].secret_hash;\n\n    context.call_private_function(self.address, 0x0f054f9b, serialized_args)\n  }\n  \n}\n  \n  \n\n\n// Interface for calling Test functions from a public context\nstruct TestPublicContextInterface {\n  address: Field,\n}\n\nimpl TestPublicContextInterface {\n  pub fn at(address: Field) -> Self {\n      Self {\n          address,\n      }\n  }\n  \n  pub fn consume_mint_public_message(\n    self,\n    context: PublicContext,\n    to: Field,\n    amount: Field,\n    canceller: Field,\n    msg_key: Field,\n    secret: Field\n  ) -> [Field; RETURN_VALUES_LENGTH] {\n    let mut serialized_args = [0; 5];\n    serialized_args[0] = to;\n    serialized_args[1] = amount;\n    serialized_args[2] = canceller;\n    serialized_args[3] = msg_key;\n    serialized_args[4] = secret;\n\n    context.call_public_function(self.address, 0x1c60863d, serialized_args)\n  }\n  \n\n  pub fn create_l2_to_l1_message_public(\n    self,\n    context: PublicContext,\n    amount: Field,\n    secret_hash: Field\n  ) -> [Field; RETURN_VALUES_LENGTH] {\n    let mut serialized_args = [0; 2];\n    serialized_args[0] = amount;\n    serialized_args[1] = secret_hash;\n\n    context.call_public_function(self.address, 0x9749ca06, serialized_args)\n  }\n  \n\n  pub fn create_nullifier_public(\n    self,\n    context: PublicContext,\n    amount: Field,\n    secret_hash: Field\n  ) -> [Field; RETURN_VALUES_LENGTH] {\n    let mut serialized_args = [0; 2];\n    serialized_args[0] = amount;\n    serialized_args[1] = secret_hash;\n\n    context.call_public_function(self.address, 0xdf02db8d, serialized_args)\n  }\n  \n\n  pub fn emit_unencrypted(\n    self,\n    context: PublicContext,\n    value: Field\n  ) -> [Field; RETURN_VALUES_LENGTH] {\n    let mut serialized_args = [0; 1];\n    serialized_args[0] = value;\n\n    context.call_public_function(self.address, 0x817a64cb, serialized_args)\n  }\n  \n\n  pub fn is_time_equal(\n    self,\n    context: PublicContext,\n    time: Field\n  ) -> [Field; RETURN_VALUES_LENGTH] {\n    let mut serialized_args = [0; 1];\n    serialized_args[0] = time;\n\n    context.call_public_function(self.address, 0x61fa2bda, serialized_args)\n  }\n  \n}\n  \n  \n",
                "path": "/usr/src/yarn-project/noir-contracts/src/contracts/import_test_contract/src/test_contract_interface.nr"
            }
        }
    }
}
