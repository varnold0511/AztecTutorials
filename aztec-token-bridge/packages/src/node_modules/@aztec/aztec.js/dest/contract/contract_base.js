import { FunctionSelector } from '@aztec/foundation/abi';
import { ContractFunctionInteraction } from './contract_function_interaction.js';
/**
 * Abstract implementation of a contract extended by the Contract class and generated contract types.
 */
export class ContractBase {
    constructor(
    /** The deployed contract's complete address. */
    completeAddress, 
    /** The Application Binary Interface for the contract. */
    artifact, 
    /** The wallet used for interacting with this contract. */
    wallet, 
    /** The portal contract address on L1, if any. */
    portalContract) {
        this.completeAddress = completeAddress;
        this.artifact = artifact;
        this.wallet = wallet;
        this.portalContract = portalContract;
        /**
         * An object containing contract methods mapped to their respective names.
         */
        this.methods = {};
        artifact.functions.forEach((f) => {
            const interactionFunction = (...args) => {
                return new ContractFunctionInteraction(this.wallet, this.completeAddress.address, f, args);
            };
            this.methods[f.name] = Object.assign(interactionFunction, {
                /**
                 * A getter for users to fetch the function selector.
                 * @returns Selector of the function.
                 */
                get selector() {
                    return FunctionSelector.fromNameAndParameters(f.name, f.parameters);
                },
            });
        });
    }
    /**
     * Address of the contract.
     */
    get address() {
        return this.completeAddress.address;
    }
    /**
     * Creates a new instance of the contract wrapper attached to a different wallet.
     * @param wallet - Wallet to use for sending txs.
     * @returns A new contract instance.
     */
    withWallet(wallet) {
        return new ContractBase(this.completeAddress, this.artifact, wallet, this.portalContract);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udHJhY3RfYmFzZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb250cmFjdC9jb250cmFjdF9iYXNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBc0MsZ0JBQWdCLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUs3RixPQUFPLEVBQUUsMkJBQTJCLEVBQUUsTUFBTSxvQ0FBb0MsQ0FBQztBQWFqRjs7R0FFRztBQUNILE1BQU0sT0FBTyxZQUFZO0lBTXZCO0lBQ0UsZ0RBQWdEO0lBQ2hDLGVBQWdDO0lBQ2hELHlEQUF5RDtJQUN6QyxRQUEwQjtJQUMxQywwREFBMEQ7SUFDaEQsTUFBYztJQUN4QixpREFBaUQ7SUFDakMsY0FBMEI7UUFOMUIsb0JBQWUsR0FBZixlQUFlLENBQWlCO1FBRWhDLGFBQVEsR0FBUixRQUFRLENBQWtCO1FBRWhDLFdBQU0sR0FBTixNQUFNLENBQVE7UUFFUixtQkFBYyxHQUFkLGNBQWMsQ0FBWTtRQWI1Qzs7V0FFRztRQUNJLFlBQU8sR0FBdUMsRUFBRSxDQUFDO1FBWXRELFFBQVEsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBbUIsRUFBRSxFQUFFO1lBQ2pELE1BQU0sbUJBQW1CLEdBQUcsQ0FBQyxHQUFHLElBQVcsRUFBRSxFQUFFO2dCQUM3QyxPQUFPLElBQUksMkJBQTJCLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsZUFBZSxDQUFDLE9BQVEsRUFBRSxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUM7WUFDOUYsQ0FBQyxDQUFDO1lBRUYsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxtQkFBbUIsRUFBRTtnQkFDeEQ7OzttQkFHRztnQkFDSCxJQUFJLFFBQVE7b0JBQ1YsT0FBTyxnQkFBZ0IsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQztnQkFDdEUsQ0FBQzthQUNGLENBQUMsQ0FBQztRQUNMLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVEOztPQUVHO0lBQ0gsSUFBVyxPQUFPO1FBQ2hCLE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQyxPQUFPLENBQUM7SUFDdEMsQ0FBQztJQUVEOzs7O09BSUc7SUFDSSxVQUFVLENBQUMsTUFBYztRQUM5QixPQUFPLElBQUksWUFBWSxDQUFDLElBQUksQ0FBQyxlQUFlLEVBQUUsSUFBSSxDQUFDLFFBQVEsRUFBRSxNQUFNLEVBQUUsSUFBSSxDQUFDLGNBQWMsQ0FBUyxDQUFDO0lBQ3BHLENBQUM7Q0FDRiJ9