import { ContractArtifact, FunctionSelector } from '@aztec/foundation/abi';
import { EthAddress } from '@aztec/foundation/eth-address';
import { CompleteAddress, DeployedContract } from '@aztec/types';
import { Wallet } from '../wallet/index.js';
import { ContractFunctionInteraction } from './contract_function_interaction.js';
/**
 * Type representing a contract method that returns a ContractFunctionInteraction instance
 * and has a readonly 'selector' property of type Buffer. Takes any number of arguments.
 */
export type ContractMethod = ((...args: any[]) => ContractFunctionInteraction) & {
    /**
     * The unique identifier for a contract function in bytecode.
     */
    readonly selector: FunctionSelector;
};
/**
 * Abstract implementation of a contract extended by the Contract class and generated contract types.
 */
export declare class ContractBase implements DeployedContract {
    /** The deployed contract's complete address. */
    readonly completeAddress: CompleteAddress;
    /** The Application Binary Interface for the contract. */
    readonly artifact: ContractArtifact;
    /** The wallet used for interacting with this contract. */
    protected wallet: Wallet;
    /** The portal contract address on L1, if any. */
    readonly portalContract: EthAddress;
    /**
     * An object containing contract methods mapped to their respective names.
     */
    methods: {
        [name: string]: ContractMethod;
    };
    protected constructor(
    /** The deployed contract's complete address. */
    completeAddress: CompleteAddress, 
    /** The Application Binary Interface for the contract. */
    artifact: ContractArtifact, 
    /** The wallet used for interacting with this contract. */
    wallet: Wallet, 
    /** The portal contract address on L1, if any. */
    portalContract: EthAddress);
    /**
     * Address of the contract.
     */
    get address(): import("@aztec/foundation/aztec-address").AztecAddress;
    /**
     * Creates a new instance of the contract wrapper attached to a different wallet.
     * @param wallet - Wallet to use for sending txs.
     * @returns A new contract instance.
     */
    withWallet(wallet: Wallet): this;
}
//# sourceMappingURL=contract_base.d.ts.map