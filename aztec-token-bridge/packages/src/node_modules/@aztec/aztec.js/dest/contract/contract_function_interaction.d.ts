import { AztecAddress } from '@aztec/circuits.js';
import { FunctionAbi } from '@aztec/foundation/abi';
import { FunctionCall, TxExecutionRequest } from '@aztec/types';
import { Wallet } from '../wallet/index.js';
import { BaseContractInteraction, SendMethodOptions } from './base_contract_interaction.js';
export { SendMethodOptions };
/**
 * Represents the options for a view method in a contract function interaction.
 * Allows specifying the address from which the view method should be called.
 */
export type ViewMethodOptions = {
    /**
     * The sender's Aztec address.
     */
    from?: AztecAddress;
};
/**
 * This is the class that is returned when calling e.g. `contract.methods.myMethod(arg0, arg1)`.
 * It contains available interactions one can call on a method, including view.
 */
export declare class ContractFunctionInteraction extends BaseContractInteraction {
    protected wallet: Wallet;
    protected contractAddress: AztecAddress;
    protected functionDao: FunctionAbi;
    protected args: any[];
    constructor(wallet: Wallet, contractAddress: AztecAddress, functionDao: FunctionAbi, args: any[]);
    /**
     * Create a transaction execution request that represents this call, encoded and authenticated by the
     * user's wallet, ready to be simulated.
     * @returns A Promise that resolves to a transaction instance.
     */
    create(): Promise<TxExecutionRequest>;
    /**
     * Returns an execution request that represents this operation. Useful as a building
     * block for constructing batch requests.
     * @param options - An optional object containing additional configuration for the transaction.
     * @returns An execution request wrapped in promise.
     */
    request(): FunctionCall;
    /**
     * Execute a view (read-only) transaction on an unconstrained function.
     * This method is used to call functions that do not modify the contract state and only return data.
     * Throws an error if called on a non-unconstrained function.
     * @param options - An optional object containing additional configuration for the transaction.
     * @returns The result of the view transaction as returned by the contract function.
     */
    view(options?: ViewMethodOptions): Promise<any>;
}
//# sourceMappingURL=contract_function_interaction.d.ts.map