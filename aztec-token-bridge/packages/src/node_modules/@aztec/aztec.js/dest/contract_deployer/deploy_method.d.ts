import { CompleteAddress } from '@aztec/circuits.js';
import { ContractArtifact } from '@aztec/foundation/abi';
import { EthAddress } from '@aztec/foundation/eth-address';
import { Fr } from '@aztec/foundation/fields';
import { PXE, PublicKey, Tx, TxExecutionRequest } from '@aztec/types';
import { BaseContractInteraction } from '../contract/base_contract_interaction.js';
import { Contract, ContractBase, SendMethodOptions } from '../contract/index.js';
import { DeploySentTx } from './deploy_sent_tx.js';
/**
 * Options for deploying a contract on the Aztec network.
 * Allows specifying a portal contract, contract address salt, and additional send method options.
 */
export type DeployOptions = {
    /**
     * The Ethereum address of the Portal contract.
     */
    portalContract?: EthAddress;
    /**
     * An optional salt value used to deterministically calculate the contract address.
     */
    contractAddressSalt?: Fr;
} & SendMethodOptions;
/**
 * Creates a TxRequest from a contract ABI, for contract deployment.
 * Extends the ContractFunctionInteraction class.
 */
export declare class DeployMethod<TContract extends ContractBase = Contract> extends BaseContractInteraction {
    private publicKey;
    protected pxe: PXE;
    private artifact;
    private args;
    /** The complete address of the contract. */
    completeAddress?: CompleteAddress;
    /** Constructor function to call. */
    private constructorArtifact;
    constructor(publicKey: PublicKey, pxe: PXE, artifact: ContractArtifact, args?: any[]);
    /**
     * Create a contract deployment transaction, given the deployment options.
     * This function internally calls `request()` and `sign()` methods to prepare
     * the transaction for deployment. The resulting signed transaction can be
     * later sent using the `send()` method.
     *
     * @param options - An object containing optional deployment settings, including portalContract, contractAddressSalt, and from.
     * @returns A Promise resolving to an object containing the signed transaction data and other relevant information.
     */
    create(options?: DeployOptions): Promise<TxExecutionRequest>;
    /**
     * Send the contract deployment transaction using the provided options.
     * This function extends the 'send' method from the ContractFunctionInteraction class,
     * allowing us to send a transaction specifically for contract deployment.
     *
     * @param options - An object containing various deployment options such as portalContract, contractAddressSalt, and from.
     * @returns A SentTx object that returns the receipt and the deployed contract instance.
     */
    send(options?: DeployOptions): DeploySentTx<TContract>;
    /**
     * Simulate the request.
     * @param options - Deployment options.
     * @returns The simulated tx.
     */
    simulate(options: DeployOptions): Promise<Tx>;
}
//# sourceMappingURL=deploy_method.d.ts.map