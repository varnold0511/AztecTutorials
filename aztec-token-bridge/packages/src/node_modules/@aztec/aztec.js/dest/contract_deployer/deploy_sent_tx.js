import { Contract } from '../contract/contract.js';
import { SentTx } from '../contract/sent_tx.js';
/**
 * A contract deployment transaction sent to the network, extending SentTx with methods to create a contract instance.
 */
export class DeploySentTx extends SentTx {
    constructor(artifact, wallet, txHashPromise, 
    /**
     * The complete address of the deployed contract
     */
    completeContractAddress) {
        super(wallet, txHashPromise);
        this.artifact = artifact;
        this.completeContractAddress = completeContractAddress;
    }
    /**
     * Awaits for the tx to be mined and returns the contract instance. Throws if tx is not mined.
     * @param opts - Options for configuring the waiting for the tx to be mined.
     * @returns The deployed contract instance.
     */
    async deployed(opts) {
        const receipt = await this.wait(opts);
        return receipt.contract;
    }
    /**
     * Awaits for the tx to be mined and returns the receipt along with a contract instance. Throws if tx is not mined.
     * @param opts - Options for configuring the waiting for the tx to be mined.
     * @returns The transaction receipt with the deployed contract instance.
     */
    async wait(opts) {
        const receipt = await super.wait(opts);
        const contract = await this.getContractInstance(opts?.wallet, receipt.contractAddress);
        return { ...receipt, contract };
    }
    getContractInstance(wallet, address) {
        const isWallet = (pxe) => !!pxe.createTxExecutionRequest;
        const contractWallet = wallet ?? (isWallet(this.pxe) && this.pxe);
        if (!contractWallet) {
            throw new Error(`A wallet is required for creating a contract instance`);
        }
        if (!address) {
            throw new Error(`Contract address is missing from transaction receipt`);
        }
        return Contract.at(address, this.artifact, contractWallet);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVwbG95X3NlbnRfdHguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29udHJhY3RfZGVwbG95ZXIvZGVwbG95X3NlbnRfdHgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBSUEsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBRW5ELE9BQU8sRUFBRSxNQUFNLEVBQVksTUFBTSx3QkFBd0IsQ0FBQztBQWUxRDs7R0FFRztBQUNILE1BQU0sT0FBTyxZQUFvRCxTQUFRLE1BQU07SUFDN0UsWUFDVSxRQUEwQixFQUNsQyxNQUFvQixFQUNwQixhQUE4QjtJQUU5Qjs7T0FFRztJQUNJLHVCQUF5QztRQUVoRCxLQUFLLENBQUMsTUFBTSxFQUFFLGFBQWEsQ0FBQyxDQUFDO1FBVHJCLGFBQVEsR0FBUixRQUFRLENBQWtCO1FBTzNCLDRCQUF1QixHQUF2Qix1QkFBdUIsQ0FBa0I7SUFHbEQsQ0FBQztJQUVEOzs7O09BSUc7SUFDSSxLQUFLLENBQUMsUUFBUSxDQUFDLElBQXVCO1FBQzNDLE1BQU0sT0FBTyxHQUFHLE1BQU0sSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUN0QyxPQUFPLE9BQU8sQ0FBQyxRQUFRLENBQUM7SUFDMUIsQ0FBQztJQUVEOzs7O09BSUc7SUFDSSxLQUFLLENBQUMsSUFBSSxDQUFDLElBQXVCO1FBQ3ZDLE1BQU0sT0FBTyxHQUFHLE1BQU0sS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUN2QyxNQUFNLFFBQVEsR0FBRyxNQUFNLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLEVBQUUsTUFBTSxFQUFFLE9BQU8sQ0FBQyxlQUFlLENBQUMsQ0FBQztRQUN2RixPQUFPLEVBQUUsR0FBRyxPQUFPLEVBQUUsUUFBUSxFQUFFLENBQUM7SUFDbEMsQ0FBQztJQUVTLG1CQUFtQixDQUFDLE1BQWUsRUFBRSxPQUFzQjtRQUNuRSxNQUFNLFFBQVEsR0FBRyxDQUFDLEdBQWlCLEVBQWlCLEVBQUUsQ0FBQyxDQUFDLENBQUUsR0FBYyxDQUFDLHdCQUF3QixDQUFDO1FBQ2xHLE1BQU0sY0FBYyxHQUFHLE1BQU0sSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ2xFLElBQUksQ0FBQyxjQUFjLEVBQUU7WUFDbkIsTUFBTSxJQUFJLEtBQUssQ0FBQyx1REFBdUQsQ0FBQyxDQUFDO1NBQzFFO1FBQ0QsSUFBSSxDQUFDLE9BQU8sRUFBRTtZQUNaLE1BQU0sSUFBSSxLQUFLLENBQUMsc0RBQXNELENBQUMsQ0FBQztTQUN6RTtRQUNELE9BQU8sUUFBUSxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLFFBQVEsRUFBRSxjQUFjLENBQXVCLENBQUM7SUFDbkYsQ0FBQztDQUNGIn0=