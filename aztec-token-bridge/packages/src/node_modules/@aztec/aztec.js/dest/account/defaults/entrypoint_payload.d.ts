/// <reference types="node" resolution-mode="require"/>
import { Fr } from '@aztec/circuits.js';
import { FunctionCall, PackedArguments } from '@aztec/types';
export declare const ACCOUNT_MAX_CALLS = 4;
/** Encoded function call for account contract entrypoint */
export type EntrypointFunctionCall = {
    /** Arguments hash for the call */
    args_hash: Fr;
    /** Selector of the function to call */
    function_selector: Fr;
    /** Address of the contract to call */
    target_address: Fr;
    /** Whether the function is public or private */
    is_public: boolean;
};
/** Encoded payload for the account contract entrypoint */
export type EntrypointPayload = {
    /** Encoded function calls to execute */
    function_calls: EntrypointFunctionCall[];
    /** A nonce for replay protection */
    nonce: Fr;
};
/** Assembles an entrypoint payload from a set of private and public function calls */
export declare function buildPayload(calls: FunctionCall[]): {
    /** The payload for the entrypoint function */
    payload: EntrypointPayload;
    /** The packed arguments of functions called */
    packedArguments: PackedArguments[];
};
/** Hashes an entrypoint payload to a 32-byte buffer (useful for signing) */
export declare function hashPayload(payload: EntrypointPayload): Buffer;
/** Flattens an entrypoint payload */
export declare function flattenPayload(payload: EntrypointPayload): Fr[];
//# sourceMappingURL=entrypoint_payload.d.ts.map