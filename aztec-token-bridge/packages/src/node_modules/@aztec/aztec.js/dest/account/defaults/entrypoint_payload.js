import { Fr, GeneratorIndex } from '@aztec/circuits.js';
import { padArrayEnd } from '@aztec/foundation/collection';
import { pedersenHash } from '@aztec/foundation/crypto';
import { PackedArguments, emptyFunctionCall } from '@aztec/types';
// These must match the values defined in yarn-project/aztec-nr/aztec/src/entrypoint.nr
export const ACCOUNT_MAX_CALLS = 4;
/** Assembles an entrypoint payload from a set of private and public function calls */
export function buildPayload(calls) {
    const nonce = Fr.random();
    const paddedCalls = padArrayEnd(calls, emptyFunctionCall(), ACCOUNT_MAX_CALLS);
    const packedArguments = [];
    for (const call of paddedCalls) {
        packedArguments.push(PackedArguments.fromArgs(call.args));
    }
    const formattedCalls = paddedCalls.map((call, index) => ({
        // eslint-disable-next-line camelcase
        args_hash: packedArguments[index].hash,
        // eslint-disable-next-line camelcase
        function_selector: call.functionData.selector.toField(),
        // eslint-disable-next-line camelcase
        target_address: call.to.toField(),
        // eslint-disable-next-line camelcase
        is_public: !call.functionData.isPrivate,
    }));
    return {
        payload: {
            // eslint-disable-next-line camelcase
            function_calls: formattedCalls,
            nonce,
        },
        packedArguments,
    };
}
/** Hashes an entrypoint payload to a 32-byte buffer (useful for signing) */
export function hashPayload(payload) {
    return pedersenHash(flattenPayload(payload).map(fr => fr.toBuffer()), GeneratorIndex.SIGNATURE_PAYLOAD);
}
/** Flattens an entrypoint payload */
export function flattenPayload(payload) {
    return [
        ...payload.function_calls.flatMap(call => [
            call.args_hash,
            call.function_selector,
            call.target_address,
            new Fr(call.is_public),
        ]),
        payload.nonce,
    ];
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW50cnlwb2ludF9wYXlsb2FkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2FjY291bnQvZGVmYXVsdHMvZW50cnlwb2ludF9wYXlsb2FkLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxFQUFFLEVBQUUsY0FBYyxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDeEQsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBQzNELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUN4RCxPQUFPLEVBQWdCLGVBQWUsRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUVoRix1RkFBdUY7QUFDdkYsTUFBTSxDQUFDLE1BQU0saUJBQWlCLEdBQUcsQ0FBQyxDQUFDO0FBMkJuQyxzRkFBc0Y7QUFDdEYsTUFBTSxVQUFVLFlBQVksQ0FBQyxLQUFxQjtJQU1oRCxNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUM7SUFFMUIsTUFBTSxXQUFXLEdBQUcsV0FBVyxDQUFDLEtBQUssRUFBRSxpQkFBaUIsRUFBRSxFQUFFLGlCQUFpQixDQUFDLENBQUM7SUFDL0UsTUFBTSxlQUFlLEdBQXNCLEVBQUUsQ0FBQztJQUM5QyxLQUFLLE1BQU0sSUFBSSxJQUFJLFdBQVcsRUFBRTtRQUM5QixlQUFlLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7S0FDM0Q7SUFFRCxNQUFNLGNBQWMsR0FBNkIsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDakYscUNBQXFDO1FBQ3JDLFNBQVMsRUFBRSxlQUFlLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSTtRQUN0QyxxQ0FBcUM7UUFDckMsaUJBQWlCLEVBQUUsSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsT0FBTyxFQUFFO1FBQ3ZELHFDQUFxQztRQUNyQyxjQUFjLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUU7UUFDakMscUNBQXFDO1FBQ3JDLFNBQVMsRUFBRSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsU0FBUztLQUN4QyxDQUFDLENBQUMsQ0FBQztJQUVKLE9BQU87UUFDTCxPQUFPLEVBQUU7WUFDUCxxQ0FBcUM7WUFDckMsY0FBYyxFQUFFLGNBQWM7WUFDOUIsS0FBSztTQUNOO1FBQ0QsZUFBZTtLQUNoQixDQUFDO0FBQ0osQ0FBQztBQUVELDRFQUE0RTtBQUM1RSxNQUFNLFVBQVUsV0FBVyxDQUFDLE9BQTBCO0lBQ3BELE9BQU8sWUFBWSxDQUNqQixjQUFjLENBQUMsT0FBTyxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLEVBQ2hELGNBQWMsQ0FBQyxpQkFBaUIsQ0FDakMsQ0FBQztBQUNKLENBQUM7QUFFRCxxQ0FBcUM7QUFDckMsTUFBTSxVQUFVLGNBQWMsQ0FBQyxPQUEwQjtJQUN2RCxPQUFPO1FBQ0wsR0FBRyxPQUFPLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDO1lBQ3hDLElBQUksQ0FBQyxTQUFTO1lBQ2QsSUFBSSxDQUFDLGlCQUFpQjtZQUN0QixJQUFJLENBQUMsY0FBYztZQUNuQixJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDO1NBQ3ZCLENBQUM7UUFDRixPQUFPLENBQUMsS0FBSztLQUNkLENBQUM7QUFDSixDQUFDIn0=