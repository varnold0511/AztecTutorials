var _AccountManager_instances, _AccountManager_register;
import { __classPrivateFieldGet } from "tslib";
import { getContractDeploymentInfo } from '@aztec/circuits.js';
import { Fr } from '@aztec/foundation/fields';
import { CompleteAddress } from '@aztec/types';
import { DefaultWaitOpts } from '../../contract/sent_tx.js';
import { AccountWalletWithPrivateKey, ContractDeployer, generatePublicKey, } from '../../index.js';
import { DeployAccountSentTx } from './deploy_account_sent_tx.js';
import { waitForAccountSynch } from './util.js';
/**
 * Manages a user account. Provides methods for calculating the account's address, deploying the account contract,
 * and creating and registering the user wallet in the PXE Service.
 */
export class AccountManager {
    constructor(pxe, encryptionPrivateKey, accountContract, saltOrAddress) {
        _AccountManager_instances.add(this);
        this.pxe = pxe;
        this.encryptionPrivateKey = encryptionPrivateKey;
        this.accountContract = accountContract;
        if (saltOrAddress instanceof CompleteAddress) {
            this.completeAddress = saltOrAddress;
        }
        else {
            this.salt = saltOrAddress ? new Fr(saltOrAddress) : Fr.random();
        }
    }
    getEncryptionPublicKey() {
        if (!this.encryptionPublicKey) {
            this.encryptionPublicKey = generatePublicKey(this.encryptionPrivateKey);
        }
        return this.encryptionPublicKey;
    }
    /**
     * Returns the entrypoint for this account as defined by its account contract.
     * @returns An entrypoint.
     */
    async getAccount() {
        const nodeInfo = await this.pxe.getNodeInfo();
        const completeAddress = this.getCompleteAddress();
        return this.accountContract.getInterface(completeAddress, nodeInfo);
    }
    /**
     * Gets the calculated complete address associated with this account.
     * Does not require the account to be deployed or registered.
     * @returns The address, partial address, and encryption public key.
     */
    getCompleteAddress() {
        if (!this.completeAddress) {
            const encryptionPublicKey = generatePublicKey(this.encryptionPrivateKey);
            const contractDeploymentInfo = getContractDeploymentInfo(this.accountContract.getContractArtifact(), this.accountContract.getDeploymentArgs(), this.salt, encryptionPublicKey);
            this.completeAddress = contractDeploymentInfo.completeAddress;
        }
        return this.completeAddress;
    }
    /**
     * Returns a Wallet instance associated with this account. Use it to create Contract
     * instances to be interacted with from this account.
     * @returns A Wallet instance.
     */
    async getWallet() {
        const entrypoint = await this.getAccount();
        return new AccountWalletWithPrivateKey(this.pxe, entrypoint, this.encryptionPrivateKey);
    }
    /**
     * Registers this account in the PXE Service and returns the associated wallet. Registering
     * the account on the PXE Service is required for managing private state associated with it.
     * Use the returned wallet to create Contract instances to be interacted with from this account.
     * @param opts - Options to wait for the account to be synched.
     * @returns A Wallet instance.
     */
    async register(opts = DefaultWaitOpts) {
        const address = await __classPrivateFieldGet(this, _AccountManager_instances, "m", _AccountManager_register).call(this);
        await waitForAccountSynch(this.pxe, address, opts);
        return this.getWallet();
    }
    /**
     * Returns the pre-populated deployment method to deploy the account contract that backs this account.
     * Typically you will not need this method and can call `deploy` directly. Use this for having finer
     * grained control on when to create, simulate, and send the deployment tx.
     * @returns A DeployMethod instance that deploys this account contract.
     */
    async getDeployMethod() {
        if (!this.deployMethod) {
            if (!this.salt) {
                throw new Error(`Cannot deploy account contract without known salt.`);
            }
            await __classPrivateFieldGet(this, _AccountManager_instances, "m", _AccountManager_register).call(this);
            const encryptionPublicKey = this.getEncryptionPublicKey();
            const deployer = new ContractDeployer(this.accountContract.getContractArtifact(), this.pxe, encryptionPublicKey);
            const args = this.accountContract.getDeploymentArgs();
            this.deployMethod = deployer.deploy(...args);
        }
        return this.deployMethod;
    }
    /**
     * Deploys the account contract that backs this account.
     * Uses the salt provided in the constructor or a randomly generated one.
     * Note that if the Account is constructed with an explicit complete address
     * it is assumed that the account contract has already been deployed and this method will throw.
     * Registers the account in the PXE Service before deploying the contract.
     * @returns A SentTx object that can be waited to get the associated Wallet.
     */
    async deploy() {
        const deployMethod = await this.getDeployMethod();
        const wallet = await this.getWallet();
        const sentTx = deployMethod.send({ contractAddressSalt: this.salt });
        return new DeployAccountSentTx(wallet, sentTx.getTxHash());
    }
    /**
     * Deploys the account contract that backs this account and awaits the tx to be mined.
     * Uses the salt provided in the constructor or a randomly generated one.
     * Note that if the Account is constructed with an explicit complete address
     * it is assumed that the account contract has already been deployed and this method will throw.
     * Registers the account in the PXE Service before deploying the contract.
     * @param opts - Options to wait for the tx to be mined.
     * @returns A Wallet instance.
     */
    async waitDeploy(opts = DefaultWaitOpts) {
        await this.deploy().then(tx => tx.wait(opts));
        return this.getWallet();
    }
}
_AccountManager_instances = new WeakSet(), _AccountManager_register = async function _AccountManager_register() {
    const completeAddress = this.getCompleteAddress();
    await this.pxe.registerAccount(this.encryptionPrivateKey, completeAddress.partialAddress);
    return completeAddress;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvYWNjb3VudC9tYW5hZ2VyL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsT0FBTyxFQUFhLHlCQUF5QixFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDMUUsT0FBTyxFQUFFLEVBQUUsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQzlDLE9BQU8sRUFBRSxlQUFlLEVBQTJCLE1BQU0sY0FBYyxDQUFDO0FBRXhFLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUM1RCxPQUFPLEVBQ0wsMkJBQTJCLEVBQzNCLGdCQUFnQixFQUdoQixpQkFBaUIsR0FDbEIsTUFBTSxnQkFBZ0IsQ0FBQztBQUd4QixPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUNsRSxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFFaEQ7OztHQUdHO0FBQ0gsTUFBTSxPQUFPLGNBQWM7SUFRekIsWUFDVSxHQUFRLEVBQ1Isb0JBQXdDLEVBQ3hDLGVBQWdDLEVBQ3hDLGFBQXNDOztRQUg5QixRQUFHLEdBQUgsR0FBRyxDQUFLO1FBQ1IseUJBQW9CLEdBQXBCLG9CQUFvQixDQUFvQjtRQUN4QyxvQkFBZSxHQUFmLGVBQWUsQ0FBaUI7UUFHeEMsSUFBSSxhQUFhLFlBQVksZUFBZSxFQUFFO1lBQzVDLElBQUksQ0FBQyxlQUFlLEdBQUcsYUFBYSxDQUFDO1NBQ3RDO2FBQU07WUFDTCxJQUFJLENBQUMsSUFBSSxHQUFHLGFBQWEsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQztTQUNqRTtJQUNILENBQUM7SUFFUyxzQkFBc0I7UUFDOUIsSUFBSSxDQUFDLElBQUksQ0FBQyxtQkFBbUIsRUFBRTtZQUM3QixJQUFJLENBQUMsbUJB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