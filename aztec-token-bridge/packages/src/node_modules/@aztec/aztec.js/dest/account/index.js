/**
 * The `account` module provides utilities for managing accounts. The most common methods to use
 * are {@link getEcdsaAccount} and {@link getSchnorrAccount}, which return {@link AccountManager} instances
 * using the default ECDSA or Schnorr account implementation respectively. The {@link AccountManager} class then
 * allows to deploy and register a fresh account, or to obtain a `Wallet` instance out of an account already deployed.
 *
 * ```ts
 * const encryptionPrivateKey = GrumpkinScalar.random();
 * const signingPrivateKey = GrumpkinScalar.random();
 * const wallet = getSchnorrAccount(pxe, encryptionPrivateKey, signingPrivateKey).waitDeploy();
 * ```
 *
 * For testing purposes, consider using the {@link createAccount} and {@link createAccounts} methods,
 * which create, register, and deploy random accounts, and return their associated `Wallet`s.
 *
 * For implementing your own account contract, the recommended way is to extend from the base
 * {@link BaseAccountContract} class.
 * Read more in {@link https://docs.aztec.network/dev_docs/wallets/writing_an_account_contract | Writing an account contract}.
 *
 * @packageDocumentation
 */
import { CompleteAddress } from '@aztec/types';
import { AccountWallet } from '../index.js';
import { EcdsaAccountContract } from './contract/ecdsa_account_contract.js';
import { SchnorrAccountContract } from './contract/schnorr_account_contract.js';
import { SingleKeyAccountContract } from './contract/single_key_account_contract.js';
import { AccountManager } from './manager/index.js';
export * from './contract/index.js';
export * from './defaults/index.js';
export * from './utils.js';
export { AccountManager, CompleteAddress };
/**
 * Creates an Account that relies on an ECDSA signing key for authentication.
 * @param pxe - An PXE server instance.
 * @param encryptionPrivateKey - Grumpkin key used for note encryption.
 * @param signingPrivateKey - Secp256k1 key used for signing transactions.
 * @param saltOrAddress - Deployment salt or complete address if account contract is already deployed.
 */
export function getEcdsaAccount(pxe, encryptionPrivateKey, signingPrivateKey, saltOrAddress) {
    return new AccountManager(pxe, encryptionPrivateKey, new EcdsaAccountContract(signingPrivateKey), saltOrAddress);
}
/**
 * Creates an Account that relies on a Grumpkin signing key for authentication.
 * @param pxe - An PXE server instance.
 * @param encryptionPrivateKey - Grumpkin key used for note encryption.
 * @param signingPrivateKey - Grumpkin key used for signing transactions.
 * @param saltOrAddress - Deployment salt or complete address if account contract is already deployed.
 */
export function getSchnorrAccount(pxe, encryptionPrivateKey, signingPrivateKey, saltOrAddress) {
    return new AccountManager(pxe, encryptionPrivateKey, new SchnorrAccountContract(signingPrivateKey), saltOrAddress);
}
/**
 * Creates an Account that uses the same Grumpkin key for encryption and authentication.
 * @param pxe - An PXE server instance.
 * @param encryptionAndSigningPrivateKey - Grumpkin key used for note encryption and signing transactions.
 * @param saltOrAddress - Deployment salt or complete address if account contract is already deployed.
 */
export function getUnsafeSchnorrAccount(pxe, encryptionAndSigningPrivateKey, saltOrAddress) {
    return new AccountManager(pxe, encryptionAndSigningPrivateKey, new SingleKeyAccountContract(encryptionAndSigningPrivateKey), saltOrAddress);
}
/**
 * Gets a wallet for an already registered account using Schnorr signatures with a single key for encryption and authentication.
 * @param pxe - An PXE server instance.
 * @param address - Address for the account.
 * @param signingPrivateKey - Grumpkin key used for note encryption and signing transactions.
 * @returns A wallet for this account that can be used to interact with a contract instance.
 */
export function getUnsafeSchnorrWallet(pxe, address, signingKey) {
    return getWallet(pxe, address, new SingleKeyAccountContract(signingKey));
}
/**
 * Gets a wallet for an already registered account.
 * @param pxe - PXE Service instance.
 * @param address - Address for the account.
 * @param accountContract - Account contract implementation.
 * @returns A wallet for this account that can be used to interact with a contract instance.
 */
export async function getWallet(pxe, address, accountContract) {
    const completeAddress = await pxe.getRegisteredAccount(address);
    if (!completeAddress) {
        throw new Error(`Account ${address} not found`);
    }
    const nodeInfo = await pxe.getNodeInfo();
    const entrypoint = accountContract.getInterface(completeAddress, nodeInfo);
    return new AccountWallet(pxe, entrypoint);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvYWNjb3VudC9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0FvQkc7QUFDSCxPQUFPLEVBQUUsZUFBZSxFQUEyQixNQUFNLGNBQWMsQ0FBQztBQUV4RSxPQUFPLEVBQW1CLGFBQWEsRUFBb0IsTUFBTSxhQUFhLENBQUM7QUFDL0UsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sc0NBQXNDLENBQUM7QUFDNUUsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sd0NBQXdDLENBQUM7QUFDaEYsT0FBTyxFQUFFLHdCQUF3QixFQUFFLE1BQU0sMkNBQTJDLENBQUM7QUFDckYsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBRXBELGNBQWMscUJBQXFCLENBQUM7QUFDcEMsY0FBYyxxQkFBcUIsQ0FBQztBQUNwQyxjQUFjLFlBQVksQ0FBQztBQUUzQixPQUFPLEVBQUUsY0FBYyxFQUFFLGVBQWUsRUFBRSxDQUFDO0FBSzNDOzs7Ozs7R0FNRztBQUNILE1BQU0sVUFBVSxlQUFlLENBQzdCLEdBQVEsRUFDUixvQkFBd0MsRUFDeEMsaUJBQXlCLEVBQ3pCLGFBQXNDO0lBRXRDLE9BQU8sSUFBSSxjQUFjLENBQUMsR0FBRyxFQUFFLG9CQUFvQixFQUFFLElBQUksb0JBQW9CLENBQUMsaUJBQWlCLENBQUMsRUFBRSxhQUFhLENBQUMsQ0FBQztBQUNuSCxDQUFDO0FBRUQ7Ozs7OztHQU1HO0FBQ0gsTUFBTSxVQUFVLGlCQUFpQixDQUMvQixHQUFRLEVBQ1Isb0JBQXdDLEVBQ3hDLGlCQUFxQyxFQUNyQyxhQUFzQztJQUV0QyxPQUFPLElBQUksY0FBYyxDQUFDLEdBQUcsRUFBRSxvQkFBb0IsRUFBRSxJQUFJLHNCQUFzQixDQUFDLGlCQUFpQixDQUFDLEVBQUUsYUFBYSxDQUFDLENBQUM7QUFDckgsQ0FBQztBQUVEOzs7OztHQUtHO0FBQ0gsTUFBTSxVQUFVLHVCQUF1QixDQUNyQyxHQUFRLEVBQ1IsOEJBQWtELEVBQ2xELGFBQXNDO0lBRXRDLE9BQU8sSUFBSSxjQUFjLENBQ3ZCLEdBQUcsRUFDSCw4QkFBOEIsRUFDOUIsSUFBSSx3QkFBd0IsQ0FBQyw4QkFBOEIsQ0FBQyxFQUM1RCxhQUFhLENBQ2QsQ0FBQztBQUNKLENBQUM7QUFFRDs7Ozs7O0dBTUc7QUFDSCxNQUFNLFVBQVUsc0JBQXNCLENBQ3BDLEdBQVEsRUFDUixPQUFxQixFQUNyQixVQUE4QjtJQUU5QixPQUFPLFNBQVMsQ0FBQyxHQUFHLEVBQUUsT0FBTyxFQUFFLElBQUksd0JBQXdCLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQztBQUMzRSxDQUFDO0FBRUQ7Ozs7OztHQU1HO0FBQ0gsTUFBTSxDQUFDLEtBQUssVUFBVSxTQUFTLENBQzdCLEdBQVEsRUFDUixPQUFxQixFQUNyQixlQUFnQztJQUVoQyxNQUFNLGVBQWUsR0FBRyxNQUFNLEdBQUcsQ0FBQyxvQkFBb0IsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUNoRSxJQUFJLENBQUMsZUFBZSxFQUFFO1FBQ3BCLE1BQU0sSUFBSSxLQUFLLENBQUMsV0FBVyxPQUFPLFlBQVksQ0FBQyxDQUFDO0tBQ2pEO0lBQ0QsTUFBTSxRQUFRLEdBQUcsTUFBTSxHQUFHLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDekMsTUFBTSxVQUFVLEdBQUcsZUFBZSxDQUFDLFlBQVksQ0FBQyxlQUFlLEVBQUUsUUFBUSxDQUFDLENBQUM7SUFDM0UsT0FBTyxJQUFJLGFBQWEsQ0FBQyxHQUFHLEVBQUUsVUFBVSxDQUFDLENBQUM7QUFDNUMsQ0FBQyJ9