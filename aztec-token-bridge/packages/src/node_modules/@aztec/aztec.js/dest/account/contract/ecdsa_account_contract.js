import { Ecdsa } from '@aztec/circuits.js/barretenberg';
import { AuthWitness } from '@aztec/types';
import EcdsaAccountContractArtifact from '../../artifacts/ecdsa_account_contract.json' assert { type: 'json' };
import { BaseAccountContract } from './base_account_contract.js';
/**
 * Account contract that authenticates transactions using ECDSA signatures
 * verified against a secp256k1 public key stored in an immutable encrypted note.
 */
export class EcdsaAccountContract extends BaseAccountContract {
    constructor(signingPrivateKey) {
        super(EcdsaAccountContractArtifact);
        this.signingPrivateKey = signingPrivateKey;
    }
    getDeploymentArgs() {
        const signingPublicKey = new Ecdsa().computePublicKey(this.signingPrivateKey);
        return [signingPublicKey.subarray(0, 32), signingPublicKey.subarray(32, 64)];
    }
    getAuthWitnessProvider(_address) {
        return new EcdsaAuthWitnessProvider(this.signingPrivateKey);
    }
}
/** Creates auth witnesses using ECDSA signatures. */
class EcdsaAuthWitnessProvider {
    constructor(signingPrivateKey) {
        this.signingPrivateKey = signingPrivateKey;
    }
    createAuthWitness(message) {
        const ecdsa = new Ecdsa();
        const signature = ecdsa.constructSignature(message.toBuffer(), this.signingPrivateKey);
        return Promise.resolve(new AuthWitness(message, [...signature.r, ...signature.s]));
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWNkc2FfYWNjb3VudF9jb250cmFjdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9hY2NvdW50L2NvbnRyYWN0L2VjZHNhX2FjY291bnRfY29udHJhY3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLGlDQUFpQyxDQUFDO0FBR3hELE9BQU8sRUFBRSxXQUFXLEVBQW1CLE1BQU0sY0FBYyxDQUFDO0FBRTVELE9BQU8sNEJBQTRCLE1BQU0sNkNBQTZDLENBQUMsU0FBUyxJQUFJLEVBQUUsTUFBTSxFQUFFLENBQUM7QUFFL0csT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFFakU7OztHQUdHO0FBQ0gsTUFBTSxPQUFPLG9CQUFxQixTQUFRLG1CQUFtQjtJQUMzRCxZQUFvQixpQkFBeUI7UUFDM0MsS0FBSyxDQUFDLDRCQUFnRCxDQUFDLENBQUM7UUFEdEMsc0JBQWlCLEdBQWpCLGlCQUFpQixDQUFRO0lBRTdDLENBQUM7SUFFRCxpQkFBaUI7UUFDZixNQUFNLGdCQUFnQixHQUFHLElBQUksS0FBSyxFQUFFLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLENBQUM7UUFDOUUsT0FBTyxDQUFDLGdCQUFnQixDQUFDLFFBQVEsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUUsZ0JBQWdCLENBQUMsUUFBUSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQy9FLENBQUM7SUFFRCxzQkFBc0IsQ0FBQyxRQUF5QjtRQUM5QyxPQUFPLElBQUksd0JBQXdCLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLENBQUM7SUFDOUQsQ0FBQztDQUNGO0FBRUQscURBQXFEO0FBQ3JELE1BQU0sd0JBQXdCO0lBQzVCLFlBQW9CLGlCQUF5QjtRQUF6QixzQkFBaUIsR0FBakIsaUJBQWlCLENBQVE7SUFBRyxDQUFDO0lBRWpELGlCQUFpQixDQUFDLE9BQVc7UUFDM0IsTUFBTSxLQUFLLEdBQUcsSUFBSSxLQUFLLEVBQUUsQ0FBQztRQUMxQixNQUFNLFNBQVMsR0FBRyxLQUFLLENBQUMsa0JBQWtCLENBQUMsT0FBTyxDQUFDLFFBQVEsRUFBRSxFQUFFLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO1FBQ3ZGLE9BQU8sT0FBTyxDQUFDLE9BQU8sQ0FBQyxJQUFJLFdBQVcsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxHQUFHLFNBQVMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3JGLENBQUM7Q0FDRiJ9