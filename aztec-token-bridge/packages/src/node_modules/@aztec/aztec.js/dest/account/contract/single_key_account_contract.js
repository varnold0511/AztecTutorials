import { Schnorr } from '@aztec/circuits.js/barretenberg';
import { AuthWitness } from '@aztec/types';
import SchnorrSingleKeyAccountContractArtifact from '../../artifacts/schnorr_single_key_account_contract.json' assert { type: 'json' };
import { generatePublicKey } from '../../index.js';
import { BaseAccountContract } from './base_account_contract.js';
/**
 * Account contract that authenticates transactions using Schnorr signatures verified against
 * the note encryption key, relying on a single private key for both encryption and authentication.
 */
export class SingleKeyAccountContract extends BaseAccountContract {
    constructor(encryptionPrivateKey) {
        super(SchnorrSingleKeyAccountContractArtifact);
        this.encryptionPrivateKey = encryptionPrivateKey;
    }
    getDeploymentArgs() {
        return [];
    }
    getAuthWitnessProvider({ partialAddress }) {
        return new SingleKeyAuthWitnessProvider(this.encryptionPrivateKey, partialAddress);
    }
}
/**
 * Creates auth witnesses using Schnorr signatures and including the partial address and public key
 * in the witness, so verifiers do not need to store the public key and can instead validate it
 * by reconstructing the current address.
 */
class SingleKeyAuthWitnessProvider {
    constructor(privateKey, partialAddress) {
        this.privateKey = privateKey;
        this.partialAddress = partialAddress;
    }
    createAuthWitness(message) {
        const schnorr = new Schnorr();
        const signature = schnorr.constructSignature(message.toBuffer(), this.privateKey);
        const publicKey = generatePublicKey(this.privateKey);
        const witness = [...publicKey.toFields(), ...signature.toBuffer(), this.partialAddress];
        return Promise.resolve(new AuthWitness(message, witness));
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2luZ2xlX2tleV9hY2NvdW50X2NvbnRyYWN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2FjY291bnQvY29udHJhY3Qvc2luZ2xlX2tleV9hY2NvdW50X2NvbnRyYWN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUcxRCxPQUFPLEVBQUUsV0FBVyxFQUF1QyxNQUFNLGNBQWMsQ0FBQztBQUVoRixPQUFPLHVDQUF1QyxNQUFNLDBEQUEwRCxDQUFDLFNBQVMsSUFBSSxFQUFFLE1BQU0sRUFBRSxDQUFDO0FBQ3ZJLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRW5ELE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBRWpFOzs7R0FHRztBQUNILE1BQU0sT0FBTyx3QkFBeUIsU0FBUSxtQkFBbUI7SUFDL0QsWUFBb0Isb0JBQXdDO1FBQzFELEtBQUssQ0FBQyx1Q0FBMkQsQ0FBQyxDQUFDO1FBRGpELHlCQUFvQixHQUFwQixvQkFBb0IsQ0FBb0I7SUFFNUQsQ0FBQztJQUVELGlCQUFpQjtRQUNmLE9BQU8sRUFBRSxDQUFDO0lBQ1osQ0FBQztJQUVELHNCQUFzQixDQUFDLEVBQUUsY0FBYyxFQUFtQjtRQUN4RCxPQUFPLElBQUksNEJBQTRCLENBQUMsSUFBSSxDQUFDLG9CQUFvQixFQUFFLGNBQWMsQ0FBQyxDQUFDO0lBQ3JGLENBQUM7Q0FDRjtBQUVEOzs7O0dBSUc7QUFDSCxNQUFNLDRCQUE0QjtJQUNoQyxZQUFvQixVQUE4QixFQUFVLGNBQThCO1FBQXRFLGVBQVUsR0FBVixVQUFVLENBQW9CO1FBQVUsbUJBQWMsR0FBZCxjQUFjLENBQWdCO0lBQUcsQ0FBQztJQUU5RixpQkFBaUIsQ0FBQyxPQUFXO1FBQzNCLE1BQU0sT0FBTyxHQUFHLElBQUksT0FBTyxFQUFFLENBQUM7UUFDOUIsTUFBTSxTQUFTLEdBQUcsT0FBTyxDQUFDLGtCQUFrQixDQUFDLE9BQU8sQ0FBQyxRQUFRLEVBQUUsRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDbEYsTUFBTSxTQUFTLEdBQUcsaUJBQWlCLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQ3JELE1BQU0sT0FBTyxHQUFHLENBQUMsR0FBRyxTQUFTLENBQUMsUUFBUSxFQUFFLEVBQUUsR0FBRyxTQUFTLENBQUMsUUFBUSxFQUFFLEVBQUUsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDO1FBQ3hGLE9BQU8sT0FBTyxDQUFDLE9BQU8sQ0FBQyxJQUFJLFdBQVcsQ0FBQyxPQUFPLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQztJQUM1RCxDQUFDO0NBQ0YifQ==