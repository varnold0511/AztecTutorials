/// <reference types="node" resolution-mode="require"/>
import { Fr } from '@aztec/foundation/fields';
import { BufferReader } from '@aztec/foundation/serialize';
import { ContractData } from './contract_data.js';
import { PublicDataWrite } from './public_data_write.js';
import { TxHash } from './tx/tx_hash.js';
/**
 * Represents an L2 transaction.
 */
export declare class L2Tx {
    /**
     * New commitments created by the transaction.
     */
    newCommitments: Fr[];
    /**
     * New nullifiers created by the transaction.
     */
    newNullifiers: Fr[];
    /**
     * New public data writes created by the transaction.
     */
    newPublicDataWrites: PublicDataWrite[];
    /**
     * New L2 to L1 messages created by the transaction.
     */
    newL2ToL1Msgs: Fr[];
    /**
     * New contracts leaves created by the transaction to be inserted into the contract tree.
     */
    newContracts: Fr[];
    /**
     * New contract data created by the transaction.
     */
    newContractData: ContractData[];
    /**
     * The unique identifier of the block containing the transaction.
     */
    blockHash: Buffer;
    /**
     * The block number in which the transaction was included.
     */
    blockNumber: number;
    /**
     * The transaction's hash.
     * Note: It's the first nullifier emitted by the kernel circuit.
     */
    readonly txHash: TxHash;
    constructor(
    /**
     * New commitments created by the transaction.
     */
    newCommitments: Fr[], 
    /**
     * New nullifiers created by the transaction.
     */
    newNullifiers: Fr[], 
    /**
     * New public data writes created by the transaction.
     */
    newPublicDataWrites: PublicDataWrite[], 
    /**
     * New L2 to L1 messages created by the transaction.
     */
    newL2ToL1Msgs: Fr[], 
    /**
     * New contracts leaves created by the transaction to be inserted into the contract tree.
     */
    newContracts: Fr[], 
    /**
     * New contract data created by the transaction.
     */
    newContractData: ContractData[], 
    /**
     * The unique identifier of the block containing the transaction.
     */
    blockHash: Buffer, 
    /**
     * The block number in which the transaction was included.
     */
    blockNumber: number);
    /**
     * Deserializes the L2Tx object from a Buffer.
     * @param buffer - Buffer or BufferReader object to deserialize.
     * @returns An instance of L2Tx.
     */
    static fromBuffer(buffer: Buffer | BufferReader): L2Tx;
    /**
     * Deserializes an L2Tx object from a string.
     * @param str - String to deserialize.
     * @returns An instance of L2Tx.
     */
    static fromString(str: string): L2Tx;
    /**
     * Serializes the Tx object into a Buffer.
     * @returns Buffer representation of the Tx object.
     */
    toBuffer(): Buffer;
    /**
     * Returns a string representation of the L2Tx object.
     */
    toString(): string;
    static random(): L2Tx;
}
//# sourceMappingURL=l2_tx.d.ts.map