import { AztecAddress, Fr, FunctionData, TxContext, TxRequest, Vector } from '@aztec/circuits.js';
import { BufferReader, serializeToBuffer } from '@aztec/circuits.js/utils';
import { AuthWitness } from './auth_witness.js';
import { PackedArguments } from './packed_arguments.js';
/**
 * Request to execute a transaction. Similar to TxRequest, but has the full args.
 */
export class TxExecutionRequest {
    constructor(
    /**
     * Sender.
     */
    origin, 
    /**
     * Function data representing the function to call.
     * TODO(#3417): Remove this field and replace with a function selector.
     */
    functionData, 
    /**
     * The hash of the entry point arguments.
     */
    argsHash, 
    /**
     * Transaction context.
     */
    txContext, 
    /**
     * These packed arguments will be used during transaction simulation.
     * For example, a call to an account contract might contain as many packed arguments
     * as relayed function calls, and one for the entrypoint.
     */
    packedArguments, 
    /**
     * Transient authorization witnesses for authorizing the execution of one or more actions during this tx.
     * These witnesses are not expected to be stored in the local witnesses database of the PXE.
     */
    authWitnesses) {
        this.origin = origin;
        this.functionData = functionData;
        this.argsHash = argsHash;
        this.txContext = txContext;
        this.packedArguments = packedArguments;
        this.authWitnesses = authWitnesses;
    }
    toTxRequest() {
        return new TxRequest(this.origin, this.functionData, this.argsHash, this.txContext);
    }
    static getFields(fields) {
        return [
            fields.origin,
            fields.functionData,
            fields.argsHash,
            fields.txContext,
            fields.packedArguments,
            fields.authWitnesses,
        ];
    }
    static from(fields) {
        return new TxExecutionRequest(...TxExecutionRequest.getFields(fields));
    }
    /**
     * Serialize as a buffer.
     * @returns The buffer.
     */
    toBuffer() {
        return serializeToBuffer(this.origin, this.functionData, this.argsHash, this.txContext, new Vector(this.packedArguments), new Vector(this.authWitnesses));
    }
    /**
     * Serialize as a string.
     * @returns The string.
     */
    toString() {
        return this.toBuffer().toString('hex');
    }
    /**
     * Deserializes from a buffer or reader, corresponding to a write in cpp.
     * @param buffer - Buffer to read from.
     * @returns The deserialized TxRequest object.
     */
    static fromBuffer(buffer) {
        const reader = BufferReader.asReader(buffer);
        return new TxExecutionRequest(reader.readObject(AztecAddress), reader.readObject(FunctionData), Fr.fromBuffer(reader), reader.readObject(TxContext), reader.readVector(PackedArguments), reader.readVector(AuthWitness));
    }
    /**
     * Deserializes from a string, corresponding to a write in cpp.
     * @param str - String to read from.
     * @returns The deserialized TxRequest object.
     */
    static fromString(str) {
        return TxExecutionRequest.fromBuffer(Buffer.from(str, 'hex'));
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHhfZXhlY3V0aW9uX3JlcXVlc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvdHhfZXhlY3V0aW9uX3JlcXVlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFlBQVksRUFBWSxFQUFFLEVBQUUsWUFBWSxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDNUcsT0FBTyxFQUFFLFlBQVksRUFBRSxpQkFBaUIsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBRTNFLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUNoRCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFFeEQ7O0dBRUc7QUFDSCxNQUFNLE9BQU8sa0JBQWtCO0lBQzdCO0lBQ0U7O09BRUc7SUFDSSxNQUFvQjtJQUMzQjs7O09BR0c7SUFDSSxZQUEwQjtJQUNqQzs7T0FFRztJQUNJLFFBQVk7SUFDbkI7O09BRUc7SUFDSSxTQUFvQjtJQUMzQjs7OztPQUlHO0lBQ0ksZUFBa0M7SUFDekM7OztPQUdHO0lBQ0ksYUFBNEI7UUF4QjVCLFdBQU0sR0FBTixNQUFNLENBQWM7UUFLcEIsaUJBQVksR0FBWixZQUFZLENBQWM7UUFJMUIsYUFBUSxHQUFSLFFBQVEsQ0FBSTtRQUlaLGNBQVMsR0FBVCxTQUFTLENBQVc7UUFNcEIsb0JBQWUsR0FBZixlQUFlLENBQW1CO1FBS2xDLGtCQUFhLEdBQWIsYUFBYSxDQUFlO0lBQ2xDLENBQUM7SUFFSixXQUFXO1FBQ1QsT0FBTyxJQUFJLFNBQVMsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxZQUFZLEVBQUUsSUFBSSxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDdEYsQ0FBQztJQUVELE1BQU0sQ0FBQyxTQUFTLENBQUMsTUFBb0M7UUFDbkQsT0FBTztZQUNMLE1BQU0sQ0FBQyxNQUFNO1lBQ2IsTUFBTSxDQUFDLFlBQVk7WUFDbkIsTUFBTSxDQUFDLFFBQVE7WUFDZixNQUFNLENBQUMsU0FBUztZQUNoQixNQUFNLENBQUMsZUFBZTtZQUN0QixNQUFNLENBQUMsYUFBYTtTQUNaLENBQUM7SUFDYixDQUFDO0lBRUQsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFvQztRQUM5QyxPQUFPLElBQUksa0JBQWtCLENBQUMsR0FBRyxrQkFBa0IsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztJQUN6RSxDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsUUFBUTtRQUNOLE9BQU8saUJBQWlCLENBQ3RCLElBQUksQ0FBQyxNQUFNLEVBQ1gsSUFBSSxDQUFDLFlBQVksRUFDakIsSUFBSSxDQUFDLFFBQVEsRUFDYixJQUFJLENBQUMsU0FBUyxFQUNkLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsRUFDaEMsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUMvQixDQUFDO0lBQ0osQ0FBQztJQUVEOzs7T0FHRztJQUNILFFBQVE7UUFDTixPQUFPLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDekMsQ0FBQztJQUVEOzs7O09BSUc7SUFDSCxNQUFNLENBQUMsVUFBVSxDQUFDLE1BQTZCO1FBQzdDLE1BQU0sTUFBTSxHQUFHLFlBQVksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDN0MsT0FBTyxJQUFJLGtCQUFrQixDQUMzQixNQUFNLENBQUMsVUFBVSxDQUFDLFlBQVksQ0FBQyxFQUMvQixNQUFNLENBQUMsVUFBVSxDQUFDLFlBQVksQ0FBQyxFQUMvQixFQUFFLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxFQUNyQixNQUFNLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxFQUM1QixNQUFNLENBQUMsVUFBVSxDQUFDLGVBQWUsQ0FBQyxFQUNsQyxNQUFNLENBQUMsVUFBVSxDQUFDLFdBQVcsQ0FBQyxDQUMvQixDQUFDO0lBQ0osQ0FBQztJQUVEOzs7O09BSUc7SUFDSCxNQUFNLENBQUMsVUFBVSxDQUFDLEdBQVc7UUFDM0IsT0FBTyxrQkFBa0IsQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQztJQUNoRSxDQUFDO0NBQ0YifQ==