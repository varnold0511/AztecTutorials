import { deserializeBigInt, serializeBigInt } from '@aztec/foundation/serialize';
/**
 * A class representing hash of Aztec transaction.
 */
export class TxHash {
    constructor(
    /**
     * The buffer containing the hash.
     */
    buffer) {
        this.buffer = buffer;
        if (buffer.length !== TxHash.SIZE) {
            throw new Error(`Expected buffer to have length ${TxHash.SIZE} but was ${buffer.length}`);
        }
    }
    /**
     * Checks if this hash and another hash are equal.
     * @param hash - A hash to compare with.
     * @returns True if the hashes are equal, false otherwise.
     */
    equals(hash) {
        return this.buffer.equals(hash.buffer);
    }
    /**
     * Returns true if this hash is zero.
     * @returns True if this hash is zero.
     */
    isZero() {
        return this.buffer.equals(Buffer.alloc(32, 0));
    }
    /**
     * Convert this hash to a hex string.
     * @returns The hex string.
     */
    toString() {
        return this.buffer.toString('hex');
    }
    /**
     * Convert this hash to a big int.
     * @returns The big int.
     */
    toBigInt() {
        return deserializeBigInt(this.buffer, 0, TxHash.SIZE).elem;
    }
    /**
     * Creates a tx hash from a bigint.
     * @param hash - The tx hash as a big int.
     * @returns The TxHash.
     */
    static fromBigInt(hash) {
        return new TxHash(serializeBigInt(hash, TxHash.SIZE));
    }
    /**
     * Converts this hash from a buffer of 28 bytes.
     * Verifies the input is 28 bytes.
     * @param buffer - The 28 byte buffer to construct from.
     * @returns A TxHash created from the input buffer with 4 bytes 0 padding at the front.
     */
    static fromBuffer28(buffer) {
        if (buffer.length != 28) {
            throw new Error(`Expected TxHash input buffer to be 28 bytes`);
        }
        const padded = Buffer.concat([Buffer.alloc(this.SIZE - 28), buffer]);
        return new TxHash(padded);
    }
    /**
     * Converts a string into a TxHash object.
     * @param str - The TX hash in string format.
     * @returns A new TxHash object.
     */
    static fromString(str) {
        return new TxHash(Buffer.from(str, 'hex'));
    }
}
/**
 * The size of the hash in bytes.
 */
TxHash.SIZE = 32;
/**
 * TxHash with value zero.
 */
TxHash.ZERO = new TxHash(Buffer.alloc(TxHash.SIZE));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHhfaGFzaC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90eC90eF9oYXNoLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxlQUFlLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUVqRjs7R0FFRztBQUNILE1BQU0sT0FBTyxNQUFNO0lBV2pCO0lBQ0U7O09BRUc7SUFDSSxNQUFjO1FBQWQsV0FBTSxHQUFOLE1BQU0sQ0FBUTtRQUVyQixJQUFJLE1BQU0sQ0FBQyxNQUFNLEtBQUssTUFBTSxDQUFDLElBQUksRUFBRTtZQUNqQyxNQUFNLElBQUksS0FBSyxDQUFDLGtDQUFrQyxNQUFNLENBQUMsSUFBSSxZQUFZLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDO1NBQzNGO0lBQ0gsQ0FBQztJQUVEOzs7O09BSUc7SUFDSSxNQUFNLENBQUMsSUFBWTtRQUN4QixPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUN6QyxDQUFDO0lBRUQ7OztPQUdHO0lBQ0ksTUFBTTtRQUNYLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNqRCxDQUFDO0lBRUQ7OztPQUdHO0lBQ0ksUUFBUTtRQUNiLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDckMsQ0FBQztJQUVEOzs7T0FHRztJQUNJLFFBQVE7UUFDYixPQUFPLGlCQUFpQixDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUM7SUFDN0QsQ0FBQztJQUNEOzs7O09BSUc7SUFDSSxNQUFNLENBQUMsVUFBVSxDQUFDLElBQVk7UUFDbkMsT0FBTyxJQUFJLE1BQU0sQ0FBQyxlQUFlLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQ3hELENBQUM7SUFDRDs7Ozs7T0FLRztJQUNJLE1BQU0sQ0FBQyxZQUFZLENBQUMsTUFBYztRQUN2QyxJQUFJLE1BQU0sQ0FBQyxNQUFNLElBQUksRUFBRSxFQUFFO1lBQ3ZCLE1BQU0sSUFBSSxLQUFLLENBQUMsNkNBQTZDLENBQUMsQ0FBQztTQUNoRTtRQUNELE1BQU0sTUFBTSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLEdBQUcsRUFBRSxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQztRQUNyRSxPQUFPLElBQUksTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQzVCLENBQUM7SUFFRDs7OztPQUlHO0lBQ0ksTUFBTSxDQUFDLFVBQVUsQ0FBQyxHQUFXO1FBQ2xDLE9BQU8sSUFBSSxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQztJQUM3QyxDQUFDOztBQWxGRDs7R0FFRztBQUNXLFdBQUksR0FBRyxFQUFFLENBQUM7QUFFeEI7O0dBRUc7QUFDVyxXQUFJLEdBQUcsSUFBSSxNQUFNLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyJ9