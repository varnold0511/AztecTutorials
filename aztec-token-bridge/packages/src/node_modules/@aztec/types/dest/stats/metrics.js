/** Metric definitions to track from benchmarks. */
export const Metrics = [
    {
        name: 'l1_rollup_calldata_size_in_bytes',
        groupBy: 'block-size',
        description: 'Size in bytes of the tx calldata posted to L1 when submitting a block.',
        events: ['rollup-published-to-l1'],
    },
    {
        name: 'l1_rollup_calldata_gas',
        groupBy: 'block-size',
        description: 'Estimated gas cost of the tx calldata when posting a block to L1.',
        events: ['rollup-published-to-l1'],
    },
    {
        name: 'l1_rollup_execution_gas',
        groupBy: 'block-size',
        description: 'Total gas used in a tx when submitting a block to L1.',
        events: ['rollup-published-to-l1'],
    },
    {
        name: 'l2_block_processing_time_in_ms',
        groupBy: 'block-size',
        description: 'Time for the state synchronizer to process an L2 block that was not built by its own sequencer.',
        events: ['l2-block-handled'],
    },
    {
        name: 'note_successful_decrypting_time_in_ms',
        groupBy: 'block-size',
        description: 'Time for the PXE to decrypt all notes in a block where they belong to a registered account.',
        events: ['note-processor-caught-up'],
    },
    {
        name: 'note_trial_decrypting_time_in_ms',
        groupBy: 'block-size',
        description: 'Time for the PXE to try decrypting all notes in a block where they do not belong to a registered account.',
        events: ['note-processor-caught-up'],
    },
    {
        name: 'l2_block_building_time_in_ms',
        groupBy: 'block-size',
        description: 'Total time for the sequencer to build an L2 block from a set of txs.',
        events: ['l2-block-built'],
    },
    {
        name: 'l2_block_rollup_simulation_time_in_ms',
        groupBy: 'block-size',
        description: 'Time for the sequencer to run the rollup circuit simulation when assembling a block.',
        events: ['l2-block-built'],
    },
    {
        name: 'l2_block_public_tx_process_time_in_ms',
        groupBy: 'block-size',
        description: 'Time for the sequencer to execute public function calls for txs in a block.',
        events: ['l2-block-built'],
    },
    {
        name: 'node_history_sync_time_in_ms',
        groupBy: 'chain-length',
        description: 'Time for a node without a sequencer to sync chain history',
        events: ['node-synced-chain-history'],
    },
    {
        name: 'note_history_successful_decrypting_time_in_ms',
        groupBy: 'chain-length',
        description: 'Time for a PXE to decrypt all notes in the chain where they belong to a registered account.',
        events: ['note-processor-caught-up'],
    },
    {
        name: 'note_history_trial_decrypting_time_in_ms',
        groupBy: 'chain-length',
        description: 'Time for a PXE to try decrypting all notes in the chain where they do not belong to a registered account.',
        events: ['note-processor-caught-up'],
    },
    {
        name: 'node_database_size_in_bytes',
        groupBy: 'chain-length',
        description: 'Size on disk of the leveldown database of a node after syncing all chain history.',
        events: ['node-synced-chain-history'],
    },
    {
        name: 'pxe_database_size_in_bytes',
        groupBy: 'chain-length',
        description: 'Estimated size in memory of a PXE database after syncing all notes that belong to it in the chain.',
        events: ['note-processor-caught-up'],
    },
    {
        name: 'circuit_simulation_time_in_ms',
        groupBy: 'circuit-name',
        description: 'Time to run a circuit simulation.',
        events: ['circuit-simulation'],
    },
    {
        name: 'circuit_input_size_in_bytes',
        groupBy: 'circuit-name',
        description: 'Size of the inputs to a circuit simulation.',
        events: ['circuit-simulation'],
    },
    {
        name: 'circuit_output_size_in_bytes',
        groupBy: 'circuit-name',
        description: 'Size of the outputs (ie public inputs) from a circuit simulation.',
        events: ['circuit-simulation'],
    },
    {
        name: 'tx_size_in_bytes',
        groupBy: 'contract-count',
        description: 'Size of txs received in the mempool.',
        events: ['tx-added-to-pool'],
    },
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWV0cmljcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zdGF0cy9tZXRyaWNzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWlCQSxtREFBbUQ7QUFDbkQsTUFBTSxDQUFDLE1BQU0sT0FBTyxHQUFHO0lBQ3JCO1FBQ0UsSUFBSSxFQUFFLGtDQUFrQztRQUN4QyxPQUFPLEVBQUUsWUFBWTtRQUNyQixXQUFXLEVBQUUsd0VBQXdFO1FBQ3JGLE1BQU0sRUFBRSxDQUFDLHdCQUF3QixDQUFDO0tBQ25DO0lBQ0Q7UUFDRSxJQUFJLEVBQUUsd0JBQXdCO1FBQzlCLE9BQU8sRUFBRSxZQUFZO1FBQ3JCLFdBQVcsRUFBRSxtRUFBbUU7UUFDaEYsTUFBTSxFQUFFLENBQUMsd0JBQXdCLENBQUM7S0FDbkM7SUFDRDtRQUNFLElBQUksRUFBRSx5QkFBeUI7UUFDL0IsT0FBTyxFQUFFLFlBQVk7UUFDckIsV0FBVyxFQUFFLHVEQUF1RDtRQUNwRSxNQUFNLEVBQUUsQ0FBQyx3QkFBd0IsQ0FBQztLQUNuQztJQUNEO1FBQ0UsSUFBSSxFQUFFLGdDQUFnQztRQUN0QyxPQUFPLEVBQUUsWUFBWTtRQUNyQixXQUFXLEVBQUUsaUdBQWlHO1FBQzlHLE1BQU0sRUFBRSxDQUFDLGtCQUFrQixDQUFDO0tBQzdCO0lBQ0Q7UUFDRSxJQUFJLEVBQUUsdUNBQXVDO1FBQzdDLE9BQU8sRUFBRSxZQUFZO1FBQ3JCLFdBQVcsRUFBRSw2RkFBNkY7UUFDMUcsTUFBTSxFQUFFLENBQUMsMEJBQTBCLENBQUM7S0FDckM7SUFDRDtRQUNFLElBQUksRUFBRSxrQ0FBa0M7UUFDeEMsT0FBTyxFQUFFLFlBQVk7UUFDckIsV0FBVyxFQUNULDJHQUEyRztRQUM3RyxNQUFNLEVBQUUsQ0FBQywwQkFBMEIsQ0FBQztLQUNyQztJQUNEO1FBQ0UsSUFBSSxFQUFFLDhCQUE4QjtRQUNwQyxPQUFPLEVBQUUsWUFBWTtRQUNyQixXQUFXLEVBQUUsc0VBQXNFO1FBQ25GLE1BQU0sRUFBRSxDQUFDLGdCQUFnQixDQUFDO0tBQzNCO0lBQ0Q7UUFDRSxJQUFJLEVBQUUsdUNBQXVDO1FBQzdDLE9BQU8sRUFBRSxZQUFZO1FBQ3JCLFdBQVcsRUFBRSxzRkFBc0Y7UUFDbkcsTUFBTSxFQUFFLENBQUMsZ0JBQWdCLENBQUM7S0FDM0I7SUFDRDtRQUNFLElBQUksRUFBRSx1Q0FBdUM7UUFDN0MsT0FBTyxFQUFFLFlBQVk7UUFDckIsV0FBVyxFQUFFLDZFQUE2RTtRQUMxRixNQUFNLEVBQUUsQ0FBQyxnQkFBZ0IsQ0FBQztLQUMzQjtJQUNEO1FBQ0UsSUFBSSxFQUFFLDhCQUE4QjtRQUNwQyxPQUFPLEVBQUUsY0FBYztRQUN2QixXQUFXLEVBQUUsMkRBQTJEO1FBQ3hFLE1BQU0sRUFBRSxDQUFDLDJCQUEyQixDQUFDO0tBQ3RDO0lBQ0Q7UUFDRSxJQUFJLEVBQUUsK0NBQStDO1FBQ3JELE9BQU8sRUFBRSxjQUFjO1FBQ3ZCLFdBQVcsRUFBRSw2RkFBNkY7UUFDMUcsTUFBTSxFQUFFLENBQUMsMEJBQTBCLENBQUM7S0FDckM7SUFDRDtRQUNFLElBQUksRUFBRSwwQ0FBMEM7UUFDaEQsT0FBTyxFQUFFLGNBQWM7UUFDdkIsV0FBVyxFQUNULDJHQUEyRztRQUM3RyxNQUFNLEVBQUUsQ0FBQywwQkFBMEIsQ0FBQztLQUNyQztJQUNEO1FBQ0UsSUFBSSxFQUFFLDZCQUE2QjtRQUNuQyxPQUFPLEVBQUUsY0FBYztRQUN2QixXQUFXLEVBQUUsbUZBQW1GO1FBQ2hHLE1BQU0sRUFBRSxDQUFDLDJCQUEyQixDQUFDO0tBQ3RDO0lBQ0Q7UUFDRSxJQUFJLEVBQUUsNEJBQTRCO1FBQ2xDLE9BQU8sRUFBRSxjQUFjO1FBQ3ZCLFdBQVcsRUFBRSxvR0FBb0c7UUFDakgsTUFBTSxFQUFFLENBQUMsMEJBQTBCLENBQUM7S0FDckM7SUFDRDtRQUNFLElBQUksRUFBRSwrQkFBK0I7UUFDckMsT0FBTyxFQUFFLGNBQWM7UUFDdkIsV0FBVyxFQUFFLG1DQUFtQztRQUNoRCxNQUFNLEVBQUUsQ0FBQyxvQkFBb0IsQ0FBQztLQUMvQjtJQUNEO1FBQ0UsSUFBSSxFQUFFLDZCQUE2QjtRQUNuQyxPQUFPLEVBQUUsY0FBYztRQUN2QixXQUFXLEVBQUUsNkNBQTZDO1FBQzFELE1BQU0sRUFBRSxDQUFDLG9CQUFvQixDQUFDO0tBQy9CO0lBQ0Q7UUFDRSxJQUFJLEVBQUUsOEJBQThCO1FBQ3BDLE9BQU8sRUFBRSxjQUFjO1FBQ3ZCLFdBQVcsRUFBRSxtRUFBbUU7UUFDaEYsTUFBTSxFQUFFLENBQUMsb0JBQW9CLENBQUM7S0FDL0I7SUFDRDtRQUNFLElBQUksRUFBRSxrQkFBa0I7UUFDeEIsT0FBTyxFQUFFLGdCQUFnQjtRQUN6QixXQUFXLEVBQUUsc0NBQXNDO1FBQ25ELE1BQU0sRUFBRSxDQUFDLGtCQUFrQixDQUFDO0tBQzdCO0NBQ21DLENBQUMifQ==