import { StatsEventName } from './stats.js';
/** How a metric is grouped in benchmarks: by block size, by length of chain processed, or by circuit name. */
export type MetricGroupBy = 'block-size' | 'chain-length' | 'circuit-name' | 'contract-count';
/** Definition of a metric to track in benchmarks. */
export interface Metric {
    /** Identifier. */
    name: string;
    /** What dimension this metric is grouped by. */
    groupBy: MetricGroupBy;
    /** Description */
    description: string;
    /** Events used for generating this metric. */
    events: readonly StatsEventName[];
}
/** Metric definitions to track from benchmarks. */
export declare const Metrics: readonly [{
    readonly name: "l1_rollup_calldata_size_in_bytes";
    readonly groupBy: "block-size";
    readonly description: "Size in bytes of the tx calldata posted to L1 when submitting a block.";
    readonly events: readonly ["rollup-published-to-l1"];
}, {
    readonly name: "l1_rollup_calldata_gas";
    readonly groupBy: "block-size";
    readonly description: "Estimated gas cost of the tx calldata when posting a block to L1.";
    readonly events: readonly ["rollup-published-to-l1"];
}, {
    readonly name: "l1_rollup_execution_gas";
    readonly groupBy: "block-size";
    readonly description: "Total gas used in a tx when submitting a block to L1.";
    readonly events: readonly ["rollup-published-to-l1"];
}, {
    readonly name: "l2_block_processing_time_in_ms";
    readonly groupBy: "block-size";
    readonly description: "Time for the state synchronizer to process an L2 block that was not built by its own sequencer.";
    readonly events: readonly ["l2-block-handled"];
}, {
    readonly name: "note_successful_decrypting_time_in_ms";
    readonly groupBy: "block-size";
    readonly description: "Time for the PXE to decrypt all notes in a block where they belong to a registered account.";
    readonly events: readonly ["note-processor-caught-up"];
}, {
    readonly name: "note_trial_decrypting_time_in_ms";
    readonly groupBy: "block-size";
    readonly description: "Time for the PXE to try decrypting all notes in a block where they do not belong to a registered account.";
    readonly events: readonly ["note-processor-caught-up"];
}, {
    readonly name: "l2_block_building_time_in_ms";
    readonly groupBy: "block-size";
    readonly description: "Total time for the sequencer to build an L2 block from a set of txs.";
    readonly events: readonly ["l2-block-built"];
}, {
    readonly name: "l2_block_rollup_simulation_time_in_ms";
    readonly groupBy: "block-size";
    readonly description: "Time for the sequencer to run the rollup circuit simulation when assembling a block.";
    readonly events: readonly ["l2-block-built"];
}, {
    readonly name: "l2_block_public_tx_process_time_in_ms";
    readonly groupBy: "block-size";
    readonly description: "Time for the sequencer to execute public function calls for txs in a block.";
    readonly events: readonly ["l2-block-built"];
}, {
    readonly name: "node_history_sync_time_in_ms";
    readonly groupBy: "chain-length";
    readonly description: "Time for a node without a sequencer to sync chain history";
    readonly events: readonly ["node-synced-chain-history"];
}, {
    readonly name: "note_history_successful_decrypting_time_in_ms";
    readonly groupBy: "chain-length";
    readonly description: "Time for a PXE to decrypt all notes in the chain where they belong to a registered account.";
    readonly events: readonly ["note-processor-caught-up"];
}, {
    readonly name: "note_history_trial_decrypting_time_in_ms";
    readonly groupBy: "chain-length";
    readonly description: "Time for a PXE to try decrypting all notes in the chain where they do not belong to a registered account.";
    readonly events: readonly ["note-processor-caught-up"];
}, {
    readonly name: "node_database_size_in_bytes";
    readonly groupBy: "chain-length";
    readonly description: "Size on disk of the leveldown database of a node after syncing all chain history.";
    readonly events: readonly ["node-synced-chain-history"];
}, {
    readonly name: "pxe_database_size_in_bytes";
    readonly groupBy: "chain-length";
    readonly description: "Estimated size in memory of a PXE database after syncing all notes that belong to it in the chain.";
    readonly events: readonly ["note-processor-caught-up"];
}, {
    readonly name: "circuit_simulation_time_in_ms";
    readonly groupBy: "circuit-name";
    readonly description: "Time to run a circuit simulation.";
    readonly events: readonly ["circuit-simulation"];
}, {
    readonly name: "circuit_input_size_in_bytes";
    readonly groupBy: "circuit-name";
    readonly description: "Size of the inputs to a circuit simulation.";
    readonly events: readonly ["circuit-simulation"];
}, {
    readonly name: "circuit_output_size_in_bytes";
    readonly groupBy: "circuit-name";
    readonly description: "Size of the outputs (ie public inputs) from a circuit simulation.";
    readonly events: readonly ["circuit-simulation"];
}, {
    readonly name: "tx_size_in_bytes";
    readonly groupBy: "contract-count";
    readonly description: "Size of txs received in the mempool.";
    readonly events: readonly ["tx-added-to-pool"];
}];
/** Metric definitions to track from benchmarks. */
export type Metrics = typeof Metrics;
/** Type of valid metric names. */
export type MetricName = Metrics[number]['name'];
//# sourceMappingURL=metrics.d.ts.map