import { MAX_NEW_COMMITMENTS_PER_TX, MAX_NEW_CONTRACTS_PER_TX, MAX_NEW_L2_TO_L1_MSGS_PER_TX, MAX_NEW_NULLIFIERS_PER_TX, MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_TX, Vector, } from '@aztec/circuits.js';
import { Fr } from '@aztec/foundation/fields';
import { BufferReader, numToUInt32BE } from '@aztec/foundation/serialize';
import times from 'lodash.times';
import { ContractData } from './contract_data.js';
import { PublicDataWrite } from './public_data_write.js';
import { TxHash } from './tx/tx_hash.js';
/**
 * The string encoding used for serializing L2Tx objects to strings.
 */
const STRING_ENCODING = 'hex';
/**
 * Represents an L2 transaction.
 */
export class L2Tx {
    constructor(
    /**
     * New commitments created by the transaction.
     */
    newCommitments, 
    /**
     * New nullifiers created by the transaction.
     */
    newNullifiers, 
    /**
     * New public data writes created by the transaction.
     */
    newPublicDataWrites, 
    /**
     * New L2 to L1 messages created by the transaction.
     */
    newL2ToL1Msgs, 
    /**
     * New contracts leaves created by the transaction to be inserted into the contract tree.
     */
    newContracts, 
    /**
     * New contract data created by the transaction.
     */
    newContractData, 
    /**
     * The unique identifier of the block containing the transaction.
     */
    blockHash, 
    /**
     * The block number in which the transaction was included.
     */
    blockNumber) {
        this.newCommitments = newCommitments;
        this.newNullifiers = newNullifiers;
        this.newPublicDataWrites = newPublicDataWrites;
        this.newL2ToL1Msgs = newL2ToL1Msgs;
        this.newContracts = newContracts;
        this.newContractData = newContractData;
        this.blockHash = blockHash;
        this.blockNumber = blockNumber;
        this.txHash = new TxHash(this.newNullifiers[0].toBuffer());
    }
    /**
     * Deserializes the L2Tx object from a Buffer.
     * @param buffer - Buffer or BufferReader object to deserialize.
     * @returns An instance of L2Tx.
     */
    static fromBuffer(buffer) {
        const reader = BufferReader.asReader(buffer);
        return new L2Tx(reader.readVector(Fr), reader.readVector(Fr), reader.readVector(PublicDataWrite), reader.readVector(Fr), reader.readVector(Fr), reader.readVector(ContractData), reader.readBytes(Fr.SIZE_IN_BYTES), reader.readNumber());
    }
    /**
     * Deserializes an L2Tx object from a string.
     * @param str - String to deserialize.
     * @returns An instance of L2Tx.
     */
    static fromString(str) {
        return L2Tx.fromBuffer(Buffer.from(str, STRING_ENCODING));
    }
    /**
     * Serializes the Tx object into a Buffer.
     * @returns Buffer representation of the Tx object.
     */
    toBuffer() {
        return Buffer.concat([
            new Vector(this.newCommitments).toBuffer(),
            new Vector(this.newNullifiers).toBuffer(),
            new Vector(this.newPublicDataWrites).toBuffer(),
            new Vector(this.newL2ToL1Msgs).toBuffer(),
            new Vector(this.newContracts).toBuffer(),
            new Vector(this.newContractData).toBuffer(),
            this.blockHash,
            numToUInt32BE(this.blockNumber),
        ]);
    }
    /**
     * Returns a string representation of the L2Tx object.
     */
    toString() {
        return this.toBuffer().toString(STRING_ENCODING);
    }
    static random() {
        const rand = (min, max) => Math.floor(Math.random() * max) + min;
        return new L2Tx(times(rand(0, MAX_NEW_COMMITMENTS_PER_TX), Fr.random), times(rand(1, MAX_NEW_NULLIFIERS_PER_TX), Fr.random), times(rand(0, MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_TX), PublicDataWrite.random), times(rand(0, MAX_NEW_L2_TO_L1_MSGS_PER_TX), Fr.random), times(rand(0, MAX_NEW_CONTRACTS_PER_TX), Fr.random), times(rand(0, MAX_NEW_CONTRACTS_PER_TX), ContractData.random), Fr.random().toBuffer(), 123);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibDJfdHguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvbDJfdHgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNMLDBCQUEwQixFQUMxQix3QkFBd0IsRUFDeEIsNEJBQTRCLEVBQzVCLHlCQUF5QixFQUN6QixzQ0FBc0MsRUFDdEMsTUFBTSxHQUNQLE1BQU0sb0JBQW9CLENBQUM7QUFDNUIsT0FBTyxFQUFFLEVBQUUsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQzlDLE9BQU8sRUFBRSxZQUFZLEVBQUUsYUFBYSxFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFFMUUsT0FBTyxLQUFLLE1BQU0sY0FBYyxDQUFDO0FBRWpDLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUNsRCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDekQsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBRXpDOztHQUVHO0FBQ0gsTUFBTSxlQUFlLEdBQW1CLEtBQUssQ0FBQztBQUU5Qzs7R0FFRztBQUNILE1BQU0sT0FBTyxJQUFJO0lBT2Y7SUFDRTs7T0FFRztJQUNJLGNBQW9CO0lBQzNCOztPQUVHO0lBQ0ksYUFBbUI7SUFDMUI7O09BRUc7SUFDSSxtQkFBc0M7SUFDN0M7O09BRUc7SUFDSSxhQUFtQjtJQUMxQjs7T0FFRztJQUNJLFlBQWtCO0lBQ3pCOztPQUVHO0lBQ0ksZUFBK0I7SUFDdEM7O09BRUc7SUFDSSxTQUFpQjtJQUN4Qjs7T0FFRztJQUNJLFdBQW1CO1FBNUJuQixtQkFBYyxHQUFkLGNBQWMsQ0FBTTtRQUlwQixrQkFBYSxHQUFiLGFBQWEsQ0FBTTtRQUluQix3QkFBbUIsR0FBbkIsbUJBQW1CLENBQW1CO1FBSXRDLGtCQUFhLEdBQWIsYUFBYSxDQUFNO1FBSW5CLGlCQUFZLEdBQVosWUFBWSxDQUFNO1FBSWxCLG9CQUFlLEdBQWYsZUFBZSxDQUFnQjtRQUkv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