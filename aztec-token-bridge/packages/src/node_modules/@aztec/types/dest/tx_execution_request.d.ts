/// <reference types="node" resolution-mode="require"/>
import { AztecAddress, FieldsOf, Fr, FunctionData, TxContext, TxRequest } from '@aztec/circuits.js';
import { BufferReader } from '@aztec/circuits.js/utils';
import { AuthWitness } from './auth_witness.js';
import { PackedArguments } from './packed_arguments.js';
/**
 * Request to execute a transaction. Similar to TxRequest, but has the full args.
 */
export declare class TxExecutionRequest {
    /**
     * Sender.
     */
    origin: AztecAddress;
    /**
     * Function data representing the function to call.
     * TODO(#3417): Remove this field and replace with a function selector.
     */
    functionData: FunctionData;
    /**
     * The hash of the entry point arguments.
     */
    argsHash: Fr;
    /**
     * Transaction context.
     */
    txContext: TxContext;
    /**
     * These packed arguments will be used during transaction simulation.
     * For example, a call to an account contract might contain as many packed arguments
     * as relayed function calls, and one for the entrypoint.
     */
    packedArguments: PackedArguments[];
    /**
     * Transient authorization witnesses for authorizing the execution of one or more actions during this tx.
     * These witnesses are not expected to be stored in the local witnesses database of the PXE.
     */
    authWitnesses: AuthWitness[];
    constructor(
    /**
     * Sender.
     */
    origin: AztecAddress, 
    /**
     * Function data representing the function to call.
     * TODO(#3417): Remove this field and replace with a function selector.
     */
    functionData: FunctionData, 
    /**
     * The hash of the entry point arguments.
     */
    argsHash: Fr, 
    /**
     * Transaction context.
     */
    txContext: TxContext, 
    /**
     * These packed arguments will be used during transaction simulation.
     * For example, a call to an account contract might contain as many packed arguments
     * as relayed function calls, and one for the entrypoint.
     */
    packedArguments: PackedArguments[], 
    /**
     * Transient authorization witnesses for authorizing the execution of one or more actions during this tx.
     * These witnesses are not expected to be stored in the local witnesses database of the PXE.
     */
    authWitnesses: AuthWitness[]);
    toTxRequest(): TxRequest;
    static getFields(fields: FieldsOf<TxExecutionRequest>): readonly [AztecAddress, FunctionData, Fr, TxContext, PackedArguments[], AuthWitness[]];
    static from(fields: FieldsOf<TxExecutionRequest>): TxExecutionRequest;
    /**
     * Serialize as a buffer.
     * @returns The buffer.
     */
    toBuffer(): Buffer;
    /**
     * Serialize as a string.
     * @returns The string.
     */
    toString(): string;
    /**
     * Deserializes from a buffer or reader, corresponding to a write in cpp.
     * @param buffer - Buffer to read from.
     * @returns The deserialized TxRequest object.
     */
    static fromBuffer(buffer: Buffer | BufferReader): TxExecutionRequest;
    /**
     * Deserializes from a string, corresponding to a write in cpp.
     * @param str - String to read from.
     * @returns The deserialized TxRequest object.
     */
    static fromString(str: string): TxExecutionRequest;
}
//# sourceMappingURL=tx_execution_request.d.ts.map