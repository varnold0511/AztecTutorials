import { AztecAddress, CompleteAddress, EthAddress, Fr, MAX_NEW_CONTRACTS_PER_TX, MAX_PUBLIC_CALL_STACK_LENGTH_PER_TX, Proof, } from '@aztec/circuits.js';
import { makePrivateKernelPublicInputsFinal, makePublicCallRequest } from '@aztec/circuits.js/factories';
import { randomBytes } from '@aztec/foundation/crypto';
import times from 'lodash.times';
import { ExtendedContractData, ExtendedNote, FunctionL2Logs, Note, TxL2Logs } from './index.js';
import { Tx, TxHash } from './tx/index.js';
/**
 * Testing utility to create empty logs composed from a single empty log.
 */
export function makeEmptyLogs() {
    const functionLogs = [new FunctionL2Logs([Buffer.alloc(0)])];
    return new TxL2Logs(functionLogs);
}
export const randomTxHash = () => new TxHash(randomBytes(32));
export const mockTx = (seed = 1) => {
    return new Tx(makePrivateKernelPublicInputsFinal(seed), new Proof(Buffer.alloc(0)), TxL2Logs.random(8, 3), // 8 priv function invocations creating 3 encrypted logs each
    TxL2Logs.random(11, 2), // 8 priv + 3 pub function invocations creating 2 unencrypted logs each
    times(MAX_PUBLIC_CALL_STACK_LENGTH_PER_TX, makePublicCallRequest), times(MAX_NEW_CONTRACTS_PER_TX, () => ExtendedContractData.random()));
};
export const randomContractArtifact = () => ({
    name: randomBytes(4).toString('hex'),
    functions: [],
    events: [],
});
export const randomDeployedContract = () => ({
    artifact: randomContractArtifact(),
    completeAddress: CompleteAddress.random(),
    portalContract: EthAddress.random(),
});
export const randomExtendedNote = ({ note = Note.random(), owner = AztecAddress.random(), contractAddress = AztecAddress.random(), txHash = randomTxHash(), storageSlot = Fr.random(), } = {}) => {
    return new ExtendedNote(note, owner, contractAddress, storageSlot, txHash);
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9ja3MuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvbW9ja3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNMLFlBQVksRUFDWixlQUFlLEVBQ2YsVUFBVSxFQUNWLEVBQUUsRUFDRix3QkFBd0IsRUFDeEIsbUNBQW1DLEVBQ25DLEtBQUssR0FDTixNQUFNLG9CQUFvQixDQUFDO0FBQzVCLE9BQU8sRUFBRSxrQ0FBa0MsRUFBRSxxQkFBcUIsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBRXpHLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUd2RCxPQUFPLEtBQUssTUFBTSxjQUFjLENBQUM7QUFFakMsT0FBTyxFQUFvQixvQkFBb0IsRUFBRSxZQUFZLEVBQUUsY0FBYyxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFDbEgsT0FBTyxFQUFFLEVBQUUsRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFM0M7O0dBRUc7QUFDSCxNQUFNLFVBQVUsYUFBYTtJQUMzQixNQUFNLFlBQVksR0FBRyxDQUFDLElBQUksY0FBYyxDQUFDLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUM3RCxPQUFPLElBQUksUUFBUSxDQUFDLFlBQVksQ0FBQyxDQUFDO0FBQ3BDLENBQUM7QUFFRCxNQUFNLENBQUMsTUFBTSxZQUFZLEdBQUcsR0FBVyxFQUFFLENBQUMsSUFBSSxNQUFNLENBQUMsV0FBVyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFFdEUsTUFBTSxDQUFDLE1BQU0sTUFBTSxHQUFHLENBQUMsSUFBSSxHQUFHLENBQUMsRUFBRSxFQUFFO0lBQ2pDLE9BQU8sSUFBSSxFQUFFLENBQ1gsa0NBQWtDLENBQUMsSUFBSSxDQUFDLEVBQ3hDLElBQUksS0FBSyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDMUIsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsNkRBQTZEO0lBQ3BGLFFBQVEsQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxFQUFFLHVFQUF1RTtJQUMvRixLQUFLLENBQUMsbUNBQW1DLEVBQUUscUJBQXFCLENBQUMsRUFDakUsS0FBSyxDQUFDLHdCQUF3QixFQUFFLEdBQUcsRUFBRSxDQUFDLG9CQUFvQixDQUFDLE1BQU0sRUFBRSxDQUdsRSxDQUNGLENBQUM7QUFDSixDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxzQkFBc0IsR0FBRyxHQUFxQixFQUFFLENBQUMsQ0FBQztJQUM3RCxJQUFJLEVBQUUsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUM7SUFDcEMsU0FBUyxFQUFFLEVBQUU7SUFDYixNQUFNLEVBQUUsRUFBRTtDQUNYLENBQUMsQ0FBQztBQUVILE1BQU0sQ0FBQyxNQUFNLHNCQUFzQixHQUFHLEdBQXFCLEVBQUUsQ0FBQyxDQUFDO0lBQzdELFFBQVEsRUFBRSxzQkFBc0IsRUFBRTtJQUNsQyxlQUFlLEVBQUUsZUFBZSxDQUFDLE1BQU0sRUFBRTtJQUN6QyxjQUFjLEVBQUUsVUFBVSxDQUFDLE1BQU0sRUFBRTtDQUNwQyxDQUFDLENBQUM7QUFFSCxNQUFNLENBQUMsTUFBTSxrQkFBa0IsR0FBRyxDQUFDLEVBQ2pDLElBQUksR0FBRyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQ3BCLEtBQUssR0FBRyxZQUFZLENBQUMsTUFBTSxFQUFFLEVBQzdCLGVBQWUsR0FBRyxZQUFZLENBQUMsTUFBTSxFQUFFLEVBQ3ZDLE1BQU0sR0FBRyxZQUFZLEVBQUUsRUFDdkIsV0FBVyxHQUFHLEVBQUUsQ0FBQyxNQUFNLEVBQUUsTUFDQSxFQUFFLEVBQUUsRUFBRTtJQUMvQixPQUFPLElBQUksWUFBWSxDQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsZUFBZSxFQUFFLFdBQVcsRUFBRSxNQUFNLENBQUMsQ0FBQztBQUM3RSxDQUFDLENBQUMifQ==