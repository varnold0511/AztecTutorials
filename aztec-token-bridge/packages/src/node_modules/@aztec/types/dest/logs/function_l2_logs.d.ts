/// <reference types="node" resolution-mode="require"/>
import { LogType } from './log_type.js';
/**
 * Data container of logs emitted in 1 function invocation (corresponds to 1 kernel iteration).
 */
export declare class FunctionL2Logs {
    /**
     * An array of logs.
     */
    readonly logs: Buffer[];
    constructor(
    /**
     * An array of logs.
     */
    logs: Buffer[]);
    /**
     * Serializes all function logs into a buffer.
     * @returns A buffer containing the serialized logs.
     * @remarks Each log is prefixed with 4 bytes for its length, then all the serialized logs are concatenated and
     *          the resulting buffer is prefixed with 4 bytes for its total length.
     */
    toBuffer(): Buffer;
    /**
     * Get the total length of all serialized data
     * @returns Total length of serialized data.
     */
    getSerializedLength(): number;
    /**
     * Calculates hash of serialized logs.
     * @returns 2 fields containing all 256 bits of information of sha256 hash.
     */
    hash(): Buffer;
    /**
     * Deserializes logs from a buffer.
     * @param buf - The buffer containing the serialized logs.
     * @param isLengthPrefixed - Whether the buffer is prefixed with 4 bytes for its total length.
     * @returns Deserialized instance of `FunctionL2Logs`.
     */
    static fromBuffer(buf: Buffer, isLengthPrefixed?: boolean): FunctionL2Logs;
    /**
     * Creates a new L2Logs object with `numLogs` logs.
     * @param numLogs - The number of logs to create.
     * @param logType - The type of logs to generate.
     * @returns A new FunctionL2Logs object.
     */
    static random(numLogs: number, logType?: LogType): FunctionL2Logs;
    /**
     * Creates an empty L2Logs object with no logs.
     * @returns A new FunctionL2Logs object with no logs.
     */
    static empty(): FunctionL2Logs;
    /**
     * Convert a FunctionL2Logs class object to a plain JSON object.
     * @returns A plain object with FunctionL2Logs properties.
     */
    toJSON(): {
        logs: string[];
    };
    /**
     * Convert a plain JSON object to a FunctionL2Logs class object.
     * @param obj - A plain FunctionL2Logs JSON object.
     * @returns A FunctionL2Logs class object.
     */
    static fromJSON(obj: any): FunctionL2Logs;
}
//# sourceMappingURL=function_l2_logs.d.ts.map