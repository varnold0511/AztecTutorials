/// <reference types="node" resolution-mode="require"/>
import { AztecAddress, GrumpkinPrivateKey, PublicKey } from '@aztec/circuits.js';
import { Grumpkin } from '@aztec/circuits.js/barretenberg';
import { Fr } from '@aztec/foundation/fields';
import { BufferReader } from '@aztec/foundation/serialize';
import { Note } from './note.js';
/**
 * A class which wraps note data which is pushed on L1.
 * @remarks This data is required to compute a nullifier/to spend a note. Along with that this class contains
 * the necessary functionality to encrypt and decrypt the data.
 */
export declare class L1NotePayload {
    /**
     * A note as emitted from Noir contract. Can be used along with private key to compute nullifier.
     */
    note: Note;
    /**
     * Address of the contract this tx is interacting with.
     */
    contractAddress: AztecAddress;
    /**
     * Storage slot of the contract this tx is interacting with.
     */
    storageSlot: Fr;
    constructor(
    /**
     * A note as emitted from Noir contract. Can be used along with private key to compute nullifier.
     */
    note: Note, 
    /**
     * Address of the contract this tx is interacting with.
     */
    contractAddress: AztecAddress, 
    /**
     * Storage slot of the contract this tx is interacting with.
     */
    storageSlot: Fr);
    /**
     * Deserializes the L1NotePayload object from a Buffer.
     * @param buffer - Buffer or BufferReader object to deserialize.
     * @returns An instance of L1NotePayload.
     */
    static fromBuffer(buffer: Buffer | BufferReader): L1NotePayload;
    /**
     * Serializes the L1NotePayload object into a Buffer.
     * @returns Buffer representation of the L1NotePayload object.
     */
    toBuffer(): Buffer;
    /**
     * Encrypt the L1NotePayload object using the owner's public key and the ephemeral private key.
     * @param ownerPubKey - Public key of the owner of the L1NotePayload object.
     * @param curve - The curve instance to use.
     * @returns The encrypted L1NotePayload object.
     */
    toEncryptedBuffer(ownerPubKey: PublicKey, curve: Grumpkin): Buffer;
    /**
     * Decrypts the L1NotePayload object using the owner's private key.
     * @param data - Encrypted L1NotePayload object.
     * @param ownerPrivKey - Private key of the owner of the L1NotePayload object.
     * @param curve - The curve instance to use.
     * @returns Instance of L1NotePayload if the decryption was successful, undefined otherwise.
     */
    static fromEncryptedBuffer(data: Buffer, ownerPrivKey: GrumpkinPrivateKey, curve: Grumpkin): L1NotePayload | undefined;
    /**
     * Create a random L1NotePayload object (useful for testing purposes).
     * @returns A random L1NotePayload object.
     */
    static random(): L1NotePayload;
}
//# sourceMappingURL=l1_note_payload.d.ts.map