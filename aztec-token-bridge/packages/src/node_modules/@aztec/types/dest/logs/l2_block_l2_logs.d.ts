/// <reference types="node" resolution-mode="require"/>
import { BufferReader } from '@aztec/foundation/serialize';
import { LogType } from './log_type.js';
import { TxL2Logs } from './tx_l2_logs.js';
/**
 * Data container of logs emitted in all txs in a given L2 block.
 */
export declare class L2BlockL2Logs {
    /**
     * An array containing logs emitted in individual function invocations in this tx.
     */
    readonly txLogs: TxL2Logs[];
    constructor(
    /**
     * An array containing logs emitted in individual function invocations in this tx.
     */
    txLogs: TxL2Logs[]);
    /**
     * Serializes logs into a buffer.
     * @returns A buffer containing the serialized logs.
     */
    toBuffer(): Buffer;
    /**
     * Get the total length of serialized data.
     * @returns Total length of serialized data.
     */
    getSerializedLength(): number;
    /**
     * Gets the total number of logs emitted from all the TxL2Logs.
     */
    getTotalLogCount(): number;
    /**
     * Deserializes logs from a buffer.
     * @param buffer - The buffer containing the serialized logs.
     * @returns A new `L2BlockL2Logs` object.
     */
    static fromBuffer(buffer: Buffer | BufferReader): L2BlockL2Logs;
    /**
     * Creates a new `L2BlockL2Logs` object with `numCalls` function logs and `numLogsPerCall` logs in each function
     * call.
     * @param numTxs - The number of txs in the block.
     * @param numCalls - The number of function calls in the tx.
     * @param numLogsPerCall - The number of logs emitted in each function call.
     * @param logType - The type of logs to generate.
     * @returns A new `L2BlockL2Logs` object.
     */
    static random(numTxs: number, numCalls: number, numLogsPerCall: number, logType?: LogType): L2BlockL2Logs;
    /**
     * Unrolls logs from a set of blocks.
     * @param blockLogs - Input logs from a set of blocks.
     * @returns Unrolled logs.
     */
    static unrollLogs(blockLogs: L2BlockL2Logs[]): Buffer[];
    /**
     * Convert a L2BlockL2Logs class object to a plain JSON object.
     * @returns A plain object with L2BlockL2Logs properties.
     */
    toJSON(): {
        txLogs: {
            functionLogs: {
                logs: string[];
            }[];
        }[];
    };
    /**
     * Checks if two L2BlockL2Logs objects are equal.
     * @param other - Another L2BlockL2Logs object to compare with.
     * @returns True if the two objects are equal, false otherwise.
     */
    equals(other: L2BlockL2Logs): boolean;
    /**
     * Convert a plain JSON object to a L2BlockL2Logs class object.
     * @param obj - A plain L2BlockL2Logs JSON object.
     * @returns A L2BlockL2Logs class object.
     */
    static fromJSON(obj: any): L2BlockL2Logs;
    /**
     * Returns the total number of log entries across an array of L2BlockL2Logs.
     * @param l2BlockL2logs - L2BlockL2Logs to sum over.
     * @returns Total sum of log entries.
     */
    static getTotalLogCount(l2BlockL2logs: L2BlockL2Logs[]): number;
}
//# sourceMappingURL=l2_block_l2_logs.d.ts.map