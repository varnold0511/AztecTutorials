/// <reference types="node" resolution-mode="require"/>
import { CompleteAddress, ContractFunctionDao } from '@aztec/circuits.js';
import { ContractArtifact, DebugMetadata, EventAbi } from '@aztec/foundation/abi';
import { EthAddress } from '@aztec/foundation/eth-address';
import { BufferReader, EncodedContractFunction } from './contract_data.js';
/**
 * A contract Data Access Object (DAO).
 * Contains the contract's address, portal contract address, and an array of ContractFunctionDao objects.
 * Each ContractFunctionDao object includes FunctionAbi data and the function selector buffer.
 */
export declare class ContractDao implements ContractArtifact {
    private contractArtifact;
    /** The complete address representing the contract on L2.  */
    readonly completeAddress: CompleteAddress;
    /** The Ethereum address of the L1 contract serving as a bridge for cross-layer interactions.  */
    readonly portalContract: EthAddress;
    /** An array of contract functions with additional selector property.  */
    readonly functions: ContractFunctionDao[];
    constructor(contractArtifact: ContractArtifact, 
    /** The complete address representing the contract on L2.  */
    completeAddress: CompleteAddress, 
    /** The Ethereum address of the L1 contract serving as a bridge for cross-layer interactions.  */
    portalContract: EthAddress);
    get aztecNrVersion(): string | undefined;
    get name(): string;
    get events(): EventAbi[];
    get debug(): DebugMetadata | undefined;
    toBuffer(): Buffer;
    static fromBuffer(buf: Uint8Array | BufferReader): ContractDao;
}
/**
 * Return public functions from the newly deployed contract to be injected into the tx object.
 * @param newContract - The new contract
 * @returns List of EncodedContractFunction.
 */
export declare function getNewContractPublicFunctions(newContract: ContractDao): EncodedContractFunction[];
//# sourceMappingURL=contract_dao.d.ts.map