import { CompleteAddress } from '@aztec/circuits.js';
import { FunctionSelector, FunctionType } from '@aztec/foundation/abi';
import { EthAddress } from '@aztec/foundation/eth-address';
import { prefixBufferWithLength } from '@aztec/foundation/serialize';
import { BufferReader, EncodedContractFunction } from './contract_data.js';
/**
 * A contract Data Access Object (DAO).
 * Contains the contract's address, portal contract address, and an array of ContractFunctionDao objects.
 * Each ContractFunctionDao object includes FunctionAbi data and the function selector buffer.
 */
export class ContractDao {
    constructor(contractArtifact, 
    /** The complete address representing the contract on L2.  */
    completeAddress, 
    /** The Ethereum address of the L1 contract serving as a bridge for cross-layer interactions.  */
    portalContract) {
        this.contractArtifact = contractArtifact;
        this.completeAddress = completeAddress;
        this.portalContract = portalContract;
        this.functions = contractArtifact.functions.map(f => ({
            ...f,
            selector: FunctionSelector.fromNameAndParameters(f.name, f.parameters),
        }));
    }
    get aztecNrVersion() {
        return this.contractArtifact.aztecNrVersion;
    }
    get name() {
        return this.contractArtifact.name;
    }
    get events() {
        return this.contractArtifact.events;
    }
    get debug() {
        return this.contractArtifact.debug;
    }
    toBuffer() {
        // the contract artifact was originally emitted to a JSON file by Noir
        // should be safe to JSON.stringify it (i.e. it doesn't contain BigInts)
        const contractArtifactJson = JSON.stringify(this.contractArtifact);
        const buf = Buffer.concat([
            this.completeAddress.toBuffer(),
            this.portalContract.toBuffer20(),
            prefixBufferWithLength(Buffer.from(contractArtifactJson, 'utf-8')),
        ]);
        return buf;
    }
    static fromBuffer(buf) {
        const reader = BufferReader.asReader(buf);
        const completeAddress = CompleteAddress.fromBuffer(reader);
        const portalContract = new EthAddress(reader.readBytes(EthAddress.SIZE_IN_BYTES));
        const contractArtifact = JSON.parse(reader.readString());
        return new ContractDao(contractArtifact, completeAddress, portalContract);
    }
}
/**
 * Return public functions from the newly deployed contract to be injected into the tx object.
 * @param newContract - The new contract
 * @returns List of EncodedContractFunction.
 */
export function getNewContractPublicFunctions(newContract) {
    return newContract.functions
        .filter(c => c.functionType === FunctionType.OPEN)
        .map(fn => new EncodedContractFunction(FunctionSelector.fromNameAndParameters(fn.name, fn.parameters), fn.isInternal ?? false, Buffer.from(fn.bytecode, 'base64')));
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udHJhY3RfZGFvLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2NvbnRyYWN0X2Rhby50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsZUFBZSxFQUF1QixNQUFNLG9CQUFvQixDQUFDO0FBQzFFLE9BQU8sRUFBNkMsZ0JBQWdCLEVBQUUsWUFBWSxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDbEgsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBQzNELE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBRXJFLE9BQU8sRUFBRSxZQUFZLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUUzRTs7OztHQUlHO0FBQ0gsTUFBTSxPQUFPLFdBQVc7SUFHdEIsWUFDVSxnQkFBa0M7SUFDMUMsNkRBQTZEO0lBQzdDLGVBQWdDO0lBQ2hELGlHQUFpRztJQUNqRixjQUEwQjtRQUpsQyxxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQWtCO1FBRTFCLG9CQUFlLEdBQWYsZUFBZSxDQUFpQjtRQUVoQyxtQkFBYyxHQUFkLGNBQWMsQ0FBWTtRQUUxQyxJQUFJLENBQUMsU0FBUyxHQUFHLGdCQUFnQixDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQ3BELEdBQUcsQ0FBQztZQUNKLFFBQVEsRUFBRSxnQkFBZ0IsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxVQUFVLENBQUM7U0FDdkUsQ0FBQyxDQUFDLENBQUM7SUFDTixDQUFDO0lBRUQsSUFBSSxjQUFjO1FBQ2hCLE9BQU8sSUFBSSxDQUFDLGdCQUFnQixDQUFDLGNBQWMsQ0FBQztJQUM5QyxDQUFDO0lBRUQsSUFBSSxJQUFJO1FBQ04sT0FBTyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDO0lBQ3BDLENBQUM7SUFFRCxJQUFJLE1BQU07UUFDUixPQUFPLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNLENBQUM7SUFDdEMsQ0FBQztJQUVELElBQUksS0FBSztRQUNQLE9BQU8sSUFBSSxDQUFDLGdCQUFnQixDQUFDLEtBQUssQ0FBQztJQUNyQyxDQUFDO0lBRUQsUUFBUTtRQUNOLHNFQUFzRTtRQUN0RSx3RUFBd0U7UUFDeEUsTUFBTSxvQkFBb0IsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1FBQ25FLE1BQU0sR0FBRyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUM7WUFDeEIsSUFBSSxDQUFDLGVBQWUsQ0FBQyxRQUFRLEVBQUU7WUFDL0IsSUFBSSxDQUFDLGNBQWMsQ0FBQyxVQUFVLEVBQUU7WUFDaEMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxvQkFBb0IsRUFBRSxPQUFPLENBQUMsQ0FBQztTQUNuRSxDQUFDLENBQUM7UUFFSCxPQUFPLEdBQUcsQ0FBQztJQUNiLENBQUM7SUFFRCxNQUFNLENBQUMsVUFBVSxDQUFDLEdBQThCO1FBQzlDLE1BQU0sTUFBTSxHQUFHLFlBQVksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDMUMsTUFBTSxlQUFlLEdBQUcsZUFBZSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUMzRCxNQUFNLGNBQWMsR0FBRyxJQUFJLFVBQVUsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDO1FBQ2xGLE1BQU0sZ0JBQWdCLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsVUFBVSxFQUFFLENBQUMsQ0FBQztRQUN6RCxPQUFPLElBQUksV0FBVyxDQUFDLGdCQUFnQixFQUFFLGVBQWUsRUFBRSxjQUFjLENBQUMsQ0FBQztJQUM1RSxDQUFDO0NBQ0Y7QUFFRDs7OztHQUlHO0FBQ0gsTUFBTSxVQUFVLDZCQUE2QixDQUFDLFdBQXdCO0lBQ3BFLE9BQU8sV0FBVyxDQUFDLFNBQVM7U0FDekIsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLFlBQVksS0FBSyxZQUFZLENBQUMsSUFBSSxDQUFDO1NBQ2pELEdBQUcsQ0FDRixFQUFFLENBQUMsRUFBRSxDQUNILElBQUksdUJBQXVCLENBQ3pCLGdCQUFnQixDQUFDLHFCQUFxQixDQUFDLEVBQUUsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLFVBQVUsQ0FBQyxFQUM5RCxFQUFFLENBQUMsVUFBVSxJQUFJLEtBQUssRUFDdEIsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLFFBQVEsQ0FBQyxDQUNuQyxDQUNKLENBQUM7QUFDTixDQUFDIn0=