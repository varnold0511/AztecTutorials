import { computeCompleteAddress, computeFunctionTreeRoot, computeVarArgsHash, hashConstructor, } from '@aztec/circuits.js/abis';
import { FunctionSelector, encodeArguments } from '@aztec/foundation/abi';
import { Fr, FunctionData } from '../index.js';
import { generateFunctionLeaves, hashVKStr, isConstructor } from './contract_tree/contract_tree.js';
/**
 * Generates the deployment info for a contract
 * @param artifact - The account contract build artifact.
 * @param args - The args to the account contract constructor
 * @param contractAddressSalt - The salt to be used in the contract address derivation
 * @param publicKey - The account public key
 * @returns - The contract deployment info
 */
export function getContractDeploymentInfo(artifact, args, contractAddressSalt, publicKey) {
    const constructorArtifact = artifact.functions.find(isConstructor);
    if (!constructorArtifact) {
        throw new Error('Cannot find constructor in the artifact.');
    }
    if (!constructorArtifact.verificationKey) {
        throw new Error('Missing verification key for the constructor.');
    }
    const vkHash = hashVKStr(constructorArtifact.verificationKey);
    const constructorVkHash = Fr.fromBuffer(vkHash);
    const functions = artifact.functions.map(f => ({
        ...f,
        selector: FunctionSelector.fromNameAndParameters(f.name, f.parameters),
    }));
    const leaves = generateFunctionLeaves(functions);
    const functionTreeRoot = computeFunctionTreeRoot(leaves);
    const functionData = FunctionData.fromAbi(constructorArtifact);
    const flatArgs = encodeArguments(constructorArtifact, args);
    const argsHash = computeVarArgsHash(flatArgs);
    const constructorHash = hashConstructor(functionData, argsHash, constructorVkHash.toBuffer());
    const completeAddress = computeCompleteAddress(publicKey, contractAddressSalt, functionTreeRoot, constructorHash);
    return {
        completeAddress,
        constructorHash: constructorVkHash,
        functionTreeRoot,
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udHJhY3RfZGVwbG95bWVudF9pbmZvLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2NvbnRyYWN0L2NvbnRyYWN0X2RlcGxveW1lbnRfaW5mby50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0wsc0JBQXNCLEVBQ3RCLHVCQUF1QixFQUN2QixrQkFBa0IsRUFDbEIsZUFBZSxHQUNoQixNQUFNLHlCQUF5QixDQUFDO0FBQ2pDLE9BQU8sRUFBb0IsZ0JBQWdCLEVBQUUsZUFBZSxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFFNUYsT0FBTyxFQUFrQixFQUFFLEVBQUUsWUFBWSxFQUFhLE1BQU0sYUFBYSxDQUFDO0FBQzFFLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxTQUFTLEVBQUUsYUFBYSxFQUFFLE1BQU0sa0NBQWtDLENBQUM7QUFFcEc7Ozs7Ozs7R0FPRztBQUNILE1BQU0sVUFBVSx5QkFBeUIsQ0FDdkMsUUFBMEIsRUFDMUIsSUFBVyxFQUNYLG1CQUF1QixFQUN2QixTQUFvQjtJQUVwQixNQUFNLG1CQUFtQixHQUFHLFFBQVEsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO0lBQ25FLElBQUksQ0FBQyxtQkFBbUIsRUFBRTtRQUN4QixNQUFNLElBQUksS0FBSyxDQUFDLDBDQUEwQyxDQUFDLENBQUM7S0FDN0Q7SUFDRCxJQUFJLENBQUMsbUJBQW1CLENBQUMsZUFBZSxFQUFFO1FBQ3hDLE1BQU0sSUFBSSxLQUFLLENBQUMsK0NBQStDLENBQUMsQ0FBQztLQUNsRTtJQUVELE1BQU0sTUFBTSxHQUFHLFNBQVMsQ0FBQyxtQkFBbUIsQ0FBQyxlQUFlLENBQUMsQ0FBQztJQUM5RCxNQUFNLGlCQUFpQixHQUFHLEVBQUUsQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDaEQsTUFBTSxTQUFTLEdBQUcsUUFBUSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQzdDLEdBQUcsQ0FBQztRQUNKLFFBQVEsRUFBRSxnQkFBZ0IsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxVQUFVLENBQUM7S0FDdkUsQ0FBQyxDQUFDLENBQUM7SUFDSixNQUFNLE1BQU0sR0FBRyxzQkFBc0IsQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUNqRCxNQUFNLGdCQUFnQixHQUFHLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3pELE1BQU0sWUFBWSxHQUFHLFlBQVksQ0FBQyxPQUFPLENBQUMsbUJBQW1CLENBQUMsQ0FBQztJQUMvRCxNQUFNLFFBQVEsR0FBRyxlQUFlLENBQUMsbUJBQW1CLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDNUQsTUFBTSxRQUFRLEdBQUcsa0JBQWtCLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDOUMsTUFBTSxlQUFlLEdBQUcsZUFBZSxDQUFDLFlBQVksRUFBRSxRQUFRLEVBQUUsaUJBQWlCLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztJQUU5RixNQUFNLGVBQWUsR0FBRyxzQkFBc0IsQ0FBQyxTQUFTLEVBQUUsbUJBQW1CLEVBQUUsZ0JBQWdCLEVBQUUsZUFBZSxDQUFDLENBQUM7SUFFbEgsT0FBTztRQUNMLGVBQWU7UUFDZixlQUFlLEVBQUUsaUJBQWlCO1FBQ2xDLGdCQUFnQjtLQUNqQixDQUFDO0FBQ0osQ0FBQyJ9