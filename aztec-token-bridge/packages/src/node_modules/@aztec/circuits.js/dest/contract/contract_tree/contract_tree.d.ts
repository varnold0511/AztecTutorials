/// <reference types="node" resolution-mode="require"/>
import { ContractFunctionDao, Fr, FunctionData } from '@aztec/circuits.js';
import { FunctionType } from '@aztec/foundation/abi';
/**
 * Computes the hash of a hex-encoded string representation of a verification key (vk).
 * The input 'vk' should be a hexadecimal string, and the resulting hash is computed using 'hashVK' function.
 * Returns a Promise that resolves to a Buffer containing the hash of the verification key.
 *
 * @param vk - The hex-encoded string representing the verification key.
 * @returns A Promise resolving to a Buffer containing the hash of the verification key.
 */
export declare function hashVKStr(vk: string): Buffer;
/**
 * Determine if the given function is a constructor.
 * This utility function checks if the 'name' property of the input object is "constructor".
 * Returns true if the function is a constructor, false otherwise.
 *
 * @param Object - An object containing a 'name' property.
 * @returns Boolean indicating if the function is a constructor.
 */
export declare function isConstructor({ name, }: {
    /**
     * Function name identifier.
     */
    name: string;
}): boolean;
/**
 * @param Object - An object containing function name and type.
 * @returns Boolean indicating if the function is constrained and therefore in the function tree.
 */
export declare function isConstrained({ name, functionType, }: {
    /**
     * The name of the contract function.
     */
    name: string;
    /**
     * The type of a contract function determining its constraints.
     */
    functionType: FunctionType;
}): boolean;
/**
 * Generate function leaves for the constrained functions in a contract.
 * Only computes leaves for functions that are either secret or open and not constructors.
 * Each function leaf is computed from its selector, privacy flag, hashed verification key, and hashed bytecode.
 *
 * @param functions - Array of ContractFunctionDao objects representing the functions in a contract.
 * @returns An array of Fr instances representing the generated function leaves.
 */
export declare function generateFunctionLeaves(functions: ContractFunctionDao[]): Fr[];
/**
 * Represents the constructor data for a new contract.
 * Contains the function data and verification key hash required for contract creation.
 */
export interface NewContractConstructor {
    /**
     * Stores essential information about a contract function.
     */
    functionData: FunctionData;
    /**
     * The hashed verification key of a function.
     */
    vkHash: Buffer;
}
//# sourceMappingURL=contract_tree.d.ts.map