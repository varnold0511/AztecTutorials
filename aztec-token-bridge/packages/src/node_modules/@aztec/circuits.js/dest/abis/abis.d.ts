/// <reference types="node" resolution-mode="require"/>
import { AztecAddress } from '@aztec/foundation/aztec-address';
import { Fr } from '@aztec/foundation/fields';
import { Buffer } from 'buffer';
import { CompleteAddress, FunctionData, FunctionLeafPreimage, GlobalVariables, NewContractData, PrivateCallStackItem, PublicCallStackItem, TxRequest } from '../structs/index.js';
import { PublicKey } from '../types/index.js';
/**
 * Computes a hash of a transaction request.
 * @param txRequest - The transaction request.
 * @returns The hash of the transaction request.
 */
export declare function hashTxRequest(txRequest: TxRequest): Buffer;
/**
 * Computes a function selector from a given function signature.
 * @param funcSig - The function signature.
 * @returns The function selector.
 */
export declare function computeFunctionSelector(funcSig: string): Buffer;
/**
 * Computes a hash of a given verification key.
 * @param vkBuf - The verification key.
 * @returns The hash of the verification key.
 */
export declare function hashVK(vkBuf: Buffer): Buffer;
/**
 * Computes a function leaf from a given preimage.
 * @param fnLeaf - The function leaf preimage.
 * @returns The function leaf.
 */
export declare function computeFunctionLeaf(fnLeaf: FunctionLeafPreimage): Fr;
/**
 * Computes a function tree from function leaves.
 * @param fnLeaves - The function leaves to be included in the contract function tree.
 * @returns All nodes of the tree.
 */
export declare function computeFunctionTree(fnLeaves: Fr[]): Fr[];
/**
 * Computes a function tree root from function leaves.
 * @param fnLeaves - The function leaves to be included in the contract function tree.
 * @returns The function tree root.
 */
export declare function computeFunctionTreeRoot(fnLeaves: Fr[]): Fr;
/**
 * Computes a constructor hash.
 * @param functionData - Constructor's function data.
 * @param argsHash - Constructor's arguments hashed.
 * @param constructorVKHash - Hash of the constructor's verification key.
 * @returns The constructor hash.
 */
export declare function hashConstructor(functionData: FunctionData, argsHash: Fr, constructorVKHash: Buffer): Fr;
/**
 * Computes a complete address.
 * @param deployerPubKey - The pubkey of the contract deployer.
 * @param contractAddrSalt - The salt used as one of the inputs of the contract address computation.
 * @param fnTreeRoot - The function tree root of the contract being deployed.
 * @param constructorHash - The hash of the constructor.
 * @returns The complete address.
 */
export declare function computeCompleteAddress(deployerPubKey: PublicKey, contractAddrSalt: Fr, fnTreeRoot: Fr, constructorHash: Fr): CompleteAddress;
/**
 * Computes a contract address from its partial address and the pubkey.
 * @param partial - The salt used as one of the inputs of the contract address computation.
 * @param fnTreeRoot - The function tree root of the contract being deployed.
 * @param constructorHash - The hash of the constructor.
 * @returns The partially constructed contract address.
 */
export declare function computeContractAddressFromPartial(pubKey: PublicKey, partialAddress: Fr): AztecAddress;
/**
 * Computes a commitment nonce, which will be used to create a unique commitment.
 * @param nullifierZero - The first nullifier in the tx.
 * @param commitmentIndex - The index of the commitment.
 * @returns A commitment nonce.
 */
export declare function computeCommitmentNonce(nullifierZero: Fr, commitmentIndex: number): Fr;
/**
 * Computes a siloed commitment, given the contract address and the commitment itself.
 * A siloed commitment effectively namespaces a commitment to a specific contract.
 * @param contract - The contract address
 * @param innerCommitment - The commitment to silo.
 * @returns A siloed commitment.
 */
export declare function siloCommitment(contract: AztecAddress, innerCommitment: Fr): Fr;
/**
 * Computes a unique commitment. It includes a nonce which contains data that guarantees the commitment will be unique.
 * @param nonce - The contract address.
 * @param siloedCommitment - An siloed commitment.
 * @returns A unique commitment.
 */
export declare function computeUniqueCommitment(nonce: Fr, siloedCommitment: Fr): Fr;
/**
 * Computes a siloed nullifier, given the contract address and the inner nullifier.
 * A siloed nullifier effectively namespaces a nullifier to a specific contract.
 * @param contract - The contract address.
 * @param innerNullifier - The nullifier to silo.
 * @returns A siloed nullifier.
 */
export declare function siloNullifier(contract: AztecAddress, innerNullifier: Fr): Fr;
/**
 * Computes the block hash given the blocks globals and roots.
 * @param globals - The global variables to put into the block hash.
 * @param noteHashTree - The root of the note hash tree.
 * @param nullifierTreeRoot - The root of the nullifier tree.
 * @param contractTreeRoot - The root of the contract tree.
 * @param l1ToL2DataTreeRoot - The root of the l1 to l2 data tree.
 * @param publicDataTreeRoot - The root of the public data tree.
 * @returns The block hash.
 */
export declare function computeBlockHashWithGlobals(globals: GlobalVariables, noteHashTreeRoot: Fr, nullifierTreeRoot: Fr, contractTreeRoot: Fr, l1ToL2DataTreeRoot: Fr, publicDataTreeRoot: Fr): Fr;
/**
 * Computes the block hash given the blocks globals and roots.
 * @param globalsHash - The global variables hash to put into the block hash.
 * @param noteHashTree - The root of the note hash tree.
 * @param nullifierTreeRoot - The root of the nullifier tree.
 * @param contractTreeRoot - The root of the contract tree.
 * @param l1ToL2DataTreeRoot - The root of the l1 to l2 data tree.
 * @param publicDataTreeRoot - The root of the public data tree.
 * @returns The block hash.
 */
export declare function computeBlockHash(globalsHash: Fr, noteHashTreeRoot: Fr, nullifierTreeRoot: Fr, contractTreeRoot: Fr, l1ToL2DataTreeRoot: Fr, publicDataTreeRoot: Fr): Fr;
/**
 * Computes the globals hash given the globals.
 * @param globals - The global variables to put into the block hash.
 * @returns The globals hash.
 * TODO: move this to GlobalVariables?
 */
export declare function computeGlobalsHash(globals: GlobalVariables): Fr;
/**
 * Computes a public data tree value ready for insertion.
 * @param value - Raw public data tree value to hash into a tree-insertion-ready value.
 * @returns Value hash into a tree-insertion-ready value.

 */
export declare function computePublicDataTreeValue(value: Fr): Fr;
/**
 * Computes a public data tree index from contract address and storage slot.
 * @param contractAddress - Contract where insertion is occurring.
 * @param storageSlot - Storage slot where insertion is occurring.
 * @returns Public data tree index computed from contract address and storage slot.

 */
export declare function computePublicDataTreeIndex(contractAddress: AztecAddress, storageSlot: Fr): Fr;
/**
 * Computes the hash of a list of arguments.
 * @param args - Arguments to hash.
 * @returns Pedersen hash of the arguments.
 */
export declare function computeVarArgsHash(args: Fr[]): Fr;
/**
 * Computes a contract leaf of the given contract.
 * @param cd - The contract data of the deployed contract.
 * @returns The contract leaf.
 */
export declare function computeContractLeaf(cd: NewContractData): Fr;
/**
 * Computes tx hash of a given transaction request.
 * @param txRequest - The signed transaction request.
 * @returns The transaction hash.
 */
export declare function computeTxHash(txRequest: TxRequest): Fr;
/**
 * Computes a call stack item hash.
 * @param callStackItem - The call stack item.
 * @returns The call stack item hash.
 */
export declare function computePrivateCallStackItemHash(callStackItem: PrivateCallStackItem): Fr;
/**
 * Computes a call stack item hash.
 * @param callStackItem - The call stack item.
 * @returns The call stack item hash.
 */
export declare function computePublicCallStackItemHash({ contractAddress, functionData, publicInputs, isExecutionRequest, }: PublicCallStackItem): Fr;
/**
 * Computes a secret message hash for sending secret l1 to l2 messages.
 * @param secretMessage - The secret message.
 * @returns
 */
export declare function computeSecretMessageHash(secretMessage: Fr): Fr;
//# sourceMappingURL=abis.d.ts.map