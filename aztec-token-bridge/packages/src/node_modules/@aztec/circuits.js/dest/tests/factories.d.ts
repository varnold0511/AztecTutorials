/// <reference types="node" resolution-mode="require"/>
import { AztecAddress } from '@aztec/foundation/aztec-address';
import { EthAddress } from '@aztec/foundation/eth-address';
import { SchnorrSignature } from '../barretenberg/index.js';
import { AggregationObject, AppendOnlyTreeSnapshot, BaseOrMergeRollupPublicInputs, BaseRollupInputs, BlockHeader, CallContext, CallRequest, CallerContext, CombinedAccumulatedData, CombinedConstantData, ConstantRollupData, ContractDeploymentData, ContractStorageRead, ContractStorageUpdateRequest, FinalAccumulatedData, Fr, FunctionSelector, KernelCircuitPublicInputs, MembershipWitness, MergeRollupInputs, NewContractData, OptionallyRevealedData, Point, PreviousKernelData, PreviousRollupData, PrivateCallData, PrivateCallStackItem, PrivateCircuitPublicInputs, PrivateKernelInputsInit, PrivateKernelInputsInner, PrivateKernelPublicInputsFinal, Proof, PublicCallData, PublicCallRequest, PublicCallStackItem, PublicCircuitPublicInputs, PublicDataRead, PublicDataUpdateRequest, PublicKernelInputs, ReadRequestMembershipWitness, RootRollupInputs, RootRollupPublicInputs, TxContext, TxRequest, VerificationKey, WitnessedPublicCallData } from '../index.js';
import { GlobalVariables } from '../structs/global_variables.js';
/**
 * Creates an arbitrary tx context with the given seed.
 * @param seed - The seed to use for generating the tx context.
 * @returns A tx context.
 */
export declare function makeTxContext(seed: number): TxContext;
/**
 * Creates an arbitrary combined historical tree roots object from the given seed.
 * Note: "Combined" indicates that it's the combined output of both private and public circuit flows.
 * @param seed - The seed to use for generating the combined historical tree roots.
 * @returns A combined historical tree roots object.
 */
export declare function makeBlockHeader(seed: number): BlockHeader;
/**
 * Creates arbitrary constant data with the given seed.
 * @param seed - The seed to use for generating the constant data.
 * @returns A constant data object.
 */
export declare function makeConstantData(seed?: number): CombinedConstantData;
/**
 * Creates arbitrary selector from the given seed.
 * @param seed - The seed to use for generating the selector.
 * @returns A selector.
 */
export declare function makeSelector(seed: number): FunctionSelector;
/**
 * Creates arbitrary public data update request.
 * @param seed - The seed to use for generating the public data update request.
 * @returns A public data update request.
 */
export declare function makePublicDataUpdateRequest(seed?: number): PublicDataUpdateRequest;
/**
 * Creates empty public data update request.
 * @returns An empty public data update request.
 */
export declare function makeEmptyPublicDataUpdateRequest(): PublicDataUpdateRequest;
/**
 * Creates arbitrary public data read.
 * @param seed - The seed to use for generating the public data read.
 * @returns A public data read.
 */
export declare function makePublicDataRead(seed?: number): PublicDataRead;
/**
 * Creates empty public data read.
 * @returns An empty public data read.
 */
export declare function makeEmptyPublicDataRead(): PublicDataRead;
/**
 * Creates arbitrary contract storage update request.
 * @param seed - The seed to use for generating the contract storage update request.
 * @returns A contract storage update request.
 */
export declare function makeContractStorageUpdateRequest(seed?: number): ContractStorageUpdateRequest;
/**
 * Creates arbitrary contract storage read.
 * @param seed - The seed to use for generating the contract storage read.
 * @returns A contract storage read.
 */
export declare function makeContractStorageRead(seed?: number): ContractStorageRead;
/**
 * Creates arbitrary accumulated data.
 * @param seed - The seed to use for generating the accumulated data.
 * @returns An accumulated data.
 */
export declare function makeAccumulatedData(seed?: number, full?: boolean): CombinedAccumulatedData;
/**
 * Creates arbitrary final accumulated data.
 * @param seed - The seed to use for generating the final accumulated data.
 * @returns A final accumulated data.
 */
export declare function makeFinalAccumulatedData(seed?: number, full?: boolean): FinalAccumulatedData;
/**
 * Creates arbitrary contract data.
 * @param seed - The seed to use for generating the contract data.
 * @returns A contract data.
 */
export declare function makeNewContractData(seed?: number): NewContractData;
/**
 * Creates arbitrary optionally revealed data.
 * @param seed - The seed to use for generating the optionally revealed data.
 * @returns An optionally revealed data.
 */
export declare function makeOptionallyRevealedData(seed?: number): OptionallyRevealedData;
/**
 * Creates arbitrary aggregation object.
 * @param seed - The seed to use for generating the aggregation object.
 * @returns An aggregation object.
 */
export declare function makeAggregationObject(seed?: number): AggregationObject;
/**
 * Creates arbitrary call context.
 * @param seed - The seed to use for generating the call context.
 * @param storageContractAddress - The storage contract address set on the call context.
 * @returns A call context.
 */
export declare function makeCallContext(seed?: number, storageContractAddress?: AztecAddress): CallContext;
/**
 * Creates arbitrary public circuit public inputs.
 * @param seed - The seed to use for generating the public circuit public inputs.
 * @param storageContractAddress - The storage contract address set on the call context.
 * @returns Public circuit public inputs.
 */
export declare function makePublicCircuitPublicInputs(seed?: number, storageContractAddress?: AztecAddress, full?: boolean): PublicCircuitPublicInputs;
/**
 * Creates arbitrary kernel circuit public inputs.
 * @param seed - The seed to use for generating the kernel circuit public inputs.
 * @returns Kernel circuit public inputs.
 */
export declare function makeKernelPublicInputs(seed?: number, fullAccumulatedData?: boolean): KernelCircuitPublicInputs;
/**
 * Creates arbitrary final ordering kernel circuit public inputs.
 * @param seed - The seed to use for generating the final ordering kernel circuit public inputs.
 * @returns Final ordering kernel circuit public inputs.
 */
export declare function makePrivateKernelPublicInputsFinal(seed?: number): PrivateKernelPublicInputsFinal;
/**
 * Creates a public call request for testing.
 * @param seed - The seed.
 * @returns Public call request.
 */
export declare function makePublicCallRequest(seed?: number): PublicCallRequest;
/**
 * Creates a uint8 vector of a given size filled with a given value.
 * @param size - The size of the vector.
 * @param fill - The value to fill the vector with.
 * @returns A uint8 vector.
 */
export declare function makeDynamicSizeBuffer(size: number, fill: number): Proof;
/**
 * Creates arbitrary/mocked membership witness where the sibling paths is an array of fields in an ascending order starting from `start`.
 * @param size - The size of the membership witness.
 * @param start - The start of the membership witness.
 * @returns A membership witness.
 */
export declare function makeMembershipWitness<N extends number>(size: N, start: number): MembershipWitness<N>;
/**
 * Creates arbitrary/mocked membership witness where the sibling paths is an array of fields in an ascending order starting from `start`.
 * @param start - The start of the membership witness.
 * @returns A non-transient read request membership witness.
 */
export declare function makeReadRequestMembershipWitness(start: number): ReadRequestMembershipWitness;
/**
 * Creates empty membership witness where the sibling paths is an array of fields filled with zeros.
 * @param start - The start of the membership witness.
 * @returns Non-transient empty read request membership witness.
 */
export declare function makeEmptyReadRequestMembershipWitness(): ReadRequestMembershipWitness;
/**
 * Creates arbitrary/mocked verification key.
 * @returns A verification key.
 */
export declare function makeVerificationKey(): VerificationKey;
/**
 * Creates an arbitrary point in a curve.
 * @param seed - Seed to generate the point values.
 * @returns A point.
 */
export declare function makePoint(seed?: number): Point;
/**
 * Makes arbitrary previous kernel data.
 * @param seed - The seed to use for generating the previous kernel data.
 * @param kernelPublicInputs - The kernel public inputs to use for generating the previous kernel data.
 * @returns A previous kernel data.
 */
export declare function makePreviousKernelData(seed?: number, kernelPublicInputs?: KernelCircuitPublicInputs): PreviousKernelData;
/**
 * Makes arbitrary proof.
 * @param seed - The seed to use for generating/mocking the proof.
 * @returns A proof.
 */
export declare function makeProof(seed?: number): Proof;
/**
 * Makes arbitrary private kernel inputs - initial call.
 * @param seed - The seed to use for generating the private kernel inputs.
 * @returns Private kernel inputs.
 */
export declare function makePrivateKernelInputsInit(seed?: number): PrivateKernelInputsInit;
/**
 * Makes arbitrary private kernel inputs - inner call.
 * @param seed - The seed to use for generating the private kernel inputs.
 * @returns Private kernel inputs.
 */
export declare function makePrivateKernelInputsInner(seed?: number): PrivateKernelInputsInner;
/**
 * Makes arbitrary call stack item.
 * @param seed - The seed to use for generating the call stack item.
 * @returns A call stack item.
 */
export declare function makeCallerContext(seed?: number): CallerContext;
/**
 * Makes arbitrary call stack item.
 * @param seed - The seed to use for generating the call stack item.
 * @returns A call stack item.
 */
export declare function makeCallRequest(seed?: number): CallRequest;
/**
 * Makes arbitrary public call stack item.
 * @param seed - The seed to use for generating the public call stack item.
 * @returns A public call stack item.
 */
export declare function makePublicCallStackItem(seed?: number, full?: boolean): PublicCallStackItem;
/**
 * Makes arbitrary public call data.
 * @param seed - The seed to use for generating the public call data.
 * @returns A public call data.
 */
export declare function makePublicCallData(seed?: number, full?: boolean): PublicCallData;
/**
 * Makes arbitrary witnessed public call data.
 * @param seed - The seed to use for generating the witnessed public call data.
 * @returns A witnessed public call data.
 */
export declare function makeWitnessedPublicCallData(seed?: number): WitnessedPublicCallData;
/**
 * Makes arbitrary public kernel inputs.
 * @param seed - The seed to use for generating the public kernel inputs.
 * @returns Public kernel inputs.
 */
export declare function makePublicKernelInputs(seed?: number): PublicKernelInputs;
/**
 * Makes arbitrary public kernel inputs.
 * @param seed - The seed to use for generating the public kernel inputs.
 * @param tweak - An optional function to tweak the output before computing hashes.
 * @returns Public kernel inputs.
 */
export declare function makePublicKernelInputsWithTweak(seed?: number, tweak?: (publicKernelInputs: PublicKernelInputs) => void): PublicKernelInputs;
/**
 * Makes arbitrary tx request.
 * @param seed - The seed to use for generating the tx request.
 * @returns A tx request.
 */
export declare function makeTxRequest(seed?: number): TxRequest;
/**
 * Makes arbitrary private call data.
 * @param seed - The seed to use for generating the private call data.
 * @returns A private call data.
 */
export declare function makePrivateCallData(seed?: number): PrivateCallData;
/**
 * Makes arbitrary private call stack item.
 * @param seed - The seed to use for generating the private call stack item.
 * @returns A private call stack item.
 */
export declare function makePrivateCallStackItem(seed?: number): PrivateCallStackItem;
/**
 * Makes arbitrary private circuit public inputs.
 * @param seed - The seed to use for generating the private circuit public inputs.
 * @returns A private circuit public inputs.
 */
export declare function makePrivateCircuitPublicInputs(seed?: number): PrivateCircuitPublicInputs;
/**
 * Makes arbitrary contract deployment data.
 * @param seed - The seed to use for generating the contract deployment data.
 * @returns A contract deployment data.
 */
export declare function makeContractDeploymentData(seed?: number): ContractDeploymentData;
/**
 * Makes global variables.
 * @param seed - The seed to use for generating the global variables.
 * @param blockNumber - The block number to use for generating the global variables.
 * If blockNumber is undefined, it will be set to seed + 2.
 * @returns Global variables.
 */
export declare function makeGlobalVariables(seed?: number, blockNumber?: number | undefined): GlobalVariables;
/**
 * Makes constant base rollup data.
 * @param seed - The seed to use for generating the constant base rollup data.
 * @param blockNumber - The block number to use for generating the global variables.
 * @returns A constant base rollup data.
 */
export declare function makeConstantBaseRollupData(seed?: number, globalVariables?: GlobalVariables | undefined): ConstantRollupData;
/**
 * Makes arbitrary append only tree snapshot.
 * @param seed - The seed to use for generating the append only tree snapshot.
 * @returns An append only tree snapshot.
 */
export declare function makeAppendOnlyTreeSnapshot(seed?: number): AppendOnlyTreeSnapshot;
/**
 * Makes arbitrary eth address.
 * @param seed - The seed to use for generating the eth address.
 * @returns An eth address.
 */
export declare function makeEthAddress(seed?: number): EthAddress;
/**
 * Creates a buffer of a given size filled with a given value.
 * @param size - The size of the buffer to create.
 * @param fill - The value to fill the buffer with.
 * @returns A buffer of a given size filled with a given value.
 */
export declare function makeBytes(size?: number, fill?: number): Buffer;
/**
 * Makes arbitrary aztec address.
 * @param seed - The seed to use for generating the aztec address.
 * @returns An aztec address.
 */
export declare function makeAztecAddress(seed?: number): AztecAddress;
/**
 * Makes arbitrary Schnorr signature.
 * @param seed - The seed to use for generating the Schnorr signature.
 * @returns A Schnorr signature.
 */
export declare function makeSchnorrSignature(seed?: number): SchnorrSignature;
/**
 * Makes arbitrary base or merge rollup circuit public inputs.
 * @param seed - The seed to use for generating the base rollup circuit public inputs.
 * @param blockNumber - The block number to use for generating the base rollup circuit public inputs.
 * @returns A base or merge rollup circuit public inputs.
 */
export declare function makeBaseOrMergeRollupPublicInputs(seed?: number, globalVariables?: GlobalVariables | undefined): BaseOrMergeRollupPublicInputs;
/**
 * Makes arbitrary previous rollup data.
 * @param seed - The seed to use for generating the previous rollup data.
 * @param globalVariables - The global variables to use when generating the previous rollup data.
 * @returns A previous rollup data.
 */
export declare function makePreviousRollupData(seed?: number, globalVariables?: GlobalVariables | undefined): PreviousRollupData;
/**
 * Makes root rollup inputs.
 * @param seed - The seed to use for generating the root rollup inputs.
 * @param blockNumber - The block number to use for generating the root rollup inputs.
 * @returns A root rollup inputs.
 */
export declare function makeRootRollupInputs(seed?: number, globalVariables?: GlobalVariables): RootRollupInputs;
/**
 * Makes root rollup public inputs.
 * @param seed - The seed to use for generating the root rollup public inputs.
 * @param blockNumber - The block number to use for generating the root rollup public inputs.
 * if blockNumber is undefined, it will be set to seed + 2.
 * @returns A root rollup public inputs.
 */
export declare function makeRootRollupPublicInputs(seed?: number, globalVariables?: GlobalVariables | undefined): RootRollupPublicInputs;
/**
 * Makes arbitrary merge rollup inputs.
 * @param seed - The seed to use for generating the merge rollup inputs.
 * @returns A merge rollup inputs.
 */
export declare function makeMergeRollupInputs(seed?: number): MergeRollupInputs;
/**
 * Makes arbitrary base rollup inputs.
 * @param seed - The seed to use for generating the base rollup inputs.
 * @returns A base rollup inputs.
 */
export declare function makeBaseRollupInputs(seed?: number): BaseRollupInputs;
/**
 * TODO: Since the max value check is currently disabled this function is pointless. Should it be removed?
 * Test only. Easy to identify big endian field serialize.
 * @param n - The number.
 * @returns The field.
 */
export declare function fr(n: number): Fr;
//# sourceMappingURL=factories.d.ts.map