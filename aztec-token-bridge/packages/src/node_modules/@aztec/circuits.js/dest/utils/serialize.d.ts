/// <reference types="node" resolution-mode="require"/>
/**
 * For serializing an array of fixed length buffers.
 * TODO move to foundation pkg.
 * @param arr - Array of buffers.
 * @returns The serialized buffers.
 */
export declare function serializeBufferArrayToVector(arr: Buffer[]): Buffer;
/**
 * Helper function for deserializeArrayFromVector.
 */
type DeserializeFn<T> = (buf: Buffer, offset: number) => {
    /**
     * The deserialized type.
     */
    elem: T;
    /**
     * How many bytes to advance by.
     */
    adv: number;
};
/**
 * Deserializes an array from a vector on an element-by-element basis.
 * @param deserialize - A function used to deserialize each element of the vector.
 * @param vector - The vector to deserialize.
 * @param offset - The position in the vector to start deserializing from.
 * @returns Deserialized array and how many bytes we advanced by.
 *
 * TODO: move to foundation pkg.
 */
export declare function deserializeArrayFromVector<T>(deserialize: DeserializeFn<T>, vector: Buffer, offset?: number): {
    /**
     * The deserialized array.
     */
    elem: T[];
    /**
     * How many bytes we advanced by.
     */
    adv: number;
};
/**
 * Serializes a number to 32 bit little-endian form.
 * @param n - The number to serialize.
 * @param bufferSize - The size of the buffer to return.
 * @returns Number in little-endian form.
 */
export declare function numToUInt32LE(n: number, bufferSize?: number): Buffer;
/**
 * Serializes a number to 32 bit big-endian form.
 * @param n - The number to serialize.
 * @param bufferSize - The size of the buffer to return.
 * @returns Number in big-endian form.
 */
export declare function numToUInt32BE(n: number, bufferSize?: number): Buffer;
/**
 * Cast a uint8 array to a number.
 * @param array - The uint8 array.
 * @returns The number.
 */
export declare function uint8ArrayToNum(array: Uint8Array): number;
/**
 * Serializes a boolean to a buffer.
 * @param value - Value to serialize.
 * @returns The serialized boolean.
 */
export declare function boolToBuffer(value: boolean, bufferSize?: number): Buffer;
/**
 * Deserialize the 256-bit number at address `offset`.
 * @param buf - The buffer.
 * @param offset - The address.
 * @returns The deserialized 256-bit field.
 */
export declare function deserializeField(buf: Buffer, offset?: number): {
    elem: Buffer;
    adv: number;
};
/** A type that can be written to a buffer. */
export type Bufferable = boolean | Buffer | number | string | {
    /**
     * Serialize to a buffer of 32 bytes.
     */
    toBuffer32: () => Buffer;
} | {
    /**
     * Serialize to a buffer.
     */
    toBuffer: () => Buffer;
} | Bufferable[];
/**
 * Serializes a list of objects contiguously.
 * @param objs - Objects to serialize.
 * @returns A buffer list with the concatenation of all fields.
 */
export declare function serializeToBufferArray(...objs: Bufferable[]): Buffer[];
/**
 * Serializes a list of objects contiguously.
 * @param objs - Objects to serialize.
 * @returns A single buffer with the concatenation of all fields.
 */
export declare function serializeToBuffer(...objs: Bufferable[]): Buffer;
/**
 * Returns a user-friendly JSON representation of an object, showing buffers as hex strings.
 * @param obj - Object to json-stringify.
 * @returns A JSON string.
 */
export declare function toFriendlyJSON(obj: object): string;
export {};
//# sourceMappingURL=serialize.d.ts.map