/// <reference types="node" resolution-mode="require"/>
import { Fr } from '@aztec/foundation/fields';
import { BufferReader, Tuple } from '@aztec/foundation/serialize';
import { NOTE_HASH_TREE_HEIGHT } from '../constants.gen.js';
import { MembershipWitness } from './membership_witness.js';
/**
 * A ReadRequestMembershipWitness is similar to a MembershipWitness but includes
 * some additional fields used to direct the kernel regarding whether a read is transient
 * and if so which commitment it corresponds to.
 */
export declare class ReadRequestMembershipWitness {
    /**
     * Index of a leaf in the Merkle tree.
     */
    leafIndex: Fr;
    /**
     * Sibling path of the leaf in the Merkle tree.
     */
    siblingPath: Tuple<Fr, typeof NOTE_HASH_TREE_HEIGHT>;
    /**
     * Whether or not the read request corresponds to a pending commitment.
     */
    isTransient: boolean;
    /**
     * When transient, the commitment being read was created by some app circuit in the current TX.
     * The kernel will need some hint to efficiently find that commitment for a given read request.
     * When not transient, this can be 0.
     */
    hintToCommitment: Fr;
    constructor(
    /**
     * Index of a leaf in the Merkle tree.
     */
    leafIndex: Fr, 
    /**
     * Sibling path of the leaf in the Merkle tree.
     */
    siblingPath: Tuple<Fr, typeof NOTE_HASH_TREE_HEIGHT>, 
    /**
     * Whether or not the read request corresponds to a pending commitment.
     */
    isTransient: boolean, 
    /**
     * When transient, the commitment being read was created by some app circuit in the current TX.
     * The kernel will need some hint to efficiently find that commitment for a given read request.
     * When not transient, this can be 0.
     */
    hintToCommitment: Fr);
    toBuffer(): Buffer;
    static mock(size: number, start: number): ReadRequestMembershipWitness;
    /**
     * Creates a random membership witness. Used for testing purposes.
     * @returns Random membership witness.
     */
    static random(): ReadRequestMembershipWitness;
    /**
     * Creates a read request membership witness whose sibling path is full of zero fields.
     * @param leafIndex - Index of the leaf in the Merkle tree.
     * @returns Membership witness with zero sibling path.
     */
    static empty(leafIndex: bigint): ReadRequestMembershipWitness;
    /**
     * Creates a transient read request membership witness.
     * @returns an empty transient read request membership witness.
     */
    static emptyTransient(): ReadRequestMembershipWitness;
    static fromBufferArray(leafIndex: Fr, siblingPath: Tuple<Buffer, typeof NOTE_HASH_TREE_HEIGHT>, isTransient: boolean, hintToCommitment: Fr): ReadRequestMembershipWitness;
    static fromMembershipWitness(membershipWitness: MembershipWitness<typeof NOTE_HASH_TREE_HEIGHT>, isTransient: boolean, hintToCommitment: Fr): ReadRequestMembershipWitness;
    /**
     * Deserializes from a buffer or reader, corresponding to a write in cpp.
     * @param buffer - Buffer or reader to read from.
     * @returns The deserialized `ReadRequestMembershipWitness`.
     */
    static fromBuffer(buffer: Buffer | BufferReader): ReadRequestMembershipWitness;
}
//# sourceMappingURL=read_request_membership_witness.d.ts.map