/// <reference types="node" resolution-mode="require"/>
import { ROLLUP_VK_TREE_HEIGHT } from '../../constants.gen.js';
import { MembershipWitness } from '../membership_witness.js';
import { Proof } from '../proof.js';
import { UInt32 } from '../shared.js';
import { VerificationKey } from '../verification_key.js';
import { BaseOrMergeRollupPublicInputs } from './base_or_merge_rollup_public_inputs.js';
/**
 * Represents the data of a previous merge or base rollup circuit.
 */
export declare class PreviousRollupData {
    /**
     * Public inputs to the base or merge rollup circuit.
     */
    baseOrMergeRollupPublicInputs: BaseOrMergeRollupPublicInputs;
    /**
     * The proof of the base or merge rollup circuit.
     */
    proof: Proof;
    /**
     * The verification key of the base or merge rollup circuit.
     */
    vk: VerificationKey;
    /**
     * The index of the rollup circuit's vk in a big tree of rollup circuit vks.
     */
    vkIndex: UInt32;
    /**
     * Sibling path of the rollup circuit's vk in a big tree of rollup circuit vks.
     */
    vkSiblingPath: MembershipWitness<typeof ROLLUP_VK_TREE_HEIGHT>;
    constructor(
    /**
     * Public inputs to the base or merge rollup circuit.
     */
    baseOrMergeRollupPublicInputs: BaseOrMergeRollupPublicInputs, 
    /**
     * The proof of the base or merge rollup circuit.
     */
    proof: Proof, 
    /**
     * The verification key of the base or merge rollup circuit.
     */
    vk: VerificationKey, 
    /**
     * The index of the rollup circuit's vk in a big tree of rollup circuit vks.
     */
    vkIndex: UInt32, 
    /**
     * Sibling path of the rollup circuit's vk in a big tree of rollup circuit vks.
     */
    vkSiblingPath: MembershipWitness<typeof ROLLUP_VK_TREE_HEIGHT>);
    /**
     * Serializes previous rollup data to a buffer.
     * @returns The buffer of the serialized previous rollup data.
     */
    toBuffer(): Buffer;
}
//# sourceMappingURL=previous_rollup_data.d.ts.map