import { toBigIntBE, toBufferBE } from '@aztec/foundation/bigint-buffer';
import { Fr } from '@aztec/foundation/fields';
import { BufferReader } from '@aztec/foundation/serialize';
import { serializeToBuffer } from '../../utils/serialize.js';
import { GlobalVariables } from '../global_variables.js';
import { AppendOnlyTreeSnapshot } from './append_only_tree_snapshot.js';
/**
 * Class containing the data of a preimage of a single leaf in the nullifier tree.
 * Note: It's called preimage because this data gets hashed before being inserted as a node into the `IndexedTree`.
 */
export class NullifierLeafPreimage {
    constructor(
    /**
     * Leaf value inside the indexed tree's linked list.
     */
    nullifier, 
    /**
     * Next value inside the indexed tree's linked list.
     */
    nextNullifier, 
    /**
     * Index of the next leaf in the indexed tree's linked list.
     */
    nextIndex) {
        this.nullifier = nullifier;
        this.nextNullifier = nextNullifier;
        this.nextIndex = nextIndex;
    }
    getKey() {
        return this.nullifier.toBigInt();
    }
    getNextKey() {
        return this.nextNullifier.toBigInt();
    }
    getNextIndex() {
        return this.nextIndex;
    }
    asLeaf() {
        return new NullifierLeaf(this.nullifier);
    }
    toBuffer() {
        return Buffer.concat(this.toHashInputs());
    }
    toHashInputs() {
        return [
            Buffer.from(this.nullifier.toBuffer()),
            Buffer.from(toBufferBE(this.nextIndex, 32)),
            Buffer.from(this.nextNullifier.toBuffer()),
        ];
    }
    clone() {
        return new NullifierLeafPreimage(this.nullifier, this.nextNullifier, this.nextIndex);
    }
    static empty() {
        return new NullifierLeafPreimage(Fr.ZERO, Fr.ZERO, 0n);
    }
    static fromBuffer(buf) {
        const nullifier = Fr.fromBuffer(buf.subarray(0, 32));
        const nextIndex = toBigIntBE(buf.subarray(32, 64));
        const nextNullifier = Fr.fromBuffer(buf.subarray(64, 96));
        return new NullifierLeafPreimage(nullifier, nextNullifier, nextIndex);
    }
    static fromLeaf(leaf, nextKey, nextIndex) {
        return new NullifierLeafPreimage(leaf.nullifier, new Fr(nextKey), nextIndex);
    }
    static clone(preimage) {
        return new NullifierLeafPreimage(preimage.nullifier, preimage.nextNullifier, preimage.nextIndex);
    }
}
/**
 * A nullifier to be inserted in the nullifier tree.
 */
export class NullifierLeaf {
    constructor(
    /**
     * Nullifier value.
     */
    nullifier) {
        this.nullifier = nullifier;
    }
    getKey() {
        return this.nullifier.toBigInt();
    }
    toBuffer() {
        return this.nullifier.toBuffer();
    }
    isEmpty() {
        return this.nullifier.isZero();
    }
    static buildDummy(key) {
        return new NullifierLeaf(new Fr(key));
    }
    static fromBuffer(buf) {
        return new NullifierLeaf(Fr.fromBuffer(buf));
    }
}
/**
 * Data which is forwarded through the base rollup circuits unchanged.
 */
export class ConstantRollupData {
    constructor(
    /**
     * Snapshot of the blocks tree at the start of the rollup.
     */
    archiveSnapshot, 
    /**
     * Root of the private kernel verification key tree.
     */
    privateKernelVkTreeRoot, 
    /**
     * Root of the public kernel circuit verification key tree.
     */
    publicKernelVkTreeRoot, 
    /**
     * Hash of the base rollup circuit verification key.
     */
    baseRollupVkHash, 
    /**
     * Hash of the merge rollup circuit verification key.
     */
    mergeRollupVkHash, 
    /**
     * Global variables for the block
     */
    globalVariables) {
        this.archiveSnapshot = archiveSnapshot;
        this.privateKernelVkTreeRoot = privateKernelVkTreeRoot;
        this.publicKernelVkTreeRoot = publicKernelVkTreeRoot;
        this.baseRollupVkHash = baseRollupVkHash;
        this.mergeRollupVkHash = mergeRollupVkHash;
        this.globalVariables = globalVariables;
    }
    static from(fields) {
        return new ConstantRollupData(...ConstantRollupData.getFields(fields));
    }
    static fromBuffer(buffer) {
        const reader = BufferReader.asReader(buffer);
        return new ConstantRollupData(reader.readObject(AppendOnlyTreeSnapshot), Fr.fromBuffer(reader), Fr.fromBuffer(reader), Fr.fromBuffer(reader), Fr.fromBuffer(reader), reader.readObject(GlobalVariables));
    }
    static getFields(fields) {
        return [
            fields.archiveSnapshot,
            fields.privateKernelVkTreeRoot,
            fields.publicKernelVkTreeRoot,
            fields.baseRollupVkHash,
            fields.mergeRollupVkHash,
            fields.globalVariables,
        ];
    }
    toBuffer() {
        return serializeToBuffer(...ConstantRollupData.getFields(this));
    }
}
/**
 * Inputs to the base rollup circuit.
 */
export class BaseRollupInputs {
    constructor(
    /**
     * Data of the 2 kernels that preceded this base rollup circuit.
     */
    kernelData, 
    /**
     * Snapshot of the note hash tree at the start of the base rollup circuit.
     */
    startNoteHashTreeSnapshot, 
    /**
     * Snapshot of the nullifier tree at the start of the base rollup circuit.
     */
    startNullifierTreeSnapshot, 
    /**
     * Snapshot of the contract tree at the start of the base rollup circuit.
     */
    startContractTreeSnapshot, 
    /**
     * Root of the public data tree at the start of the base rollup circuit.
     */
    startPublicDataTreeRoot, 
    /**
     * Snapshot of the blocks tree at the start of the base rollup circuit.
     */
    archiveSnapshot, 
    /**
     * The nullifiers to be inserted in the tree, sorted high to low.
     */
    sortedNewNullifiers, 
    /**
     * The indexes of the sorted nullifiers to the original ones.
     */
    sortednewNullifiersIndexes, 
    /**
     * The nullifiers which need to be updated to perform the batch insertion of the new nullifiers.
     * See `StandardIndexedTree.batchInsert` function for more details.
     */
    lowNullifierLeafPreimages, 
    /**
     * Membership witnesses for the nullifiers which need to be updated to perform the batch insertion of the new
     * nullifiers.
     */
    lowNullifierMembershipWitness, 
    /**
     * Sibling path "pointing to" where the new commitments subtree should be inserted into the note hash tree.
     */
    newCommitmentsSubtreeSiblingPath, 
    /**
     * Sibling path "pointing to" where the new nullifiers subtree should be inserted into the nullifier tree.
     */
    newNullifiersSubtreeSiblingPath, 
    /**
     * Sibling path "pointing to" where the new contracts subtree should be inserted into the contract tree.
     */
    newContractsSubtreeSiblingPath, 
    /**
     * Sibling paths of leaves which are to be affected by the public data update requests.
     * Each item in the array is the sibling path that corresponds to an update request.
     */
    newPublicDataUpdateRequestsSiblingPaths, 
    /**
     * Sibling paths of leaves which are to be read by the public data reads.
     * Each item in the array is the sibling path that corresponds to a read request.
     */
    newPublicDataReadsSiblingPaths, 
    /**
     * Membership witnesses of blocks referred by each of the 2 kernels.
     */
    archiveRootMembershipWitnesses, 
    /**
     * Data which is not modified by the base rollup circuit.
     */
    constants) {
        this.kernelData = kernelData;
        this.startNoteHashTreeSnapshot = startNoteHashTreeSnapshot;
        this.startNullifierTreeSnapshot = startNullifierTreeSnapshot;
        this.startContractTreeSnapshot = startContractTreeSnapshot;
        this.startPublicDataTreeRoot = startPublicDataTreeRoot;
        this.archiveSnapshot = archiveSnapshot;
        this.sortedNewNullifiers = sortedNewNullifiers;
        this.sortednewNullifiersIndexes = sortednewNullifiersIndexes;
        this.lowNullifierLeafPreimages = lowNullifierLeafPreimages;
        this.lowNullifierMembershipWitness = lowNullifierMembershipWitness;
        this.newCommitmentsSubtreeSiblingPath = newCommitmentsSubtreeSiblingPath;
        this.newNullifiersSubtreeSiblingPath = newNullifiersSubtreeSiblingPath;
        this.newContractsSubtreeSiblingPath = newContractsSubtreeSiblingPath;
        this.newPublicDataUpdateRequestsSiblingPaths = newPublicDataUpdateRequestsSiblingPaths;
        this.newPublicDataReadsSiblingPaths = newPublicDataReadsSiblingPaths;
        this.archiveRootMembershipWitnesses = archiveRootMembershipWitnesses;
        this.constants = constants;
    }
    static from(fields) {
        return new BaseRollupInputs(...BaseRollupInputs.getFields(fields));
    }
    static getFields(fields) {
        return [
            fields.kernelData,
            fields.startNoteHashTreeSnapshot,
            fields.startNullifierTreeSnapshot,
            fields.startContractTreeSnapshot,
            fields.startPublicDataTreeRoot,
            fields.archiveSnapshot,
            fields.sortedNewNullifiers,
            fields.sortednewNullifiersIndexes,
            fields.lowNullifierLeafPreimages,
            fields.lowNullifierMembershipWitness,
            fields.newCommitmentsSubtreeSiblingPath,
            fields.newNullifiersSubtreeSiblingPath,
            fields.newContractsSubtreeSiblingPath,
            fields.newPublicDataUpdateRequestsSiblingPaths,
            fields.newPublicDataReadsSiblingPaths,
            fields.archiveRootMembershipWitnesses,
            fields.constants,
        ];
    }
    toBuffer() {
        return serializeToBuffer(...BaseRollupInputs.getFields(this));
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZV9yb2xsdXAuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvc3RydWN0cy9yb2xsdXAvYmFzZV9yb2xsdXAudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUN6RSxPQUFPLEVBQUUsRUFBRSxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDOUMsT0FBTyxFQUFFLFlBQVksRUFBUyxNQUFNLDZCQUE2QixDQUFDO0FBZ0JsRSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUM3RCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFJekQsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFFeEU7OztHQUdHO0FBQ0gsTUFBTSxPQUFPLHFCQUFxQjtJQUNoQztJQUNFOztPQUVHO0lBQ0ksU0FBYTtJQUNwQjs7T0FFRztJQUNJLGFBQWlCO0lBQ3hCOztPQUVHO0lBQ0ksU0FBaUI7UUFSakIsY0FBUyxHQUFULFNBQVMsQ0FBSTtRQUliLGtCQUFhLEdBQWIsYUFBYSxDQUFJO1FBSWpCLGNBQVMsR0FBVCxTQUFTLENBQVE7SUFDdkIsQ0FBQztJQUVKLE1BQU07UUFDSixPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDbkMsQ0FBQztJQUVELFVBQVU7UUFDUixPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDdkMsQ0FBQztJQUVELFlBQVk7UUFDVixPQUFPLElBQUksQ0FBQyxTQUFTLENBQUM7SUFDeEIsQ0FBQztJQUVELE1BQU07UUFDSixPQUFPLElBQUksYUFBYSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUMzQyxDQUFDO0lBRUQsUUFBUTtRQUNOLE9BQU8sTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJ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