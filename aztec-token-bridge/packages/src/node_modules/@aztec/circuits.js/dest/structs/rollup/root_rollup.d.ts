/// <reference types="node" resolution-mode="require"/>
import { Fr } from '@aztec/foundation/fields';
import { BufferReader, Tuple } from '@aztec/foundation/serialize';
import { ARCHIVE_HEIGHT, L1_TO_L2_MSG_SUBTREE_SIBLING_PATH_LENGTH, NUMBER_OF_L1_L2_MESSAGES_PER_ROLLUP } from '../../constants.gen.js';
import { FieldsOf } from '../../utils/jsUtils.js';
import { AggregationObject } from '../aggregation_object.js';
import { GlobalVariables } from '../global_variables.js';
import { AppendOnlyTreeSnapshot } from './append_only_tree_snapshot.js';
import { PreviousRollupData } from './previous_rollup_data.js';
/**
 * Represents inputs of the root rollup circuit.
 */
export declare class RootRollupInputs {
    /**
     * The previous rollup data.
     * Note: Root rollup circuit is the latest circuit the chain of circuits and the previous rollup data is the data
     * from 2 merge or base rollup circuits.
     */
    previousRollupData: [PreviousRollupData, PreviousRollupData];
    /**
     * New L1 to L2 messages.
     */
    newL1ToL2Messages: Tuple<Fr, typeof NUMBER_OF_L1_L2_MESSAGES_PER_ROLLUP>;
    /**
     * Sibling path of the new L1 to L2 message tree root.
     */
    newL1ToL2MessagesTreeRootSiblingPath: Tuple<Fr, typeof L1_TO_L2_MSG_SUBTREE_SIBLING_PATH_LENGTH>;
    /**
     * Snapshot of the L1 to L2 message tree at the start of the rollup.
     */
    startL1ToL2MessagesTreeSnapshot: AppendOnlyTreeSnapshot;
    /**
     * Snapshot of the historical block roots tree at the start of the rollup.
     */
    startArchiveSnapshot: AppendOnlyTreeSnapshot;
    /**
     * Sibling path of the new block tree root.
     */
    newArchiveSiblingPath: Tuple<Fr, typeof ARCHIVE_HEIGHT>;
    constructor(
    /**
     * The previous rollup data.
     * Note: Root rollup circuit is the latest circuit the chain of circuits and the previous rollup data is the data
     * from 2 merge or base rollup circuits.
     */
    previousRollupData: [PreviousRollupData, PreviousRollupData], 
    /**
     * New L1 to L2 messages.
     */
    newL1ToL2Messages: Tuple<Fr, typeof NUMBER_OF_L1_L2_MESSAGES_PER_ROLLUP>, 
    /**
     * Sibling path of the new L1 to L2 message tree root.
     */
    newL1ToL2MessagesTreeRootSiblingPath: Tuple<Fr, typeof L1_TO_L2_MSG_SUBTREE_SIBLING_PATH_LENGTH>, 
    /**
     * Snapshot of the L1 to L2 message tree at the start of the rollup.
     */
    startL1ToL2MessagesTreeSnapshot: AppendOnlyTreeSnapshot, 
    /**
     * Snapshot of the historical block roots tree at the start of the rollup.
     */
    startArchiveSnapshot: AppendOnlyTreeSnapshot, 
    /**
     * Sibling path of the new block tree root.
     */
    newArchiveSiblingPath: Tuple<Fr, typeof ARCHIVE_HEIGHT>);
    toBuffer(): Buffer;
    static from(fields: FieldsOf<RootRollupInputs>): RootRollupInputs;
    static getFields(fields: FieldsOf<RootRollupInputs>): readonly [[PreviousRollupData, PreviousRollupData], [Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr], [Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr], AppendOnlyTreeSnapshot, AppendOnlyTreeSnapshot, [Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr]];
}
/**
 * Represents public inputs of the root rollup circuit.
 *
 * NOTE: in practice, we'll hash all of this up into a single public input, for cheap on-chain verification.
 */
export declare class RootRollupPublicInputs {
    /**
     * Native aggregation state at the end of the rollup.
     */
    endAggregationObject: AggregationObject;
    /**
     * Global variables of the L2 block.
     */
    globalVariables: GlobalVariables;
    /**
     * Snapshot of the note hash tree at the start of the rollup.
     */
    startNoteHashTreeSnapshot: AppendOnlyTreeSnapshot;
    /**
     * Snapshot of the note hash tree at the end of the rollup.
     */
    endNoteHashTreeSnapshot: AppendOnlyTreeSnapshot;
    /**
     * Snapshot of the nullifier tree at the start of the rollup.
     */
    startNullifierTreeSnapshot: AppendOnlyTreeSnapshot;
    /**
     * Snapshot of the nullifier tree at the end of the rollup.
     */
    endNullifierTreeSnapshot: AppendOnlyTreeSnapshot;
    /**
     * Snapshot of the contract tree at the start of the rollup.
     */
    startContractTreeSnapshot: AppendOnlyTreeSnapshot;
    /**
     * Snapshot of the contract tree at the end of the rollup.
     */
    endContractTreeSnapshot: AppendOnlyTreeSnapshot;
    /**
     * Root of the public data tree at the start of the rollup.
     */
    startPublicDataTreeRoot: Fr;
    /**
     * Root of the public data tree at the end of the rollup.
     */
    endPublicDataTreeRoot: Fr;
    /**
     * Snapshot of the L1 to L2 message tree at the start of the rollup.
     */
    startL1ToL2MessagesTreeSnapshot: AppendOnlyTreeSnapshot;
    /**
     * Snapshot of the L1 to L2 message tree at the end of the rollup.
     */
    endL1ToL2MessagesTreeSnapshot: AppendOnlyTreeSnapshot;
    /**
     * Snapshot of the blocks tree roots tree at the start of the rollup.
     */
    startArchiveSnapshot: AppendOnlyTreeSnapshot;
    /**
     * Snapshot of the blocks tree roots tree at the end of the rollup.
     */
    endArchiveSnapshot: AppendOnlyTreeSnapshot;
    /**
     * Hash of the calldata.
     */
    calldataHash: [Fr, Fr];
    /**
     * Hash of the L1 to L2 messages.
     */
    l1ToL2MessagesHash: [Fr, Fr];
    constructor(
    /**
     * Native aggregation state at the end of the rollup.
     */
    endAggregationObject: AggregationObject, 
    /**
     * Global variables of the L2 block.
     */
    globalVariables: GlobalVariables, 
    /**
     * Snapshot of the note hash tree at the start of the rollup.
     */
    startNoteHashTreeSnapshot: AppendOnlyTreeSnapshot, 
    /**
     * Snapshot of the note hash tree at the end of the rollup.
     */
    endNoteHashTreeSnapshot: AppendOnlyTreeSnapshot, 
    /**
     * Snapshot of the nullifier tree at the start of the rollup.
     */
    startNullifierTreeSnapshot: AppendOnlyTreeSnapshot, 
    /**
     * Snapshot of the nullifier tree at the end of the rollup.
     */
    endNullifierTreeSnapshot: AppendOnlyTreeSnapshot, 
    /**
     * Snapshot of the contract tree at the start of the rollup.
     */
    startContractTreeSnapshot: AppendOnlyTreeSnapshot, 
    /**
     * Snapshot of the contract tree at the end of the rollup.
     */
    endContractTreeSnapshot: AppendOnlyTreeSnapshot, 
    /**
     * Root of the public data tree at the start of the rollup.
     */
    startPublicDataTreeRoot: Fr, 
    /**
     * Root of the public data tree at the end of the rollup.
     */
    endPublicDataTreeRoot: Fr, 
    /**
     * Snapshot of the L1 to L2 message tree at the start of the rollup.
     */
    startL1ToL2MessagesTreeSnapshot: AppendOnlyTreeSnapshot, 
    /**
     * Snapshot of the L1 to L2 message tree at the end of the rollup.
     */
    endL1ToL2MessagesTreeSnapshot: AppendOnlyTreeSnapshot, 
    /**
     * Snapshot of the blocks tree roots tree at the start of the rollup.
     */
    startArchiveSnapshot: AppendOnlyTreeSnapshot, 
    /**
     * Snapshot of the blocks tree roots tree at the end of the rollup.
     */
    endArchiveSnapshot: AppendOnlyTreeSnapshot, 
    /**
     * Hash of the calldata.
     */
    calldataHash: [Fr, Fr], 
    /**
     * Hash of the L1 to L2 messages.
     */
    l1ToL2MessagesHash: [Fr, Fr]);
    static getFields(fields: FieldsOf<RootRollupPublicInputs>): readonly [AggregationObject, GlobalVariables, AppendOnlyTreeSnapshot, AppendOnlyTreeSnapshot, AppendOnlyTreeSnapshot, AppendOnlyTreeSnapshot, AppendOnlyTreeSnapshot, AppendOnlyTreeSnapshot, Fr, Fr, AppendOnlyTreeSnapshot, AppendOnlyTreeSnapshot, AppendOnlyTreeSnapshot, AppendOnlyTreeSnapshot, [Fr, Fr], [Fr, Fr]];
    toBuffer(): Buffer;
    static from(fields: FieldsOf<RootRollupPublicInputs>): RootRollupPublicInputs;
    /**
     * Returns the sha256 hash of the calldata.
     * @returns The sha256 hash of the calldata.
     */
    sha256CalldataHash(): Buffer;
    /**
     * Deserializes a buffer into a `RootRollupPublicInputs` object.
     * @param buffer - The buffer to deserialize.
     * @returns The deserialized `RootRollupPublicInputs` object.
     */
    static fromBuffer(buffer: Buffer | BufferReader): RootRollupPublicInputs;
}
//# sourceMappingURL=root_rollup.d.ts.map