import { AztecAddress } from '@aztec/foundation/aztec-address';
import { BufferReader } from '@aztec/foundation/serialize';
import { computePrivateCallStackItemHash, computePublicCallStackItemHash } from '../abis/abis.js';
import { serializeToBuffer } from '../utils/serialize.js';
import { CallRequest, CallerContext } from './call_request.js';
import { FunctionData } from './function_data.js';
import { PrivateCircuitPublicInputs } from './private_circuit_public_inputs.js';
import { PublicCircuitPublicInputs } from './public_circuit_public_inputs.js';
/**
 * Call stack item on a private call.
 * @see cpp/src/aztec3/circuits/abis/call_stack_item.hpp.
 */
export class PrivateCallStackItem {
    constructor(
    /**
     * Address of the contract on which the function is invoked.
     */
    contractAddress, 
    /**
     * Data identifying the function being called.
     */
    functionData, 
    /**
     * Public inputs to the private kernel circuit.
     */
    publicInputs, 
    /**
     * Whether the current callstack item should be considered a public fn execution request.
     */
    isExecutionRequest) {
        this.contractAddress = contractAddress;
        this.functionData = functionData;
        this.publicInputs = publicInputs;
        this.isExecutionRequest = isExecutionRequest;
        if (isExecutionRequest) {
            throw new Error('boolean isExecutionRequest must be set to true for a PrivateCallStackItem object');
        }
    }
    toBuffer() {
        return serializeToBuffer(this.contractAddress, this.functionData, this.publicInputs, this.isExecutionRequest);
    }
    /**
     * Deserializes from a buffer or reader.
     * @param buffer - Buffer or reader to read from.
     * @returns The deserialized instance.
     */
    static fromBuffer(buffer) {
        const reader = BufferReader.asReader(buffer);
        return new PrivateCallStackItem(reader.readObject(AztecAddress), reader.readObject(FunctionData), reader.readObject(PrivateCircuitPublicInputs), reader.readBoolean());
    }
    /**
     * Returns a new instance of PrivateCallStackItem with zero contract address, function data and public inputs.
     * @returns A new instance of PrivateCallStackItem with zero contract address, function data and public inputs.
     */
    static empty() {
        return new PrivateCallStackItem(AztecAddress.ZERO, FunctionData.empty({ isPrivate: true }), PrivateCircuitPublicInputs.empty(), false);
    }
    isEmpty() {
        return this.contractAddress.isZero() && this.functionData.isEmpty() && this.publicInputs.isEmpty();
    }
    /**
     * Computes this call stack item hash.
     * @returns Hash.
     */
    hash() {
        return computePrivateCallStackItemHash(this);
    }
    /**
     * Creates a new CallRequest with values of the calling contract.
     * @returns A CallRequest instance with the contract address, caller context, and the hash of the call stack item.
     */
    toCallRequest() {
        if (this.isEmpty()) {
            return CallRequest.empty();
        }
        const callContext = this.publicInputs.callContext;
        const callerContext = callContext.isDelegateCall
            ? new CallerContext(callContext.msgSender, callContext.storageContractAddress)
            : CallerContext.empty();
        return new CallRequest(this.hash(), callContext.msgSender, callerContext);
    }
}
/**
 * Call stack item on a public call.
 * @see cpp/src/aztec3/circuits/abis/call_stack_item.hpp.
 */
export class PublicCallStackItem {
    constructor(
    /**
     * Address of the contract on which the function is invoked.
     */
    contractAddress, 
    /**
     * Data identifying the function being called.
     */
    functionData, 
    /**
     * Public inputs to the public kernel circuit.
     */
    publicInputs, 
    /**
     * Whether the current callstack item should be considered a public fn execution request.
     */
    isExecutionRequest) {
        this.contractAddress = contractAddress;
        this.functionData = functionData;
        this.publicInputs = publicInputs;
        this.isExecutionRequest = isExecutionRequest;
    }
    toBuffer() {
        return serializeToBuffer(this.contractAddress, this.functionData, this.publicInputs, this.isExecutionRequest);
    }
    /**
     * Returns a new instance of PublicCallStackItem with zero contract address, function data and public inputs.
     * @returns A new instance of PublicCallStackItem with zero contract address, function data and public inputs.
     */
    static empty() {
        return new PublicCallStackItem(AztecAddress.ZERO, FunctionData.empty({ isPrivate: false }), PublicCircuitPublicInputs.empty(), false);
    }
    isEmpty() {
        return this.contractAddress.isZero() && this.functionData.isEmpty() && this.publicInputs.isEmpty();
    }
    /**
     * Computes this call stack item hash.
     * @returns Hash.
     */
    hash() {
        return computePublicCallStackItemHash(this);
    }
    /**
     * Creates a new CallRequest with values of the calling contract.
     * @returns A CallRequest instance with the contract address, caller context, and the hash of the call stack item.
     */
    toCallRequest() {
        if (this.isEmpty()) {
            return CallRequest.empty();
        }
        const callContext = this.publicInputs.callContext;
        const callerContext = callContext.isDelegateCall
            ? new CallerContext(callContext.msgSender, callContext.storageContractAddress)
            : CallerContext.empty();
        return new CallRequest(this.hash(), callContext.msgSender, callerContext);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FsbF9zdGFja19pdGVtLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3N0cnVjdHMvY2FsbF9zdGFja19pdGVtLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUMvRCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFFM0QsT0FBTyxFQUFFLCtCQUErQixFQUFFLDhCQUE4QixFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDbEcsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDMUQsT0FBTyxFQUFFLFdBQVcsRUFBRSxhQUFhLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUMvRCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDbEQsT0FBTyxFQUFFLDBCQUEwQixFQUFFLE1BQU0sb0NBQW9DLENBQUM7QUFDaEYsT0FBTyxFQUFFLHlCQUF5QixFQUFFLE1BQU0sbUNBQW1DLENBQUM7QUFFOUU7OztHQUdHO0FBQ0gsTUFBTSxPQUFPLG9CQUFvQjtJQUMvQjtJQUNFOztPQUVHO0lBQ0ksZUFBNkI7SUFDcEM7O09BRUc7SUFDSSxZQUEwQjtJQUNqQzs7T0FFRztJQUNJLFlBQXdDO0lBQy9DOztPQUVHO0lBQ2Esa0JBQTJCO1FBWnBDLG9CQUFlLEdBQWYsZUFBZSxDQUFjO1FBSTdCLGlCQUFZLEdBQVosWUFBWSxDQUFjO1FBSTFCLGlCQUFZLEdBQVosWUFBWSxDQUE0QjtRQUkvQix1QkFBa0IsR0FBbEIsa0JBQWtCLENBQVM7UUFFM0MsSUFBSSxrQkFBa0IsRUFBRTtZQUN0QixNQUFNLElBQUksS0FBSyxDQUFDLGtGQUFrRixDQUFDLENBQUM7U0FDckc7SUFDSCxDQUFDO0lBRUQsUUFBUTtRQUNOLE9BQU8saUJBQWlCLENBQUMsSUFBSSxDQUFDLGVBQWUsRUFBRSxJQUFJLENBQUMsWUFBWSxF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