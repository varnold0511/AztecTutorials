/// <reference types="node" resolution-mode="require"/>
import { Fr } from '@aztec/foundation/fields';
import { BufferReader, Tuple } from '@aztec/foundation/serialize';
import { MAX_NEW_COMMITMENTS_PER_CALL, MAX_NEW_L2_TO_L1_MSGS_PER_CALL, MAX_NEW_NULLIFIERS_PER_CALL, MAX_PENDING_READ_REQUESTS_PER_CALL, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL, MAX_READ_REQUESTS_PER_CALL, NUM_FIELDS_PER_SHA256, RETURN_VALUES_LENGTH } from '../constants.gen.js';
import { FieldsOf } from '../utils/jsUtils.js';
import { CallContext } from './call_context.js';
import { BlockHeader } from './index.js';
import { ContractDeploymentData } from './tx_context.js';
/**
 * Public inputs to a private circuit.
 * @see abis/private_circuit_public_inputs.hpp.
 */
export declare class PrivateCircuitPublicInputs {
    /**
     * Context of the call corresponding to this private circuit execution.
     */
    callContext: CallContext;
    /**
     * Pedersen hash of function arguments.
     */
    argsHash: Fr;
    /**
     * Return values of the corresponding function call.
     */
    returnValues: Tuple<Fr, typeof RETURN_VALUES_LENGTH>;
    /**
     * Read requests created by the corresponding function call.
     */
    readRequests: Tuple<Fr, typeof MAX_READ_REQUESTS_PER_CALL>;
    /**
     * Pending read requests created by the corresponding function call.
     */
    pendingReadRequests: Tuple<Fr, typeof MAX_PENDING_READ_REQUESTS_PER_CALL>;
    /**
     * New commitments created by the corresponding function call.
     */
    newCommitments: Tuple<Fr, typeof MAX_NEW_COMMITMENTS_PER_CALL>;
    /**
     * New nullifiers created by the corresponding function call.
     */
    newNullifiers: Tuple<Fr, typeof MAX_NEW_NULLIFIERS_PER_CALL>;
    /**
     * The commitments those were nullified by the above newNullifiers.
     */
    nullifiedCommitments: Tuple<Fr, typeof MAX_NEW_NULLIFIERS_PER_CALL>;
    /**
     * Private call stack at the current kernel iteration.
     */
    privateCallStackHashes: Tuple<Fr, typeof MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>;
    /**
     * Public call stack at the current kernel iteration.
     */
    publicCallStackHashes: Tuple<Fr, typeof MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>;
    /**
     * New L2 to L1 messages created by the corresponding function call.
     */
    newL2ToL1Msgs: Tuple<Fr, typeof MAX_NEW_L2_TO_L1_MSGS_PER_CALL>;
    /**
     * Hash of the encrypted logs emitted in this function call.
     * Note: Represented as an array of 2 fields in order to fit in all of the 256 bits of sha256 hash.
     */
    encryptedLogsHash: Tuple<Fr, typeof NUM_FIELDS_PER_SHA256>;
    /**
     * Hash of the unencrypted logs emitted in this function call.
     * Note: Represented as an array of 2 fields in order to fit in all of the 256 bits of sha256 hash.
     */
    unencryptedLogsHash: Tuple<Fr, typeof NUM_FIELDS_PER_SHA256>;
    /**
     * Length of the encrypted log preimages emitted in this function call.
     * Note: Here so that the gas cost of this request can be measured by circuits, without actually needing to feed
     *       in the variable-length data.
     */
    encryptedLogPreimagesLength: Fr;
    /**
     * Length of the unencrypted log preimages emitted in this function call.
     */
    unencryptedLogPreimagesLength: Fr;
    /**
     * Historical roots of the data trees, used to calculate the block hash the user is proving against.
     */
    blockHeader: BlockHeader;
    /**
     * Deployment data of contracts being deployed in this kernel iteration.
     */
    contractDeploymentData: ContractDeploymentData;
    /**
     * Chain Id of the instance.
     */
    chainId: Fr;
    /**
     * Version of the instance.
     */
    version: Fr;
    constructor(
    /**
     * Context of the call corresponding to this private circuit execution.
     */
    callContext: CallContext, 
    /**
     * Pedersen hash of function arguments.
     */
    argsHash: Fr, 
    /**
     * Return values of the corresponding function call.
     */
    returnValues: Tuple<Fr, typeof RETURN_VALUES_LENGTH>, 
    /**
     * Read requests created by the corresponding function call.
     */
    readRequests: Tuple<Fr, typeof MAX_READ_REQUESTS_PER_CALL>, 
    /**
     * Pending read requests created by the corresponding function call.
     */
    pendingReadRequests: Tuple<Fr, typeof MAX_PENDING_READ_REQUESTS_PER_CALL>, 
    /**
     * New commitments created by the corresponding function call.
     */
    newCommitments: Tuple<Fr, typeof MAX_NEW_COMMITMENTS_PER_CALL>, 
    /**
     * New nullifiers created by the corresponding function call.
     */
    newNullifiers: Tuple<Fr, typeof MAX_NEW_NULLIFIERS_PER_CALL>, 
    /**
     * The commitments those were nullified by the above newNullifiers.
     */
    nullifiedCommitments: Tuple<Fr, typeof MAX_NEW_NULLIFIERS_PER_CALL>, 
    /**
     * Private call stack at the current kernel iteration.
     */
    privateCallStackHashes: Tuple<Fr, typeof MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>, 
    /**
     * Public call stack at the current kernel iteration.
     */
    publicCallStackHashes: Tuple<Fr, typeof MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>, 
    /**
     * New L2 to L1 messages created by the corresponding function call.
     */
    newL2ToL1Msgs: Tuple<Fr, typeof MAX_NEW_L2_TO_L1_MSGS_PER_CALL>, 
    /**
     * Hash of the encrypted logs emitted in this function call.
     * Note: Represented as an array of 2 fields in order to fit in all of the 256 bits of sha256 hash.
     */
    encryptedLogsHash: Tuple<Fr, typeof NUM_FIELDS_PER_SHA256>, 
    /**
     * Hash of the unencrypted logs emitted in this function call.
     * Note: Represented as an array of 2 fields in order to fit in all of the 256 bits of sha256 hash.
     */
    unencryptedLogsHash: Tuple<Fr, typeof NUM_FIELDS_PER_SHA256>, 
    /**
     * Length of the encrypted log preimages emitted in this function call.
     * Note: Here so that the gas cost of this request can be measured by circuits, without actually needing to feed
     *       in the variable-length data.
     */
    encryptedLogPreimagesLength: Fr, 
    /**
     * Length of the unencrypted log preimages emitted in this function call.
     */
    unencryptedLogPreimagesLength: Fr, 
    /**
     * Historical roots of the data trees, used to calculate the block hash the user is proving against.
     */
    blockHeader: BlockHeader, 
    /**
     * Deployment data of contracts being deployed in this kernel iteration.
     */
    contractDeploymentData: ContractDeploymentData, 
    /**
     * Chain Id of the instance.
     */
    chainId: Fr, 
    /**
     * Version of the instance.
     */
    version: Fr);
    /**
     * Create PrivateCircuitPublicInputs from a fields dictionary.
     * @param fields - The dictionary.
     * @returns A PrivateCircuitPublicInputs object.
     */
    static from(fields: FieldsOf<PrivateCircuitPublicInputs>): PrivateCircuitPublicInputs;
    /**
     * Deserializes from a buffer or reader.
     * @param buffer - Buffer or reader to read from.
     * @returns The deserialized instance.
     */
    static fromBuffer(buffer: Buffer | BufferReader): PrivateCircuitPublicInputs;
    /**
     * Create an empty PrivateCircuitPublicInputs.
     * @returns An empty PrivateCircuitPublicInputs object.
     */
    static empty(): PrivateCircuitPublicInputs;
    isEmpty(): boolean;
    /**
     * Serialize into a field array. Low-level utility.
     * @param fields - Object with fields.
     * @returns The array.
     */
    static getFields(fields: FieldsOf<PrivateCircuitPublicInputs>): readonly [CallContext, Fr, [Fr, Fr, Fr, Fr], [Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr], [Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr], [Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr], [Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr], [Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr], [Fr, Fr, Fr, Fr], [Fr, Fr, Fr, Fr], [Fr, Fr], [Fr, Fr], [Fr, Fr], Fr, Fr, BlockHeader, ContractDeploymentData, Fr, Fr];
    /**
     * Serialize this as a buffer.
     * @returns The buffer.
     */
    toBuffer(): Buffer;
}
//# sourceMappingURL=private_circuit_public_inputs.d.ts.map