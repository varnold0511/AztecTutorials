import { BufferReader } from '@aztec/foundation/serialize';
import { MAX_NEW_COMMITMENTS_PER_TX, MAX_NEW_CONTRACTS_PER_TX, MAX_NEW_L2_TO_L1_MSGS_PER_TX, MAX_NEW_NULLIFIERS_PER_TX, MAX_OPTIONALLY_REVEALED_DATA_LENGTH_PER_TX, MAX_PENDING_READ_REQUESTS_PER_TX, MAX_PRIVATE_CALL_STACK_LENGTH_PER_TX, MAX_PUBLIC_CALL_STACK_LENGTH_PER_TX, MAX_PUBLIC_DATA_READS_PER_TX, MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_TX, MAX_READ_REQUESTS_PER_TX, } from '../../constants.gen.js';
import { makeTuple } from '../../index.js';
import { serializeToBuffer } from '../../utils/serialize.js';
import { CallRequest } from '../call_request.js';
import { AggregationObject, AztecAddress, EthAddress, Fr, FunctionData } from '../index.js';
/**
 * The information assembled after the contract deployment was processed by the private kernel circuit.
 *
 * Note: Not to be confused with `ContractDeploymentData`.
 */
export class NewContractData {
    constructor(
    /**
     * Aztec address of the contract.
     */
    contractAddress, 
    /**
     * Ethereum address of the portal contract on L1.
     * TODO(AD): refactor this later
     * currently there is a kludge with circuits cpp as it emits an AztecAddress
     */
    portalContractAddress, 
    /**
     * Function tree root of the contract.
     */
    functionTreeRoot) {
        this.contractAddress = contractAddress;
        this.functionTreeRoot = functionTreeRoot;
        // Handle circuits emitting this as an AztecAddress
        this.portalContractAddress = new EthAddress(portalContractAddress.toBuffer());
    }
    toBuffer() {
        return serializeToBuffer(this.contractAddress, this.portalContractAddress, this.functionTreeRoot);
    }
    /**
     * Deserializes from a buffer or reader, corresponding to a write in cpp.
     * @param buffer - Buffer or reader to read from.
     * @returns The deserialized `NewContractData`.
     */
    static fromBuffer(buffer) {
        const reader = BufferReader.asReader(buffer);
        return new NewContractData(reader.readObject(AztecAddress), new EthAddress(reader.readBytes(32)), Fr.fromBuffer(reader));
    }
    static empty() {
        return new NewContractData(AztecAddress.ZERO, EthAddress.ZERO, Fr.ZERO);
    }
}
/**
 * Info which a user might want to reveal to the world.
 * Note: Currently not used (2023-05-12).
 */
export class OptionallyRevealedData {
    constructor(
    /**
     * Hash of the call stack item from which this info was originates.
     */
    callStackItemHash, 
    /**
     * Function data of a function call from which this info originates.
     */
    functionData, 
    /**
     * Verification key hash of the function call from which this info originates.
     */
    vkHash, 
    /**
     * Address of the portal contract corresponding to the L2 contract on which the function above was invoked.
     *
     * TODO(AD): refactor this later
     * currently there is a kludge with circuits cpp as it emits an AztecAddress
     */
    portalContractAddress, 
    /**
     * Whether the fee was paid from the L1 account of the user.
     */
    payFeeFromL1, 
    /**
     * Whether the fee was paid from a public account on L2.
     */
    payFeeFromPublicL2, 
    /**
     * Whether the function call was invoked from L1.
     */
    calledFromL1, 
    /**
     * Whether the function call was invoked from the public L2 account of the user.
     */
    calledFromPublicL2) {
        this.callStackItemHash = callStackItemHash;
        this.functionData = functionData;
        this.vkHash = vkHash;
        this.payFeeFromL1 = payFeeFromL1;
        this.payFeeFromPublicL2 = payFeeFromPublicL2;
        this.calledFromL1 = calledFromL1;
        this.calledFromPublicL2 = calledFromPublicL2;
        // Handle circuits emitting this as an AztecAddress
        this.portalContractAddress = EthAddress.fromField(portalContractAddress.toField());
    }
    toBuffer() {
        return serializeToBuffer(this.callStackItemHash, this.functionData, this.vkHash, this.portalContractAddress, this.payFeeFromL1, this.payFeeFromPublicL2, this.calledFromL1, this.calledFromPublicL2);
    }
    /**
     * Deserializes from a buffer or reader, corresponding to a write in cpp.
     * @param buffer - Buffer or reader to read from.
     * @returns The deserialized OptionallyRevealedData.
     */
    static fromBuffer(buffer) {
        const reader = BufferReader.asReader(buffer);
        return new OptionallyRevealedData(Fr.fromBuffer(reader), reader.readObject(FunctionData), Fr.fromBuffer(reader), new EthAddress(reader.readBytes(32)), reader.readBoolean(), reader.readBoolean(), reader.readBoolean(), reader.readBoolean());
    }
    static empty() {
        return new OptionallyRevealedData(Fr.ZERO, FunctionData.empty(), Fr.ZERO, EthAddress.ZERO, false, false, false, false);
    }
}
/**
 * Read operations from the public state tree.
 */
export class PublicDataRead {
    constructor(
    /**
     * Index of the leaf in the public data tree.
     */
    leafIndex, 
    /**
     * Returned value from the public data tree.
     */
    value, 
    /**
     * Optional side effect counter tracking position of this event in tx execution.
     */
    sideEffectCounter) {
        this.leafIndex = leafIndex;
        this.value = value;
        this.sideEffectCounter = sideEffectCounter;
    }
    static from(args) {
        return new PublicDataRead(args.leafIndex, args.value);
    }
    toBuffer() {
        return serializeToBuffer(this.leafIndex, this.value);
    }
    static fromBuffer(buffer) {
        const reader = BufferReader.asReader(buffer);
        return new PublicDataRead(Fr.fromBuffer(reader), Fr.fromBuffer(reader));
    }
    static empty() {
        return new PublicDataRead(Fr.ZERO, Fr.ZERO);
    }
    toFriendlyJSON() {
        return `Leaf=${this.leafIndex.toFriendlyJSON()}: ${this.value.toFriendlyJSON()}`;
    }
}
/**
 * Write operations on the public data tree including the previous value.
 */
export class PublicDataUpdateRequest {
    constructor(
    /**
     * Index of the leaf in the public data tree which is to be updated.
     */
    leafIndex, 
    /**
     * Old value of the leaf.
     */
    oldValue, 
    /**
     * New value of the leaf.
     */
    newValue, 
    /**
     * Optional side effect counter tracking position of this event in tx execution.
     */
    sideEffectCounter) {
        this.leafIndex = leafIndex;
        this.oldValue = oldValue;
        this.newValue = newValue;
        this.sideEffectCounter = sideEffectCounter;
    }
    static from(args) {
        return new PublicDataUpdateRequest(args.leafIndex, args.oldValue, args.newValue);
    }
    toBuffer() {
        return serializeToBuffer(this.leafIndex, this.oldValue, this.newValue);
    }
    static fromBuffer(buffer) {
        const reader = BufferReader.asReader(buffer);
        return new PublicDataUpdateRequest(Fr.fromBuffer(reader), Fr.fromBuffer(reader), Fr.fromBuffer(reader));
    }
    static empty() {
        return new PublicDataUpdateRequest(Fr.ZERO, Fr.ZERO, Fr.ZERO);
    }
    toFriendlyJSON() {
        return `Leaf=${this.leafIndex.toFriendlyJSON()}: ${this.oldValue.toFriendlyJSON()} => ${this.newValue.toFriendlyJSON()}`;
    }
}
/**
 * Data that is accumulated during the execution of the transaction.
 */
export class CombinedAccumulatedData {
    constructor(
    /**
     * Aggregated proof of all the previous kernel iterations.
     */
    aggregationObject, // Contains the aggregated proof of all previous kernel iterations
    /**
     * All the read requests made in this transaction.
     */
    readRequests, 
    /**
     * All the read requests made in this transaction.
     */
    pendingReadRequests, 
    /**
     * The new commitments made in this transaction.
     */
    newCommitments, 
    /**
     * The new nullifiers made in this transaction.
     */
    newNullifiers, 
    /**
     * The commitments which are nullified by a nullifier in the above list. For pending nullifiers, we have:
     * nullifiedCommitments[j] != 0 if and only if newNullifiers[j] nullifies nullifiedCommitments[j]
     */
    nullifiedCommitments, 
    /**
     * Current private call stack.
     */
    privateCallStack, 
    /**
     * Current public call stack.
     */
    publicCallStack, 
    /**
     * All the new L2 to L1 messages created in this transaction.
     */
    newL2ToL1Msgs, 
    /**
     * Accumulated encrypted logs hash from all the previous kernel iterations.
     * Note: Represented as a tuple of 2 fields in order to fit in all of the 256 bits of sha256 hash.
     */
    encryptedLogsHash, 
    /**
     * Accumulated unencrypted logs hash from all the previous kernel iterations.
     * Note: Represented as a tuple of 2 fields in order to fit in all of the 256 bits of sha256 hash.
     */
    unencryptedLogsHash, 
    /**
     * Total accumulated length of the encrypted log preimages emitted in all the previous kernel iterations
     */
    encryptedLogPreimagesLength, 
    /**
     * Total accumulated length of the unencrypted log preimages emitted in all the previous kernel iterations
     */
    unencryptedLogPreimagesLength, 
    /**
     * All the new contracts deployed in this transaction.
     */
    newContracts, 
    /**
     * All the optionally revealed data in this transaction.
     */
    optionallyRevealedData, 
    /**
     * All the public data update requests made in this transaction.
     */
    publicDataUpdateRequests, 
    /**
     * All the public data reads made in this transaction.
     */
    publicDataReads) {
        this.aggregationObject = aggregationObject;
        this.readRequests = readRequests;
        this.pendingReadRequests = pendingReadRequests;
        this.newCommitments = newCommitments;
        this.newNullifiers = newNullifiers;
        this.nullifiedCommitments = nullifiedCommitments;
        this.privateCallStack = privateCallStack;
        this.publicCallStack = publicCallStack;
        this.newL2ToL1Msgs = newL2ToL1Msgs;
        this.encryptedLogsHash = encryptedLogsHash;
        this.unencryptedLogsHash = unencryptedLogsHash;
        this.encryptedLogPreimagesLength = encryptedLogPreimagesLength;
        this.unencryptedLogPreimagesLength = unencryptedLogPreimagesLength;
        this.newContracts = newContracts;
        this.optionallyRevealedData = optionallyRevealedData;
        this.publicDataUpdateRequests = publicDataUpdateRequests;
        this.publicDataReads = publicDataReads;
    }
    toBuffer() {
        return serializeToBuffer(this.aggregationObject, this.readRequests, this.pendingReadRequests, this.newCommitments, this.newNullifiers, this.nullifiedCommitments, this.privateCallStack, this.publicCallStack, this.newL2ToL1Msgs, this.encryptedLogsHash, this.unencryptedLogsHash, this.encryptedLogPreimagesLength, this.unencryptedLogPreimagesLength, this.newContracts, this.optionallyRevealedData, this.publicDataUpdateRequests, this.publicDataReads);
    }
    toString() {
        return this.toBuffer().toString();
    }
    /**
     * Deserializes from a buffer or reader, corresponding to a write in cpp.
     * @param buffer - Buffer or reader to read from.
     * @returns Deserialized object.
     */
    static fromBuffer(buffer) {
        const reader = BufferReader.asReader(buffer);
        return new CombinedAccumulatedData(reader.readObject(AggregationObject), reader.readArray(MAX_READ_REQUESTS_PER_TX, Fr), reader.readArray(MAX_PENDING_READ_REQUESTS_PER_TX, Fr), reader.readArray(MAX_NEW_COMMITMENTS_PER_TX, Fr), reader.readArray(MAX_NEW_NULLIFIERS_PER_TX, Fr), reader.readArray(MAX_NEW_NULLIFIERS_PER_TX, Fr), reader.readArray(MAX_PRIVATE_CALL_STACK_LENGTH_PER_TX, CallRequest), reader.readArray(MAX_PUBLIC_CALL_STACK_LENGTH_PER_TX, CallRequest), reader.readArray(MAX_NEW_L2_TO_L1_MSGS_PER_TX, Fr), reader.readArray(2, Fr), reader.readArray(2, Fr), Fr.fromBuffer(reader), Fr.fromBuffer(reader), reader.readArray(MAX_NEW_CONTRACTS_PER_TX, NewContractData), reader.readArray(MAX_OPTIONALLY_REVEALED_DATA_LENGTH_PER_TX, OptionallyRevealedData), reader.readArray(MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_TX, PublicDataUpdateRequest), reader.readArray(MAX_PUBLIC_DATA_READS_PER_TX, PublicDataRead));
    }
    static fromFinalAccumulatedData(finalData) {
        return new CombinedAccumulatedData(finalData.aggregationObject, makeTuple(MAX_READ_REQUESTS_PER_TX, Fr.zero), makeTuple(MAX_PENDING_READ_REQUESTS_PER_TX, Fr.zero), finalData.newCommitments, finalData.newNullifiers, finalData.nullifiedCommitments, finalData.privateCallStack, finalData.publicCallStack, finalData.newL2ToL1Msgs, finalData.encryptedLogsHash, finalData.unencryptedLogsHash, finalData.encryptedLogPreimagesLength, finalData.unencryptedLogPreimagesLength, finalData.newContracts, finalData.optionallyRevealedData, makeTuple(MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_TX, PublicDataUpdateRequest.empty), makeTuple(MAX_PUBLIC_DATA_READS_PER_TX, PublicDataRead.empty));
    }
    /**
     * Deserializes from a string, corresponding to a write in cpp.
     * @param str - String to read from.
     * @returns Deserialized object.
     */
    static fromString(str) {
        return CombinedAccumulatedData.fromBuffer(Buffer.from(str, 'hex'));
    }
    static empty() {
        return new CombinedAccumulatedData(AggregationObject.makeFake(), makeTuple(MAX_READ_REQUESTS_PER_TX, Fr.zero), makeTuple(MAX_PENDING_READ_REQUESTS_PER_TX, Fr.zero), makeTuple(MAX_NEW_COMMITMENTS_PER_TX, Fr.zero), makeTuple(MAX_NEW_NULLIFIERS_PER_TX, Fr.zero), makeTuple(MAX_NEW_NULLIFIERS_PER_TX, Fr.zero), makeTuple(MAX_PRIVATE_CALL_STACK_LENGTH_PER_TX, CallRequest.empty), makeTuple(MAX_PUBLIC_CALL_STACK_LENGTH_PER_TX, CallRequest.empty), makeTuple(MAX_NEW_L2_TO_L1_MSGS_PER_TX, Fr.zero), makeTuple(2, Fr.zero), makeTuple(2, Fr.zero), Fr.zero(), Fr.zero(), makeTuple(MAX_NEW_CONTRACTS_PER_TX, NewContractData.empty), makeTuple(MAX_OPTIONALLY_REVEALED_DATA_LENGTH_PER_TX, OptionallyRevealedData.empty), makeTuple(MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_TX, PublicDataUpdateRequest.empty), makeTuple(MAX_PUBLIC_DATA_READS_PER_TX, PublicDataRead.empty));
    }
}
/**
 * Specific accumulated data structure for the final ordering private kernel circuit. It is included
 *  in the final public inputs of private kernel circuit.
 */
export class FinalAccumulatedData {
    constructor(
    /**
     * Aggregated proof of all the previous kernel iterations.
     */
    aggregationObject, // Contains the aggregated proof of all previous kernel iterations
    /**
     * The new commitments made in this transaction.
     */
    newCommitments, 
    /**
     * The new nullifiers made in this transaction.
     */
    newNullifiers, 
    /**
     * The commitments which are nullified by a nullifier in the above list. For pending nullifiers, we have:
     * nullifiedCommitments[j] != 0 if and only if newNullifiers[j] nullifies nullifiedCommitments[j]
     */
    nullifiedCommitments, 
    /**
     * Current private call stack.
     * TODO(#3417): Given this field must empty, should we just remove it?
     */
    privateCallStack, 
    /**
     * Current public call stack.
     */
    publicCallStack, 
    /**
     * All the new L2 to L1 messages created in this transaction.
     */
    newL2ToL1Msgs, 
    /**
     * Accumulated encrypted logs hash from all the previous kernel iterations.
     * Note: Represented as a tuple of 2 fields in order to fit in all of the 256 bits of sha256 hash.
     */
    encryptedLogsHash, 
    /**
     * Accumulated unencrypted logs hash from all the previous kernel iterations.
     * Note: Represented as a tuple of 2 fields in order to fit in all of the 256 bits of sha256 hash.
     */
    unencryptedLogsHash, 
    /**
     * Total accumulated length of the encrypted log preimages emitted in all the previous kernel iterations
     */
    encryptedLogPreimagesLength, 
    /**
     * Total accumulated length of the unencrypted log preimages emitted in all the previous kernel iterations
     */
    unencryptedLogPreimagesLength, 
    /**
     * All the new contracts deployed in this transaction.
     */
    newContracts, 
    /**
     * All the optionally revealed data in this transaction.
     */
    optionallyRevealedData) {
        this.aggregationObject = aggregationObject;
        this.newCommitments = newCommitments;
        this.newNullifiers = newNullifiers;
        this.nullifiedCommitments = nullifiedCommitments;
        this.privateCallStack = privateCallStack;
        this.publicCallStack = publicCallStack;
        this.newL2ToL1Msgs = newL2ToL1Msgs;
        this.encryptedLogsHash = encryptedLogsHash;
        this.unencryptedLogsHash = unencryptedLogsHash;
        this.encryptedLogPreimagesLength = encryptedLogPreimagesLength;
        this.unencryptedLogPreimagesLength = unencryptedLogPreimagesLength;
        this.newContracts = newContracts;
        this.optionallyRevealedData = optionallyRevealedData;
    }
    toBuffer() {
        return serializeToBuffer(this.aggregationObject, this.newCommitments, this.newNullifiers, this.nullifiedCommitments, this.privateCallStack, this.publicCallStack, this.newL2ToL1Msgs, this.encryptedLogsHash, this.unencryptedLogsHash, this.encryptedLogPreimagesLength, this.unencryptedLogPreimagesLength, this.newContracts, this.optionallyRevealedData);
    }
    toString() {
        return this.toBuffer().toString();
    }
    /**
     * Deserializes from a buffer or reader, corresponding to a write in cpp.
     * @param buffer - Buffer or reader to read from.
     * @returns Deserialized object.
     */
    static fromBuffer(buffer) {
        const reader = BufferReader.asReader(buffer);
        return new FinalAccumulatedData(reader.readObject(AggregationObject), reader.readArray(MAX_NEW_COMMITMENTS_PER_TX, Fr), reader.readArray(MAX_NEW_NULLIFIERS_PER_TX, Fr), reader.readArray(MAX_NEW_NULLIFIERS_PER_TX, Fr), reader.readArray(MAX_PRIVATE_CALL_STACK_LENGTH_PER_TX, CallRequest), reader.readArray(MAX_PUBLIC_CALL_STACK_LENGTH_PER_TX, CallRequest), reader.readArray(MAX_NEW_L2_TO_L1_MSGS_PER_TX, Fr), reader.readArray(2, Fr), reader.readArray(2, Fr), Fr.fromBuffer(reader), Fr.fromBuffer(reader), reader.readArray(MAX_NEW_CONTRACTS_PER_TX, NewContractData), reader.readArray(MAX_OPTIONALLY_REVEALED_DATA_LENGTH_PER_TX, OptionallyRevealedData));
    }
    /**
     * Deserializes from a string, corresponding to a write in cpp.
     * @param str - String to read from.
     * @returns Deserialized object.
     */
    static fromString(str) {
        return FinalAccumulatedData.fromBuffer(Buffer.from(str, 'hex'));
    }
    static empty() {
        return new FinalAccumulatedData(AggregationObject.makeFake(), makeTuple(MAX_NEW_COMMITMENTS_PER_TX, Fr.zero), makeTuple(MAX_NEW_NULLIFIERS_PER_TX, Fr.zero), makeTuple(MAX_NEW_NULLIFIERS_PER_TX, Fr.zero), makeTuple(MAX_PRIVATE_CALL_STACK_LENGTH_PER_TX, CallRequest.empty), makeTuple(MAX_PUBLIC_CALL_STACK_LENGTH_PER_TX, CallRequest.empty), makeTuple(MAX_NEW_L2_TO_L1_MSGS_PER_TX, Fr.zero), makeTuple(2, Fr.zero), makeTuple(2, Fr.zero), Fr.zero(), Fr.zero(), makeTuple(MAX_NEW_CONTRACTS_PER_TX, NewContractData.empty), makeTuple(MAX_OPTIONALLY_REVEALED_DATA_LENGTH_PER_TX, OptionallyRevealedData.empty));
    }
}
//# sourceMappingURL=data:application/json;base64,