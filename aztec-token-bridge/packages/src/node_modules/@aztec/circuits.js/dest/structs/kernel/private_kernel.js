import { Fr } from '@aztec/foundation/fields';
import { BufferReader } from '@aztec/foundation/serialize';
import { CONTRACT_TREE_HEIGHT, FUNCTION_TREE_HEIGHT, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL, MAX_READ_REQUESTS_PER_CALL, } from '../../constants.gen.js';
import { serializeToBuffer } from '../../utils/serialize.js';
import { CallRequest } from '../call_request.js';
import { PrivateCallStackItem } from '../call_stack_item.js';
import { MembershipWitness } from '../membership_witness.js';
import { Proof } from '../proof.js';
import { ReadRequestMembershipWitness } from '../read_request_membership_witness.js';
import { VerificationKey } from '../verification_key.js';
import { PreviousKernelData } from './previous_kernel_data.js';
/**
 * Private call data.
 */
export class PrivateCallData {
    constructor(
    /**
     * The call stack item currently being processed.
     */
    callStackItem, 
    /**
     * Other private call stack items to be processed.
     */
    privateCallStack, 
    /**
     * Other public call stack items to be processed.
     */
    publicCallStack, 
    /**
     * The proof of the execution of this private call.
     */
    proof, 
    /**
     * The verification key for the function being invoked.
     */
    vk, 
    /**
     * The membership witness for the function leaf corresponding to the function being invoked.
     */
    functionLeafMembershipWitness, 
    /**
     * The membership witness for the contract leaf corresponding to the contract on which the function is being
     * invoked.
     */
    contractLeafMembershipWitness, 
    /**
     * The membership witnesses for read requests created by the function being invoked.
     */
    readRequestMembershipWitnesses, 
    /**
     * The address of the portal contract corresponding to the contract on which the function is being invoked.
     */
    portalContractAddress, 
    /**
     * The hash of the ACIR of the function being invoked.
     */
    acirHash) {
        this.callStackItem = callStackItem;
        this.privateCallStack = privateCallStack;
        this.publicCallStack = publicCallStack;
        this.proof = proof;
        this.vk = vk;
        this.functionLeafMembershipWitness = functionLeafMembershipWitness;
        this.contractLeafMembershipWitness = contractLeafMembershipWitness;
        this.readRequestMembershipWitnesses = readRequestMembershipWitnesses;
        this.portalContractAddress = portalContractAddress;
        this.acirHash = acirHash;
    }
    /**
     * Serialize into a field array. Low-level utility.
     * @param fields - Object with fields.
     * @returns The array.
     */
    static getFields(fields) {
        return [
            fields.callStackItem,
            fields.privateCallStack,
            fields.publicCallStack,
            fields.proof,
            fields.vk,
            fields.functionLeafMembershipWitness,
            fields.contractLeafMembershipWitness,
            fields.readRequestMembershipWitnesses,
            fields.portalContractAddress,
            fields.acirHash,
        ];
    }
    static from(fields) {
        return new PrivateCallData(...PrivateCallData.getFields(fields));
    }
    /**
     * Serialize this as a buffer.
     * @returns The buffer.
     */
    toBuffer() {
        return serializeToBuffer(...PrivateCallData.getFields(this));
    }
    /**
     * Deserializes from a buffer or reader.
     * @param buffer - Buffer or reader to read from.
     * @returns The deserialized instance.
     */
    static fromBuffer(buffer) {
        const reader = BufferReader.asReader(buffer);
        return new PrivateCallData(reader.readObject(PrivateCallStackItem), reader.readArray(MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, CallRequest), reader.readArray(MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL, CallRequest), reader.readObject(Proof), reader.readObject(VerificationKey), reader.readObject(MembershipWitness.deserializer(FUNCTION_TREE_HEIGHT)), reader.readObject(MembershipWitness.deserializer(CONTRACT_TREE_HEIGHT)), reader.readArray(MAX_READ_REQUESTS_PER_CALL, ReadRequestMembershipWitness), reader.readObject(Fr), reader.readObject(Fr));
    }
}
/**
 * Input to the private kernel circuit - initial call.
 */
export class PrivateKernelInputsInit {
    constructor(
    /**
     * The transaction request which led to the creation of these inputs.
     */
    txRequest, 
    /**
     * Private calldata corresponding to this iteration of the kernel.
     */
    privateCall) {
        this.txRequest = txRequest;
        this.privateCall = privateCall;
    }
    /**
     * Serialize this as a buffer.
     * @returns The buffer.
     */
    toBuffer() {
        return serializeToBuffer(this.txRequest, this.privateCall);
    }
}
/**
 * Input to the private kernel circuit - Inner call.
 */
export class PrivateKernelInputsInner {
    constructor(
    /**
     * The previous kernel data (dummy if this is the first kernel).
     */
    previousKernel, 
    /**
     * Private calldata corresponding to this iteration of the kernel.
     */
    privateCall) {
        this.previousKernel = previousKernel;
        this.privateCall = privateCall;
    }
    /**
     * Serialize this as a buffer.
     * @returns The buffer.
     */
    toBuffer() {
        return serializeToBuffer(this.previousKernel, this.privateCall);
    }
    /**
     * Deserializes from a buffer or reader.
     * @param buffer - Buffer or reader to read from.
     * @returns The deserialized instance.
     */
    static fromBuffer(buffer) {
        const reader = BufferReader.asReader(buffer);
        return new PrivateKernelInputsInner(reader.readObject(PreviousKernelData), reader.readObject(PrivateCallData));
    }
}
/**
 * Input to the private kernel circuit - Final ordering call.
 */
export class PrivateKernelInputsOrdering {
    constructor(
    /**
     * The previous kernel data
     */
    previousKernel, 
    /**
     * Contains hints for the transient read requests to localize corresponding commitments.
     */
    readCommitmentHints, 
    /**
     * Contains hints for the transient nullifiers to localize corresponding commitments.
     */
    nullifierCommitmentHints) {
        this.previousKernel = previousKernel;
        this.readCommitmentHints = readCommitmentHints;
        this.nullifierCommitmentHints = nullifierCommitmentHints;
    }
    /**
     * Serialize this as a buffer.
     * @returns The buffer.
     */
    toBuffer() {
        return serializeToBuffer(this.previousKernel, this.readCommitmentHints);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJpdmF0ZV9rZXJuZWwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvc3RydWN0cy9rZXJuZWwvcHJpdmF0ZV9rZXJuZWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLEVBQUUsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQzlDLE9BQU8sRUFBRSxZQUFZLEVBQVMsTUFBTSw2QkFBNkIsQ0FBQztBQUVsRSxPQUFPLEVBQ0wsb0JBQW9CLEVBQ3BCLG9CQUFvQixFQUVwQixzQ0FBc0MsRUFDdEMscUNBQXFDLEVBQ3JDLDBCQUEwQixHQUUzQixNQUFNLHdCQUF3QixDQUFDO0FBRWhDLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQzdELE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUNqRCxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUM3RCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUM3RCxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQ3BDLE9BQU8sRUFBRSw0QkFBNEIsRUFBRSxNQUFNLHVDQUF1QyxDQUFDO0FBRXJGLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUN6RCxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUUvRDs7R0FFRztBQUNILE1BQU0sT0FBTyxlQUFlO0lBQzFCO0lBQ0U7O09BRUc7SUFDSSxhQUFtQztJQUMxQzs7T0FFRztJQUNJLGdCQUFtRjtJQUMxRjs7T0FFRztJQUNJLGVBQWlGO0lBQ3hGOztPQUVHO0lBQ0ksS0FBWTtJQUNuQjs7T0FFRztJQUNJLEVBQW1CO0lBQzFCOztPQUVHO0lBQ0ksNkJBQTZFO0lBQ3BGOzs7T0FHRztJQUNJLDZCQUE2RTtJQUNwRjs7T0FFRztJQUNJLDhCQUFzRztJ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