import { Fr } from '@aztec/foundation/fields';
import { BufferReader } from '@aztec/foundation/serialize';
import { serializeToBuffer } from '../../utils/serialize.js';
import { AggregationObject } from '../aggregation_object.js';
import { GlobalVariables } from '../global_variables.js';
import { AppendOnlyTreeSnapshot } from './append_only_tree_snapshot.js';
/**
 * Represents inputs of the root rollup circuit.
 */
export class RootRollupInputs {
    constructor(
    /**
     * The previous rollup data.
     * Note: Root rollup circuit is the latest circuit the chain of circuits and the previous rollup data is the data
     * from 2 merge or base rollup circuits.
     */
    previousRollupData, 
    /**
     * New L1 to L2 messages.
     */
    newL1ToL2Messages, 
    /**
     * Sibling path of the new L1 to L2 message tree root.
     */
    newL1ToL2MessagesTreeRootSiblingPath, 
    /**
     * Snapshot of the L1 to L2 message tree at the start of the rollup.
     */
    startL1ToL2MessagesTreeSnapshot, 
    /**
     * Snapshot of the historical block roots tree at the start of the rollup.
     */
    startArchiveSnapshot, 
    /**
     * Sibling path of the new block tree root.
     */
    newArchiveSiblingPath) {
        this.previousRollupData = previousRollupData;
        this.newL1ToL2Messages = newL1ToL2Messages;
        this.newL1ToL2MessagesTreeRootSiblingPath = newL1ToL2MessagesTreeRootSiblingPath;
        this.startL1ToL2MessagesTreeSnapshot = startL1ToL2MessagesTreeSnapshot;
        this.startArchiveSnapshot = startArchiveSnapshot;
        this.newArchiveSiblingPath = newArchiveSiblingPath;
    }
    toBuffer() {
        return serializeToBuffer(...RootRollupInputs.getFields(this));
    }
    static from(fields) {
        return new RootRollupInputs(...RootRollupInputs.getFields(fields));
    }
    static getFields(fields) {
        return [
            fields.previousRollupData,
            fields.newL1ToL2Messages,
            fields.newL1ToL2MessagesTreeRootSiblingPath,
            fields.startL1ToL2MessagesTreeSnapshot,
            fields.startArchiveSnapshot,
            fields.newArchiveSiblingPath,
        ];
    }
}
/**
 * Represents public inputs of the root rollup circuit.
 *
 * NOTE: in practice, we'll hash all of this up into a single public input, for cheap on-chain verification.
 */
export class RootRollupPublicInputs {
    constructor(
    /**
     * Native aggregation state at the end of the rollup.
     */
    endAggregationObject, 
    /**
     * Global variables of the L2 block.
     */
    globalVariables, 
    /**
     * Snapshot of the note hash tree at the start of the rollup.
     */
    startNoteHashTreeSnapshot, 
    /**
     * Snapshot of the note hash tree at the end of the rollup.
     */
    endNoteHashTreeSnapshot, 
    /**
     * Snapshot of the nullifier tree at the start of the rollup.
     */
    startNullifierTreeSnapshot, 
    /**
     * Snapshot of the nullifier tree at the end of the rollup.
     */
    endNullifierTreeSnapshot, 
    /**
     * Snapshot of the contract tree at the start of the rollup.
     */
    startContractTreeSnapshot, 
    /**
     * Snapshot of the contract tree at the end of the rollup.
     */
    endContractTreeSnapshot, 
    /**
     * Root of the public data tree at the start of the rollup.
     */
    startPublicDataTreeRoot, 
    /**
     * Root of the public data tree at the end of the rollup.
     */
    endPublicDataTreeRoot, 
    /**
     * Snapshot of the L1 to L2 message tree at the start of the rollup.
     */
    startL1ToL2MessagesTreeSnapshot, 
    /**
     * Snapshot of the L1 to L2 message tree at the end of the rollup.
     */
    endL1ToL2MessagesTreeSnapshot, 
    /**
     * Snapshot of the blocks tree roots tree at the start of the rollup.
     */
    startArchiveSnapshot, 
    /**
     * Snapshot of the blocks tree roots tree at the end of the rollup.
     */
    endArchiveSnapshot, 
    /**
     * Hash of the calldata.
     */
    calldataHash, 
    /**
     * Hash of the L1 to L2 messages.
     */
    l1ToL2MessagesHash) {
        this.endAggregationObject = endAggregationObject;
        this.globalVariables = globalVariables;
        this.startNoteHashTreeSnapshot = startNoteHashTreeSnapshot;
        this.endNoteHashTreeSnapshot = endNoteHashTreeSnapshot;
        this.startNullifierTreeSnapshot = startNullifierTreeSnapshot;
        this.endNullifierTreeSnapshot = endNullifierTreeSnapshot;
        this.startContractTreeSnapshot = startContractTreeSnapshot;
        this.endContractTreeSnapshot = endContractTreeSnapshot;
        this.startPublicDataTreeRoot = startPublicDataTreeRoot;
        this.endPublicDataTreeRoot = endPublicDataTreeRoot;
        this.startL1ToL2MessagesTreeSnapshot = startL1ToL2MessagesTreeSnapshot;
        this.endL1ToL2MessagesTreeSnapshot = endL1ToL2MessagesTreeSnapshot;
        this.startArchiveSnapshot = startArchiveSnapshot;
        this.endArchiveSnapshot = endArchiveSnapshot;
        this.calldataHash = calldataHash;
        this.l1ToL2MessagesHash = l1ToL2MessagesHash;
    }
    static getFields(fields) {
        return [
            fields.endAggregationObject,
            fields.globalVariables,
            fields.startNoteHashTreeSnapshot,
            fields.endNoteHashTreeSnapshot,
            fields.startNullifierTreeSnapshot,
            fields.endNullifierTreeSnapshot,
            fields.startContractTreeSnapshot,
            fields.endContractTreeSnapshot,
            fields.startPublicDataTreeRoot,
            fields.endPublicDataTreeRoot,
            fields.startL1ToL2MessagesTreeSnapshot,
            fields.endL1ToL2MessagesTreeSnapshot,
            fields.startArchiveSnapshot,
            fields.endArchiveSnapshot,
            fields.calldataHash,
            fields.l1ToL2MessagesHash,
        ];
    }
    toBuffer() {
        return serializeToBuffer(...RootRollupPublicInputs.getFields(this));
    }
    static from(fields) {
        return new RootRollupPublicInputs(...RootRollupPublicInputs.getFields(fields));
    }
    /**
     * Returns the sha256 hash of the calldata.
     * @returns The sha256 hash of the calldata.
     */
    sha256CalldataHash() {
        const high = this.calldataHash[0].toBuffer();
        const low = this.calldataHash[1].toBuffer();
        const hash = Buffer.alloc(32);
        for (let i = 0; i < 16; i++) {
            hash[i] = high[i + 16];
            hash[i + 16] = low[i + 16];
        }
        return hash;
    }
    /**
     * Deserializes a buffer into a `RootRollupPublicInputs` object.
     * @param buffer - The buffer to deserialize.
     * @returns The deserialized `RootRollupPublicInputs` object.
     */
    static fromBuffer(buffer) {
        const reader = BufferReader.asReader(buffer);
        return new RootRollupPublicInputs(reader.readObject(AggregationObject), reader.readObject(GlobalVariables), reader.readObject(AppendOnlyTreeSnapshot), reader.readObject(AppendOnlyTreeSnapshot), reader.readObject(AppendOnlyTreeSnapshot), reader.readObject(AppendOnlyTreeSnapshot), reader.readObject(AppendOnlyTreeSnapshot), reader.readObject(AppendOnlyTreeSnapshot), Fr.fromBuffer(reader), Fr.fromBuffer(reader), reader.readObject(AppendOnlyTreeSnapshot), reader.readObject(AppendOnlyTreeSnapshot), reader.readObject(AppendOnlyTreeSnapshot), reader.readObject(AppendOnlyTreeSnapshot), [Fr.fromBuffer(reader), Fr.fromBuffer(reader)], [Fr.fromBuffer(reader), Fr.fromBuffer(reader)]);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm9vdF9yb2xsdXAuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvc3RydWN0cy9yb2xsdXAvcm9vdF9yb2xsdXAudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLEVBQUUsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQzlDLE9BQU8sRUFBRSxZQUFZLEVBQVMsTUFBTSw2QkFBNkIsQ0FBQztBQVFsRSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUM3RCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUM3RCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDekQsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFHeEU7O0dBRUc7QUFDSCxNQUFNLE9BQU8sZ0JBQWdCO0lBQzNCO0lBQ0U7Ozs7T0FJRztJQUNJLGtCQUE0RDtJQUNuRTs7T0FFRztJQUNJLGlCQUF3RTtJQUMvRTs7T0FFRztJQUNJLG9DQUFnRztJQUN2Rzs7T0FFRztJQUNJLCtCQUF1RDtJQUM5RDs7T0FFRztJQUNJLG9CQUE0QztJQUNuRDs7T0FFRztJQUNJLHFCQUF1RDtRQXBCdkQsdUJBQWtCLEdBQWxCLGtCQUFrQixDQUEwQztRQUk1RCxzQkFBaUIsR0FBakIsaUJBQWlCLENBQXVEO1FBSXhFLHlDQUFvQyxHQUFwQyxvQ0FBb0MsQ0FBNEQ7UUFJaEcsb0NBQStCLEdBQS9CLCtCQUErQixDQUF3QjtRQUl2RCx5QkFBb0IsR0FBcEIsb0JBQW9CLENBQXdCO1FBSTVDLDBCQUFxQixHQUFyQixxQkFBcUIsQ0FBa0M7SUFDN0QsQ0FBQztJQUVKLFFBQVE7UUFDTixPQUFPLGlCQUFpQixDQUFDLEdBQUcsZ0JBQWdCLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7SUFDaEUsQ0FBQztJQUVELE1BQU0sQ0FBQyxJQUFJLENBQUMs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