/// <reference types="node" resolution-mode="require"/>
import { BufferReader } from '@aztec/foundation/serialize';
import { FieldsOf, PublicKey } from '../index.js';
import { AztecAddress, EthAddress, Fr } from './index.js';
/**
 * Contract deployment data in a TxContext
 * cpp/src/aztec3/circuits/abis/contract_deployment_data.hpp.
 *
 * Not to be confused with NewContractData.
 */
export declare class ContractDeploymentData {
    /** Public key of the contract deployer (used when deploying account contracts). */
    deployerPublicKey: PublicKey;
    /** Hash of the constructor verification key. */
    constructorVkHash: Fr;
    /** Function tree root. */
    functionTreeRoot: Fr;
    /** Contract address salt (used when deriving a contract address). */
    contractAddressSalt: Fr;
    /** Ethereum address of the portal contract on L1. */
    portalContractAddress: EthAddress;
    constructor(
    /** Public key of the contract deployer (used when deploying account contracts). */
    deployerPublicKey: PublicKey, 
    /** Hash of the constructor verification key. */
    constructorVkHash: Fr, 
    /** Function tree root. */
    functionTreeRoot: Fr, 
    /** Contract address salt (used when deriving a contract address). */
    contractAddressSalt: Fr, 
    /**
     * Ethereum address of the portal contract on L1.
     * TODO(AD): union type kludge due to cbind compiler having special needs
     */
    portalContractAddress: EthAddress | AztecAddress);
    toBuffer(): Buffer;
    /**
     * Returns an empty ContractDeploymentData.
     * @returns The empty ContractDeploymentData.
     */
    static empty(): ContractDeploymentData;
    isEmpty(): boolean;
    /**
     * Deserializes contract deployment data rom a buffer or reader.
     * @param buffer - Buffer to read from.
     * @returns The deserialized ContractDeploymentData.
     */
    static fromBuffer(buffer: Buffer | BufferReader): ContractDeploymentData;
}
/**
 * Transaction context.
 * @see cpp/src/aztec3/circuits/abis/tx_context.hpp.
 */
export declare class TxContext {
    /**
     * Whether this is a fee paying tx. If not other tx in a bundle will pay the fee.
     * TODO(#3417): Remove fee and rebate payment fields.
     */
    isFeePaymentTx: boolean;
    /**
     * Indicates whether this a gas rebate payment tx.
     *
     * NOTE: The following is a WIP and it is likely to change in the future.
     * Explanation: Each tx is actually 3 txs in one: a fee-paying tx, the actual tx you want to execute, and a rebate
     * tx. The fee-paying tx pays some `max_fee = gas_price * gas_limit`. Then the actual tx will cost an amount of gas
     * to execute (actual_fee = gas_price * gas_used). Then the rebate tx returns `max_fee - actual_fee` back to
     * the user.
     */
    isRebatePaymentTx: boolean;
    /**
     * Whether this is a contract deployment tx.
     */
    isContractDeploymentTx: boolean;
    /**
     * Contract deployment data.
     */
    contractDeploymentData: ContractDeploymentData;
    /**
     * Chain ID of the transaction. Here for replay protection.
     */
    chainId: Fr;
    /**
     * Version of the transaction. Here for replay protection.
     */
    version: Fr;
    constructor(
    /**
     * Whether this is a fee paying tx. If not other tx in a bundle will pay the fee.
     * TODO(#3417): Remove fee and rebate payment fields.
     */
    isFeePaymentTx: boolean, 
    /**
     * Indicates whether this a gas rebate payment tx.
     *
     * NOTE: The following is a WIP and it is likely to change in the future.
     * Explanation: Each tx is actually 3 txs in one: a fee-paying tx, the actual tx you want to execute, and a rebate
     * tx. The fee-paying tx pays some `max_fee = gas_price * gas_limit`. Then the actual tx will cost an amount of gas
     * to execute (actual_fee = gas_price * gas_used). Then the rebate tx returns `max_fee - actual_fee` back to
     * the user.
     */
    isRebatePaymentTx: boolean, 
    /**
     * Whether this is a contract deployment tx.
     */
    isContractDeploymentTx: boolean, 
    /**
     * Contract deployment data.
     */
    contractDeploymentData: ContractDeploymentData, 
    /**
     * Chain ID of the transaction. Here for replay protection.
     */
    chainId: Fr, 
    /**
     * Version of the transaction. Here for replay protection.
     */
    version: Fr);
    /**
     * Serialize as a buffer.
     * @returns The buffer.
     */
    toBuffer(): Buffer;
    /**
     * Deserializes TxContext from a buffer or reader.
     * @param buffer - Buffer to read from.
     * @returns The TxContext.
     */
    static fromBuffer(buffer: Buffer | BufferReader): TxContext;
    static empty(chainId?: Fr | number, version?: Fr | number): TxContext;
    isEmpty(): boolean;
    /**
     * Create a new instance from a fields dictionary.
     * @param fields - The dictionary.
     * @returns A new instance.
     */
    static from(fields: FieldsOf<TxContext>): TxContext;
    /**
     * Serialize into a field array. Low-level utility.
     * @param fields - Object with fields.
     * @returns The array.
     */
    static getFields(fields: FieldsOf<TxContext>): readonly [boolean, boolean, boolean, ContractDeploymentData, Fr, Fr];
}
//# sourceMappingURL=tx_context.d.ts.map