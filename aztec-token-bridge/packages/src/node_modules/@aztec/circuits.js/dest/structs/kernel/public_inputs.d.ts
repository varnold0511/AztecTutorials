/// <reference types="node" resolution-mode="require"/>
import { BufferReader } from '@aztec/foundation/serialize';
import { CombinedAccumulatedData } from './combined_accumulated_data.js';
import { CombinedConstantData } from './combined_constant_data.js';
/**
 * Public inputs of the public and private kernel circuits.
 */
export declare class KernelCircuitPublicInputs {
    /**
     * Data accumulated from both public and private circuits.
     */
    end: CombinedAccumulatedData;
    /**
     * Data which is not modified by the circuits.
     */
    constants: CombinedConstantData;
    /**
     * Indicates whether the input is for a private or public kernel.
     */
    isPrivate: boolean;
    constructor(
    /**
     * Data accumulated from both public and private circuits.
     */
    end: CombinedAccumulatedData, 
    /**
     * Data which is not modified by the circuits.
     */
    constants: CombinedConstantData, 
    /**
     * Indicates whether the input is for a private or public kernel.
     */
    isPrivate: boolean);
    toBuffer(): Buffer;
    /**
     * Deserializes from a buffer or reader, corresponding to a write in cpp.
     * @param buffer - Buffer or reader to read from.
     * @returns A new instance of KernelCircuitPublicInputs.
     */
    static fromBuffer(buffer: Buffer | BufferReader): KernelCircuitPublicInputs;
    static empty(): KernelCircuitPublicInputs;
}
/**
 * Public inputs of the public kernel circuit.
 */
export declare class PublicKernelPublicInputs extends KernelCircuitPublicInputs {
    constructor(end: CombinedAccumulatedData, constants: CombinedConstantData);
    static empty(): PublicKernelPublicInputs;
}
/**
 * Public inputs of the private kernel circuit.
 */
export declare class PrivateKernelPublicInputs extends KernelCircuitPublicInputs {
    constructor(end: CombinedAccumulatedData, constants: CombinedConstantData);
    static empty(): PrivateKernelPublicInputs;
}
//# sourceMappingURL=public_inputs.d.ts.map