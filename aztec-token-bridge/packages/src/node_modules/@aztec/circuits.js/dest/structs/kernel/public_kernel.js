import { MAX_PUBLIC_DATA_READS_PER_TX, MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_TX, } from '../../constants.gen.js';
import { assertMemberLength } from '../../utils/jsUtils.js';
import { serializeToBuffer } from '../../utils/serialize.js';
/**
 * Inputs to the public kernel circuit.
 */
export class PublicKernelInputs {
    constructor(
    /**
     * Kernels are recursive and this is the data from the previous kernel.
     */
    previousKernel, 
    /**
     * Public calldata assembled from the execution result and proof.
     */
    publicCall) {
        this.previousKernel = previousKernel;
        this.publicCall = publicCall;
    }
    toBuffer() {
        return serializeToBuffer(this.previousKernel, this.publicCall);
    }
}
/**
 // eslint-disable-next-line tsdoc/syntax
 * TODO: POSSIBLY OBSOLETE --\> DELETE OR DOCUMENT.
 */
export class WitnessedPublicCallData {
    constructor(
    /**
     * TODO.
     */
    publicCall, 
    /**
     * TODO.
     */
    updateRequestsHashPaths, 
    /**
     * TODO.
     */
    readsHashPaths, 
    /**
     * TODO.
     */
    publicDataTreeRoot) {
        this.publicCall = publicCall;
        this.updateRequestsHashPaths = updateRequestsHashPaths;
        this.readsHashPaths = readsHashPaths;
        this.publicDataTreeRoot = publicDataTreeRoot;
        assertMemberLength(this, 'updateRequestsHashPaths', MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_TX);
        assertMemberLength(this, 'readsHashPaths', MAX_PUBLIC_DATA_READS_PER_TX);
    }
    toBuffer() {
        return serializeToBuffer(this.publicCall, this.updateRequestsHashPaths, this.readsHashPaths, this.publicDataTreeRoot);
    }
}
/**
 * Public calldata assembled from the kernel execution result and proof.
 */
export class PublicCallData {
    constructor(
    /**
     * Call stack item being processed by the current iteration of the kernel.
     */
    callStackItem, 
    /**
     * Children call stack items.
     */
    publicCallStack, 
    /**
     * Proof of the call stack item execution.
     */
    proof, 
    /**
     * Address of the corresponding portal contract.
     */
    portalContractAddress, 
    /**
     * Hash of the L2 contract bytecode.
     */
    bytecodeHash) {
        this.callStackItem = callStackItem;
        this.publicCallStack = publicCallStack;
        this.proof = proof;
        this.portalContractAddress = portalContractAddress;
        this.bytecodeHash = bytecodeHash;
    }
    toBuffer() {
        return serializeToBuffer(this.callStackItem, this.proof, this.portalContractAddress, this.bytecodeHash);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHVibGljX2tlcm5lbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zdHJ1Y3RzL2tlcm5lbC9wdWJsaWNfa2VybmVsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE9BQU8sRUFFTCw0QkFBNEIsRUFDNUIsc0NBQXNDLEdBRXZDLE1BQU0sd0JBQXdCLENBQUM7QUFDaEMsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDNUQsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFPN0Q7O0dBRUc7QUFDSCxNQUFNLE9BQU8sa0JBQWtCO0lBQzdCO0lBQ0U7O09BRUc7SUFDYSxjQUFrQztJQUNsRDs7T0FFRztJQUNhLFVBQTBCO1FBSjFCLG1CQUFjLEdBQWQsY0FBYyxDQUFvQjtRQUlsQyxlQUFVLEdBQVYsVUFBVSxDQUFnQjtJQUN6QyxDQUFDO0lBRUosUUFBUTtRQUNOLE9BQU8saUJBQWlCLENBQUMsSUFBSSxDQUFDLGNBQWMsRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDakUsQ0FBQztDQUNGO0FBRUQ7OztHQUdHO0FBQ0gsTUFBTSxPQUFPLHVCQUF1QjtJQUNsQztJQUNFOztPQUVHO0lBQ2EsVUFBMEI7SUFDMUM7O09BRUc7SUFDYSx1QkFBNEU7SUFDNUY7O09BRUc7SUFDYSxjQUFtRTtJQUNuRjs7T0FFRztJQUNhLGtCQUFzQjtRQVp0QixlQUFVLEdBQVYsVUFBVSxDQUFnQjtRQUkxQiw0QkFBdUIsR0FBdkIsdUJBQXVCLENBQXFEO1FBSTVFLG1CQUFjLEdBQWQsY0FBYyxDQUFxRDtRQUluRSx1QkFBa0IsR0FBbEIsa0JBQWtCLENBQUk7UUFFdEMsa0JBQWtCLENBQUMsSUFBSSxFQUFFLHlCQUF5QixFQUFFLHNDQUFzQyxDQUFDLENBQUM7UUFDNUYsa0JBQWtCLENBQUMsSUFBSSxFQUFFLGdCQUFnQixFQUFFLDRCQUE0QixDQUFDLENBQUM7SUFDM0UsQ0FBQztJQUVELFFBQVE7UUFDTixPQUFPLGlCQUFpQixDQUN0QixJQUFJLENBQUMsVUFBVSxFQUNmLElBQUksQ0FBQyx1QkFBdUIsRUFDNUIsSUFBSSxDQUFDLGNBQWMsRUFDbkIsSUFBSSxDQUFDLGtCQUFrQixDQUN4QixDQUFDO0lBQ0osQ0FBQztDQUNGO0FBRUQ7O0dBRUc7QUFDSCxNQUFNLE9BQU8sY0FBYztJQUN6QjtJQUNFOztPQUVHO0lBQ2EsYUFBa0M7SUFDbEQ7O09BRUc7SUFDYSxlQUFpRjtJQUNqRzs7T0FFRztJQUNhLEtBQVk7SUFDNUI7O09BRUc7SUFDYSxxQkFBeUI7SUFDekM7O09BRUc7SUFDYSxZQUFnQjtRQWhCaEIsa0JBQWEsR0FBYixhQUFhLENBQXFCO1FBSWxDLG9CQUFlLEdBQWYsZUFBZSxDQUFrRTtRQUlqRixVQUFLLEdBQUwsS0FBSyxDQUFPO1FBSVosMEJBQXFCLEdBQXJCLHFCQUFxQixDQUFJO1FBSXpCLGlCQUFZLEdBQVosWUFBWSxDQUFJO0lBQy9CLENBQUM7SUFFSixRQUFRO1FBQ04sT0FBTyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsYUFBYSxFQUFFLElBQUksQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLHFCQUFxQixFQUFFLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUMxRyxDQUFDO0NBQ0YifQ==