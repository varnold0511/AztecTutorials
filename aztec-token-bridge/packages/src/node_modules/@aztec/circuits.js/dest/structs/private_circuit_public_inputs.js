import { isArrayEmpty } from '@aztec/foundation/collection';
import { Fr } from '@aztec/foundation/fields';
import { BufferReader } from '@aztec/foundation/serialize';
import { MAX_NEW_COMMITMENTS_PER_CALL, MAX_NEW_L2_TO_L1_MSGS_PER_CALL, MAX_NEW_NULLIFIERS_PER_CALL, MAX_PENDING_READ_REQUESTS_PER_CALL, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL, MAX_READ_REQUESTS_PER_CALL, NUM_FIELDS_PER_SHA256, RETURN_VALUES_LENGTH, } from '../constants.gen.js';
import { makeTuple } from '../utils/jsUtils.js';
import { serializeToBuffer } from '../utils/serialize.js';
import { CallContext } from './call_context.js';
import { BlockHeader } from './index.js';
import { ContractDeploymentData } from './tx_context.js';
/**
 * Public inputs to a private circuit.
 * @see abis/private_circuit_public_inputs.hpp.
 */
export class PrivateCircuitPublicInputs {
    constructor(
    /**
     * Context of the call corresponding to this private circuit execution.
     */
    callContext, 
    /**
     * Pedersen hash of function arguments.
     */
    argsHash, 
    /**
     * Return values of the corresponding function call.
     */
    returnValues, 
    /**
     * Read requests created by the corresponding function call.
     */
    readRequests, 
    /**
     * Pending read requests created by the corresponding function call.
     */
    pendingReadRequests, 
    /**
     * New commitments created by the corresponding function call.
     */
    newCommitments, 
    /**
     * New nullifiers created by the corresponding function call.
     */
    newNullifiers, 
    /**
     * The commitments those were nullified by the above newNullifiers.
     */
    nullifiedCommitments, 
    /**
     * Private call stack at the current kernel iteration.
     */
    privateCallStackHashes, 
    /**
     * Public call stack at the current kernel iteration.
     */
    publicCallStackHashes, 
    /**
     * New L2 to L1 messages created by the corresponding function call.
     */
    newL2ToL1Msgs, 
    /**
     * Hash of the encrypted logs emitted in this function call.
     * Note: Represented as an array of 2 fields in order to fit in all of the 256 bits of sha256 hash.
     */
    encryptedLogsHash, 
    /**
     * Hash of the unencrypted logs emitted in this function call.
     * Note: Represented as an array of 2 fields in order to fit in all of the 256 bits of sha256 hash.
     */
    unencryptedLogsHash, 
    /**
     * Length of the encrypted log preimages emitted in this function call.
     * Note: Here so that the gas cost of this request can be measured by circuits, without actually needing to feed
     *       in the variable-length data.
     */
    encryptedLogPreimagesLength, 
    /**
     * Length of the unencrypted log preimages emitted in this function call.
     */
    unencryptedLogPreimagesLength, 
    /**
     * Historical roots of the data trees, used to calculate the block hash the user is proving against.
     */
    blockHeader, 
    /**
     * Deployment data of contracts being deployed in this kernel iteration.
     */
    contractDeploymentData, 
    /**
     * Chain Id of the instance.
     */
    chainId, 
    /**
     * Version of the instance.
     */
    version) {
        this.callContext = callContext;
        this.argsHash = argsHash;
        this.returnValues = returnValues;
        this.readRequests = readRequests;
        this.pendingReadRequests = pendingReadRequests;
        this.newCommitments = newCommitments;
        this.newNullifiers = newNullifiers;
        this.nullifiedCommitments = nullifiedCommitments;
        this.privateCallStackHashes = privateCallStackHashes;
        this.publicCallStackHashes = publicCallStackHashes;
        this.newL2ToL1Msgs = newL2ToL1Msgs;
        this.encryptedLogsHash = encryptedLogsHash;
        this.unencryptedLogsHash = unencryptedLogsHash;
        this.encryptedLogPreimagesLength = encryptedLogPreimagesLength;
        this.unencryptedLogPreimagesLength = unencryptedLogPreimagesLength;
        this.blockHeader = blockHeader;
        this.contractDeploymentData = contractDeploymentData;
        this.chainId = chainId;
        this.version = version;
    }
    /**
     * Create PrivateCircuitPublicInputs from a fields dictionary.
     * @param fields - The dictionary.
     * @returns A PrivateCircuitPublicInputs object.
     */
    static from(fields) {
        return new PrivateCircuitPublicInputs(...PrivateCircuitPublicInputs.getFields(fields));
    }
    /**
     * Deserializes from a buffer or reader.
     * @param buffer - Buffer or reader to read from.
     * @returns The deserialized instance.
     */
    static fromBuffer(buffer) {
        const reader = BufferReader.asReader(buffer);
        return new PrivateCircuitPublicInputs(reader.readObject(CallContext), reader.readObject(Fr), reader.readArray(RETURN_VALUES_LENGTH, Fr), reader.readArray(MAX_READ_REQUESTS_PER_CALL, Fr), reader.readArray(MAX_PENDING_READ_REQUESTS_PER_CALL, Fr), reader.readArray(MAX_NEW_COMMITMENTS_PER_CALL, Fr), reader.readArray(MAX_NEW_NULLIFIERS_PER_CALL, Fr), reader.readArray(MAX_NEW_NULLIFIERS_PER_CALL, Fr), reader.readArray(MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, Fr), reader.readArray(MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL, Fr), reader.readArray(MAX_NEW_L2_TO_L1_MSGS_PER_CALL, Fr), reader.readArray(NUM_FIELDS_PER_SHA256, Fr), reader.readArray(NUM_FIELDS_PER_SHA256, Fr), reader.readObject(Fr), reader.readObject(Fr), reader.readObject(BlockHeader), reader.readObject(ContractDeploymentData), reader.readObject(Fr), reader.readObject(Fr));
    }
    /**
     * Create an empty PrivateCircuitPublicInputs.
     * @returns An empty PrivateCircuitPublicInputs object.
     */
    static empty() {
        return new PrivateCircuitPublicInputs(CallContext.empty(), Fr.ZERO, makeTuple(RETURN_VALUES_LENGTH, Fr.zero), makeTuple(MAX_READ_REQUESTS_PER_CALL, Fr.zero), makeTuple(MAX_PENDING_READ_REQUESTS_PER_CALL, Fr.zero), makeTuple(MAX_NEW_COMMITMENTS_PER_CALL, Fr.zero), makeTuple(MAX_NEW_NULLIFIERS_PER_CALL, Fr.zero), makeTuple(MAX_NEW_NULLIFIERS_PER_CALL, Fr.zero), makeTuple(MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, Fr.zero), makeTuple(MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL, Fr.zero), makeTuple(MAX_NEW_L2_TO_L1_MSGS_PER_CALL, Fr.zero), makeTuple(NUM_FIELDS_PER_SHA256, Fr.zero), makeTuple(NUM_FIELDS_PER_SHA256, Fr.zero), Fr.ZERO, Fr.ZERO, BlockHeader.empty(), ContractDeploymentData.empty(), Fr.ZERO, Fr.ZERO);
    }
    isEmpty() {
        const isFrArrayEmpty = (arr) => isArrayEmpty(arr, item => item.isZero());
        return (this.callContext.isEmpty() &&
            this.argsHash.isZero() &&
            isFrArrayEmpty(this.returnValues) &&
            isFrArrayEmpty(this.readRequests) &&
            isFrArrayEmpty(this.pendingReadRequests) &&
            isFrArrayEmpty(this.newCommitments) &&
            isFrArrayEmpty(this.newNullifiers) &&
            isFrArrayEmpty(this.nullifiedCommitments) &&
            isFrArrayEmpty(this.privateCallStackHashes) &&
            isFrArrayEmpty(this.publicCallStackHashes) &&
            isFrArrayEmpty(this.newL2ToL1Msgs) &&
            isFrArrayEmpty(this.encryptedLogsHash) &&
            isFrArrayEmpty(this.unencryptedLogsHash) &&
            this.encryptedLogPreimagesLength.isZero() &&
            this.unencryptedLogPreimagesLength.isZero() &&
            this.blockHeader.isEmpty() &&
            this.contractDeploymentData.isEmpty() &&
            this.chainId.isZero() &&
            this.version.isZero());
    }
    /**
     * Serialize into a field array. Low-level utility.
     * @param fields - Object with fields.
     * @returns The array.
     */
    static getFields(fields) {
        return [
            fields.callContext,
            fields.argsHash,
            fields.returnValues,
            fields.readRequests,
            fields.pendingReadRequests,
            fields.newCommitments,
            fields.newNullifiers,
            fields.nullifiedCommitments,
            fields.privateCallStackHashes,
            fields.publicCallStackHashes,
            fields.newL2ToL1Msgs,
            fields.encryptedLogsHash,
            fields.unencryptedLogsHash,
            fields.encryptedLogPreimagesLength,
            fields.unencryptedLogPreimagesLength,
            fields.blockHeader,
            fields.contractDeploymentData,
            fields.chainId,
            fields.version,
        ];
    }
    /**
     * Serialize this as a buffer.
     * @returns The buffer.
     */
    toBuffer() {
        return serializeToBuffer(...PrivateCircuitPublicInputs.getFields(this));
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJpdmF0ZV9jaXJjdWl0X3B1YmxpY19pbnB1dHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc3RydWN0cy9wcml2YXRlX2NpcmN1aXRfcHVibGljX2lucHV0cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFDNUQsT0FBTyxFQUFFLEVBQUUsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQzlDLE9BQU8sRUFBRSxZQUFZLEVBQVMsTUFBTSw2QkFBNkIsQ0FBQztBQUVsRSxPQUFPLEVBQ0wsNEJBQTRCLEVBQzVCLDhCQUE4QixFQUM5QiwyQkFBMkIsRUFDM0Isa0NBQWtDLEVBQ2xDLHNDQUFzQyxFQUN0QyxxQ0FBcUMsRUFDckMsMEJBQTBCLEVBQzFCLHFCQUFxQixFQUNyQixvQkFBb0IsR0FDckIsTUFBTSxxQkFBcUIsQ0FBQztBQUM3QixPQUFPLEVBQVksU0FBUyxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDMUQsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDMUQsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ2hELE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFDekMsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFFekQ7OztHQUdHO0FBQ0gsTUFBTSxPQUFPLDBCQUEwQjtJQUNyQztJQUNFOztPQUVHO0lBQ0ksV0FBd0I7SUFDL0I7O09BRUc7SUFDSSxRQUFZO0lBQ25COztPQUVHO0lBQ0ksWUFBb0Q7SUFDM0Q7O09BRUc7SUFDSSxZQUEwRDtJQUNqRTs7T0FFRztJQUNJLG1CQUF5RTtJQUNoRjs7T0FFRztJQUNJLGNBQThEO0lBQ3JFOztPQUVHO0lBQ0ksYUFBNEQ7SUFDbkU7O09BRUc7SUFDSSxvQkFBbUU7SUFDMUU7O09BRUc7SUFDSSxzQkFBZ0Y7SUFDdkY7O09BRUc7SUFDSSxxQkFBOEU7SUFDckY7O09BRUc7SUFDSSxhQUErRDtJQUN0RTs7O09BR0c7SUFDSSxpQkFBMEQ7SUFDakU7OztPQUdHO0lBQ0ksbUJBQTREO0lBQ25FOzs7O09BSUc7SUFDSSwyQkFBK0I7SUFDdEM7O09BRUc7SUFDSSw2QkFBaUM7SUFDeEM7O09BRUc7SUFDSSxXQUF3QjtJQUMvQjs7T0FFRztJQUNJLHNCQUE4QztJQUNyRDs7T0FFRztJQUNJLE9BQVc7SUFDbEI7O09BRUc7SUFDSSxPQUFXO1FBNUVYLGdCQUFXLEdBQVgsV0FBVyxDQUFhO1FBSXhCLGFBQVEsR0FBUixRQUFRLENBQUk7UUFJWixpQkFBWSxHQUFaLFlBQVksQ0FBd0M7UUFJcEQsaUJBQVksR0FBWixZQUFZLENBQThDO1FBSTFELHdCQUFtQixHQUFuQixtQkFBbUIsQ0FBc0Q7UUFJekUsbUJBQWMsR0FBZCxjQUFjLENBQWdEO1FBSTlELGtCQUFhLEdBQWIsYUFBYSxDQUErQztRQUk1RCx5QkFBb0IsR0FBcEIsb0JBQW9CLENBQStDO1FBSW5FLDJCQUFzQixHQUF0QixzQkFBc0IsQ0FBMEQ7UUFJaEYsMEJBQXFCLEdBQXJCLHFCQUFxQixDQUF5RDtRQUk5RSxrQkFBYSxHQUFiLGFBQWEsQ0FBa0Q7UUFLL0Qsc0JBQWlCLEdBQWpCLGlCQUFpQixDQUF5QztRQUsxRCx3QkFBbUIsR0FBbkIsbUJBQW1CLENBQXlDO1FBTTVELGdDQUEyQixHQUEzQiwyQkFBMkIsQ0FBSTtRQUkvQixrQ0FBNkIsR0FBN0IsNkJBQTZCLENBQUk7UUFJakMsZ0JBQVcsR0FBWCxXQUFXLENBQWE7UUFJeEIsMkJBQXNCLEdBQXRCLHNCQUFzQixDQUF3QjtRQUk5QyxZQUFPLEdBQVAsT0FBTyxDQUFJO1FBSVgsWUFBTyxHQUFQLE9BQU8sQ0FBSTtJQUNqQixDQUFDO0lBRUo7Ozs7T0FJRztJQUNILE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBNEM7UUFDdEQsT0FBTyxJQUFJLDBCQUEwQixDQUFDLEdBQUcsMEJBQTBCLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7SUFDekYsQ0FBQztJQUVEOzs7O09BSUc7SUFDSCxNQUFNLENBQUMsVUFBVSxDQUFDLE1BQTZCO1FBQzdDLE1BQU0sTUFBTSxHQUFHLFlBQVksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDN0MsT0FBTyxJQUFJLDBCQUEwQixDQUNuQyxNQUFNLENBQUMsVUFBVSxDQUFDLFdBQVcsQ0FBQyxFQUM5QixNQUFNLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQyxFQUNyQixNQUFNLENBQUMsU0FBUyxDQUFDLG9CQUFvQixFQUFFLEVBQUUsQ0FBQyxFQUMxQyxNQUFNLENBQUMsU0FBUyxDQUFDLDBCQUEwQixFQUFFLEVBQUUsQ0FBQyxFQUNoRCxNQUFNLENBQUMsU0FBUyxDQUFDLGtDQUFrQyxFQUFFLEVBQUUsQ0FBQyxFQUN4RCxNQUFNLENBQUMsU0FBUyxDQUFDLDRCQUE0QixFQUFFLEVBQUUsQ0FBQyxFQUNsRCxNQUFNLENBQUMsU0FBUyxDQUFDLDJCQUEyQixFQUFFLEVBQUUsQ0FBQyxFQUNqRCxNQUFNLENBQUMsU0FBUyxDQUFDLDJCQUEyQixFQUFFLEVBQUUsQ0FBQyxFQUNqRCxNQUFNLENBQUMsU0FBUyxDQUFDLHNDQUFzQyxFQUFFLEVBQUUsQ0FBQyxFQUM1RCxNQUFNLENBQUMsU0FBUyxDQUFDLHFDQUFxQyxFQUFFLEVBQUUsQ0FBQyxFQUMzRCxNQUFNLENBQUMsU0FBUyxDQUFDLDhCQUE4QixFQUFFLEVBQUUsQ0FBQyxFQUNwRCxNQUFNLENBQUMsU0FBUyxDQUFDLHFCQUFxQixFQUFFLEVBQUUsQ0FBQyxFQUMzQyxNQUFNLENBQUMsU0FBUyxDQUFDLHFCQUFxQixFQUFFLEVBQUUsQ0FBQyxFQUMzQyxNQUFNLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQyxFQUNyQixNQUFNLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQyxFQUNyQixNQUFNLENBQUMsVUFBVSxDQUFDLFdBQVcsQ0FBQyxFQUM5QixNQUFNLENBQUMsVUFBVSxDQUFDLHNCQUFzQixDQUFDLEVBQ3pDLE1BQU0sQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDLEVBQ3JCLE1BQU0sQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDLENBQ3RCLENBQUM7SUFDSixDQUFDO0lBRUQ7OztPQUdHO0lBQ0ksTUFBTSxDQUFDLEtBQUs7UUFDakIsT0FBTyxJQUFJLDBCQUEwQixDQUNuQyxXQUFXLENBQUMsS0FBSyxFQUFFLEVBQ25CLEVBQUUsQ0FBQyxJQUFJLEVBQ1AsU0FBUyxDQUFDLG9CQUFvQixFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFDeEMsU0FBUyxDQUFDLDBCQUEwQixFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFDOUMsU0FBUyxDQUFDLGtDQUFrQyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFDdEQsU0FBUyxDQUFDLDRCQUE0QixFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFDaEQsU0FBUyxDQUFDLDJCQUEyQixFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFDL0MsU0FBUyxDQUFDLDJCQUEyQixFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFDL0MsU0FBUyxDQUFDLHNDQUFzQyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFDMUQsU0FBUyxDQUFDLHFDQUFxQyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFDekQsU0FBUyxDQUFDLDhCQUE4QixFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFDbEQsU0FBUyxDQUFDLHFCQUFxQixFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFDekMsU0FBUyxDQUFDLHFCQUFxQixFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFDekMsRUFBRSxDQUFDLElBQUksRUFDUCxFQUFFLENBQUMsSUFBSSxFQUNQLFdBQVcsQ0FBQyxLQUFLLEVBQUUsRUFDbkIsc0JBQXNCLENBQUMsS0FBSyxFQUFFLEVBQzlCLEVBQUUsQ0FBQyxJQUFJLEVBQ1AsRUFBRSxDQUFDLElBQUksQ0FDUixDQUFDO0lBQ0osQ0FBQztJQUVELE9BQU87UUFDTCxNQUFNLGNBQWMsR0FBRyxDQUFDLEdBQVMsRUFBRSxFQUFFLENBQUMsWUFBWSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDO1FBQy9FLE9BQU8sQ0FDTCxJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU8sRUFBRTtZQUMxQixJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sRUFBRTtZQUN0QixjQUFjLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQztZQUNqQyxjQUFjLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQztZQUNqQyxjQUFjLENBQUMsSUFBSSxDQUFDLG1CQUFtQixDQUFDO1lBQ3hDLGNBQWMsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDO1lBQ25DLGNBQWMsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDO1lBQ2xDLGNBQWMsQ0FBQyxJQUFJLENBQUMsb0JBQW9CLENBQUM7WUFDekMsY0FBYyxDQUFDLElBQUksQ0FBQyxzQkFBc0IsQ0FBQztZQUMzQyxjQUFjLENBQUMsSUFBSSxDQUFDLHFCQUFxQixDQUFDO1lBQzFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDO1lBQ2xDLGNBQWMsQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUM7WUFDdEMsY0FBYyxDQUFDLElBQUksQ0FBQyxtQkFBbUIsQ0FBQztZQUN4QyxJQUFJLENBQUMsMkJBQTJCLENBQUMsTUFBTSxFQUFFO1lBQ3pDLElBQUksQ0FBQyw2QkFBNkIsQ0FBQyxNQUFNLEVBQUU7WUFDM0MsSUFBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPLEVBQUU7WUFDMUIsSUFBSSxDQUFDLHNCQUFzQixDQUFDLE9BQU8sRUFBRTtZQUNyQyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRTtZQUNyQixJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxDQUN0QixDQUFDO0lBQ0osQ0FBQztJQUVEOzs7O09BSUc7SUFDSCxNQUFNLENBQUMsU0FBUyxDQUFDLE1BQTRDO1FBQzNELE9BQU87WUFDTCxNQUFNLENBQUMsV0FBVztZQUNsQixNQUFNLENBQUMsUUFBUTtZQUNmLE1BQU0sQ0FBQyxZQUFZO1lBQ25CLE1BQU0sQ0FBQyxZQUFZO1lBQ25CLE1BQU0sQ0FBQyxtQkFBbUI7WUFDMUIsTUFBTSxDQUFDLGNBQWM7WUFDckIsTUFBTSxDQUFDLGFBQWE7WUFDcEIsTUFBTSxDQUFDLG9CQUFvQjtZQUMzQixNQUFNLENBQUMsc0JBQXNCO1lBQzdCLE1BQU0sQ0FBQyxxQkFBcUI7WUFDNUIsTUFBTSxDQUFDLGFBQWE7WUFDcEIsTUFBTSxDQUFDLGlCQUFpQjtZQUN4QixNQUFNLENBQUMsbUJBQW1CO1lBQzFCLE1BQU0sQ0FBQywyQkFBMkI7WUFDbEMsTUFBTSxDQUFDLDZCQUE2QjtZQUNwQyxNQUFNLENBQUMsV0FBVztZQUNsQixNQUFNLENBQUMsc0JBQXNCO1lBQzdCLE1BQU0sQ0FBQyxPQUFPO1lBQ2QsTUFBTSxDQUFDLE9BQU87U0FDTixDQUFDO0lBQ2IsQ0FBQztJQUNEOzs7T0FHRztJQUNILFFBQVE7UUFDTixPQUFPLGlCQUFpQixDQUFDLEdBQUcsMEJBQTBCLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7SUFDMUUsQ0FBQztDQUNGIn0=