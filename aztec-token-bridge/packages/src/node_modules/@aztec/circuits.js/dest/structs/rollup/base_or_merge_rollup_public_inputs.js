import { Fr } from '@aztec/foundation/fields';
import { BufferReader } from '@aztec/foundation/serialize';
import { NUM_FIELDS_PER_SHA256 } from '../../constants.gen.js';
import { serializeToBuffer } from '../../utils/serialize.js';
import { AggregationObject } from '../aggregation_object.js';
import { AppendOnlyTreeSnapshot } from './append_only_tree_snapshot.js';
import { ConstantRollupData } from './base_rollup.js';
/**
 * Output of the base and merge rollup circuits.
 */
export class BaseOrMergeRollupPublicInputs {
    constructor(
    /**
     * Specifies from which type of rollup circuit these inputs are from.
     */
    rollupType, 
    /**
     * Rollup sub tree height.
     * Note 1: Base rollup circuit always have a sub tree height of 0.
     * Note 2: With each merge, the sub tree height increases by 1.
     */
    rollupSubtreeHeight, 
    /**
     * Native aggregation state at the end of the rollup circuit.
     */
    endAggregationObject, 
    /**
     * Data which is forwarded through the rollup circuits unchanged.
     */
    constants, 
    /**
     * Snapshot of the note hash tree at the start of the rollup circuit.
     */
    startNoteHashTreeSnapshot, 
    /**
     * Snapshot of the note hash tree at the end of the rollup circuit.
     */
    endNoteHashTreeSnapshot, 
    /**
     * Snapshot of the nullifier tree at the start of the rollup circuit.
     */
    startNullifierTreeSnapshot, 
    /**
     * Snapshot of the nullifier tree at the end of the rollup circuit.
     */
    endNullifierTreeSnapshot, 
    /**
     * Snapshot of the contract tree at the start of the rollup circuit.
     */
    startContractTreeSnapshot, 
    /**
     * Snapshot of the contract tree at the end of the rollup circuit.
     */
    endContractTreeSnapshot, 
    /**
     * Root of the public data tree at the start of the rollup circuit.
     */
    startPublicDataTreeRoot, 
    /**
     * Root of the public data tree at the end of the rollup circuit.
     */
    endPublicDataTreeRoot, 
    /**
     * SHA256 hashes of calldata. Used to make public inputs constant-sized (to then be unpacked on-chain).
     * Note: Length 2 for high and low.
     */
    calldataHash) {
        this.rollupType = rollupType;
        this.rollupSubtreeHeight = rollupSubtreeHeight;
        this.endAggregationObject = endAggregationObject;
        this.constants = constants;
        this.startNoteHashTreeSnapshot = startNoteHashTreeSnapshot;
        this.endNoteHashTreeSnapshot = endNoteHashTreeSnapshot;
        this.startNullifierTreeSnapshot = startNullifierTreeSnapshot;
        this.endNullifierTreeSnapshot = endNullifierTreeSnapshot;
        this.startContractTreeSnapshot = startContractTreeSnapshot;
        this.endContractTreeSnapshot = endContractTreeSnapshot;
        this.startPublicDataTreeRoot = startPublicDataTreeRoot;
        this.endPublicDataTreeRoot = endPublicDataTreeRoot;
        this.calldataHash = calldataHash;
    }
    /**
     * Deserializes from a buffer or reader.
     * Note: Corresponds to a write in cpp.
     * @param buffer - Buffer or reader to read from.
     * @returns The deserialized public inputs.
     */
    static fromBuffer(buffer) {
        const reader = BufferReader.asReader(buffer);
        return new BaseOrMergeRollupPublicInputs(reader.readNumber(), Fr.fromBuffer(reader), reader.readObject(AggregationObject), reader.readObject(ConstantRollupData), reader.readObject(AppendOnlyTreeSnapshot), reader.readObject(AppendOnlyTreeSnapshot), reader.readObject(AppendOnlyTreeSnapshot), reader.readObject(AppendOnlyTreeSnapshot), reader.readObject(AppendOnlyTreeSnapshot), reader.readObject(AppendOnlyTreeSnapshot), Fr.fromBuffer(reader), Fr.fromBuffer(reader), reader.readArray(NUM_FIELDS_PER_SHA256, Fr));
    }
    /**
     * Serialize this as a buffer.
     * @returns The buffer.
     */
    toBuffer() {
        return serializeToBuffer(this.rollupType, this.rollupSubtreeHeight, this.endAggregationObject, this.constants, this.startNoteHashTreeSnapshot, this.endNoteHashTreeSnapshot, this.startNullifierTreeSnapshot, this.endNullifierTreeSnapshot, this.startContractTreeSnapshot, this.endContractTreeSnapshot, this.startPublicDataTreeRoot, this.endPublicDataTreeRoot, this.calldataHash);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZV9vcl9tZXJnZV9yb2xsdXBfcHVibGljX2lucHV0cy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zdHJ1Y3RzL3JvbGx1cC9iYXNlX29yX21lcmdlX3JvbGx1cF9wdWJsaWNfaW5wdXRzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxFQUFFLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUM5QyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFFM0QsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDL0QsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDN0QsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFFN0QsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFDeEUsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFFdEQ7O0dBRUc7QUFDSCxNQUFNLE9BQU8sNkJBQTZCO0lBQ3hDO0lBQ0U7O09BRUc7SUFDSSxVQUF1QjtJQUM5Qjs7OztPQUlHO0lBQ0ksbUJBQXVCO0lBQzlCOztPQUVHO0lBQ0ksb0JBQXVDO0lBQzlDOztPQUVHO0lBQ0ksU0FBNkI7SUFFcEM7O09BRUc7SUFDSSx5QkFBaUQ7SUFDeEQ7O09BRUc7SUFDSSx1QkFBK0M7SUFFdEQ7O09BRUc7SUFDSSwwQkFBa0Q7SUFDekQ7O09BRUc7SUFDSSx3QkFBZ0Q7SUFFdkQ7O09BRUc7SUFDSSx5QkFBaUQ7SUFDeEQ7O09BRUc7SUFDSSx1QkFBK0M7SUFFdEQ7O09BRUc7SUFDSSx1QkFBMkI7SUFDbEM7O09BRUc7SUFDSSxxQkFBeUI7SUFFaEM7OztPQUdHO0lBQ0ksWUFBc0I7UUF4RHRCLGVBQVUsR0FBVixVQUFVLENBQWE7UUFNdkIsd0JBQW1CLEdBQW5CLG1CQUFtQixDQUFJO1FBSXZCLHlCQUFvQixHQUFwQixvQkFBb0IsQ0FBbUI7UUFJdkMsY0FBUyxHQUFULFNBQVMsQ0FBb0I7UUFLN0IsOEJBQXlCLEdBQXpCLHlCQUF5QixDQUF3QjtRQUlqRCw0QkFBdUIsR0FBdkIsdUJBQXVCLENBQXdCO1FBSy9DLCtCQUEwQixHQUExQiwwQkFBMEIsQ0FBd0I7UUFJbEQsNkJBQXdCLEdBQXhCLHdCQUF3QixDQUF3QjtRQUtoRCw4QkFBeUIsR0FBekIseUJBQXlCLENBQXdCO1FBSWpELDRCQUF1QixHQUF2Qix1QkFBdUIsQ0FBd0I7UUFLL0MsNEJBQXVCLEdBQXZCLHVCQUF1QixDQUFJO1FBSTNCLDBCQUFxQixHQUFyQixxQkFBcUIsQ0FBSTtRQU16QixpQkFBWSxHQUFaLFlBQVksQ0FBVTtJQUM1QixDQUFDO0lBRUo7Ozs7O09BS0c7SUFDSCxNQUFNLENBQUMsVUFBVSxDQUFDLE1BQTZCO1FBQzdDLE1BQU0sTUFBTSxHQUFHLFlBQVksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDN0MsT0FBTyxJQUFJLDZCQUE2QixDQUN0QyxNQUFNLENBQUMsVUFBVSxFQUFFLEVBQ25CLEVBQUUsQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLEVBQ3JCLE1BQU0sQ0FBQyxVQUFVLENBQUMsaUJBQWlCLENBQUMsRUFDcEMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxrQkFBa0IsQ0FBQyxFQUNyQyxNQUFNLENBQUMsVUFBVSxDQUFDLHNCQUFzQixDQUFDLEVBQ3pDLE1BQU0sQ0FBQyxVQUFVLENBQUMsc0JBQXNCLENBQUMsRUFDekMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxzQkFBc0IsQ0FBQyxFQUN6QyxNQUFNLENBQUMsVUFBVSxDQUFDLHNCQUFzQixDQUFDLEVBQ3pDLE1BQU0sQ0FBQyxVQUFVLENBQUMsc0JBQXNCLENBQUMsRUFDekMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxzQkFBc0IsQ0FBQyxFQUN6QyxFQUFFLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxFQUNyQixFQUFFLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxFQUNyQixNQUFNLENBQUMsU0FBUyxDQUFDLHFCQUFxQixFQUFFLEVBQUUsQ0FBYSxDQUN4RCxDQUFDO0lBQ0osQ0FBQztJQUVEOzs7T0FHRztJQUNILFFBQVE7UUFDTixPQUFPLGlCQUFpQixDQUN0QixJQUFJLENBQUMsVUFBVSxFQUNmLElBQUksQ0FBQyxtQkFBbUIsRUFDeEIsSUFBSSxDQUFDLG9CQUFvQixFQUN6QixJQUFJLENBQUMsU0FBUyxFQUVkLElBQUksQ0FBQyx5QkFBeUIsRUFDOUIsSUFBSSxDQUFDLHVCQUF1QixFQUU1QixJQUFJLENBQUMsMEJBQTBCLEVBQy9CLElBQUksQ0FBQyx3QkFBd0IsRUFFN0IsSUFBSSxDQUFDLHlCQUF5QixFQUM5QixJQUFJLENBQUMsdUJBQXVCLEVBRTVCLElBQUksQ0FBQyx1QkFBdUIsRUFDNUIsSUFBSSxDQUFDLHFCQUFxQixFQUUxQixJQUFJLENBQUMsWUFBWSxDQUNsQixDQUFDO0lBQ0osQ0FBQztDQUNGIn0=