/// <reference types="node" resolution-mode="require"/>
import { BufferReader, Tuple } from '@aztec/foundation/serialize';
import { MAX_NEW_COMMITMENTS_PER_TX, MAX_NEW_CONTRACTS_PER_TX, MAX_NEW_L2_TO_L1_MSGS_PER_CALL, MAX_NEW_NULLIFIERS_PER_TX, MAX_OPTIONALLY_REVEALED_DATA_LENGTH_PER_TX, MAX_PENDING_READ_REQUESTS_PER_TX, MAX_PRIVATE_CALL_STACK_LENGTH_PER_TX, MAX_PUBLIC_CALL_STACK_LENGTH_PER_TX, MAX_PUBLIC_DATA_READS_PER_TX, MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_TX, MAX_READ_REQUESTS_PER_TX, NUM_FIELDS_PER_SHA256 } from '../../constants.gen.js';
import { CallRequest } from '../call_request.js';
import { AggregationObject, AztecAddress, EthAddress, Fr, FunctionData } from '../index.js';
/**
 * The information assembled after the contract deployment was processed by the private kernel circuit.
 *
 * Note: Not to be confused with `ContractDeploymentData`.
 */
export declare class NewContractData {
    /**
     * Aztec address of the contract.
     */
    contractAddress: AztecAddress;
    /**
     * Function tree root of the contract.
     */
    functionTreeRoot: Fr;
    /**
     * Ethereum address of the portal contract on L1.
     */
    portalContractAddress: EthAddress;
    constructor(
    /**
     * Aztec address of the contract.
     */
    contractAddress: AztecAddress, 
    /**
     * Ethereum address of the portal contract on L1.
     * TODO(AD): refactor this later
     * currently there is a kludge with circuits cpp as it emits an AztecAddress
     */
    portalContractAddress: EthAddress | AztecAddress, 
    /**
     * Function tree root of the contract.
     */
    functionTreeRoot: Fr);
    toBuffer(): Buffer;
    /**
     * Deserializes from a buffer or reader, corresponding to a write in cpp.
     * @param buffer - Buffer or reader to read from.
     * @returns The deserialized `NewContractData`.
     */
    static fromBuffer(buffer: Buffer | BufferReader): NewContractData;
    static empty(): NewContractData;
}
/**
 * Info which a user might want to reveal to the world.
 * Note: Currently not used (2023-05-12).
 */
export declare class OptionallyRevealedData {
    /**
     * Hash of the call stack item from which this info was originates.
     */
    callStackItemHash: Fr;
    /**
     * Function data of a function call from which this info originates.
     */
    functionData: FunctionData;
    /**
     * Verification key hash of the function call from which this info originates.
     */
    vkHash: Fr;
    /**
     * Whether the fee was paid from the L1 account of the user.
     */
    payFeeFromL1: boolean;
    /**
     * Whether the fee was paid from a public account on L2.
     */
    payFeeFromPublicL2: boolean;
    /**
     * Whether the function call was invoked from L1.
     */
    calledFromL1: boolean;
    /**
     * Whether the function call was invoked from the public L2 account of the user.
     */
    calledFromPublicL2: boolean;
    /**
     * Address of the portal contract corresponding to the L2 contract on which the function above was invoked.
     *
     * TODO(AD): refactor this later
     * currently there is a kludge with circuits cpp as it emits an AztecAddress
     */
    portalContractAddress: EthAddress;
    constructor(
    /**
     * Hash of the call stack item from which this info was originates.
     */
    callStackItemHash: Fr, 
    /**
     * Function data of a function call from which this info originates.
     */
    functionData: FunctionData, 
    /**
     * Verification key hash of the function call from which this info originates.
     */
    vkHash: Fr, 
    /**
     * Address of the portal contract corresponding to the L2 contract on which the function above was invoked.
     *
     * TODO(AD): refactor this later
     * currently there is a kludge with circuits cpp as it emits an AztecAddress
     */
    portalContractAddress: EthAddress | AztecAddress, 
    /**
     * Whether the fee was paid from the L1 account of the user.
     */
    payFeeFromL1: boolean, 
    /**
     * Whether the fee was paid from a public account on L2.
     */
    payFeeFromPublicL2: boolean, 
    /**
     * Whether the function call was invoked from L1.
     */
    calledFromL1: boolean, 
    /**
     * Whether the function call was invoked from the public L2 account of the user.
     */
    calledFromPublicL2: boolean);
    toBuffer(): Buffer;
    /**
     * Deserializes from a buffer or reader, corresponding to a write in cpp.
     * @param buffer - Buffer or reader to read from.
     * @returns The deserialized OptionallyRevealedData.
     */
    static fromBuffer(buffer: Buffer | BufferReader): OptionallyRevealedData;
    static empty(): OptionallyRevealedData;
}
/**
 * Read operations from the public state tree.
 */
export declare class PublicDataRead {
    /**
     * Index of the leaf in the public data tree.
     */
    readonly leafIndex: Fr;
    /**
     * Returned value from the public data tree.
     */
    readonly value: Fr;
    /**
     * Optional side effect counter tracking position of this event in tx execution.
     */
    readonly sideEffectCounter?: number | undefined;
    constructor(
    /**
     * Index of the leaf in the public data tree.
     */
    leafIndex: Fr, 
    /**
     * Returned value from the public data tree.
     */
    value: Fr, 
    /**
     * Optional side effect counter tracking position of this event in tx execution.
     */
    sideEffectCounter?: number | undefined);
    static from(args: {
        /**
         * Index of the leaf in the public data tree.
         */
        leafIndex: Fr;
        /**
         * Returned value from the public data tree.
         */
        value: Fr;
    }): PublicDataRead;
    toBuffer(): Buffer;
    static fromBuffer(buffer: Buffer | BufferReader): PublicDataRead;
    static empty(): PublicDataRead;
    toFriendlyJSON(): string;
}
/**
 * Write operations on the public data tree including the previous value.
 */
export declare class PublicDataUpdateRequest {
    /**
     * Index of the leaf in the public data tree which is to be updated.
     */
    readonly leafIndex: Fr;
    /**
     * Old value of the leaf.
     */
    readonly oldValue: Fr;
    /**
     * New value of the leaf.
     */
    readonly newValue: Fr;
    /**
     * Optional side effect counter tracking position of this event in tx execution.
     */
    readonly sideEffectCounter?: number | undefined;
    constructor(
    /**
     * Index of the leaf in the public data tree which is to be updated.
     */
    leafIndex: Fr, 
    /**
     * Old value of the leaf.
     */
    oldValue: Fr, 
    /**
     * New value of the leaf.
     */
    newValue: Fr, 
    /**
     * Optional side effect counter tracking position of this event in tx execution.
     */
    sideEffectCounter?: number | undefined);
    static from(args: {
        /**
         * Index of the leaf in the public data tree which is to be updated.
         */
        leafIndex: Fr;
        /**
         * Old value of the leaf.
         */
        oldValue: Fr;
        /**
         * New value of the leaf.
         */
        newValue: Fr;
    }): PublicDataUpdateRequest;
    toBuffer(): Buffer;
    static fromBuffer(buffer: Buffer | BufferReader): PublicDataUpdateRequest;
    static empty(): PublicDataUpdateRequest;
    toFriendlyJSON(): string;
}
/**
 * Data that is accumulated during the execution of the transaction.
 */
export declare class CombinedAccumulatedData {
    /**
     * Aggregated proof of all the previous kernel iterations.
     */
    aggregationObject: AggregationObject;
    /**
     * All the read requests made in this transaction.
     */
    readRequests: Tuple<Fr, typeof MAX_READ_REQUESTS_PER_TX>;
    /**
     * All the read requests made in this transaction.
     */
    pendingReadRequests: Tuple<Fr, typeof MAX_PENDING_READ_REQUESTS_PER_TX>;
    /**
     * The new commitments made in this transaction.
     */
    newCommitments: Tuple<Fr, typeof MAX_NEW_COMMITMENTS_PER_TX>;
    /**
     * The new nullifiers made in this transaction.
     */
    newNullifiers: Tuple<Fr, typeof MAX_NEW_NULLIFIERS_PER_TX>;
    /**
     * The commitments which are nullified by a nullifier in the above list. For pending nullifiers, we have:
     * nullifiedCommitments[j] != 0 if and only if newNullifiers[j] nullifies nullifiedCommitments[j]
     */
    nullifiedCommitments: Tuple<Fr, typeof MAX_NEW_NULLIFIERS_PER_TX>;
    /**
     * Current private call stack.
     */
    privateCallStack: Tuple<CallRequest, typeof MAX_PRIVATE_CALL_STACK_LENGTH_PER_TX>;
    /**
     * Current public call stack.
     */
    publicCallStack: Tuple<CallRequest, typeof MAX_PUBLIC_CALL_STACK_LENGTH_PER_TX>;
    /**
     * All the new L2 to L1 messages created in this transaction.
     */
    newL2ToL1Msgs: Tuple<Fr, typeof MAX_NEW_L2_TO_L1_MSGS_PER_CALL>;
    /**
     * Accumulated encrypted logs hash from all the previous kernel iterations.
     * Note: Represented as a tuple of 2 fields in order to fit in all of the 256 bits of sha256 hash.
     */
    encryptedLogsHash: Tuple<Fr, typeof NUM_FIELDS_PER_SHA256>;
    /**
     * Accumulated unencrypted logs hash from all the previous kernel iterations.
     * Note: Represented as a tuple of 2 fields in order to fit in all of the 256 bits of sha256 hash.
     */
    unencryptedLogsHash: Tuple<Fr, typeof NUM_FIELDS_PER_SHA256>;
    /**
     * Total accumulated length of the encrypted log preimages emitted in all the previous kernel iterations
     */
    encryptedLogPreimagesLength: Fr;
    /**
     * Total accumulated length of the unencrypted log preimages emitted in all the previous kernel iterations
     */
    unencryptedLogPreimagesLength: Fr;
    /**
     * All the new contracts deployed in this transaction.
     */
    newContracts: Tuple<NewContractData, typeof MAX_NEW_CONTRACTS_PER_TX>;
    /**
     * All the optionally revealed data in this transaction.
     */
    optionallyRevealedData: Tuple<OptionallyRevealedData, typeof MAX_OPTIONALLY_REVEALED_DATA_LENGTH_PER_TX>;
    /**
     * All the public data update requests made in this transaction.
     */
    publicDataUpdateRequests: Tuple<PublicDataUpdateRequest, typeof MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_TX>;
    /**
     * All the public data reads made in this transaction.
     */
    publicDataReads: Tuple<PublicDataRead, typeof MAX_PUBLIC_DATA_READS_PER_TX>;
    constructor(
    /**
     * Aggregated proof of all the previous kernel iterations.
     */
    aggregationObject: AggregationObject, // Contains the aggregated proof of all previous kernel iterations
    /**
     * All the read requests made in this transaction.
     */
    readRequests: Tuple<Fr, typeof MAX_READ_REQUESTS_PER_TX>, 
    /**
     * All the read requests made in this transaction.
     */
    pendingReadRequests: Tuple<Fr, typeof MAX_PENDING_READ_REQUESTS_PER_TX>, 
    /**
     * The new commitments made in this transaction.
     */
    newCommitments: Tuple<Fr, typeof MAX_NEW_COMMITMENTS_PER_TX>, 
    /**
     * The new nullifiers made in this transaction.
     */
    newNullifiers: Tuple<Fr, typeof MAX_NEW_NULLIFIERS_PER_TX>, 
    /**
     * The commitments which are nullified by a nullifier in the above list. For pending nullifiers, we have:
     * nullifiedCommitments[j] != 0 if and only if newNullifiers[j] nullifies nullifiedCommitments[j]
     */
    nullifiedCommitments: Tuple<Fr, typeof MAX_NEW_NULLIFIERS_PER_TX>, 
    /**
     * Current private call stack.
     */
    privateCallStack: Tuple<CallRequest, typeof MAX_PRIVATE_CALL_STACK_LENGTH_PER_TX>, 
    /**
     * Current public call stack.
     */
    publicCallStack: Tuple<CallRequest, typeof MAX_PUBLIC_CALL_STACK_LENGTH_PER_TX>, 
    /**
     * All the new L2 to L1 messages created in this transaction.
     */
    newL2ToL1Msgs: Tuple<Fr, typeof MAX_NEW_L2_TO_L1_MSGS_PER_CALL>, 
    /**
     * Accumulated encrypted logs hash from all the previous kernel iterations.
     * Note: Represented as a tuple of 2 fields in order to fit in all of the 256 bits of sha256 hash.
     */
    encryptedLogsHash: Tuple<Fr, typeof NUM_FIELDS_PER_SHA256>, 
    /**
     * Accumulated unencrypted logs hash from all the previous kernel iterations.
     * Note: Represented as a tuple of 2 fields in order to fit in all of the 256 bits of sha256 hash.
     */
    unencryptedLogsHash: Tuple<Fr, typeof NUM_FIELDS_PER_SHA256>, 
    /**
     * Total accumulated length of the encrypted log preimages emitted in all the previous kernel iterations
     */
    encryptedLogPreimagesLength: Fr, 
    /**
     * Total accumulated length of the unencrypted log preimages emitted in all the previous kernel iterations
     */
    unencryptedLogPreimagesLength: Fr, 
    /**
     * All the new contracts deployed in this transaction.
     */
    newContracts: Tuple<NewContractData, typeof MAX_NEW_CONTRACTS_PER_TX>, 
    /**
     * All the optionally revealed data in this transaction.
     */
    optionallyRevealedData: Tuple<OptionallyRevealedData, typeof MAX_OPTIONALLY_REVEALED_DATA_LENGTH_PER_TX>, 
    /**
     * All the public data update requests made in this transaction.
     */
    publicDataUpdateRequests: Tuple<PublicDataUpdateRequest, typeof MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_TX>, 
    /**
     * All the public data reads made in this transaction.
     */
    publicDataReads: Tuple<PublicDataRead, typeof MAX_PUBLIC_DATA_READS_PER_TX>);
    toBuffer(): Buffer;
    toString(): string;
    /**
     * Deserializes from a buffer or reader, corresponding to a write in cpp.
     * @param buffer - Buffer or reader to read from.
     * @returns Deserialized object.
     */
    static fromBuffer(buffer: Buffer | BufferReader): CombinedAccumulatedData;
    static fromFinalAccumulatedData(finalData: FinalAccumulatedData): CombinedAccumulatedData;
    /**
     * Deserializes from a string, corresponding to a write in cpp.
     * @param str - String to read from.
     * @returns Deserialized object.
     */
    static fromString(str: string): CombinedAccumulatedData;
    static empty(): CombinedAccumulatedData;
}
/**
 * Specific accumulated data structure for the final ordering private kernel circuit. It is included
 *  in the final public inputs of private kernel circuit.
 */
export declare class FinalAccumulatedData {
    /**
     * Aggregated proof of all the previous kernel iterations.
     */
    aggregationObject: AggregationObject;
    /**
     * The new commitments made in this transaction.
     */
    newCommitments: Tuple<Fr, typeof MAX_NEW_COMMITMENTS_PER_TX>;
    /**
     * The new nullifiers made in this transaction.
     */
    newNullifiers: Tuple<Fr, typeof MAX_NEW_NULLIFIERS_PER_TX>;
    /**
     * The commitments which are nullified by a nullifier in the above list. For pending nullifiers, we have:
     * nullifiedCommitments[j] != 0 if and only if newNullifiers[j] nullifies nullifiedCommitments[j]
     */
    nullifiedCommitments: Tuple<Fr, typeof MAX_NEW_NULLIFIERS_PER_TX>;
    /**
     * Current private call stack.
     * TODO(#3417): Given this field must empty, should we just remove it?
     */
    privateCallStack: Tuple<CallRequest, typeof MAX_PRIVATE_CALL_STACK_LENGTH_PER_TX>;
    /**
     * Current public call stack.
     */
    publicCallStack: Tuple<CallRequest, typeof MAX_PUBLIC_CALL_STACK_LENGTH_PER_TX>;
    /**
     * All the new L2 to L1 messages created in this transaction.
     */
    newL2ToL1Msgs: Tuple<Fr, typeof MAX_NEW_L2_TO_L1_MSGS_PER_CALL>;
    /**
     * Accumulated encrypted logs hash from all the previous kernel iterations.
     * Note: Represented as a tuple of 2 fields in order to fit in all of the 256 bits of sha256 hash.
     */
    encryptedLogsHash: Tuple<Fr, typeof NUM_FIELDS_PER_SHA256>;
    /**
     * Accumulated unencrypted logs hash from all the previous kernel iterations.
     * Note: Represented as a tuple of 2 fields in order to fit in all of the 256 bits of sha256 hash.
     */
    unencryptedLogsHash: Tuple<Fr, typeof NUM_FIELDS_PER_SHA256>;
    /**
     * Total accumulated length of the encrypted log preimages emitted in all the previous kernel iterations
     */
    encryptedLogPreimagesLength: Fr;
    /**
     * Total accumulated length of the unencrypted log preimages emitted in all the previous kernel iterations
     */
    unencryptedLogPreimagesLength: Fr;
    /**
     * All the new contracts deployed in this transaction.
     */
    newContracts: Tuple<NewContractData, typeof MAX_NEW_CONTRACTS_PER_TX>;
    /**
     * All the optionally revealed data in this transaction.
     */
    optionallyRevealedData: Tuple<OptionallyRevealedData, typeof MAX_OPTIONALLY_REVEALED_DATA_LENGTH_PER_TX>;
    constructor(
    /**
     * Aggregated proof of all the previous kernel iterations.
     */
    aggregationObject: AggregationObject, // Contains the aggregated proof of all previous kernel iterations
    /**
     * The new commitments made in this transaction.
     */
    newCommitments: Tuple<Fr, typeof MAX_NEW_COMMITMENTS_PER_TX>, 
    /**
     * The new nullifiers made in this transaction.
     */
    newNullifiers: Tuple<Fr, typeof MAX_NEW_NULLIFIERS_PER_TX>, 
    /**
     * The commitments which are nullified by a nullifier in the above list. For pending nullifiers, we have:
     * nullifiedCommitments[j] != 0 if and only if newNullifiers[j] nullifies nullifiedCommitments[j]
     */
    nullifiedCommitments: Tuple<Fr, typeof MAX_NEW_NULLIFIERS_PER_TX>, 
    /**
     * Current private call stack.
     * TODO(#3417): Given this field must empty, should we just remove it?
     */
    privateCallStack: Tuple<CallRequest, typeof MAX_PRIVATE_CALL_STACK_LENGTH_PER_TX>, 
    /**
     * Current public call stack.
     */
    publicCallStack: Tuple<CallRequest, typeof MAX_PUBLIC_CALL_STACK_LENGTH_PER_TX>, 
    /**
     * All the new L2 to L1 messages created in this transaction.
     */
    newL2ToL1Msgs: Tuple<Fr, typeof MAX_NEW_L2_TO_L1_MSGS_PER_CALL>, 
    /**
     * Accumulated encrypted logs hash from all the previous kernel iterations.
     * Note: Represented as a tuple of 2 fields in order to fit in all of the 256 bits of sha256 hash.
     */
    encryptedLogsHash: Tuple<Fr, typeof NUM_FIELDS_PER_SHA256>, 
    /**
     * Accumulated unencrypted logs hash from all the previous kernel iterations.
     * Note: Represented as a tuple of 2 fields in order to fit in all of the 256 bits of sha256 hash.
     */
    unencryptedLogsHash: Tuple<Fr, typeof NUM_FIELDS_PER_SHA256>, 
    /**
     * Total accumulated length of the encrypted log preimages emitted in all the previous kernel iterations
     */
    encryptedLogPreimagesLength: Fr, 
    /**
     * Total accumulated length of the unencrypted log preimages emitted in all the previous kernel iterations
     */
    unencryptedLogPreimagesLength: Fr, 
    /**
     * All the new contracts deployed in this transaction.
     */
    newContracts: Tuple<NewContractData, typeof MAX_NEW_CONTRACTS_PER_TX>, 
    /**
     * All the optionally revealed data in this transaction.
     */
    optionallyRevealedData: Tuple<OptionallyRevealedData, typeof MAX_OPTIONALLY_REVEALED_DATA_LENGTH_PER_TX>);
    toBuffer(): Buffer;
    toString(): string;
    /**
     * Deserializes from a buffer or reader, corresponding to a write in cpp.
     * @param buffer - Buffer or reader to read from.
     * @returns Deserialized object.
     */
    static fromBuffer(buffer: Buffer | BufferReader): FinalAccumulatedData;
    /**
     * Deserializes from a string, corresponding to a write in cpp.
     * @param str - String to read from.
     * @returns Deserialized object.
     */
    static fromString(str: string): FinalAccumulatedData;
    static empty(): FinalAccumulatedData;
}
//# sourceMappingURL=combined_accumulated_data.d.ts.map