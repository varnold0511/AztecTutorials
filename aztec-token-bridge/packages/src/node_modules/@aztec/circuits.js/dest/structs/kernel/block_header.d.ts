/// <reference types="node" resolution-mode="require"/>
import { Fr } from '@aztec/foundation/fields';
import { BufferReader } from '@aztec/foundation/serialize';
import { FieldsOf } from '../../utils/jsUtils.js';
/**
 * Information about the tree roots used for both public and private kernels.
 */
export declare class BlockHeader {
    /**
     * Root of the note hash tree at the time of when this information was assembled.
     */
    noteHashTreeRoot: Fr;
    /**
     * Root of the nullifier tree at the time of when this information was assembled.
     */
    nullifierTreeRoot: Fr;
    /**
     * Root of the contract tree at the time of when this information was assembled.
     */
    contractTreeRoot: Fr;
    /**
     * Root of the l1 to l2 messages tree at the time of when this information was assembled.
     */
    l1ToL2MessagesTreeRoot: Fr;
    /**
     * Root of the state roots tree (archive) at the block prior to when this information was assembled.
     */
    archiveRoot: Fr;
    /**
     * Root of the private kernel vk tree at the time of when this information was assembled.
     */
    privateKernelVkTreeRoot: Fr;
    /**
     * Current public state tree hash.
     */
    publicDataTreeRoot: Fr;
    /**
     * Previous globals hash, this value is used to recalculate the block hash.
     */
    globalVariablesHash: Fr;
    constructor(
    /**
     * Root of the note hash tree at the time of when this information was assembled.
     */
    noteHashTreeRoot: Fr, 
    /**
     * Root of the nullifier tree at the time of when this information was assembled.
     */
    nullifierTreeRoot: Fr, 
    /**
     * Root of the contract tree at the time of when this information was assembled.
     */
    contractTreeRoot: Fr, 
    /**
     * Root of the l1 to l2 messages tree at the time of when this information was assembled.
     */
    l1ToL2MessagesTreeRoot: Fr, 
    /**
     * Root of the state roots tree (archive) at the block prior to when this information was assembled.
     */
    archiveRoot: Fr, 
    /**
     * Root of the private kernel vk tree at the time of when this information was assembled.
     */
    privateKernelVkTreeRoot: Fr, // TODO(#3441) future enhancement
    /**
     * Current public state tree hash.
     */
    publicDataTreeRoot: Fr, 
    /**
     * Previous globals hash, this value is used to recalculate the block hash.
     */
    globalVariablesHash: Fr);
    static from(fields: FieldsOf<BlockHeader>): BlockHeader;
    static random(): BlockHeader;
    static getFields(fields: FieldsOf<BlockHeader>): readonly [Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr];
    toBuffer(): Buffer;
    toString(): string;
    /**
     * Return the block header as an array of items in the order they are serialized in noir.
     * @returns Array of items in the order they are stored in the contract
     */
    toArray(): Fr[];
    static fromBuffer(buffer: Buffer | BufferReader): BlockHeader;
    static fromString(str: string): BlockHeader;
    isEmpty(): boolean;
    static empty(): BlockHeader;
}
//# sourceMappingURL=block_header.d.ts.map