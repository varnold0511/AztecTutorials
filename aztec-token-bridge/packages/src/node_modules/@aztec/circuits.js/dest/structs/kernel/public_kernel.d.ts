/// <reference types="node" resolution-mode="require"/>
import { Fr } from '@aztec/foundation/fields';
import { Tuple } from '@aztec/foundation/serialize';
import { MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL, PUBLIC_DATA_TREE_HEIGHT } from '../../constants.gen.js';
import { CallRequest } from '../call_request.js';
import { PublicCallStackItem } from '../call_stack_item.js';
import { MembershipWitness } from '../membership_witness.js';
import { Proof } from '../proof.js';
import { PreviousKernelData } from './previous_kernel_data.js';
/**
 * Inputs to the public kernel circuit.
 */
export declare class PublicKernelInputs {
    /**
     * Kernels are recursive and this is the data from the previous kernel.
     */
    readonly previousKernel: PreviousKernelData;
    /**
     * Public calldata assembled from the execution result and proof.
     */
    readonly publicCall: PublicCallData;
    constructor(
    /**
     * Kernels are recursive and this is the data from the previous kernel.
     */
    previousKernel: PreviousKernelData, 
    /**
     * Public calldata assembled from the execution result and proof.
     */
    publicCall: PublicCallData);
    toBuffer(): Buffer;
}
/**
 // eslint-disable-next-line tsdoc/syntax
 * TODO: POSSIBLY OBSOLETE --\> DELETE OR DOCUMENT.
 */
export declare class WitnessedPublicCallData {
    /**
     * TODO.
     */
    readonly publicCall: PublicCallData;
    /**
     * TODO.
     */
    readonly updateRequestsHashPaths: MembershipWitness<typeof PUBLIC_DATA_TREE_HEIGHT>[];
    /**
     * TODO.
     */
    readonly readsHashPaths: MembershipWitness<typeof PUBLIC_DATA_TREE_HEIGHT>[];
    /**
     * TODO.
     */
    readonly publicDataTreeRoot: Fr;
    constructor(
    /**
     * TODO.
     */
    publicCall: PublicCallData, 
    /**
     * TODO.
     */
    updateRequestsHashPaths: MembershipWitness<typeof PUBLIC_DATA_TREE_HEIGHT>[], 
    /**
     * TODO.
     */
    readsHashPaths: MembershipWitness<typeof PUBLIC_DATA_TREE_HEIGHT>[], 
    /**
     * TODO.
     */
    publicDataTreeRoot: Fr);
    toBuffer(): Buffer;
}
/**
 * Public calldata assembled from the kernel execution result and proof.
 */
export declare class PublicCallData {
    /**
     * Call stack item being processed by the current iteration of the kernel.
     */
    readonly callStackItem: PublicCallStackItem;
    /**
     * Children call stack items.
     */
    readonly publicCallStack: Tuple<CallRequest, typeof MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>;
    /**
     * Proof of the call stack item execution.
     */
    readonly proof: Proof;
    /**
     * Address of the corresponding portal contract.
     */
    readonly portalContractAddress: Fr;
    /**
     * Hash of the L2 contract bytecode.
     */
    readonly bytecodeHash: Fr;
    constructor(
    /**
     * Call stack item being processed by the current iteration of the kernel.
     */
    callStackItem: PublicCallStackItem, 
    /**
     * Children call stack items.
     */
    publicCallStack: Tuple<CallRequest, typeof MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>, 
    /**
     * Proof of the call stack item execution.
     */
    proof: Proof, 
    /**
     * Address of the corresponding portal contract.
     */
    portalContractAddress: Fr, 
    /**
     * Hash of the L2 contract bytecode.
     */
    bytecodeHash: Fr);
    toBuffer(): Buffer;
}
//# sourceMappingURL=public_kernel.d.ts.map