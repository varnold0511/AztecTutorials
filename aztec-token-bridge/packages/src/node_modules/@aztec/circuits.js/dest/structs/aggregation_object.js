import { Fq, Fr } from '@aztec/foundation/fields';
import { BufferReader } from '@aztec/foundation/serialize';
import times from 'lodash.times';
import { serializeToBuffer } from '../utils/serialize.js';
import { Vector } from './shared.js';
import { G1AffineElement } from './verification_key.js';
/**
 * Contains the aggregated proof of all the previous kernel iterations.
 *
 * See barretenberg/cpp/src/barretenberg/stdlib/recursion/aggregation_state/native_aggregation_state.hpp
 * for more context.
 */
export class AggregationObject {
    constructor(
    /**
     * One of the 2 aggregated elements storing the verification results of proofs in the past.
     */
    p0, 
    /**
     * One of the 2 aggregated elements storing the verification results of proofs in the past.
     */
    p1, 
    /**
     * The public inputs of the inner proof (these become the private inputs to the recursive circuit).
     */
    publicInputs, 
    /**
     * Witness indices that point to (P0, P1).
     */
    proofWitnessIndices, 
    /**
     * Indicates if this aggregation state contain past (P0, P1).
     */
    hasData = false) {
        this.p0 = p0;
        this.p1 = p1;
        this.publicInputs = publicInputs;
        this.proofWitnessIndices = proofWitnessIndices;
        this.hasData = hasData;
    }
    toBuffer() {
        return serializeToBuffer(this.p0, this.p1, new Vector(this.publicInputs), new Vector(this.proofWitnessIndices), this.hasData);
    }
    /**
     * Deserializes this object from a buffer.
     * @param buffer - The buffer representation of this object.
     * @returns The deserialized object.
     */
    static fromBuffer(buffer) {
        const reader = BufferReader.asReader(buffer);
        return new AggregationObject(reader.readObject(G1AffineElement), reader.readObject(G1AffineElement), reader.readVector(Fr), reader.readNumberVector(), reader.readBoolean());
    }
    /**
     * Creates a fake object for testing.
     * @returns The fake object.
     */
    static makeFake() {
        return new AggregationObject(new G1AffineElement(new Fq(1n), new Fq(2n)), new G1AffineElement(new Fq(1n), new Fq(2n)), [], times(16, i => 3027 + i), false);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWdncmVnYXRpb25fb2JqZWN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3N0cnVjdHMvYWdncmVnYXRpb25fb2JqZWN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDbEQsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBRTNELE9BQU8sS0FBSyxNQUFNLGNBQWMsQ0FBQztBQUVqQyxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUMxRCxPQUFPLEVBQVUsTUFBTSxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQzdDLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUV4RDs7Ozs7R0FLRztBQUNILE1BQU0sT0FBTyxpQkFBaUI7SUFDNUI7SUFDRTs7T0FFRztJQUNJLEVBQW1CO0lBQzFCOztPQUVHO0lBQ0ksRUFBbUI7SUFDMUI7O09BRUc7SUFDSSxZQUFrQjtJQUN6Qjs7T0FFRztJQUNJLG1CQUE2QjtJQUNwQzs7T0FFRztJQUNJLFVBQVUsS0FBSztRQWhCZixPQUFFLEdBQUYsRUFBRSxDQUFpQjtRQUluQixPQUFFLEdBQUYsRUFBRSxDQUFpQjtRQUluQixpQkFBWSxHQUFaLFlBQVksQ0FBTTtRQUlsQix3QkFBbUIsR0FBbkIsbUJBQW1CLENBQVU7UUFJN0IsWUFBTyxHQUFQLE9BQU8sQ0FBUTtJQUNyQixDQUFDO0lBRUosUUFBUTtRQUNOLE9BQU8saUJBQWlCLENBQ3RCLElBQUksQ0FBQyxFQUFFLEVBQ1AsSUFBSSxDQUFDLEVBQUUsRUFDUCxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLEVBQzdCLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxFQUNwQyxJQUFJLENBQUMsT0FBTyxDQUNiLENBQUM7SUFDSixDQUFDO0lBRUQ7Ozs7T0FJRztJQUNJLE1BQU0sQ0FBQyxVQUFVLENBQUMsTUFBNkI7UUFDcEQsTUFBTSxNQUFNLEdBQUcsWUFBWSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUM3QyxPQUFPLElBQUksaUJBQWlCLENBQzFCLE1BQU0sQ0FBQyxVQUFVLENBQUMsZUFBZSxDQUFDLEVBQ2xDLE1BQU0sQ0FBQyxVQUFVLENBQUMsZUFBZSxDQUFDLEVBQ2xDLE1BQU0sQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDLEVBQ3JCLE1BQU0sQ0FBQyxnQkFBZ0IsRUFBRSxFQUN6QixNQUFNLENBQUMsV0FBVyxFQUFFLENBQ3JCLENBQUM7SUFDSixDQUFDO0lBRUQ7OztPQUdHO0lBQ0ksTUFBTSxDQUFDLFFBQVE7UUFDcEIsT0FBTyxJQUFJLGlCQUFpQixDQUMxQixJQUFJLGVBQWUsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxJQUFJLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUMzQyxJQUFJLGVBQWUsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxJQUFJLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUMzQyxFQUFFLEVBQ0YsS0FBSyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksR0FBRyxDQUFDLENBQUMsRUFDeEIsS0FBSyxDQUNOLENBQUM7SUFDSixDQUFDO0NBQ0YifQ==