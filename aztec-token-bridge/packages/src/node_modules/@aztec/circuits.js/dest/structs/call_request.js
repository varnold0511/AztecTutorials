import { AztecAddress } from '@aztec/foundation/aztec-address';
import { Fr } from '@aztec/foundation/fields';
import { BufferReader } from '@aztec/foundation/serialize';
import { serializeToBuffer } from '../utils/serialize.js';
/**
 * Caller context.
 */
export class CallerContext {
    constructor(
    /**
     * Address of the caller contract.
     */
    msgSender, 
    /**
     * Storage contract address of the caller contract.
     */
    storageContractAddress) {
        this.msgSender = msgSender;
        this.storageContractAddress = storageContractAddress;
    }
    /**
     * Returns a new instance of CallerContext with zero values.
     * @returns A new instance of CallerContext with zero values.
     */
    static empty() {
        return new CallerContext(AztecAddress.ZERO, AztecAddress.ZERO);
    }
    isEmpty() {
        return this.msgSender.isZero() && this.storageContractAddress.isZero();
    }
    static from(fields) {
        return new CallerContext(...CallerContext.getFields(fields));
    }
    static getFields(fields) {
        return [fields.msgSender, fields.storageContractAddress];
    }
    /**
     * Serialize this as a buffer.
     * @returns The buffer.
     */
    toBuffer() {
        return serializeToBuffer(...CallerContext.getFields(this));
    }
    /**
     * Deserialize this from a buffer.
     * @param buffer - The bufferable type from which to deserialize.
     * @returns The deserialized instance of PublicCallRequest.
     */
    static fromBuffer(buffer) {
        const reader = BufferReader.asReader(buffer);
        return new CallerContext(new AztecAddress(reader.readBytes(32)), new AztecAddress(reader.readBytes(32)));
    }
    equals(callerContext) {
        return (callerContext.msgSender.equals(this.msgSender) &&
            callerContext.storageContractAddress.equals(this.storageContractAddress));
    }
}
/**
 * Call request.
 */
export class CallRequest {
    constructor(
    /**
     * The hash of the call stack item.
     */
    hash, 
    /**
     * The address of the contract calling the function.
     */
    callerContractAddress, 
    /**
     * The call context of the contract calling the function.
     */
    callerContext) {
        this.hash = hash;
        this.callerContractAddress = callerContractAddress;
        this.callerContext = callerContext;
    }
    toBuffer() {
        return serializeToBuffer(this.hash, this.callerContractAddress, this.callerContext);
    }
    /**
     * Deserializes from a buffer or reader.
     * @param buffer - Buffer or reader to read from.
     * @returns The deserialized instance of CallRequest.
     */
    static fromBuffer(buffer) {
        const reader = BufferReader.asReader(buffer);
        return new CallRequest(Fr.fromBuffer(reader), reader.readObject(AztecAddress), reader.readObject(CallerContext));
    }
    isEmpty() {
        return this.hash.isZero() && this.callerContractAddress.isZero() && this.callerContext.isEmpty();
    }
    /**
     * Returns a new instance of CallRequest with zero hash, caller contract address and caller context.
     * @returns A new instance of CallRequest with zero hash, caller contract address and caller context.
     */
    static empty() {
        return new CallRequest(Fr.ZERO, AztecAddress.ZERO, CallerContext.empty());
    }
    equals(callRequest) {
        return (callRequest.hash.equals(this.hash) &&
            callRequest.callerContractAddress.equals(this.callerContractAddress) &&
            callRequest.callerContext.equals(this.callerContext));
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FsbF9yZXF1ZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3N0cnVjdHMvY2FsbF9yZXF1ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUMvRCxPQUFPLEVBQUUsRUFBRSxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDOUMsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBRzNELE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBRTFEOztHQUVHO0FBQ0gsTUFBTSxPQUFPLGFBQWE7SUFDeEI7SUFDRTs7T0FFRztJQUNJLFNBQXVCO0lBQzlCOztPQUVHO0lBQ0ksc0JBQW9DO1FBSnBDLGNBQVMsR0FBVCxTQUFTLENBQWM7UUFJdkIsMkJBQXNCLEdBQXRCLHNCQUFzQixDQUFjO0lBQzFDLENBQUM7SUFFSjs7O09BR0c7SUFDSSxNQUFNLENBQUMsS0FBSztRQUNqQixPQUFPLElBQUksYUFBYSxDQUFDLFlBQVksQ0FBQyxJQUFJLEVBQUUsWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ2pFLENBQUM7SUFFRCxPQUFPO1FBQ0wsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sRUFBRSxJQUFJLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLEVBQUUsQ0FBQztJQUN6RSxDQUFDO0lBRUQsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUErQjtRQUN6QyxPQUFPLElBQUksYUFBYSxDQUFDLEdBQUcsYUFBYSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO0lBQy9ELENBQUM7SUFFRCxNQUFNLENBQUMsU0FBUyxDQUFDLE1BQStCO1FBQzlDLE9BQU8sQ0FBQyxNQUFNLENBQUMsU0FBUyxFQUFFLE1BQU0sQ0FBQyxzQkFBc0IsQ0FBVSxDQUFDO0lBQ3BFLENBQUM7SUFFRDs7O09BR0c7SUFD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