/// <reference types="node" resolution-mode="require"/>
import { AztecAddress } from '@aztec/foundation/aztec-address';
import { Fr } from '@aztec/foundation/fields';
import { BufferReader, Tuple } from '@aztec/foundation/serialize';
import { MAX_NEW_COMMITMENTS_PER_CALL, MAX_NEW_L2_TO_L1_MSGS_PER_CALL, MAX_NEW_NULLIFIERS_PER_CALL, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL, MAX_PUBLIC_DATA_READS_PER_CALL, MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL, RETURN_VALUES_LENGTH } from '../constants.gen.js';
import { FieldsOf } from '../utils/jsUtils.js';
import { CallContext } from './call_context.js';
import { BlockHeader } from './index.js';
/**
 * Contract storage read operation on a specific contract.
 *
 * Note: Similar to `PublicDataRead` but it's from the POV of contract storage so we are not working with public data
 * tree leaf index but storage slot index.
 */
export declare class ContractStorageRead {
    /**
     * Storage slot we are reading from.
     */
    readonly storageSlot: Fr;
    /**
     * Value read from the storage slot.
     */
    readonly currentValue: Fr;
    /**
     * Optional side effect counter tracking position of this event in tx execution.
     */
    readonly sideEffectCounter?: number | undefined;
    constructor(
    /**
     * Storage slot we are reading from.
     */
    storageSlot: Fr, 
    /**
     * Value read from the storage slot.
     */
    currentValue: Fr, 
    /**
     * Optional side effect counter tracking position of this event in tx execution.
     */
    sideEffectCounter?: number | undefined);
    static from(args: {
        /**
         * Storage slot we are reading from.
         */
        storageSlot: Fr;
        /**
         * Value read from the storage slot.
         */
        currentValue: Fr;
        /**
         * Optional side effect counter tracking position of this event in tx execution.
         */
        sideEffectCounter?: number;
    }): ContractStorageRead;
    toBuffer(): Buffer;
    static fromBuffer(buffer: Buffer | BufferReader): ContractStorageRead;
    static empty(): ContractStorageRead;
    isEmpty(): boolean;
    toFriendlyJSON(): string;
}
/**
 * Contract storage update request for a slot on a specific contract.
 *
 * Note: Similar to `PublicDataUpdateRequest` but it's from the POV of contract storage so we are not working with
 * public data tree leaf index but storage slot index.
 */
export declare class ContractStorageUpdateRequest {
    /**
     * Storage slot we are updating.
     */
    readonly storageSlot: Fr;
    /**
     * Old value of the storage slot.
     */
    readonly oldValue: Fr;
    /**
     * New value of the storage slot.
     */
    readonly newValue: Fr;
    /**
     * Optional side effect counter tracking position of this event in tx execution.
     */
    readonly sideEffectCounter?: number | undefined;
    constructor(
    /**
     * Storage slot we are updating.
     */
    storageSlot: Fr, 
    /**
     * Old value of the storage slot.
     */
    oldValue: Fr, 
    /**
     * New value of the storage slot.
     */
    newValue: Fr, 
    /**
     * Optional side effect counter tracking position of this event in tx execution.
     */
    sideEffectCounter?: number | undefined);
    toBuffer(): Buffer;
    static fromBuffer(buffer: Buffer | BufferReader): ContractStorageUpdateRequest;
    /**
     * Create PublicCallRequest from a fields dictionary.
     * @param fields - The dictionary.
     * @returns A PublicCallRequest object.
     */
    static from(fields: FieldsOf<ContractStorageUpdateRequest>): ContractStorageUpdateRequest;
    /**
     * Serialize into a field array. Low-level utility.
     * @param fields - Object with fields.
     * @returns The array.
     */
    static getFields(fields: FieldsOf<ContractStorageUpdateRequest>): readonly [Fr, Fr, Fr, number | undefined];
    static empty(): ContractStorageUpdateRequest;
    isEmpty(): boolean;
    toFriendlyJSON(): string;
}
/**
 * Public inputs to a public circuit.
 */
export declare class PublicCircuitPublicInputs {
    /**
     * Current call context.
     */
    callContext: CallContext;
    /**
     * Pedersen hash of the arguments of the call.
     */
    argsHash: Fr;
    /**
     * Return values of the call.
     */
    returnValues: Tuple<Fr, typeof RETURN_VALUES_LENGTH>;
    /**
     * Contract storage update requests executed during the call.
     */
    contractStorageUpdateRequests: Tuple<ContractStorageUpdateRequest, typeof MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL>;
    /**
     * Contract storage reads executed during the call.
     */
    contractStorageReads: Tuple<ContractStorageRead, typeof MAX_PUBLIC_DATA_READS_PER_CALL>;
    /**
     * Public call stack of the current kernel iteration.
     */
    publicCallStackHashes: Tuple<Fr, typeof MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>;
    /**
     * New commitments created within a public execution call
     */
    newCommitments: Tuple<Fr, typeof MAX_NEW_COMMITMENTS_PER_CALL>;
    /**
     * New nullifiers created within a public execution call
     */
    newNullifiers: Tuple<Fr, typeof MAX_NEW_NULLIFIERS_PER_CALL>;
    /**
     * New L2 to L1 messages generated during the call.
     */
    newL2ToL1Msgs: Tuple<Fr, typeof MAX_NEW_L2_TO_L1_MSGS_PER_CALL>;
    /**
     * Hash of the unencrypted logs emitted in this function call.
     * Note: Represented as an array of 2 fields in order to fit in all of the 256 bits of sha256 hash.
     */
    unencryptedLogsHash: [Fr, Fr];
    /**
     * Length of the unencrypted log preimages emitted in this function call.
     */
    unencryptedLogPreimagesLength: Fr;
    /**
     * Root of the commitment trees when the call started.
     */
    blockHeader: BlockHeader;
    /**
     * Address of the prover.
     */
    proverAddress: AztecAddress;
    constructor(
    /**
     * Current call context.
     */
    callContext: CallContext, 
    /**
     * Pedersen hash of the arguments of the call.
     */
    argsHash: Fr, 
    /**
     * Return values of the call.
     */
    returnValues: Tuple<Fr, typeof RETURN_VALUES_LENGTH>, 
    /**
     * Contract storage update requests executed during the call.
     */
    contractStorageUpdateRequests: Tuple<ContractStorageUpdateRequest, typeof MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL>, 
    /**
     * Contract storage reads executed during the call.
     */
    contractStorageReads: Tuple<ContractStorageRead, typeof MAX_PUBLIC_DATA_READS_PER_CALL>, 
    /**
     * Public call stack of the current kernel iteration.
     */
    publicCallStackHashes: Tuple<Fr, typeof MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>, 
    /**
     * New commitments created within a public execution call
     */
    newCommitments: Tuple<Fr, typeof MAX_NEW_COMMITMENTS_PER_CALL>, 
    /**
     * New nullifiers created within a public execution call
     */
    newNullifiers: Tuple<Fr, typeof MAX_NEW_NULLIFIERS_PER_CALL>, 
    /**
     * New L2 to L1 messages generated during the call.
     */
    newL2ToL1Msgs: Tuple<Fr, typeof MAX_NEW_L2_TO_L1_MSGS_PER_CALL>, 
    /**
     * Hash of the unencrypted logs emitted in this function call.
     * Note: Represented as an array of 2 fields in order to fit in all of the 256 bits of sha256 hash.
     */
    unencryptedLogsHash: [Fr, Fr], 
    /**
     * Length of the unencrypted log preimages emitted in this function call.
     */
    unencryptedLogPreimagesLength: Fr, 
    /**
     * Root of the commitment trees when the call started.
     */
    blockHeader: BlockHeader, 
    /**
     * Address of the prover.
     */
    proverAddress: AztecAddress);
    /**
     * Create PublicCircuitPublicInputs from a fields dictionary.
     * @param fields - The dictionary.
     * @returns A PublicCircuitPublicInputs object.
     */
    static from(fields: FieldsOf<PublicCircuitPublicInputs>): PublicCircuitPublicInputs;
    /**
     * Returns an empty instance.
     * @returns An empty instance.
     */
    static empty(): PublicCircuitPublicInputs;
    isEmpty(): boolean;
    /**
     * Serialize into a field array. Low-level utility.
     * @param fields - Object with fields.
     * @returns The array.
     */
    static getFields(fields: FieldsOf<PublicCircuitPublicInputs>): readonly [CallContext, Fr, [Fr, Fr, Fr, Fr], [ContractStorageUpdateRequest, ContractStorageUpdateRequest, ContractStorageUpdateRequest, ContractStorageUpdateRequest, ContractStorageUpdateRequest, ContractStorageUpdateRequest, ContractStorageUpdateRequest, ContractStorageUpdateRequest, ContractStorageUpdateRequest, ContractStorageUpdateRequest, ContractStorageUpdateRequest, ContractStorageUpdateRequest, ContractStorageUpdateRequest, ContractStorageUpdateRequest, ContractStorageUpdateRequest, ContractStorageUpdateRequest], [ContractStorageRead, ContractStorageRead, ContractStorageRead, ContractStorageRead, ContractStorageRead, ContractStorageRead, ContractStorageRead, ContractStorageRead, ContractStorageRead, ContractStorageRead, ContractStorageRead, ContractStorageRead, ContractStorageRead, ContractStorageRead, ContractStorageRead, ContractStorageRead], [Fr, Fr, Fr, Fr], [Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr], [Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr], [Fr, Fr], [Fr, Fr], Fr, BlockHeader, AztecAddress];
    /**
     * Serialize this as a buffer.
     * @returns The buffer.
     */
    toBuffer(): Buffer;
}
//# sourceMappingURL=public_circuit_public_inputs.d.ts.map