import { Fr } from '@aztec/foundation/fields';
import { BufferReader } from '@aztec/foundation/serialize';
import { serializeToBuffer } from '../../utils/serialize.js';
/**
 * The string encoding used for serializing BlockHeader objects.
 */
const STRING_ENCODING = 'hex';
/**
 * Information about the tree roots used for both public and private kernels.
 */
export class BlockHeader {
    constructor(
    /**
     * Root of the note hash tree at the time of when this information was assembled.
     */
    noteHashTreeRoot, 
    /**
     * Root of the nullifier tree at the time of when this information was assembled.
     */
    nullifierTreeRoot, 
    /**
     * Root of the contract tree at the time of when this information was assembled.
     */
    contractTreeRoot, 
    /**
     * Root of the l1 to l2 messages tree at the time of when this information was assembled.
     */
    l1ToL2MessagesTreeRoot, 
    /**
     * Root of the state roots tree (archive) at the block prior to when this information was assembled.
     */
    archiveRoot, 
    /**
     * Root of the private kernel vk tree at the time of when this information was assembled.
     */
    privateKernelVkTreeRoot, // TODO(#3441) future enhancement
    /**
     * Current public state tree hash.
     */
    publicDataTreeRoot, 
    /**
     * Previous globals hash, this value is used to recalculate the block hash.
     */
    globalVariablesHash) {
        this.noteHashTreeRoot = noteHashTreeRoot;
        this.nullifierTreeRoot = nullifierTreeRoot;
        this.contractTreeRoot = contractTreeRoot;
        this.l1ToL2MessagesTreeRoot = l1ToL2MessagesTreeRoot;
        this.archiveRoot = archiveRoot;
        this.privateKernelVkTreeRoot = privateKernelVkTreeRoot;
        this.publicDataTreeRoot = publicDataTreeRoot;
        this.globalVariablesHash = globalVariablesHash;
    }
    static from(fields) {
        return new BlockHeader(...BlockHeader.getFields(fields));
    }
    static random() {
        return new BlockHeader(Fr.random(), Fr.random(), Fr.random(), Fr.random(), Fr.random(), Fr.random(), Fr.random(), Fr.random());
    }
    static getFields(fields) {
        return [
            fields.noteHashTreeRoot,
            fields.nullifierTreeRoot,
            fields.contractTreeRoot,
            fields.l1ToL2MessagesTreeRoot,
            fields.archiveRoot,
            fields.privateKernelVkTreeRoot,
            fields.publicDataTreeRoot,
            fields.globalVariablesHash,
        ];
    }
    toBuffer() {
        return serializeToBuffer(...BlockHeader.getFields(this));
    }
    toString() {
        // originally this was encoding as utf-8 (the default). This caused problems decoding back the data.
        return this.toBuffer().toString(STRING_ENCODING);
    }
    /**
     * Return the block header as an array of items in the order they are serialized in noir.
     * @returns Array of items in the order they are stored in the contract
     */
    toArray() {
        return [
            this.noteHashTreeRoot,
            this.nullifierTreeRoot,
            this.contractTreeRoot,
            this.l1ToL2MessagesTreeRoot,
            this.archiveRoot,
            // it is not present in noir,
            this.publicDataTreeRoot,
            this.globalVariablesHash,
        ];
    }
    static fromBuffer(buffer) {
        const reader = BufferReader.asReader(buffer);
        return new BlockHeader(Fr.fromBuffer(reader), Fr.fromBuffer(reader), Fr.fromBuffer(reader), Fr.fromBuffer(reader), Fr.fromBuffer(reader), Fr.fromBuffer(reader), Fr.fromBuffer(reader), Fr.fromBuffer(reader));
    }
    static fromString(str) {
        return BlockHeader.fromBuffer(Buffer.from(str, STRING_ENCODING));
    }
    isEmpty() {
        return (this.noteHashTreeRoot.isZero() &&
            this.nullifierTreeRoot.isZero() &&
            this.contractTreeRoot.isZero() &&
            this.l1ToL2MessagesTreeRoot.isZero() &&
            this.archiveRoot.isZero() &&
            this.privateKernelVkTreeRoot.isZero() &&
            this.publicDataTreeRoot.isZero() &&
            this.globalVariablesHash.isZero());
    }
    static empty() {
        return new BlockHeader(Fr.ZERO, Fr.ZERO, Fr.ZERO, Fr.ZERO, Fr.ZERO, Fr.ZERO, Fr.ZERO, Fr.ZERO);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmxvY2tfaGVhZGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3N0cnVjdHMva2VybmVsL2Jsb2NrX2hlYWRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsRUFBRSxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDOUMsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBRzNELE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBRTdEOztHQUVHO0FBQ0gsTUFBTSxlQUFlLEdBQW1CLEtBQUssQ0FBQztBQUU5Qzs7R0FFRztBQUNILE1BQU0sT0FBTyxXQUFXO0lBQ3RCO0lBQ0U7O09BRUc7SUFDSSxnQkFBb0I7SUFDM0I7O09BRUc7SUFDSSxpQkFBcUI7SUFDNUI7O09BRUc7SUFDSSxnQkFBb0I7SUFDM0I7O09BRUc7SUFDSSxzQkFBMEI7SUFDakM7O09BRUc7SUFDSSxXQUFlO0lBQ3RCOztPQUVHO0lBQ0ksdUJBQTJCLEVBQUUsaUNBQWlDO0lBQ3JFOztPQUVHO0lBQ0ksa0JBQXNCO0lBQzdCOztPQUVHO0lBQ0ksbUJBQXVCO1FBNUJ2QixxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQUk7UUFJcEIsc0JBQWlCLEdBQWpCLGlCQUFpQixDQUFJO1FBSXJCLHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBSTtRQUlwQiwyQkFBc0IsR0FBdEIsc0JBQXNCLENBQUk7UUFJMUIsZ0JBQVcsR0FBWCxXQUFXLENBQUk7UUFJZiw0QkFBdUIsR0FBdkIsdUJBQXVCLENBQUk7UUFJM0IsdUJBQWtCLEdBQWxCLGtCQUFrQixDQUFJO1FBSXRCLHdCQUFtQixHQUFuQixtQkFBbUIsQ0FBSTtJQUM3QixDQUFDO0lBRUosTUFBTSxDQUFDLElBQUksQ0FBQyxNQUE2QjtRQUN2QyxPQUFPLElBQUksV0FBVyxDQUFDLEdBQUcsV0FBVyxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxD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