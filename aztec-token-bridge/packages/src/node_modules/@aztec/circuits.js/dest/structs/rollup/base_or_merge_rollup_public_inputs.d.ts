/// <reference types="node" resolution-mode="require"/>
import { Fr } from '@aztec/foundation/fields';
import { BufferReader } from '@aztec/foundation/serialize';
import { AggregationObject } from '../aggregation_object.js';
import { RollupTypes } from '../shared.js';
import { AppendOnlyTreeSnapshot } from './append_only_tree_snapshot.js';
import { ConstantRollupData } from './base_rollup.js';
/**
 * Output of the base and merge rollup circuits.
 */
export declare class BaseOrMergeRollupPublicInputs {
    /**
     * Specifies from which type of rollup circuit these inputs are from.
     */
    rollupType: RollupTypes;
    /**
     * Rollup sub tree height.
     * Note 1: Base rollup circuit always have a sub tree height of 0.
     * Note 2: With each merge, the sub tree height increases by 1.
     */
    rollupSubtreeHeight: Fr;
    /**
     * Native aggregation state at the end of the rollup circuit.
     */
    endAggregationObject: AggregationObject;
    /**
     * Data which is forwarded through the rollup circuits unchanged.
     */
    constants: ConstantRollupData;
    /**
     * Snapshot of the note hash tree at the start of the rollup circuit.
     */
    startNoteHashTreeSnapshot: AppendOnlyTreeSnapshot;
    /**
     * Snapshot of the note hash tree at the end of the rollup circuit.
     */
    endNoteHashTreeSnapshot: AppendOnlyTreeSnapshot;
    /**
     * Snapshot of the nullifier tree at the start of the rollup circuit.
     */
    startNullifierTreeSnapshot: AppendOnlyTreeSnapshot;
    /**
     * Snapshot of the nullifier tree at the end of the rollup circuit.
     */
    endNullifierTreeSnapshot: AppendOnlyTreeSnapshot;
    /**
     * Snapshot of the contract tree at the start of the rollup circuit.
     */
    startContractTreeSnapshot: AppendOnlyTreeSnapshot;
    /**
     * Snapshot of the contract tree at the end of the rollup circuit.
     */
    endContractTreeSnapshot: AppendOnlyTreeSnapshot;
    /**
     * Root of the public data tree at the start of the rollup circuit.
     */
    startPublicDataTreeRoot: Fr;
    /**
     * Root of the public data tree at the end of the rollup circuit.
     */
    endPublicDataTreeRoot: Fr;
    /**
     * SHA256 hashes of calldata. Used to make public inputs constant-sized (to then be unpacked on-chain).
     * Note: Length 2 for high and low.
     */
    calldataHash: [Fr, Fr];
    constructor(
    /**
     * Specifies from which type of rollup circuit these inputs are from.
     */
    rollupType: RollupTypes, 
    /**
     * Rollup sub tree height.
     * Note 1: Base rollup circuit always have a sub tree height of 0.
     * Note 2: With each merge, the sub tree height increases by 1.
     */
    rollupSubtreeHeight: Fr, 
    /**
     * Native aggregation state at the end of the rollup circuit.
     */
    endAggregationObject: AggregationObject, 
    /**
     * Data which is forwarded through the rollup circuits unchanged.
     */
    constants: ConstantRollupData, 
    /**
     * Snapshot of the note hash tree at the start of the rollup circuit.
     */
    startNoteHashTreeSnapshot: AppendOnlyTreeSnapshot, 
    /**
     * Snapshot of the note hash tree at the end of the rollup circuit.
     */
    endNoteHashTreeSnapshot: AppendOnlyTreeSnapshot, 
    /**
     * Snapshot of the nullifier tree at the start of the rollup circuit.
     */
    startNullifierTreeSnapshot: AppendOnlyTreeSnapshot, 
    /**
     * Snapshot of the nullifier tree at the end of the rollup circuit.
     */
    endNullifierTreeSnapshot: AppendOnlyTreeSnapshot, 
    /**
     * Snapshot of the contract tree at the start of the rollup circuit.
     */
    startContractTreeSnapshot: AppendOnlyTreeSnapshot, 
    /**
     * Snapshot of the contract tree at the end of the rollup circuit.
     */
    endContractTreeSnapshot: AppendOnlyTreeSnapshot, 
    /**
     * Root of the public data tree at the start of the rollup circuit.
     */
    startPublicDataTreeRoot: Fr, 
    /**
     * Root of the public data tree at the end of the rollup circuit.
     */
    endPublicDataTreeRoot: Fr, 
    /**
     * SHA256 hashes of calldata. Used to make public inputs constant-sized (to then be unpacked on-chain).
     * Note: Length 2 for high and low.
     */
    calldataHash: [Fr, Fr]);
    /**
     * Deserializes from a buffer or reader.
     * Note: Corresponds to a write in cpp.
     * @param buffer - Buffer or reader to read from.
     * @returns The deserialized public inputs.
     */
    static fromBuffer(buffer: Buffer | BufferReader): BaseOrMergeRollupPublicInputs;
    /**
     * Serialize this as a buffer.
     * @returns The buffer.
     */
    toBuffer(): Buffer;
}
//# sourceMappingURL=base_or_merge_rollup_public_inputs.d.ts.map