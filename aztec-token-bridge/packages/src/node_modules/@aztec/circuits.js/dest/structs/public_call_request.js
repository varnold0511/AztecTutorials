import { BufferReader } from '@aztec/foundation/serialize';
import { computeVarArgsHash } from '../abis/abis.js';
import { serializeToBuffer } from '../utils/serialize.js';
import { CallerContext } from './call_request.js';
import { AztecAddress, CallContext, CallRequest, Fr, FunctionData, PublicCallStackItem, PublicCircuitPublicInputs, Vector, } from './index.js';
/**
 * Represents a request to call a public function from a private function. Serialization is
 * equivalent to a public call stack item, but without the result fields.
 */
export class PublicCallRequest {
    constructor(
    /**
     *Address of the contract on which the function is invoked.
     */
    contractAddress, 
    /**
     * Data identifying the function being called.
     * TODO(#3417): Remove this since the only useful data is the function selector, which is already part of the call context.
     */
    functionData, 
    /**
     * Context of the public call.
     * TODO(#3417): Check if all fields of CallContext are actually needed.
     */
    callContext, 
    /**
     * Function arguments.
     */
    args, 
    /**
     * Optional side effect counter tracking position of this event in tx execution.
     */
    sideEffectCounter) {
        this.contractAddress = contractAddress;
        this.functionData = functionData;
        this.callContext = callContext;
        this.args = args;
        this.sideEffectCounter = sideEffectCounter;
    }
    /**
     * Serialize this as a buffer.
     * @returns The buffer.
     */
    toBuffer() {
        return serializeToBuffer(this.contractAddress, this.functionData, this.callContext, new Vector(this.args));
    }
    /**
     * Deserialize this from a buffer.
     * @param buffer - The bufferable type from which to deserialize.
     * @returns The deserialized instance of PublicCallRequest.
     */
    static fromBuffer(buffer) {
        const reader = BufferReader.asReader(buffer);
        return new PublicCallRequest(new AztecAddress(reader.readBytes(32)), FunctionData.fromBuffer(reader), CallContext.fromBuffer(reader), reader.readVector(Fr));
    }
    /**
     * Create PublicCallRequest from a fields dictionary.
     * @param fields - The dictionary.
     * @returns A PublicCallRequest object.
     */
    static from(fields) {
        return new PublicCallRequest(...PublicCallRequest.getFields(fields));
    }
    /**
     * Serialize into a field array. Low-level utility.
     * @param fields - Object with fields.
     * @returns The array.
     */
    static getFields(fields) {
        return [
            fields.contractAddress,
            fields.functionData,
            fields.callContext,
            fields.args,
            fields.sideEffectCounter,
        ];
    }
    /**
     * Creates a new PublicCallStackItem by populating with zeroes all fields related to result in the public circuit output.
     * @returns A PublicCallStackItem instance with the same contract address, function data, call context, and args.
     */
    toPublicCallStackItem() {
        const publicInputs = PublicCircuitPublicInputs.empty();
        publicInputs.callContext = this.callContext;
        publicInputs.argsHash = this.getArgsHash();
        return new PublicCallStackItem(this.contractAddress, this.functionData, publicInputs, true);
    }
    /**
     * Creates a new CallRequest with values of the calling contract.
     * @returns A CallRequest instance with the contract address, caller context, and the hash of the call stack item.
     */
    toCallRequest() {
        const item = this.toPublicCallStackItem();
        const callerContractAddress = this.callContext.msgSender;
        const callerContext = this.callContext.isDelegateCall
            ? new CallerContext(this.callContext.msgSender, this.callContext.storageContractAddress)
            : CallerContext.empty();
        return new CallRequest(item.hash(), callerContractAddress, callerContext);
    }
    /**
     * Returns the hash of the arguments for this request.
     * @returns Hash of the arguments for this request.
     */
    getArgsHash() {
        return computeVarArgsHash(this.args);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHVibGljX2NhbGxfcmVxdWVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zdHJ1Y3RzL3B1YmxpY19jYWxsX3JlcXVlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBRTNELE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBRXJELE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQzFELE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUNsRCxPQUFPLEVBQ0wsWUFBWSxFQUNaLFdBQVcsRUFDWCxXQUFXLEVBQ1gsRUFBRSxFQUNGLFlBQVksRUFDWixtQkFBbUIsRUFDbkIseUJBQXlCLEVBQ3pCLE1BQU0sR0FDUCxNQUFNLFlBQVksQ0FBQztBQUVwQjs7O0dBR0c7QUFDSCxNQUFNLE9BQU8saUJBQWlCO0lBQzVCO0lBQ0U7O09BRUc7SUFDSSxlQUE2QjtJQUNwQzs7O09BR0c7SUFDSSxZQUEwQjtJQUNqQzs7O09BR0c7SUFDSSxXQUF3QjtJQUMvQjs7T0FFRztJQUNJLElBQVU7SUFDakI7O09BRUc7SUFDSSxpQkFBMEI7UUFsQjFCLG9CQUFlLEdBQWYsZUFBZSxDQUFjO1FBSzdCLGlCQUFZLEdBQVosWUFBWSxDQUFjO1FBSzFCLGdCQUFXLEdBQVgsV0FBVyxDQUFhO1FBSXhCLFNBQUksR0FBSixJQUFJLENBQU07UUFJVixzQkFBaUIsR0FBakIsaUJBQWlCLENBQVM7SUFDaEMsQ0FBQztJQUVKOzs7T0FHRztJQUNILFFBQVE7UUFDTixPQUFPLGlCQUFpQixDQUFDLElBQUksQ0FBQyxlQUFlLEVBQUUsSUFBSSxDQUFDLFlBQVksRUFBRSxJQUFJLENBQUMsV0FBVyxFQUFFLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQzdHLENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsTUFBTSxDQUFDLFVBQVUsQ0FBQyxNQUE2QjtRQUM3QyxNQUFNLE1BQU0sR0FBRyxZQUFZLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzdDLE9BQU8sSUFBSSxpQkFBaUIsQ0FDMUIsSUFBSSxZQUFZLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUN0QyxZQUFZLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxFQUMvQixXQUFXLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxFQUM5QixNQUFNLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQyxDQUN0QixDQUFDO0lBQ0osQ0FBQztJQUVEOzs7O09BSUc7SUFDSCxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQW1DO1FBQzdDLE9BQU8sSUFBSSxpQkFBaUIsQ0FBQyxHQUFHLGlCQUFpQixDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO0lBQ3ZFLENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsTUFBTSxDQUFDLFNBQVMsQ0FBQyxNQUFtQztRQUNsRCxPQUFPO1lBQ0wsTUFBTSxDQUFDLGVBQWU7WUFDdEIsTUFBTSxDQUFDLFlBQVk7WUFDbkIsTUFBTSxDQUFDLFdBQVc7WUFDbEIsTUFBTSxDQUFDLElBQUk7WUFDWCxNQUFNLENBQUMsaUJBQWlCO1NBQ2hCLENBQUM7SUFDYixDQUFDO0lBRUQ7OztPQUdHO0lBQ0gscUJBQXFCO1FBQ25CLE1BQU0sWUFBWSxHQUFHLHlCQUF5QixDQUFDLEtBQUssRUFBRSxDQUFDO1FBQ3ZELFlBQVksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQztRQUM1QyxZQUFZLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUMzQyxPQUFPLElBQUksbUJBQW1CLENBQUMsSUFBSSxDQUFDLGVBQWUsRUFBRSxJQUFJLENBQUMsWUFBWSxFQUFFLFlBQVksRUFBRSxJQUFJLENBQUMsQ0FBQztJQUM5RixDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsYUFBYTtRQUNYLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxxQkFBcUIsRUFBRSxDQUFDO1FBQzFDLE1BQU0scUJBQXFCLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUM7UUFDekQsTUFBTSxhQUFhLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxjQUFjO1lBQ25ELENBQUMsQ0FBQyxJQUFJLGFBQWEsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMsV0FBVyxDQUFDLHNCQUFzQixDQUFDO1lBQ3hGLENBQUMsQ0FBQyxhQUFhLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDMUIsT0FBTyxJQUFJLFdBQVcsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLEVBQUUscUJBQXFCLEVBQUUsYUFBYSxDQUFDLENBQUM7SUFDNUUsQ0FBQztJQUVEOzs7T0FHRztJQUNILFdBQVc7UUFDVCxPQUFPLGtCQUFrQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN2QyxDQUFDO0NBQ0YifQ==