/// <reference types="node" resolution-mode="require"/>
import { Fr } from '@aztec/foundation/fields';
import { BufferReader } from '@aztec/foundation/serialize';
import { UInt32 } from './shared.js';
import { G1AffineElement } from './verification_key.js';
/**
 * Contains the aggregated proof of all the previous kernel iterations.
 *
 * See barretenberg/cpp/src/barretenberg/stdlib/recursion/aggregation_state/native_aggregation_state.hpp
 * for more context.
 */
export declare class AggregationObject {
    /**
     * One of the 2 aggregated elements storing the verification results of proofs in the past.
     */
    p0: G1AffineElement;
    /**
     * One of the 2 aggregated elements storing the verification results of proofs in the past.
     */
    p1: G1AffineElement;
    /**
     * The public inputs of the inner proof (these become the private inputs to the recursive circuit).
     */
    publicInputs: Fr[];
    /**
     * Witness indices that point to (P0, P1).
     */
    proofWitnessIndices: UInt32[];
    /**
     * Indicates if this aggregation state contain past (P0, P1).
     */
    hasData: boolean;
    constructor(
    /**
     * One of the 2 aggregated elements storing the verification results of proofs in the past.
     */
    p0: G1AffineElement, 
    /**
     * One of the 2 aggregated elements storing the verification results of proofs in the past.
     */
    p1: G1AffineElement, 
    /**
     * The public inputs of the inner proof (these become the private inputs to the recursive circuit).
     */
    publicInputs: Fr[], 
    /**
     * Witness indices that point to (P0, P1).
     */
    proofWitnessIndices: UInt32[], 
    /**
     * Indicates if this aggregation state contain past (P0, P1).
     */
    hasData?: boolean);
    toBuffer(): Buffer;
    /**
     * Deserializes this object from a buffer.
     * @param buffer - The buffer representation of this object.
     * @returns The deserialized object.
     */
    static fromBuffer(buffer: Buffer | BufferReader): AggregationObject;
    /**
     * Creates a fake object for testing.
     * @returns The fake object.
     */
    static makeFake(): AggregationObject;
}
//# sourceMappingURL=aggregation_object.d.ts.map