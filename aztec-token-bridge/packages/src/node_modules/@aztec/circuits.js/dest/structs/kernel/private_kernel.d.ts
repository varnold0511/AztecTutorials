/// <reference types="node" resolution-mode="require"/>
import { Fr } from '@aztec/foundation/fields';
import { BufferReader, Tuple } from '@aztec/foundation/serialize';
import { CONTRACT_TREE_HEIGHT, FUNCTION_TREE_HEIGHT, MAX_NEW_NULLIFIERS_PER_TX, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL, MAX_READ_REQUESTS_PER_CALL, MAX_READ_REQUESTS_PER_TX } from '../../constants.gen.js';
import { FieldsOf } from '../../utils/jsUtils.js';
import { CallRequest } from '../call_request.js';
import { PrivateCallStackItem } from '../call_stack_item.js';
import { MembershipWitness } from '../membership_witness.js';
import { Proof } from '../proof.js';
import { ReadRequestMembershipWitness } from '../read_request_membership_witness.js';
import { TxRequest } from '../tx_request.js';
import { VerificationKey } from '../verification_key.js';
import { PreviousKernelData } from './previous_kernel_data.js';
/**
 * Private call data.
 */
export declare class PrivateCallData {
    /**
     * The call stack item currently being processed.
     */
    callStackItem: PrivateCallStackItem;
    /**
     * Other private call stack items to be processed.
     */
    privateCallStack: Tuple<CallRequest, typeof MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>;
    /**
     * Other public call stack items to be processed.
     */
    publicCallStack: Tuple<CallRequest, typeof MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>;
    /**
     * The proof of the execution of this private call.
     */
    proof: Proof;
    /**
     * The verification key for the function being invoked.
     */
    vk: VerificationKey;
    /**
     * The membership witness for the function leaf corresponding to the function being invoked.
     */
    functionLeafMembershipWitness: MembershipWitness<typeof FUNCTION_TREE_HEIGHT>;
    /**
     * The membership witness for the contract leaf corresponding to the contract on which the function is being
     * invoked.
     */
    contractLeafMembershipWitness: MembershipWitness<typeof CONTRACT_TREE_HEIGHT>;
    /**
     * The membership witnesses for read requests created by the function being invoked.
     */
    readRequestMembershipWitnesses: Tuple<ReadRequestMembershipWitness, typeof MAX_READ_REQUESTS_PER_CALL>;
    /**
     * The address of the portal contract corresponding to the contract on which the function is being invoked.
     */
    portalContractAddress: Fr;
    /**
     * The hash of the ACIR of the function being invoked.
     */
    acirHash: Fr;
    constructor(
    /**
     * The call stack item currently being processed.
     */
    callStackItem: PrivateCallStackItem, 
    /**
     * Other private call stack items to be processed.
     */
    privateCallStack: Tuple<CallRequest, typeof MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>, 
    /**
     * Other public call stack items to be processed.
     */
    publicCallStack: Tuple<CallRequest, typeof MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>, 
    /**
     * The proof of the execution of this private call.
     */
    proof: Proof, 
    /**
     * The verification key for the function being invoked.
     */
    vk: VerificationKey, 
    /**
     * The membership witness for the function leaf corresponding to the function being invoked.
     */
    functionLeafMembershipWitness: MembershipWitness<typeof FUNCTION_TREE_HEIGHT>, 
    /**
     * The membership witness for the contract leaf corresponding to the contract on which the function is being
     * invoked.
     */
    contractLeafMembershipWitness: MembershipWitness<typeof CONTRACT_TREE_HEIGHT>, 
    /**
     * The membership witnesses for read requests created by the function being invoked.
     */
    readRequestMembershipWitnesses: Tuple<ReadRequestMembershipWitness, typeof MAX_READ_REQUESTS_PER_CALL>, 
    /**
     * The address of the portal contract corresponding to the contract on which the function is being invoked.
     */
    portalContractAddress: Fr, 
    /**
     * The hash of the ACIR of the function being invoked.
     */
    acirHash: Fr);
    /**
     * Serialize into a field array. Low-level utility.
     * @param fields - Object with fields.
     * @returns The array.
     */
    static getFields(fields: FieldsOf<PrivateCallData>): readonly [PrivateCallStackItem, [CallRequest, CallRequest, CallRequest, CallRequest], [CallRequest, CallRequest, CallRequest, CallRequest], Proof, VerificationKey, MembershipWitness<5>, MembershipWitness<16>, [ReadRequestMembershipWitness, ReadRequestMembershipWitness, ReadRequestMembershipWitness, ReadRequestMembershipWitness, ReadRequestMembershipWitness, ReadRequestMembershipWitness, ReadRequestMembershipWitness, ReadRequestMembershipWitness, ReadRequestMembershipWitness, ReadRequestMembershipWitness, ReadRequestMembershipWitness, ReadRequestMembershipWitness, ReadRequestMembershipWitness, ReadRequestMembershipWitness, ReadRequestMembershipWitness, ReadRequestMembershipWitness, ReadRequestMembershipWitness, ReadRequestMembershipWitness, ReadRequestMembershipWitness, ReadRequestMembershipWitness, ReadRequestMembershipWitness, ReadRequestMembershipWitness, ReadRequestMembershipWitness, ReadRequestMembershipWitness, ReadRequestMembershipWitness, ReadRequestMembershipWitness, ReadRequestMembershipWitness, ReadRequestMembershipWitness, ReadRequestMembershipWitness, ReadRequestMembershipWitness, ReadRequestMembershipWitness, ReadRequestMembershipWitness], Fr, Fr];
    static from(fields: FieldsOf<PrivateCallData>): PrivateCallData;
    /**
     * Serialize this as a buffer.
     * @returns The buffer.
     */
    toBuffer(): Buffer;
    /**
     * Deserializes from a buffer or reader.
     * @param buffer - Buffer or reader to read from.
     * @returns The deserialized instance.
     */
    static fromBuffer(buffer: Buffer | BufferReader): PrivateCallData;
}
/**
 * Input to the private kernel circuit - initial call.
 */
export declare class PrivateKernelInputsInit {
    /**
     * The transaction request which led to the creation of these inputs.
     */
    txRequest: TxRequest;
    /**
     * Private calldata corresponding to this iteration of the kernel.
     */
    privateCall: PrivateCallData;
    constructor(
    /**
     * The transaction request which led to the creation of these inputs.
     */
    txRequest: TxRequest, 
    /**
     * Private calldata corresponding to this iteration of the kernel.
     */
    privateCall: PrivateCallData);
    /**
     * Serialize this as a buffer.
     * @returns The buffer.
     */
    toBuffer(): Buffer;
}
/**
 * Input to the private kernel circuit - Inner call.
 */
export declare class PrivateKernelInputsInner {
    /**
     * The previous kernel data (dummy if this is the first kernel).
     */
    previousKernel: PreviousKernelData;
    /**
     * Private calldata corresponding to this iteration of the kernel.
     */
    privateCall: PrivateCallData;
    constructor(
    /**
     * The previous kernel data (dummy if this is the first kernel).
     */
    previousKernel: PreviousKernelData, 
    /**
     * Private calldata corresponding to this iteration of the kernel.
     */
    privateCall: PrivateCallData);
    /**
     * Serialize this as a buffer.
     * @returns The buffer.
     */
    toBuffer(): Buffer;
    /**
     * Deserializes from a buffer or reader.
     * @param buffer - Buffer or reader to read from.
     * @returns The deserialized instance.
     */
    static fromBuffer(buffer: Buffer | BufferReader): PrivateKernelInputsInner;
}
/**
 * Input to the private kernel circuit - Final ordering call.
 */
export declare class PrivateKernelInputsOrdering {
    /**
     * The previous kernel data
     */
    previousKernel: PreviousKernelData;
    /**
     * Contains hints for the transient read requests to localize corresponding commitments.
     */
    readCommitmentHints: Tuple<Fr, typeof MAX_READ_REQUESTS_PER_TX>;
    /**
     * Contains hints for the transient nullifiers to localize corresponding commitments.
     */
    nullifierCommitmentHints: Tuple<Fr, typeof MAX_NEW_NULLIFIERS_PER_TX>;
    constructor(
    /**
     * The previous kernel data
     */
    previousKernel: PreviousKernelData, 
    /**
     * Contains hints for the transient read requests to localize corresponding commitments.
     */
    readCommitmentHints: Tuple<Fr, typeof MAX_READ_REQUESTS_PER_TX>, 
    /**
     * Contains hints for the transient nullifiers to localize corresponding commitments.
     */
    nullifierCommitmentHints: Tuple<Fr, typeof MAX_NEW_NULLIFIERS_PER_TX>);
    /**
     * Serialize this as a buffer.
     * @returns The buffer.
     */
    toBuffer(): Buffer;
}
//# sourceMappingURL=private_kernel.d.ts.map