import { AztecAddress } from '@aztec/foundation/aztec-address';
import { EthAddress } from '@aztec/foundation/eth-address';
import { BufferReader } from '@aztec/foundation/serialize';
import { serializeToBuffer } from '../utils/serialize.js';
import { Fr, FunctionSelector } from './index.js';
/**
 * Call context.
 * @see abis/call_context.hpp
 */
export class CallContext {
    constructor(
    /**
     * Address of the account which represents the entity who invoked the call.
     */
    msgSender, 
    /**
     * The contract address against which all state changes will be stored. Not called `contractAddress` because during
     * delegate call the contract whose code is being executed may be different from the contract whose state is being
     * modified.
     */
    storageContractAddress, 
    /**
     * Address of the portal contract to the storage contract.
     * Union type is a kludge until C++ has an eth address type.
     */
    portalContractAddress, 
    /**
     * Function selector of the function being called.
     */
    functionSelector, 
    /**
     * Determines whether the call is a delegate call (see Ethereum's delegate call opcode for more information).
     */
    isDelegateCall, 
    /**
     * Determines whether the call is modifying state.
     */
    isStaticCall, 
    /**
     * Determines whether the call is a contract deployment.
     */
    isContractDeployment) {
        this.msgSender = msgSender;
        this.storageContractAddress = storageContractAddress;
        this.functionSelector = functionSelector;
        this.isDelegateCall = isDelegateCall;
        this.isStaticCall = isStaticCall;
        this.isContractDeployment = isContractDeployment;
        this.portalContractAddress =
            portalContractAddress instanceof EthAddress ? portalContractAddress : EthAddress.fromField(portalContractAddress);
    }
    /**
     * Returns a new instance of CallContext with zero msg sender, storage contract address and portal contract address.
     * @returns A new instance of CallContext with zero msg sender, storage contract address and portal contract address.
     */
    static empty() {
        return new CallContext(AztecAddress.ZERO, AztecAddress.ZERO, Fr.ZERO, FunctionSelector.empty(), false, false, false);
    }
    isEmpty() {
        return (this.msgSender.isZero() &&
            this.storageContractAddress.isZero() &&
            this.portalContractAddress.isZero() &&
            this.functionSelector.isEmpty());
    }
    static from(fields) {
        return new CallContext(...CallContext.getFields(fields));
    }
    static getFields(fields) {
        return [
            fields.msgSender,
            fields.storageContractAddress,
            fields.portalContractAddress,
            fields.functionSelector,
            fields.isDelegateCall,
            fields.isStaticCall,
            fields.isContractDeployment,
        ];
    }
    /**
     * Serialize this as a buffer.
     * @returns The buffer.
     */
    toBuffer() {
        return serializeToBuffer(...CallContext.getFields(this));
    }
    /**
     * Deserialize this from a buffer.
     * @param buffer - The bufferable type from which to deserialize.
     * @returns The deserialized instance of PublicCallRequest.
     */
    static fromBuffer(buffer) {
        const reader = BufferReader.asReader(buffer);
        return new CallContext(new AztecAddress(reader.readBytes(32)), new AztecAddress(reader.readBytes(32)), new EthAddress(reader.readBytes(32)), FunctionSelector.fromBuffer(reader.readBytes(4)), reader.readBoolean(), reader.readBoolean(), reader.readBoolean());
    }
    equals(callContext) {
        return (callContext.msgSender.equals(this.msgSender) &&
            callContext.storageContractAddress.equals(this.storageContractAddress) &&
            callContext.portalContractAddress.equals(this.portalContractAddress) &&
            callContext.functionSelector.equals(this.functionSelector) &&
            callContext.isDelegateCall === this.isDelegateCall &&
            callContext.isStaticCall === this.isStaticCall &&
            callContext.isContractDeployment === this.isContractDeployment);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FsbF9jb250ZXh0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3N0cnVjdHMvY2FsbF9jb250ZXh0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUMvRCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFDM0QsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBRzNELE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQzFELE9BQU8sRUFBRSxFQUFFLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFFbEQ7OztHQUdHO0FBQ0gsTUFBTSxPQUFPLFdBQVc7SUFLdEI7SUFDRTs7T0FFRztJQUNJLFNBQXVCO0lBQzlCOzs7O09BSUc7SUFDSSxzQkFBb0M7SUFDM0M7OztPQUdHO0lBQ0gscUJBQXNDO0lBQ3RDOztPQUVHO0lBQ0ksZ0JBQWtDO0lBQ3pDOztPQUVHO0lBQ0ksY0FBdUI7SUFDOUI7O09BRUc7SUFDSSxZQUFxQjtJQUM1Qjs7T0FFRztJQUNJLG9CQUE2QjtRQTNCN0IsY0FBUyxHQUFULFNBQVMsQ0FBYztRQU12QiwyQkFBc0IsR0FBdEIsc0JBQXNCLENBQWM7UUFTcEMscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFrQjtRQUlsQyxtQkFBYyxHQUFkLGNBQWMsQ0FBUztRQUl2QixpQkFBWSxHQUFaLFlBQVksQ0FBUztRQUlyQix5QkFBb0IsR0FBcEIsb0JBQW9CLENBQVM7UUFFcEMsSUFBSSxDQUFDLHFCQUFxQjtZQUN4QixxQkFBcUIsWUFBWSxVQUFVLENBQUMsQ0FBQyxDQUFDLHFCQUFxQixDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsU0FBUyxDQUFDLHFCQUFxQixDQUFDLENBQUM7SUFDdEgsQ0FBQztJQUVEOzs7T0FHRztJQUNJLE1BQU0sQ0FBQyxLQUFLO1FBQ2pC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