import { BufferReader } from '@aztec/foundation/serialize';
import { serializeToBuffer } from '../utils/serialize.js';
import { EthAddress, Fr, Point } from './index.js';
/**
 * Contract deployment data in a TxContext
 * cpp/src/aztec3/circuits/abis/contract_deployment_data.hpp.
 *
 * Not to be confused with NewContractData.
 */
export class ContractDeploymentData {
    constructor(
    /** Public key of the contract deployer (used when deploying account contracts). */
    deployerPublicKey, 
    /** Hash of the constructor verification key. */
    constructorVkHash, 
    /** Function tree root. */
    functionTreeRoot, 
    /** Contract address salt (used when deriving a contract address). */
    contractAddressSalt, 
    /**
     * Ethereum address of the portal contract on L1.
     * TODO(AD): union type kludge due to cbind compiler having special needs
     */
    portalContractAddress) {
        this.deployerPublicKey = deployerPublicKey;
        this.constructorVkHash = constructorVkHash;
        this.functionTreeRoot = functionTreeRoot;
        this.contractAddressSalt = contractAddressSalt;
        this.portalContractAddress = EthAddress.fromField(portalContractAddress.toField());
    }
    toBuffer() {
        return serializeToBuffer(this.deployerPublicKey, this.constructorVkHash, this.functionTreeRoot, this.contractAddressSalt, this.portalContractAddress);
    }
    /**
     * Returns an empty ContractDeploymentData.
     * @returns The empty ContractDeploymentData.
     */
    static empty() {
        return new ContractDeploymentData(Point.ZERO, Fr.ZERO, Fr.ZERO, Fr.ZERO, EthAddress.ZERO);
    }
    isEmpty() {
        return (this.deployerPublicKey.isZero() &&
            this.constructorVkHash.isZero() &&
            this.functionTreeRoot.isZero() &&
            this.contractAddressSalt.isZero() &&
            this.portalContractAddress.isZero());
    }
    /**
     * Deserializes contract deployment data rom a buffer or reader.
     * @param buffer - Buffer to read from.
     * @returns The deserialized ContractDeploymentData.
     */
    static fromBuffer(buffer) {
        const reader = BufferReader.asReader(buffer);
        return new ContractDeploymentData(reader.readObject(Point), Fr.fromBuffer(reader), Fr.fromBuffer(reader), Fr.fromBuffer(reader), new EthAddress(reader.readBytes(32)));
    }
}
/**
 * Transaction context.
 * @see cpp/src/aztec3/circuits/abis/tx_context.hpp.
 */
export class TxContext {
    constructor(
    /**
     * Whether this is a fee paying tx. If not other tx in a bundle will pay the fee.
     * TODO(#3417): Remove fee and rebate payment fields.
     */
    isFeePaymentTx, 
    /**
     * Indicates whether this a gas rebate payment tx.
     *
     * NOTE: The following is a WIP and it is likely to change in the future.
     * Explanation: Each tx is actually 3 txs in one: a fee-paying tx, the actual tx you want to execute, and a rebate
     * tx. The fee-paying tx pays some `max_fee = gas_price * gas_limit`. Then the actual tx will cost an amount of gas
     * to execute (actual_fee = gas_price * gas_used). Then the rebate tx returns `max_fee - actual_fee` back to
     * the user.
     */
    isRebatePaymentTx, 
    /**
     * Whether this is a contract deployment tx.
     */
    isContractDeploymentTx, 
    /**
     * Contract deployment data.
     */
    contractDeploymentData, 
    /**
     * Chain ID of the transaction. Here for replay protection.
     */
    chainId, 
    /**
     * Version of the transaction. Here for replay protection.
     */
    version) {
        this.isFeePaymentTx = isFeePaymentTx;
        this.isRebatePaymentTx = isRebatePaymentTx;
        this.isContractDeploymentTx = isContractDeploymentTx;
        this.contractDeploymentData = contractDeploymentData;
        this.chainId = chainId;
        this.version = version;
    }
    /**
     * Serialize as a buffer.
     * @returns The buffer.
     */
    toBuffer() {
        return serializeToBuffer(this.isFeePaymentTx, this.isRebatePaymentTx, this.isContractDeploymentTx, this.contractDeploymentData, this.chainId, this.version);
    }
    /**
     * Deserializes TxContext from a buffer or reader.
     * @param buffer - Buffer to read from.
     * @returns The TxContext.
     */
    static fromBuffer(buffer) {
        const reader = BufferReader.asReader(buffer);
        return new TxContext(reader.readBoolean(), reader.readBoolean(), reader.readBoolean(), reader.readObject(ContractDeploymentData), Fr.fromBuffer(reader), Fr.fromBuffer(reader));
    }
    static empty(chainId = 0, version = 0) {
        return new TxContext(false, false, false, ContractDeploymentData.empty(), new Fr(chainId), new Fr(version));
    }
    isEmpty() {
        return (!this.isFeePaymentTx &&
            !this.isRebatePaymentTx &&
            !this.isContractDeploymentTx &&
            this.contractDeploymentData.isEmpty() &&
            this.chainId.isZero() &&
            this.version.isZero());
    }
    /**
     * Create a new instance from a fields dictionary.
     * @param fields - The dictionary.
     * @returns A new instance.
     */
    static from(fields) {
        return new TxContext(...TxContext.getFields(fields));
    }
    /**
     * Serialize into a field array. Low-level utility.
     * @param fields - Object with fields.
     * @returns The array.
     */
    static getFields(fields) {
        return [
            fields.isFeePaymentTx,
            fields.isRebatePaymentTx,
            fields.isContractDeploymentTx,
            fields.contractDeploymentData,
            fields.chainId,
            fields.version,
        ];
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHhfY29udGV4dC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zdHJ1Y3RzL3R4X2NvbnRleHQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBRzNELE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQzFELE9BQU8sRUFBZ0IsVUFBVSxFQUFFLEVBQUUsRUFBRSxLQUFLLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFFakU7Ozs7O0dBS0c7QUFDSCxNQUFNLE9BQU8sc0JBQXNCO0lBSWpDO0lBQ0UsbUZBQW1GO0lBQzVFLGlCQUE0QjtJQUNuQyxnREFBZ0Q7SUFDekMsaUJBQXFCO0lBQzVCLDBCQUEwQjtJQUNuQixnQkFBb0I7SUFDM0IscUVBQXFFO0lBQzlELG1CQUF1QjtJQUM5Qjs7O09BR0c7SUFDSCxxQkFBZ0Q7UUFYekMsc0JBQWlCLEdBQWpCLGlCQUFpQixDQUFXO1FBRTVCLHNCQUFpQixHQUFqQixpQkFBaUIsQ0FBSTtRQUVyQixxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQUk7UUFFcEIsd0JBQW1CLEdBQW5CLG1CQUFtQixDQUFJO1FBTzlCLElBQUksQ0FBQyxxQkFBcUIsR0FBRyxVQUFVLENBQUMsU0FBUyxDQUFDLHFCQUFxQixDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUM7SUFDckYsQ0FBQztJQUVELFFBQVE7UUFDTixPQUFPLGlCQUFpQixDQUN0QixJQUFJLENBQUMsaUJBQWlCLEVBQ3RCLElBQUksQ0FBQyxpQkFBaUIsRUFDdEIsSUFBSSxDQUFDLGdCQUFnQixFQUNyQixJQUFJLENBQUMsbUJBQW1CLEVBQ3hCLElBQUksQ0FBQyxxQkFBcUIsQ0FDM0IsQ0FBQztJQUNKLENBQUM7SUFFRDs7O09BR0c7SUFDSSxNQUFNLENBQUMsS0FBSztRQUNqQixPQUFPLElBQUksc0JBQXNCLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxF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