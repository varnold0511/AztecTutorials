import { BarretenbergSync } from '@aztec/bb.js';
import { Point } from '@aztec/foundation/fields';
import { numToUInt32BE } from '@aztec/foundation/serialize';
import { SchnorrSignature } from './signature.js';
export * from './signature.js';
/**
 * Schnorr signature construction and helper operations.
 */
export class Schnorr {
    constructor() {
        this.wasm = BarretenbergSync.getSingleton().getWasm();
    }
    /**
     * Computes a grumpkin public key from a private key.
     * @param privateKey - The private key.
     * @returns A grumpkin public key.
     */
    computePublicKey(privateKey) {
        this.wasm.writeMemory(0, privateKey.toBuffer());
        this.wasm.call('schnorr_compute_public_key', 0, 32);
        return Point.fromBuffer(Buffer.from(this.wasm.getMemorySlice(32, 96)));
    }
    /**
     * Constructs a Schnorr signature given a msg and a private key.
     * @param msg - Message over which the signature is constructed.
     * @param privateKey - The private key of the signer.
     * @returns A Schnorr signature of the form (s, e).
     */
    constructSignature(msg, privateKey) {
        const mem = this.wasm.call('bbmalloc', msg.length + 4);
        this.wasm.writeMemory(0, privateKey.toBuffer());
        this.wasm.writeMemory(mem, Buffer.concat([numToUInt32BE(msg.length), msg]));
        this.wasm.call('schnorr_construct_signature', mem, 0, 32, 64);
        return new SchnorrSignature(Buffer.from(this.wasm.getMemorySlice(32, 96)));
    }
    /**
     * Verifies a Schnorr signature given a Grumpkin public key.
     * @param msg - Message over which the signature was constructed.
     * @param pubKey - The Grumpkin public key of the signer.
     * @param sig - The Schnorr signature.
     * @returns True or false.
     */
    verifySignature(msg, pubKey, sig) {
        const mem = this.wasm.call('bbmalloc', msg.length + 4);
        this.wasm.writeMemory(0, pubKey.toBuffer());
        this.wasm.writeMemory(64, sig.s);
        this.wasm.writeMemory(96, sig.e);
        this.wasm.writeMemory(mem, Buffer.concat([numToUInt32BE(msg.length), msg]));
        this.wasm.call('schnorr_verify_signature', mem, 0, 64, 96, 128);
        const result = this.wasm.getMemorySlice(128, 129);
        return !Buffer.alloc(1, 0).equals(result);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvYmFycmV0ZW5iZXJnL2NyeXB0by9zY2hub3JyL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUNoRCxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDakQsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBRzVELE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRWxELGNBQWMsZ0JBQWdCLENBQUM7QUFFL0I7O0dBRUc7QUFDSCxNQUFNLE9BQU8sT0FBTztJQUFwQjtRQUNVLFNBQUksR0FBRyxnQkFBZ0IsQ0FBQyxZQUFZLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQTZDM0QsQ0FBQztJQTNDQzs7OztPQUlHO0lBQ0ksZ0JBQWdCLENBQUMsVUFBOEI7UUFDcEQsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxFQUFFLFVBQVUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO1FBQ2hELElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLDRCQUE0QixFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUNwRCxPQUFPLEtBQUssQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3pFLENBQUM7SUFFRDs7Ozs7T0FLRztJQUNJLGtCQUFrQixDQUFDLEdBQWUsRUFBRSxVQUE4QjtRQUN2RSxNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsR0FBRyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQztRQUN2RCxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLEVBQUUsVUFBVSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7UUFDaEQsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxFQUFFLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUM1RSxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyw2QkFBNkIsRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUU5RCxPQUFPLElBQUksZ0JBQWdCLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzdFLENBQUM7SUFFRDs7Ozs7O09BTUc7SUFDSSxlQUFlLENBQUMsR0FBZSxFQUFFLE1BQWlCLEVBQUUsR0FBcUI7UUFDOUUsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLEdBQUcsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDdkQsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO1FBQzVDLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLEVBQUUsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDakMsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsRUFBRSxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNqQyxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLEVBQUUsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzVFLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLDBCQUEwQixFQUFFLEdBQUcsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxHQUFHLENBQUMsQ0FBQztRQUNoRSxNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFDbEQsT0FBTyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUM1QyxDQUFDO0NBQ0YifQ==