import { EthAddress } from '@aztec/foundation/eth-address';
import { createPublicClient, createWalletClient, getAddress, getContract, http, } from 'viem';
/**
 * Deploys the aztec L1 contracts; Rollup, Contract Deployment Emitter & (optionally) Decoder Helper.
 * @param rpcUrl - URL of the ETH RPC to use for deployment.
 * @param account - Private Key or HD Account that will deploy the contracts.
 * @param chain - The chain instance to deploy to.
 * @param logger - A logger object.
 * @param contractsToDeploy - The set of L1 artifacts to be deployed
 * @returns A list of ETH addresses of the deployed contracts.
 */
export const deployL1Contracts = async (rpcUrl, account, chain, logger, contractsToDeploy) => {
    logger('Deploying contracts...');
    const walletClient = createWalletClient({
        account,
        chain,
        transport: http(rpcUrl),
    });
    const publicClient = createPublicClient({
        chain,
        transport: http(rpcUrl),
    });
    const registryAddress = await deployL1Contract(walletClient, publicClient, contractsToDeploy.registry.contractAbi, contractsToDeploy.registry.contractBytecode);
    logger(`Deployed Registry at ${registryAddress}`);
    const inboxAddress = await deployL1Contract(walletClient, publicClient, contractsToDeploy.inbox.contractAbi, contractsToDeploy.inbox.contractBytecode, [getAddress(registryAddress.toString())]);
    logger(`Deployed Inbox at ${inboxAddress}`);
    const outboxAddress = await deployL1Contract(walletClient, publicClient, contractsToDeploy.outbox.contractAbi, contractsToDeploy.outbox.contractBytecode, [getAddress(registryAddress.toString())]);
    logger(`Deployed Outbox at ${outboxAddress}`);
    const rollupAddress = await deployL1Contract(walletClient, publicClient, contractsToDeploy.rollup.contractAbi, contractsToDeploy.rollup.contractBytecode, [getAddress(registryAddress.toString())]);
    logger(`Deployed Rollup at ${rollupAddress}`);
    // We need to call a function on the registry to set the various contract addresses.
    const registryContract = getContract({
        address: getAddress(registryAddress.toString()),
        abi: contractsToDeploy.registry.contractAbi,
        publicClient,
        walletClient,
    });
    await registryContract.write.upgrade([getAddress(rollupAddress.toString()), getAddress(inboxAddress.toString()), getAddress(outboxAddress.toString())], { account });
    const contractDeploymentEmitterAddress = await deployL1Contract(walletClient, publicClient, contractsToDeploy.contractDeploymentEmitter.contractAbi, contractsToDeploy.contractDeploymentEmitter.contractBytecode);
    logger(`Deployed contract deployment emitter at ${contractDeploymentEmitterAddress}`);
    let decoderHelperAddress;
    if (contractsToDeploy.decoderHelper) {
        decoderHelperAddress = await deployL1Contract(walletClient, publicClient, contractsToDeploy.decoderHelper.contractAbi, contractsToDeploy.decoderHelper.contractBytecode);
        logger(`Deployed DecoderHelper at ${decoderHelperAddress}`);
    }
    const l1Contracts = {
        rollupAddress,
        registryAddress,
        inboxAddress,
        outboxAddress,
        contractDeploymentEmitterAddress,
        decoderHelperAddress: decoderHelperAddress ?? EthAddress.ZERO,
    };
    return {
        walletClient,
        publicClient,
        l1ContractAddresses: l1Contracts,
    };
};
// docs:start:deployL1Contract
/**
 * Helper function to deploy ETH contracts.
 * @param walletClient - A viem WalletClient.
 * @param publicClient - A viem PublicClient.
 * @param abi - The ETH contract's ABI (as abitype's Abi).
 * @param bytecode  - The ETH contract's bytecode.
 * @param args - Constructor arguments for the contract.
 * @returns The ETH address the contract was deployed to.
 */
export async function deployL1Contract(walletClient, publicClient, abi, bytecode, args = []) {
    const hash = await walletClient.deployContract({
        abi,
        bytecode,
        args,
    });
    const receipt = await publicClient.waitForTransactionReceipt({ hash });
    const contractAddress = receipt.contractAddress;
    if (!contractAddress) {
        throw new Error(`No contract address found in receipt: ${JSON.stringify(receipt)}`);
    }
    return EthAddress.fromString(receipt.contractAddress);
}
// docs:end:deployL1Contract
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVwbG95X2wxX2NvbnRyYWN0cy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9kZXBsb3lfbDFfY29udHJhY3RzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUkzRCxPQUFPLEVBT0wsa0JBQWtCLEVBQ2xCLGtCQUFrQixFQUNsQixVQUFVLEVBQ1YsV0FBVyxFQUNYLElBQUksR0FDTCxNQUFNLE1BQU0sQ0FBQztBQW9FZDs7Ozs7Ozs7R0FRRztBQUNILE1BQU0sQ0FBQyxNQUFNLGlCQUFpQixHQUFHLEtBQUssRUFDcEMsTUFBYyxFQUNkLE9BQXNDLEVBQ3RDLEtBQVksRUFDWixNQUFtQixFQUNuQixpQkFBbUQsRUFDdkIsRUFBRTtJQUM5QixNQUFNLENBQUMsd0JBQXdCLENBQUMsQ0FBQztJQUVqQyxNQUFNLFlBQVksR0FBRyxrQkFBa0IsQ0FBQztRQUN0QyxPQUFPO1FBQ1AsS0FBSztRQUNMLFNBQVMsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDO0tBQ3hCLENBQUMsQ0FBQztJQUNILE1BQU0sWUFBWSxHQUFHLGtCQUFrQixDQUFDO1FBQ3RDLEtBQUs7UUFDTCxTQUFTLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQztLQUN4QixDQUFDLENBQUM7SUFFSCxNQUFNLGVBQWUsR0FBRyxNQUFNLGdCQUFnQixDQUM1QyxZQUFZLEVBQ1osWUFBWSxFQUNaLGlCQUFpQixDQUFDLFFBQVEsQ0FBQyxXQUFXLEVBQ3RDLGlCQUFpQixDQUFDLFFBQVEsQ0FBQyxnQkFBZ0IsQ0FDNUMsQ0FBQztJQUNGLE1BQU0sQ0FBQyx3QkFBd0IsZUFBZSxFQUFFLENBQUMsQ0FBQztJQUVsRCxNQUFNLFlBQVksR0FBRyxNQUFNLGdCQUFnQixDQUN6QyxZQUFZLEVBQ1osWUFBWSxFQUNaLGlCQUFpQixDQUFDLEtBQUssQ0FBQyxXQUFXLEVBQ25DLGlCQUFpQixDQUFDLEtBQUssQ0FBQyxnQkFBZ0IsRUFDeEMsQ0FBQyxVQUFVLENBQUMsZUFBZSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUMsQ0FDekMsQ0FBQztJQUNGLE1BQU0sQ0FBQyxxQkFBcUIsWUFBWSxFQUFFLENBQUMsQ0FBQztJQUU1QyxNQUFNLGFBQWEsR0FBRyxNQUFNLGdCQUFnQixDQUMxQyxZQUFZLEVBQ1osWUFBWSxFQUNaLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxXQUFXLEVBQ3BDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxnQkFBZ0IsRUFDekMsQ0FBQyxVQUFVLENBQUMsZUFBZSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUMsQ0FDekMsQ0FBQztJQUNGLE1BQU0sQ0FBQyxzQkFBc0IsYUFBYSxFQUFFLENBQUMsQ0FBQztJQUU5QyxNQUFNLGFBQWEsR0FBRyxNQUFNLGdCQUFnQixDQUMxQyxZQUFZLEVBQ1osWUFBWSxFQUNaLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxXQUFXLEVBQ3BDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxnQkFBZ0IsRUFDekMsQ0FBQyxVQUFVLENBQUMsZUFBZSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUMsQ0FDekMsQ0FBQztJQUNGLE1BQU0sQ0FBQyxzQkFBc0IsYUFBYSxFQUFFLENBQUMsQ0FBQztJQUU5QyxvRkFBb0Y7SUFDcEYsTUFBTSxnQkFBZ0IsR0FBRyxXQUFXLENBQUM7UUFDbkMsT0FBTyxFQUFFLFVBQVUsQ0FBQyxlQUFlLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDL0MsR0FBRyxFQUFFLGlCQUFpQixDQUFDLFFBQVEsQ0FBQyxXQUFXO1FBQzNDLFlBQVk7UUFDWixZQUFZO0tBQ2IsQ0FBQyxDQUFDO0lBQ0gsTUFBTSxnQkFBZ0IsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUNsQyxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUMsUUFBUSxFQUFFLENBQUMsRUFBRSxVQUFVLENBQUMsWUFBWSxDQUFDLFFBQVEsRUFBRSxDQUFDLEVBQUUsVUFBVSxDQUFDLGFBQWEsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDLEVBQ2pILEVBQUUsT0FBTyxFQUFFLENBQ1osQ0FBQztJQUVGLE1BQU0sZ0NBQWdDLEdBQUcsTUFBTSxnQkFBZ0IsQ0FDN0QsWUFBWSxFQUNaLFlBQVksRUFDWixpQkFBaUIsQ0FBQyx5QkFBeUIsQ0FBQyxXQUFXLEVBQ3ZELGlCQUFpQixDQUFDLHlCQUF5QixDQUFDLGdCQUFnQixDQUM3RCxDQUFDO0lBQ0YsTUFBTSxDQUFDLDJDQUEyQyxnQ0FBZ0MsRUFBRSxDQUFDLENBQUM7SUFFdEYsSUFBSSxvQkFBNEMsQ0FBQztJQUNqRCxJQUFJLGlCQUFpQixDQUFDLGFBQWEsRUFBRTtRQUNuQyxvQkFBb0IsR0FBRyxNQUFNLGdCQUFnQixDQUMzQyxZQUFZLEVBQ1osWUFBWSxFQUNaLGlCQUFpQixDQUFDLGFBQWEsQ0FBQyxXQUFXLEVBQzNDLGlCQUFpQixDQUFDLGFBQWEsQ0FBQyxnQkFBZ0IsQ0FDakQsQ0FBQztRQUNGLE1BQU0sQ0FBQyw2QkFBNkIsb0JBQW9CLEVBQUUsQ0FBQyxDQUFDO0tBQzdEO0lBRUQsTUFBTSxXQUFXLEdBQXdCO1FBQ3ZDLGFBQWE7UUFDYixlQUFlO1FBQ2YsWUFBWTtRQUNaLGFBQWE7UUFDYixnQ0FBZ0M7UUFDaEMsb0JBQW9CLEVBQUUsb0JBQW9CLElBQUksVUFBVSxDQUFDLElBQUk7S0FDOUQsQ0FBQztJQUVGLE9BQU87UUFDTCxZQUFZO1FBQ1osWUFBWTtRQUNaLG1CQUFtQixFQUFFLFdBQVc7S0FDakMsQ0FBQztBQUNKLENBQUMsQ0FBQztBQUVGLDhCQUE4QjtBQUM5Qjs7Ozs7Ozs7R0FRRztBQUNILE1BQU0sQ0FBQyxLQUFLLFVBQVUsZ0JBQWdCLENBQ3BDLFlBQXlELEVBQ3pELFlBQWdELEVBQ2hELEdBQXFDLEVBQ3JDLFFBQWEsRUFDYixPQUEyQixFQUFFO0lBRTdCLE1BQU0sSUFBSSxHQUFHLE1BQU0sWUFBWSxDQUFDLGNBQWMsQ0FBQztRQUM3QyxHQUFHO1FBQ0gsUUFBUTtRQUNSLElBQUk7S0FDTCxDQUFDLENBQUM7SUFFSCxNQUFNLE9BQU8sR0FBRyxNQUFNLFlBQVksQ0FBQyx5QkFBeUIsQ0FBQyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7SUFDdkUsTUFBTSxlQUFlLEdBQUcsT0FBTyxDQUFDLGVBQWUsQ0FBQztJQUNoRCxJQUFJLENBQUMsZUFBZSxFQUFFO1FBQ3BCLE1BQU0sSUFBSSxLQUFLLENBQUMseUNBQXlDLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0tBQ3JGO0lBRUQsT0FBTyxVQUFVLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxlQUFnQixDQUFDLENBQUM7QUFDekQsQ0FBQztBQUNELDRCQUE0QiJ9