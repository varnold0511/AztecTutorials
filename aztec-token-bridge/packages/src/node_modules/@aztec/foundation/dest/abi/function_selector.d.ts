/// <reference types="node" resolution-mode="require"/>
import { BufferReader } from '@aztec/foundation/serialize';
import { Fr } from '../fields/index.js';
import { ABIParameter } from './abi.js';
/**
 * A function selector is the first 4 bytes of the hash of a function signature.
 */
export declare class FunctionSelector {
    value: number;
    /**
     * The size of the function selector in bytes.
     */
    static SIZE: number;
    constructor(/** number representing the function selector */ value: number);
    /**
     * Checks if the function selector is empty (all bytes are 0).
     * @returns True if the function selector is empty (all bytes are 0).
     */
    isEmpty(): boolean;
    /**
     * Serialize as a buffer.
     * @param bufferSize - The buffer size.
     * @returns The buffer.
     */
    toBuffer(bufferSize?: number): Buffer;
    /**
     * Serialize as a hex string.
     * @returns The string.
     */
    toString(): string;
    /**
     * Checks if this function selector is equal to another.
     * @param other - The other function selector.
     * @returns True if the function selectors are equal.
     */
    equals(other: FunctionSelector): boolean;
    /**
     * Deserializes from a buffer or reader, corresponding to a write in cpp.
     * @param buffer - Buffer  or BufferReader to read from.
     * @returns The FunctionSelector.
     */
    static fromBuffer(buffer: Buffer | BufferReader): FunctionSelector;
    /**
     * Returns a new field with the same contents as this EthAddress.
     *
     * @returns An Fr instance.
     */
    toField(): Fr;
    /**
     * Converts a field to function selector.
     * @param fr - The field to convert.
     * @returns The function selector.
     */
    static fromField(fr: Fr): FunctionSelector;
    /**
     * Creates a function selector from a signature.
     * @param signature - Signature of the function to generate the selector for (e.g. "transfer(field,field)").
     * @returns Function selector.
     */
    static fromSignature(signature: string): FunctionSelector;
    /**
     * Creates a function selector for a given function name and parameters.
     * @param name - The name of the function.
     * @param parameters - An array of ABIParameter objects, each containing the type information of a function parameter.
     * @returns A Buffer containing the 4-byte function selector.
     */
    static fromNameAndParameters(name: string, parameters: ABIParameter[]): FunctionSelector;
    /**
     * Create an AztecAddress instance from a hex-encoded string.
     * The input 'address' should be prefixed with '0x' or not, and have exactly 64 hex characters.
     * Throws an error if the input length is invalid or address value is out of range.
     *
     * @param selector - The hex-encoded string representing the Aztec address.
     * @returns An AztecAddress instance.
     */
    static fromString(selector: string): FunctionSelector;
    /**
     * Creates an empty function selector.
     * @returns An empty function selector.
     */
    static empty(): FunctionSelector;
}
//# sourceMappingURL=function_selector.d.ts.map