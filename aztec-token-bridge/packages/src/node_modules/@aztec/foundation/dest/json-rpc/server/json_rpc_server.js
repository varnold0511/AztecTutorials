import cors from '@koa/cors';
import http from 'http';
import Koa from 'koa';
import bodyParser from 'koa-bodyparser';
import compress from 'koa-compress';
import Router from 'koa-router';
import { createDebugLogger } from '../../log/index.js';
import { convertBigintsInObj } from '../convert.js';
import { JsonProxy } from './json_proxy.js';
/**
 * JsonRpcServer.
 * Minimal, dev-friendly mechanism to create a server from an object.
 */
export class JsonRpcServer {
    constructor(handler, stringClassMap, objectClassMap, createApi, disallowedMethods = [], log = createDebugLogger('aztec:foundation:json-rpc:server')) {
        this.handler = handler;
        this.createApi = createApi;
        this.disallowedMethods = disallowedMethods;
        this.log = log;
        this.proxy = new JsonProxy(handler, stringClassMap, objectClassMap);
    }
    /**
     * Get an express app object.
     * @param prefix - Our server prefix.
     * @returns The app object.
     */
    getApp(prefix = '') {
        const router = this.getRouter(prefix);
        const exceptionHandler = async (ctx, next) => {
            try {
                await next();
            }
            catch (err) {
                this.log.error(err);
                if (err instanceof SyntaxError) {
                    ctx.status = 400;
                    ctx.body = {
                        jsonrpc: '2.0',
                        id: null,
                        error: {
                            code: -32700,
                            message: 'Parse error',
                        },
                    };
                }
                else {
                    ctx.status = 500;
                    ctx.body = {
                        jsonrpc: '2.0',
                        id: null,
                        error: {
                            code: -32603,
                            message: 'Internal error',
                        },
                    };
                }
            }
        };
        const app = new Koa();
        app.on('error', error => {
            this.log.error(`Error on API handler: ${error}`);
        });
        app.use(exceptionHandler);
        app.use(compress({ br: false }));
        app.use(bodyParser({
            jsonLimit: '10mb',
            enableTypes: ['json'],
            detectJSON: () => true,
        }));
        app.use(cors());
        app.use(router.routes());
        app.use(router.allowedMethods());
        return app;
    }
    /**
     * Get a router object wrapping our RPC class.
     * @param prefix - The server prefix.
     * @returns The router object.
     */
    getRouter(prefix) {
        const router = new Router({ prefix });
        const proto = Object.getPrototypeOf(this.handler);
        // Find all our endpoints from the handler methods
        if (this.createApi) {
            // "API mode" where an endpoint is created for each method
            for (const method of Object.getOwnPropertyNames(proto)) {
                // Ignore if not a function or function is not allowed
                if (method === 'constructor' ||
                    typeof proto[method] !== 'function' ||
                    this.disallowedMethods.includes(method)) {
                    continue;
                }
                router.post(`/${method}`, async (ctx) => {
                    const { params = [], jsonrpc, id } = ctx.request.body;
                    try {
                        const result = await this.proxy.call(method, params);
                        ctx.body = {
                            jsonrpc,
                            id,
                            result: convertBigintsInObj(result),
                        };
                        ctx.status = 200;
                    }
                    catch (err) {
                        // Propagate the error message to the client. Plenty of the errors are expected to occur (e.g. adding
                        // a duplicate recipient) so this is necessary.
                        ctx.status = 400;
                        ctx.body = {
                            jsonrpc,
                            id,
                            error: {
                                // TODO assign error codes - https://github.com/AztecProtocol/aztec-packages/issues/2633
                                code: -32000,
                                message: err.message,
                            },
                        };
                    }
                });
            }
        }
        else {
            // "JSON RPC mode" where a single endpoint is used and the method is given in the request body
            router.post('/', async (ctx) => {
                const { params = [], jsonrpc, id, method } = ctx.request.body;
                // Ignore if not a function
                if (method === 'constructor' ||
                    typeof proto[method] !== 'function' ||
                    this.disallowedMethods.includes(method)) {
                    ctx.status = 400;
                    ctx.body = {
                        jsonrpc,
                        id,
                        error: {
                            code: -32601,
                            message: `Method not found: ${method}`,
                        },
                    };
                }
                else {
                    try {
                        const result = await this.proxy.call(method, params);
                        ctx.body = {
                            jsonrpc,
                            id,
                            result: convertBigintsInObj(result),
                        };
                        ctx.status = 200;
                    }
                    catch (err) {
                        // Propagate the error message to the client. Plenty of the errors are expected to occur (e.g. adding
                        // a duplicate recipient) so this is necessary.
                        ctx.status = 400;
                        ctx.body = {
                            jsonrpc,
                            id,
                            error: {
                                // TODO assign error codes - https://github.com/AztecProtocol/aztec-packages/issues/2633
                                code: -32000,
                                message: err.message,
                            },
                        };
                    }
                }
            });
        }
        return router;
    }
    /**
     * Start this server with koa.
     * @param port - Port number.
     * @param prefix - Prefix string.
     */
    start(port, prefix = '') {
        const httpServer = http.createServer(this.getApp(prefix).callback());
        httpServer.listen(port);
    }
}
/**
 * Creates a router for handling a plain status request that will return 200 status when running.
 * @param apiPrefix - The prefix to use for all api requests
 * @returns - The router for handling status requests.
 */
export function createStatusRouter(apiPrefix = '') {
    const router = new Router({ prefix: `${apiPrefix}` });
    router.get('/status', (ctx) => {
        ctx.status = 200;
    });
    return router;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoianNvbl9ycGNfc2VydmVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2pzb24tcnBjL3NlcnZlci9qc29uX3JwY19zZXJ2ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxJQUFJLE1BQU0sV0FBVyxDQUFDO0FBQzdCLE9BQU8sSUFBSSxNQUFNLE1BQU0sQ0FBQztBQUN4QixPQUFPLEdBQUcsTUFBTSxLQUFLLENBQUM7QUFDdEIsT0FBTyxVQUFVLE1BQU0sZ0JBQWdCLENBQUM7QUFDeEMsT0FBTyxRQUFRLE1BQU0sY0FBYyxDQUFDO0FBQ3BDLE9BQU8sTUFBTSxNQUFNLFlBQVksQ0FBQztBQUVoQyxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUV2RCxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDcEQsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBRTVDOzs7R0FHRztBQUNILE1BQU0sT0FBTyxhQUFhO0lBRXhCLFlBQ1UsT0FBZSxFQUN2QixjQUF5QyxFQUN6QyxjQUF1QyxFQUMvQixTQUFrQixFQUNsQixvQkFBOEIsRUFBRSxFQUNoQyxNQUFNLGlCQUFpQixDQUFDLGtDQUFrQyxDQUFDO1FBTDNELFlBQU8sR0FBUCxPQUFPLENBQVE7UUFHZixjQUFTLEdBQVQsU0FBUyxDQUFTO1FBQ2xCLHNCQUFpQixHQUFqQixpQkFBaUIsQ0FBZTtRQUNoQyxRQUFHLEdBQUgsR0FBRyxDQUF3RDtRQUVuRSxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksU0FBUyxDQUFDLE9BQU8sRUFBRSxjQUFjLEVBQUUsY0FBYyxDQUFDLENBQUM7SUFDdEUsQ0FBQztJQUVEOzs7O09BSUc7SUFDSSxNQUFNLENBQUMsTUFBTSxHQUFHLEVBQUU7UUFDdkIsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN0QyxN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